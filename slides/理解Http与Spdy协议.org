#+AUTHOR: 唐新发
#+EMAIL: tangxinfa@xunlei.com
#+OPTIONS: toc:nil

* 什么是Http协议

  HyperText Transfer Protocol

  超文本传输协议

  [[http://www.w3.org/Protocols/rfc2616/rfc2616.html][RFC2616]]

  *http*://
  
  :NOTES:
  #+BEGIN_QUOTE
  [[http://zh.wikipedia.org/zh-cn/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE][*维基百科*]]：

  　　超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。: 
HTTP的发展是万维网协会（World Wide Web Consortium）和Internet工作小组（Internet Engineering Task Force）合作的结果，（他们）最终发布了一系列的RFC，其中最著名的RFC 2616，定义了HTTP协议中现今广泛使用的一个版本—HTTP 1.1。

  　　HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用Web浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个中间层，比如代理，网关，或者隧道（tunnel）。

  　　尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。
通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如"HTTP/1.1 200 OK"，以及返回的内容，如请求的文件、错误消息、或者其它信息。
HTTP使用TCP而不是UDP的原因在于：打开一个网页必须传送很多数据，而TCP协议提供传输控制，顺序组织数据和错误纠正。具体细节请参考‘TCP和UDP的不同’。
  #+END_QUOTE

  :END:
* 大事记

  1990 HTTP诞生
    
  1991 [[http://www.w3.org/pub/WWW/Protocols/HTTP/AsImplemented.html][HTTP 0.9]]
   
  1996 [[http://tools.ietf.org/html/rfc1945][HTTP 1.0]]
    
  1999 [[http://tools.ietf.org/html/rfc2616][HTTP 1.1]]    

  :NOTES:
  　　HTTP是万维网(WWW, World Wide Web)的支撑协议，WWW联盟组织了IETE（Internet Engineering Task Force）小组对HTTP协议进行不断地完善，相继推出了[[http://www.w3.org/pub/WWW/Protocols/HTTP/AsImplemented.html][HTTP 0.9]]、[[http://tools.ietf.org/html/rfc1945][HTTP 1.0]]、[[http://tools.ietf.org/html/rfc2616][HTTP 1.1]]。
  
      |------+------+----------------------------------------------------------------------------------------+----------|
      | 时间 | 版本 | 　特性                                                                                 | 状态     |
      |------+------+----------------------------------------------------------------------------------------+----------|
      | 1990 |      | 未文档化                                                                               | 过时     |
      | 1991 |  0.9 | GET方法，仅用于从服务器获取html页面                                                    | 过时     |
      | 1996 |  1.0 | POST和HEAD方法，版本号、消息头、MIME、字符集、缓存、认证、压缩传输、响应码等           | 尚有使用 |
      | 1999 |  1.1 | OPTIONS、PUT、DELETE、TRACE、CONNECT方法，持久连接、虚拟主机、断点续传、分块传输等   | 主流     |
      |------+------+----------------------------------------------------------------------------------------+----------|
  :END:
* 特点
  
  开放标准

  基于文本

  客户端请求／服务器应答模式

  灵活协商

  无状态
  
  :NOTES:
  :END:
* Hello World
* 交互图
* 请求语法
* 响应语法
* 常见的请求
* 常见的响应
* REST
* 设计RESTful API
* 特性
* 断点继传
* 持久连接
* 压缩传输
* 缓存优化
* 会话管理
* 最新发展
