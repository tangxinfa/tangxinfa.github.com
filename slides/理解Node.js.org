#+AUTHOR: 唐新发
#+EMAIL: tangxinfa@xunlei.com
#+DESCRIPTION: 90 minutes
#+OPTIONS: toc:nil

* Javascript简介

  #+begin_quote
  web浏览器上的唯一语言\\
  \\
  批着c外衣的lisp\\
  \\
  被误解最多的语言
  #+end_quote

  #+begin_src html
    <button onClick='alert("Hello Javascript");'>Click Me</button>
  #+end_src

  #+begin_center
    #+begin_html
    <a href='javascript: alert("Hello Javascript");'>Click Me</a>
    #+end_html
  #+end_center

* Javascript诞生

  　　1995年，Netscape（网景）打算在浏览器（Netscape Navigator 2.0）中嵌入Scheme，招募来Brendan Eich（布兰登·艾奇），事情很快变成在浏览器中嵌入一种像Java的脚本语言，Brendan Eich在10天的时间里写出了JavaScript的雏形Mocha（摩卡），Mocha也被用于嵌入Netscape的服务器产品LiveWire，为了便于市场营销Mocha改名为LiveScript，1995年底Netscape和Sun商谈后终将LiveScript更名为JavaScript。

* Javascript扩张
  
  　　JavaScript 1.0随Netscape Navigator 2.0发行并取得了成功，随后Netscape在Netscape Navigator 3.0中发布了JavaScript 1.1版，这个时候微软决定进军浏览器，发布了IE 3.0并搭载了一个JavaScript的克隆版，叫做JScript。

  　　1997年，JavaScript 1.1作为一个草案提交给欧洲计算机制造商协会（ECMA），完成了标准化（ECMA-262标准，ECMAScript脚本语言）。

  　　后来Netscape在浏览器大战中不敌微软，LiveWire服务器产品也跟着失败了，服务器端JavaScript消失了。

* Javascript统治
  
  #+begin_center
  #+Caption: Javascript驱动Web
  #+ATTR_HTML: width="100%" title="javascript driver the web"
  [[../static/browsers.png]]  
  #+end_center

* ECMAScript

  ECMAScript 描述了以下内容：
    - 语法
    - 类型
    - 语句
    - 关键字
    - 保留字
    - 运算符
    - 对象

* Javascript的组成

  一个完整的 JavaScript 实现是由以下 3 个不同部分组成的：
    - 核心（ECMAScript）
    - 文档对象模型（DOM）
    - 浏览器对象模型（BOM）

* Javascript特点

  #+begin_quote
  函数式\\
  \\
  原型继承\\
  \\
  弱类型\\
  \\
  词法作用域
  #+end_quote

* Javascript特性：“类”

  #+begin_quote
  Javascript是\\
  \\
  基于原型\\
  \\
  面向对象语言\\
  \\
  没有“类”概念\\
  \\
  \\
  原型＋构造函数＋new关键字＝类
  #+end_quote

* Javascript特性：“类”（示例）

  #+ATTR_HTML: :textarea
  #+begin_src javascript
    function Man(name, age) {
        this.name = name;
        this.age  = age;
    }
    Man.prototype.introduce = function(){
        return "My name is " + this.name + ", I'am " + this.age;
    };
    
    var man1 = new Man("jack", 24);
    var man2 = new Man("tom", 25);
    console.log(man1.introduce());
    console.log(man2.introduce());
  #+end_src

  #+begin_example
    My name is jack, I'am 24
    My name is tom, I'am 25
  #+end_example
      
* Javascript特性：闭包

  #+begin_quote
  闭包是\\
  代码块（通常是函数）\\
  和\\
  创建该代码块的上下文中数据\\
  的结合。\\
  \\
  表现为\\
  函数可以访问外部作用域定义的变量\\
  即使外部作用域已经退出
  #+end_quote

* Javascript特性：闭包（示例）

  #+begin_src javascript
    function Woman(name, age) {
        this.name = name;
        this.introduce = function(){
            return "My name is " + this.name + ", I'am " + (age - 10);
        };
    }
    var woman1 = new Woman("mary", 34);
    var woman2 = new Woman("rose", 45);
    console.log(woman1.introduce());
    console.log(woman2.introduce());
  #+end_src

  #+begin_example
    My name is mary, I'am 24
    My name is rose, I'am 35
  #+end_example

* 常见的Web后端开发技术

  #+begin_center
  #+Caption: Perl
  #+ATTR_HTML: width="50%" title="Perl"
  [[../static/perl.jpeg]]

  #+Caption: Php
  #+ATTR_HTML: width="50%" title="Php"
  [[../static/php.jpeg]]

  #+Caption: Python
  #+ATTR_HTML: width="50%" title="Python"
  [[../static/python.jpeg]]

  #+Caption: Ruby
  #+ATTR_HTML: width="50%" title="Ruby"
  [[../static/ruby.jpeg]]
  #+end_center

  #+begin_center
  #+ATTR_HTML: width="10%"
  [[../static/apache.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/nginx.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/lighttpd.jpeg]]
  #+end_center

  #+begin_center
  #+ATTR_HTML: width="10%"
  [[../static/mysql.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/postgres.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/oracle.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/memcache.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/redis.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/mongodb.jpeg]]
  #+end_center

* 今天要介绍的Web后端开发技术

  #+begin_center
  #+ATTR_HTML: width="75%" title="Node"
  [[../static/node.jpeg]]
  #+end_center
  \\
  \\
  #+begin_center
  #+ATTR_HTML: width="10%"
  [[../static/mysql.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/postgres.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/oracle.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/memcache.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/redis.jpeg]]
  #+ATTR_HTML: width="10%"
  [[../static/mongodb.jpeg]]
  #+end_center

* Node.js简介

  =Node.js不是=
  #+begin_quote
  像php、python、perl、ruby这样的语言\\
  \\
  像CakePHP、Django、Rails这样的服务器端框架\\
  \\
  像JQuery、ExtJS、Backbone.js这样的浏览器端库\\
  #+end_quote

* Node.js简介

  =Node.js是=
  #+begin_quote
  一个后端的Javascript运行环境\\
  \\
  采用Google Chrome浏览器的JavaScript引擎：V8
  #+end_quote

* Node.js适用范围
* Node.js代码风格
* Node.js包管理机制
* Node.js构建Http服务
* Node.js构建Http服务：Connect
* Node.js构建Http服务：Express
* Node.js超越Http服务
* Javascript工具：Jslint
* 浏览器中的Javascript
* C10K问题
* select与epoll
* 事件回调
* Javascript从前端到后端
* V8引擎简介
* 参考资料
  - 《Javascript语言精粹》
  - [[http://jibbering.com/faq/notes/closures/][Javascript Closures]]
  - [[http://www.nodebeginner.org/index-zh-cn.html][Node.js入门]]
  - [[http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb][Understanding node.js]]
  - [[http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/][Understanding the node.js event loop « Mixu's tech blog]]
