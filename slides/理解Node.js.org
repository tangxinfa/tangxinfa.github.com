#+AUTHOR: 唐新发
#+EMAIL: tangxinfa@xunlei.com
#+DESCRIPTION: 90 minutes
#+OPTIONS: toc:nil

* Javascript简介

  #+begin_quote
  web浏览器上的唯一语言\\
  \\
  批着c外衣的lisp\\
  \\
  被误解最多的语言
  #+end_quote
  \\
  #+begin_src html
    <button onClick='alert("Hello Javascript");'>Click Me</button>
  #+end_src
  \\
  #+begin_center
    #+begin_html
    <button onClick='alert("Hello Javascript");'>Click Me</button>
    #+end_html
  #+end_center

* Javascript诞生

  　　1995年，Netscape（网景）打算在浏览器（Netscape Navigator 2.0）中嵌入Scheme，招募来Brendan Eich（布兰登·艾奇），事情很快变成在浏览器中嵌入一种像Java的脚本语言，Brendan Eich在10天的时间里写出了JavaScript的雏形Mocha（摩卡），Mocha也被用于嵌入Netscape的服务器产品LiveWire，为了便于市场营销Mocha改名为LiveScript，1995年底Netscape和Sun商谈后终将LiveScript更名为JavaScript。

* Javascript扩张
  
  　　JavaScript 1.0随Netscape Navigator 2.0发行并取得了成功，随后Netscape在Netscape Navigator 3.0中发布了JavaScript 1.1版，这个时候微软决定进军浏览器，发布了IE 3.0并搭载了一个JavaScript的克隆版，叫做JScript。

  　　1997年，JavaScript 1.1作为一个草案提交给欧洲计算机制造商协会（ECMA），完成了标准化（ECMA-262标准，ECMAScript脚本语言）。

  　　后来Netscape在浏览器大战中不敌微软，LiveWire服务器产品也跟着失败了，服务器端JavaScript消失了。

* Javascript统治
  
  #+begin_center
  #+Caption: Javascript驱动Web
  #+ATTR_HTML: style="width:25em;" title="javascript driver the web"
  [[../static/browsers.png]]  
  #+end_center

* ECMAScript

  ECMAScript 描述了以下内容：
    - 语法
    - 类型
    - 语句
    - 关键字
    - 保留字
    - 运算符
    - 对象

* Javascript的组成

  一个完整的 JavaScript 实现是由以下 3 个不同部分组成的：
    - 核心（ECMAScript）
    - 文档对象模型（DOM）
    - 浏览器对象模型（BOM）

* Javascript特点

  #+begin_quote
  函数式\\
  \\
  原型继承\\
  \\
  弱类型\\
  \\
  词法作用域
  #+end_quote

* Javascript特性：“类”

  #+begin_quote
  Javascript是\\
  \\
  基于原型\\
  \\
  面向对象语言\\
  \\
  没有“类”概念\\
  \\
  \\
  原型＋构造函数＋new关键字＝类
  #+end_quote

* Javascript特性：“类”（示例）

  #+ATTR_HTML: :textarea
  #+begin_src javascript
    function Man(name, age) {
        this.name = name;
        this.age  = age;
    }
    Man.prototype.introduce = function(){
        return "My name is " + this.name + ", I'am " + this.age;
    };
    
    var man1 = new Man("jack", 24);
    var man2 = new Man("tom", 25);
    console.log(man1.introduce());
    console.log(man2.introduce());
  #+end_src
  \\
  #+begin_example
    My name is jack, I'am 24
    My name is tom, I'am 25
  #+end_example
      
* Javascript特性：闭包

  #+begin_quote
  闭包是\\
  代码块（通常是函数）\\
  和\\
  创建该代码块的上下文中数据\\
  的结合。\\
  \\
  \\
  表现为\\
  函数可以访问外部作用域定义的变量\\
  即使外部作用域已经退出
  #+end_quote

* Javascript特性：闭包（示例）

  #+begin_src javascript
    function Woman(name, age) {
        this.name = name;
        this.introduce = function(){
            return "My name is " + this.name + ", I'am " + (age - 10);
        };
    }
    var woman1 = new Woman("mary", 34);
    var woman2 = new Woman("rose", 45);
    console.log(woman1.introduce());
    console.log(woman2.introduce());
  #+end_src
  \\
  #+begin_example
    My name is mary, I'am 24
    My name is rose, I'am 35
  #+end_example

* 常见的Web后端开发技术

  #+begin_center
  #+Caption: Perl
  #+ATTR_HTML: style="width:3em;" title="Perl"
  [[../static/perl.jpeg]]

  #+Caption: Php
  #+ATTR_HTML: style="width:3em;" title="Php"
  [[../static/php.jpeg]]

  #+Caption: Python
  #+ATTR_HTML: style="width:3em;" title="Python"
  [[../static/python.jpeg]]

  #+Caption: Ruby
  #+ATTR_HTML: style="width:3em;" title="Ruby"
  [[../static/ruby.jpeg]]
  #+end_center

  #+begin_center
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/apache.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/nginx.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/lighttpd.jpeg]]
  #+end_center

  #+begin_center
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/mysql.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/postgres.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/oracle.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/memcache.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/redis.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/mongodb.jpeg]]
  #+end_center

* 今天要介绍的Web后端开发技术

  #+begin_center
  #+ATTR_HTML: style="width:22.5em;" title="Node"
  [[../static/node.jpeg]]
  #+end_center
  \\
  \\
  #+begin_center
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/mysql.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/postgres.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/oracle.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/memcache.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/redis.jpeg]]
  #+ATTR_HTML: style="width:2.5em;"
  [[../static/mongodb.jpeg]]
  #+end_center

* Node.js简介
  
  　　Node.js是在Chrome的Javascript引擎之上构建的一个平台，
  很容易用来构建 =高性能= 、 =可扩展= 的网络应用程序。

  　　Node.js使用 =事件驱动= 、 =非阻塞I/O模型= 从而表现得轻巧、高效，
  适用于开发 =数据密集型= 的 =实时响应= 分布式应用程序。

* Node.js简介

  Node.js =不是=
  #+begin_quote
  像php、python、perl、ruby这样的 =语言=\\
  \\
  像CakePHP、Django、Rails这样的服务器端 =框架=\\
  \\
  像JQuery、ExtJS、Backbone.js这样的浏览器端 =库=\\
  #+end_quote

* Node.js现状

  #+begin_html
  <div class="leftinfo">
  #+end_html

  活跃的社区

  #+ATTR_HTML: style="width:13em;" title="github最受欢迎的项目Top5"
  [[../static/github_starred_top5.png]]

  #+begin_html
  </div>
  #+end_html

  #+begin_html
  <div class="rightinfo">
  #+end_html

  丰富的模块

  #+ATTR_HTML: style="width:13em;"
  [[../static/npmjs_screenshot.png]]

  #+begin_html
  </div>
  #+end_html

* Node.js用户案例

  #+begin_html
  <div class="leftinfo">
  #+end_html
  #+ATTR_HTML: style="width:7em;"
  [[../static/linkedin.jpeg]]
  #+begin_quote
  在服务端\\
  我们的整个移动软件栈完全使用Node构建\\
  第一个原因是可扩展\\
  第二个原因是性能上的巨大提升
  #+end_quote
  #+begin_html
  </div>
  <div class="rightinfo" style="font-size:0.7em;">
  #+end_html  
  《[[http://www.csdn.net/article/2012-10-08/2810589-LinkedIn_Rails_to_Node][LinkedIn移动端用Node替代Rails：减少90%服务器 速度提升20倍]]》\\
  \\
  Node.js的优势在于：\\
  - 更好的性能以及更少的内存占用，在某型情景下性能提升20倍
  - 程序员可以充分发挥他们JavaScript的技巧
  - 前端与后端开发人员可以在一个小组内协作
  - 服务器从30台减少到只有3台，硬件资源利用率提升10倍，并且还有提升的空间。
  - 开发工作可以更加专注在应用开发，而不是到处去救火
  #+begin_html
  </div>
  #+end_html

* Node.js安装

  #+begin_src sh
    wget http://nodejs.org/dist/v0.10.12/node-v0.10.12.tar.gz
    tar xzf node-v0.10.12.tar.gz
    ./configure
    make
    sudo make install
  #+end_src

  #+begin_html
  <div class="leftinfo">
  #+end_html
  - /usr/local/bin/node :: 主程序
    
  - /usr/local/bin/npm :: 模块管理程序

  - /usr/local/lib/node\_modules :: 全局模块目录

  #+begin_html
  </div>
  <div class="rightinfo">
  #+end_html
  #+ATTR_HTML: style="width:13em;"

  [[../static/hello_node.png]]
  #+begin_html
  </div>
  #+end_html

* Node.js包机制
  
  #+begin_html
    <div class="leftinfo">
  #+end_html

  #+begin_quote
  JavaScript没有包管理系统\\
  不能自动加载和安装依赖\\
  不利于开发大规模应用
  #+end_quote

  #+begin_html
    </div>
    <div class="rightinfo">
  #+end_html

  #+begin_quote
  - [[http://www.commonjs.org][CommonJS]]规范 :: 其目标是为了构建JavaScript在包括Web服务器，桌面，命令行工具，及浏览器方面的生态系统。
  #+end_quote

  #+begin_html
    </div>
    <div style="clear:both;">
      <div class="leftinfo" style="font-size:0.37em;" title=" /usr/local/lib/node_modules/npm/node_modules/tar/package.json">
  #+end_html
  
  #+begin_src javascript
    {
      "author": {
        "name": "Isaac Z. Schlueter",
        "email": "i@izs.me",
        "url": "http://blog.izs.me/"
      },
      "name": "tar",
      "description": "tar for node",
      "version": "0.1.17",
      "repository": {
        "type": "git",
        "url": "git://github.com/isaacs/node-tar.git"
      },
      "main": "tar.js",
      "scripts": {
        "test": "tap test/*.js"
      },
      "dependencies": {
        "inherits": "1.x",
        "block-stream": "*",
        "fstream": "~0.1.8"
      },
      "devDependencies": {
        "tap": "0.x",
        "rimraf": "1.x"
      },
      "license": "BSD",
      "readme": "...",
      "readmeFilename": "README.md",
      "_id": "tar@0.1.17",
      "dist": {
        "shasum": "408c8a95deb8e78a65b59b1a51a333183a32badc"
      },
      "_from": "tar@0.1.17",
      "_resolved": "https://registry.npmjs.org/tar/-/tar-0.1.17.tgz"
    }
  #+end_src

  #+begin_html
    </div>
    <div class="rightinfo" style="font-size:0.7em">
  #+end_html

  #+begin_verse
  存在package.json文件的目录即为包。

  name ........... 包名
  version ......... 版本号
  main ............ 当包被程序引用时需载入模块
  dependencies .. 依赖的其它包
  scripts ......... 用于包管理
  
  参考：[[http://wiki.commonjs.org/wiki/Packages/1.1][CommonJS包规范]]
  #+end_verse
  
  #+begin_html
    </div>
  #+end_html

* Node.js包管理工具

  #+begin_html
    <div class="leftinfo" style="font-size:0.7em;">
  #+end_html

  #+Caption: Node.js包管理程序
  #+ATTR_HTML: style="width:7em;"
  [[https://npmjs.org/][../static/npm.png]]

  - npm install <name> :: 安装包到本地路径
  - npm install -g <name> :: 安装包到全局路径
  - npm link :: 将当前包链接全局路径下
  - npm link <name> :: 将全局包链接本地路径下

  #+begin_html
    </div>
    <div class="rightinfo" style="font-size:0.7em;">
  #+end_html

  #+begin_html
    </div>
  #+end_html

* Node.js模块机制

  #+begin_quote
  JavaScript没有模块系统
  
  所有js文件中定义的顶级对象名存在于同一个命名空间
  #+end_quote

  [[http://wiki.commonjs.org/wiki/Modules/1.1][CommonJS模块规范]]：
  
  #+begin_src artist
    +----------------------------+
    |   module.js ---------------+----->模块是普通的js文件
    |                            |  
    |   +---------+              |  
    |   | require +--------------+----->用于导入其它模块接口的函数
    |   +---------+              |      
    |   +---------+              |      
    |   | exports +--------------+----->当前模块导出的接口
    |   +---------+              |      
    |   +---------+              |      
    |   | module  +--------------+----->当前模块对象
    |   +---------+              |     
    +----------------------------+
        
  #+end_src

* Node.js模块示例


* Node.js模块加载流程
  
  #+begin_src javascript
    require("fs");                                /*加载核心模块*/
    require("/NodeExamples/node_modules/redis");  /*绝对路径加载模块*/
    require("../common.js");                      /*相对路径加载模块*/
  #+end_src
  
* Node.js代码风格
* Node.js构建Http服务
* Node.js构建Http服务：Connect
* Node.js构建Http服务：Express
* Node.js超越Http服务
* Javascript工具：Jslint
* 浏览器中的Javascript
* C10K问题
* select与epoll
* 事件回调
* Javascript从前端到后端
* V8引擎简介
* 参考资料
  - 《Javascript语言精粹》
  - [[http://jibbering.com/faq/notes/closures/][Javascript Closures]]
  - [[http://www.nodebeginner.org/index-zh-cn.html][Node.js入门]]
  - [[http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb][Understanding node.js]]
  - [[http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/][Understanding the node.js event loop « Mixu's tech blog]]
