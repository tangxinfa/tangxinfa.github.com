<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>看看俺 - KanKanAn.com</title>
  <link href="http://blog.kankanan.comindex.xml" rel="self" />
  <link href="http://blog.kankanan.com"/>
  <updated>2013-04-09T12:00:00Z</updated>
  <id>http://blog.kankanan.comindex.xml</id>
  <entry><title type="html">使用o-blog搭建个人博客</title><author><name>nil</name></author><link href="http://blog.kankanan.com/index.html"/><updated>2013-04-09T12:30:00Z</updated><published>2013-04-09T12:30:00Z</published><id>index.html</id><category scheme="/tags/o-blog.html" term="o-blog" label="o-blog"/><content type="html">&lt;p&gt;
  &#26032;&#30340;&#21338;&#23458;&#20351;&#29992;&lt;a href="http://renard.github.com/o-blog"&gt;o-blog&lt;/a&gt;&#25645;&#24314;&#65292;&#20351;&#29992;&#30340;&#26159;&#33258;&#24050;&#30340;&#20998;&#26525;&lt;a href="https://github.com/tangxinfa/o-blog"&gt;tangxinfa-o-blog&lt;/a&gt;&#65292;&#25105;&#30340;&#20998;&#26525;&#20027;&#35201;&#26159;&#23545;&#21407;&#31995;&#32479;&#20570;&#20102;&#19968;&#23450;&#30340;&#31616;&#21270;&#20197;&#20415;&#36866;&#29992;&#20110;&#21019;&#24314;&#20010;&#20154;&#21338;&#23458;&#65292;&#21478;&#20462;&#22797;&#20102;&#19968;&#20123;bug&#65288;&#20027;&#35201;&#26159;&#20013;&#25991;&#30456;&#20851;&#65289;&#65292;&#21487;&#20351;&#29992;&#20197;&#19979;&#37197;&#32622;&#23433;&#35013;&#25105;&#30340;&#20998;&#26525;&#65306;
&lt;/p&gt;


&lt;pre class="src src-lisp"&gt;(setq el-get-sources '((&lt;span style="color: #859900;"&gt;:name&lt;/span&gt; tangxinfa-o-blog
                                  &lt;span style="color: #859900;"&gt;:type&lt;/span&gt; git 
                                  &lt;span style="color: #859900;"&gt;:url&lt;/span&gt; &lt;span style="color: #2aa198;"&gt;"https://github.com/tangxinfa/o-blog.git"&lt;/span&gt;
                                  &lt;span style="color: #859900;"&gt;:load&lt;/span&gt; &lt;span style="color: #2aa198;"&gt;"o-blog.el"&lt;/span&gt;
                                  &lt;span style="color: #859900;"&gt;:compile&lt;/span&gt; &lt;span style="color: #2aa198;"&gt;"o-blog.el"&lt;/span&gt;
                                  &lt;span style="color: #859900;"&gt;:features&lt;/span&gt; o-blog)))   
&lt;/pre&gt;


&lt;pre class="src src-sh"&gt;M-x el-get-install tangxinfa-o-blog
&lt;/pre&gt;

&lt;p&gt;
  &#23545;~/.emacs.d/el-get/tangxinfa-o-blog/blog/blog.org&#31245;&#20570;&#23450;&#21046;&#21363;&#21487;&#12290;
&lt;/p&gt;</content></entry><entry><title type="html">如何学习英语</title><author><name>nil</name></author><link href="http://blog.kankanan.com/posts/2013/04/07_59824f555b664e6082f18bed.html"/><updated>2013-04-07T09:49:00Z</updated><published>2013-04-07T09:49:00Z</published><id>posts/2013/04/07_59824f555b664e6082f18bed.html</id><category scheme="/tags/english.html" term="english" label="english"/><content type="html">&lt;p&gt;
  &#32463;&#36807;&#19968;&#22825;&#30340;&#33521;&#23386;&#21450;&#38886;&#21338;&#35797;&#21548;&#65292;&#24635;&#32467;&#20986;&#20197;&#19979;&#20960;&#28857;&#65306;
&lt;/p&gt;&lt;dl&gt;
&lt;dt&gt;&#35821;&#27861;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
    &#29087;&#35835;&#24120;&#29992;&#21477;&#22411;&#65292;&#25193;&#23637;&#33267;&#31867;&#20284;&#35821;&#21477;&#65292;&#20174;&#20013;&#25552;&#28860;&#35821;&#27861;&#65292;&#21478;&#19968;&#26041;&#38754;&#20063;&#21487;&#20197;&#32451;&#23601;&#19968;&#21475;&#27969;&#21033;&#30340;&#26085;&#29992;&#21475;&#35821;&#12290;
&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;&#21548;&#21147;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
    &#19981;&#20250;&#35828;&#23601;&#19981;&#20250;&#21548;&#65292;&#22810;&#35828;&#25165;&#33021;&#22815;&#24555;&#36895;&#35782;&#21035;&#21548;&#21040;&#30340;&#19996;&#35199;&#12290;
&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;&#38405;&#35835;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
    &#22810;&#35760;&#21333;&#35789;&#65292;&#19981;&#26029;&#30340;&#37325;&#22797;&#37325;&#22797;&#20877;&#37325;&#22797;&#65292;&#30452;&#21040;&#30475;&#21040;&#21333;&#35789;&#33073;&#21475;&#32780;&#20986;&#12290;
&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;


</content></entry><entry><title type="html">在emacs中如何以root权限使用gdb调试程序</title><author><name>nil</name></author><link href="http://blog.kankanan.com/posts/2013/03/30_5728emacs4e2d59824f554ee5root674396504f7f7528gdb8c038bd57a0b5e8f.html"/><updated>2013-03-30T14:21:00Z</updated><published>2013-03-30T14:21:00Z</published><id>posts/2013/03/30_5728emacs4e2d59824f554ee5root674396504f7f7528gdb8c038bd57a0b5e8f.html</id><category scheme="/tags/emacs.html" term="emacs" label="emacs"/><content type="html">&lt;ul&gt;
&lt;li&gt;&#30001;&#20110;M-x&#21629;&#20196;&#20013;&#20351;&#29992;sudo&#36755;&#20837;&#23494;&#30721;&#26080;&#25928;&#65292;&#38656;&#35201;&#37197;&#32622;&#20026;&#20801;&#35768;&#29992;&#25143;sudo gdb&#20813;&#23494;&#30721;
&lt;/li&gt;
&lt;/ul&gt;




&lt;pre class="example"&gt;visudo
# Allow user to sudo gdb without password
&#29992;&#25143; ALL=NOPASSWD: /usr/bin/gdb
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&#20351;&#29992;root&#26435;&#38480;&#21551;&#21160;gdb
&lt;/li&gt;
&lt;/ul&gt;




&lt;pre class="example"&gt;M-x gdb
sudo gdb &amp;lt;program&amp;gt; &amp;lt;pid&amp;gt; --annotate=3
&lt;/pre&gt;

</content></entry><entry><title type="html">二维码研究</title><author><name>nil</name></author><link href="http://blog.kankanan.com/posts/2013/03/30_4e8c7ef4780178147a76.html"/><updated>2013-03-30T11:21:00Z</updated><published>2013-03-30T11:21:00Z</published><id>posts/2013/03/30_4e8c7ef4780178147a76.html</id><category scheme="/tags/qrcode.html" term="qrcode" label="qrcode"/><content type="html">&lt;div id="outline-container-1" class="outline-3"&gt;
&lt;h3 id="sec-1"&gt;&#20171;&#32461;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1"&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;a href="http://www.itsc.org.sg/pdf/synthesis08/Three_QR_Code.pdf"&gt;Three_QR_Code.pdf&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
     RFC&#24335;&#30340;&#25991;&#26723;
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://suflow.iteye.com/blog/1100678"&gt;&#20108;&#32500;&#30721; &#32534;&#30721;&#21407;&#29702;&#31616;&#20171;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
     &#36890;&#20439;&#26131;&#25026;&#30340;&#32534;&#30721;&#32454;&#33410;&#20171;&#32461;
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://zh.wikipedia.org/wiki/QR&#30908;"&gt;QR&#30908; - &#32500;&#22522;&#30334;&#31185;&#65292;&#33258;&#30001;&#30340;&#30334;&#31185;&#20840;&#20070;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;

&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.qrstuff.com/blog/2011/11/23/qr-code-minimum-size"&gt;QR Code Minimum Size&lt;/a&gt; &#19982; &lt;a href="http://www.qrstuff.com/blog/2011/01/18/what-size-should-a-qr-code-be"&gt;What Size Should A Printed QR Code Be?&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
     &#20851;&#20110;&#21487;&#35782;&#21035;&#24615;&#30340;&#19968;&#20123;&#32467;&#35770;&#65292;&#35813;&#32593;&#31449;&#19978;&#26377;&#22823;&#37327;&#20108;&#32500;&#30721;&#30740;&#31350;&#30456;&#20851;&#30340;&#25991;&#31456;
&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2" class="outline-3"&gt;
&lt;h3 id="sec-2"&gt;&#20108;&#32500;&#30721;&#24320;&#21457;&#24211;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2"&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;a href="https://github.com/fukuchi/libqrencode"&gt;libqrencode&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
     &#22522;&#30784;&#30340;c&#35821;&#35328;&#20108;&#32500;&#30721;&#32534;&#30721;&#24211;&#65292;&#24456;&#22810;&#35821;&#35328;&#22522;&#20110;&#23427;&#24320;&#21457;&#25193;&#23637;&#65292;&#19981;&#21253;&#21547;&#29983;&#25104;png&#22270;&#30340;&#21151;&#33021;&#65292;&#22914;&#38656;&#29983;&#25104;png&#21487;&#21442;&#32771;&lt;a href="https://github.com/bitly/simplehttp/blob/master/qrencode/qrencode.c"&gt;&#36825;&#37324;&lt;/a&gt;
&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://github.com/jeromeetienne/jquery-qrcode"&gt;jquery-qrcode&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
     &#20351;&#29992;javascript&#30452;&#25509;&#22312;&#23458;&#25143;&#31471;&#29983;&#25104;&#20108;&#32500;&#30721;&#65292;&#20013;&#25991;&#25903;&#25345;&#21442;&#35265;&lt;a href="http://suflow.iteye.com/blog/1687396"&gt;JS&#29983;&#25104;&#20108;&#32500;&#30721;&#65292;&#25903;&#25345;&#20013;&#25991;&#23383;&#31526;&lt;/a&gt;
&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://people.freebsd.org/~vanilla/qrencode-0.3.tar.bz2"&gt;php's qrencode extension&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
     &#20351;&#29992;nginx&#30340;&#25193;&#23637;&#24615;&#33021;&#20250;&#26356;&#22909;&#19968;&#28857;&#65292;&#21442;&#32771;&#21518;&#38754;&lt;a href="#sec-3"&gt;nginx&#30340;&#30456;&#20851;&#25193;&#23637;&lt;/a&gt;.
&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://trac.koka-in.org/libdecodeqr"&gt;libdecodeqr&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
     &#20108;&#32500;&#30721;&#35299;&#30721;&#24211;
&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3" class="outline-3"&gt;
&lt;h3 id="sec-3"&gt;nginx&#30340;&#30456;&#20851;&#25193;&#23637;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3"&gt;


&lt;/div&gt;

&lt;div id="outline-container-3-1" class="outline-4"&gt;
&lt;h4 id="sec-3-1"&gt;&#22522;&#26412;&#30340;&#20108;&#32500;&#30721;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-1"&gt;

&lt;p&gt;    &lt;a href="https://github.com/dcshi/ngx_http_qrcode_module"&gt;ngx_http_qrcode_module&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3-2" class="outline-4"&gt;
&lt;h4 id="sec-3-2"&gt;&#20108;&#32500;&#30721;&#20010;&#24615;&#21270;&#27700;&#21360;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-2"&gt;

&lt;p&gt;   nginx_http_image_filter&#21152;&#19978;&lt;a href="http://forum.nginx.org/read.php?21,235958"&gt;&#27700;&#21360;&#34917;&#19969;&lt;/a&gt;&#21363;&#21487;&#12290;
&lt;/p&gt;
&lt;p&gt;
   &#19979;&#38754;&#30340;&#26159;&#32463;&#36807;&#20462;&#25913;&#21518;&#30340; &lt;code&gt;nginx image filter&lt;/code&gt; &#27169;&#22359;&#20195;&#30721;&#65292;&#21152;&#20837;&#23621;&#20013;&#30340;&#27700;&#21360;&#25928;&#26524;:
&lt;/p&gt;


&lt;div class="o-blog-source"&gt;&lt;a class="btn btn-info" data-toggle="modal" data-target="#ngx5fhttp5fimage5ffilter5fmodule2ec" &gt;&lt;i class="icon-file icon-white"&gt;&lt;/i&gt;&amp;nbsp;ngx_http_image_filter_module.c&lt;/a&gt;&lt;/div&gt;&lt;div class="modal fade hide" id="ngx5fhttp5fimage5ffilter5fmodule2ec"&gt;&lt;div class="modal-header"&gt;&lt;a class="close" data-dismiss="modal"&gt;&#215;&lt;/a&gt;&lt;h3&gt;ngx_http_image_filter_module.c&lt;/h3&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;pre&gt;

/*
 * Copyright (C) Igor Sysoev
 * Copyright (C) Nginx, Inc.
 */


#include &amp;lt;ngx_config.h&amp;gt;
#include &amp;lt;ngx_core.h&amp;gt;
#include &amp;lt;ngx_http.h&amp;gt;

#include &amp;lt;gd.h&amp;gt;


#define NGX_HTTP_IMAGE_OFF       0
#define NGX_HTTP_IMAGE_TEST      1
#define NGX_HTTP_IMAGE_SIZE      2
#define NGX_HTTP_IMAGE_RESIZE    3
#define NGX_HTTP_IMAGE_CROP      4
#define NGX_HTTP_IMAGE_ROTATE    5
#define NGX_HTTP_IMAGE_WATERMARK 6


#define NGX_HTTP_IMAGE_START     0
#define NGX_HTTP_IMAGE_READ      1
#define NGX_HTTP_IMAGE_PROCESS   2
#define NGX_HTTP_IMAGE_PASS      3
#define NGX_HTTP_IMAGE_DONE      4


#define NGX_HTTP_IMAGE_NONE      0
#define NGX_HTTP_IMAGE_JPEG      1
#define NGX_HTTP_IMAGE_GIF       2
#define NGX_HTTP_IMAGE_PNG       3


#define NGX_HTTP_IMAGE_BUFFERED  0x08


typedef struct {
    ngx_uint_t                   filter;
    ngx_uint_t                   width;
    ngx_uint_t                   height;
    ngx_uint_t                   angle;
    ngx_uint_t                   jpeg_quality;
    ngx_uint_t                   sharpen;

    ngx_flag_t                   transparency;
    ngx_str_t                    watermark;
    ngx_uint_t                   watermark_transparency;
    
    ngx_http_complex_value_t    *wcv;
    ngx_http_complex_value_t    *hcv;
    ngx_http_complex_value_t    *acv;
    ngx_http_complex_value_t    *jqcv;
    ngx_http_complex_value_t    *shcv;

    size_t                       buffer_size;
} ngx_http_image_filter_conf_t;


typedef struct {
    u_char                      *image;
    u_char                      *last;

    size_t                       length;

    ngx_uint_t                   width;
    ngx_uint_t                   height;
    ngx_uint_t                   max_width;
    ngx_uint_t                   max_height;
    ngx_uint_t                   angle;

    ngx_uint_t                   phase;
    ngx_uint_t                   type;
    ngx_uint_t                   force;
} ngx_http_image_filter_ctx_t;


static ngx_int_t ngx_http_image_send(ngx_http_request_t *r,
    ngx_http_image_filter_ctx_t *ctx, ngx_chain_t *in);
static ngx_uint_t ngx_http_image_test(ngx_http_request_t *r, ngx_chain_t *in);
static ngx_int_t ngx_http_image_read(ngx_http_request_t *r, ngx_chain_t *in);
static ngx_buf_t *ngx_http_image_process(ngx_http_request_t *r);
static ngx_buf_t *ngx_http_image_json(ngx_http_request_t *r,
    ngx_http_image_filter_ctx_t *ctx);
static ngx_buf_t *ngx_http_image_asis(ngx_http_request_t *r,
    ngx_http_image_filter_ctx_t *ctx);
static void ngx_http_image_length(ngx_http_request_t *r, ngx_buf_t *b);
static ngx_int_t ngx_http_image_size(ngx_http_request_t *r,
    ngx_http_image_filter_ctx_t *ctx);

static ngx_buf_t *ngx_http_image_resize(ngx_http_request_t *r,
    ngx_http_image_filter_ctx_t *ctx);
static gdImagePtr ngx_http_image_source(ngx_http_request_t *r,
    ngx_http_image_filter_ctx_t *ctx);
static gdImagePtr ngx_http_image_new(ngx_http_request_t *r, int w, int h,
    int colors);
static u_char *ngx_http_image_out(ngx_http_request_t *r, ngx_uint_t type,
    gdImagePtr img, int *size);
static void ngx_http_image_cleanup(void *data);
static ngx_uint_t ngx_http_image_filter_get_value(ngx_http_request_t *r,
    ngx_http_complex_value_t *cv, ngx_uint_t v);
static ngx_uint_t ngx_http_image_filter_value(ngx_str_t *value);


static void *ngx_http_image_filter_create_conf(ngx_conf_t *cf);
static char *ngx_http_image_filter_merge_conf(ngx_conf_t *cf, void *parent,
    void *child);
static char *ngx_http_image_filter(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);
static char *ngx_http_image_filter_jpeg_quality(ngx_conf_t *cf,
    ngx_command_t *cmd, void *conf);
static char *ngx_http_image_filter_sharpen(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);
static ngx_int_t ngx_http_image_filter_init(ngx_conf_t *cf);


static ngx_command_t  ngx_http_image_filter_commands[] = {

    { ngx_string(&lt;span style="color: #2aa198;"&gt;"image_filter"&lt;/span&gt;),
      NGX_HTTP_LOC_CONF|NGX_CONF_TAKE123,
      ngx_http_image_filter,
      NGX_HTTP_LOC_CONF_OFFSET,
      0,
      NULL },

    { ngx_string(&lt;span style="color: #2aa198;"&gt;"image_filter_jpeg_quality"&lt;/span&gt;),
      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
      ngx_http_image_filter_jpeg_quality,
      NGX_HTTP_LOC_CONF_OFFSET,
      0,
      NULL },

    { ngx_string(&lt;span style="color: #2aa198;"&gt;"image_filter_sharpen"&lt;/span&gt;),
      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
      ngx_http_image_filter_sharpen,
      NGX_HTTP_LOC_CONF_OFFSET,
      0,
      NULL },

    { ngx_string(&lt;span style="color: #2aa198;"&gt;"image_filter_transparency"&lt;/span&gt;),
      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
      ngx_conf_set_flag_slot,
      NGX_HTTP_LOC_CONF_OFFSET,
      offsetof(ngx_http_image_filter_conf_t, transparency),
      NULL },

    { ngx_string(&lt;span style="color: #2aa198;"&gt;"image_filter_buffer"&lt;/span&gt;),
      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
      ngx_conf_set_size_slot,
      NGX_HTTP_LOC_CONF_OFFSET,
      offsetof(ngx_http_image_filter_conf_t, buffer_size),
      NULL },

    { ngx_string(&lt;span style="color: #2aa198;"&gt;"image_filter_watermark"&lt;/span&gt;),
      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
      ngx_conf_set_str_slot,
      NGX_HTTP_LOC_CONF_OFFSET,
      offsetof(ngx_http_image_filter_conf_t, watermark),
      NULL },

    { ngx_string(&lt;span style="color: #2aa198;"&gt;"image_filter_watermark_transparency"&lt;/span&gt;),
      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
      ngx_conf_set_num_slot,
      NGX_HTTP_LOC_CONF_OFFSET,
      offsetof(ngx_http_image_filter_conf_t, watermark_transparency),
      NULL },
    
      ngx_null_command
};


static ngx_http_module_t  ngx_http_image_filter_module_ctx = {
    NULL,                                  /* preconfiguration */
    ngx_http_image_filter_init,            /* postconfiguration */

    NULL,                                  /* create main configuration */
    NULL,                                  /* init main configuration */

    NULL,                                  /* create server configuration */
    NULL,                                  /* merge server configuration */

    ngx_http_image_filter_create_conf,     /* create location configuration */
    ngx_http_image_filter_merge_conf       /* merge location configuration */
};


ngx_module_t  ngx_http_image_filter_module = {
    NGX_MODULE_V1,
    &amp;amp;ngx_http_image_filter_module_ctx,     /* module context */
    ngx_http_image_filter_commands,        /* module directives */
    NGX_HTTP_MODULE,                       /* module type */
    NULL,                                  /* init master */
    NULL,                                  /* init module */
    NULL,                                  /* init process */
    NULL,                                  /* init thread */
    NULL,                                  /* exit thread */
    NULL,                                  /* exit process */
    NULL,                                  /* exit master */
    NGX_MODULE_V1_PADDING
};


static ngx_http_output_header_filter_pt  ngx_http_next_header_filter;
static ngx_http_output_body_filter_pt    ngx_http_next_body_filter;


static ngx_str_t  ngx_http_image_types[] = {
    ngx_string(&lt;span style="color: #2aa198;"&gt;"image/jpeg"&lt;/span&gt;),
    ngx_string(&lt;span style="color: #2aa198;"&gt;"image/gif"&lt;/span&gt;),
    ngx_string(&lt;span style="color: #2aa198;"&gt;"image/png"&lt;/span&gt;)
};


static ngx_int_t
ngx_http_image_header_filter(ngx_http_request_t *r)
{
    off_t                          len;
    ngx_http_image_filter_ctx_t   *ctx;
    ngx_http_image_filter_conf_t  *conf;

    if (r-&amp;gt;headers_out.status == NGX_HTTP_NOT_MODIFIED) {
        return ngx_http_next_header_filter(r);
    }

    ctx = ngx_http_get_module_ctx(r, ngx_http_image_filter_module);

    if (ctx) {
        ngx_http_set_ctx(r, NULL, ngx_http_image_filter_module);
        return ngx_http_next_header_filter(r);
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

    if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_OFF) {
        return ngx_http_next_header_filter(r);
    }

    if (r-&amp;gt;headers_out.content_type.len
            &amp;gt;= sizeof(&lt;span style="color: #2aa198;"&gt;"multipart/x-mixed-replace"&lt;/span&gt;) - 1
        &amp;amp;&amp;amp; ngx_strncasecmp(r-&amp;gt;headers_out.content_type.data,
                           (u_char *) &lt;span style="color: #2aa198;"&gt;"multipart/x-mixed-replace"&lt;/span&gt;,
                           sizeof(&lt;span style="color: #2aa198;"&gt;"multipart/x-mixed-replace"&lt;/span&gt;) - 1)
           == 0)
    {
        ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0,
                      &lt;span style="color: #2aa198;"&gt;"image filter: multipart/x-mixed-replace response"&lt;/span&gt;);

        return NGX_ERROR;
    }

    ctx = ngx_pcalloc(r-&amp;gt;pool, sizeof(ngx_http_image_filter_ctx_t));
    if (ctx == NULL) {
        return NGX_ERROR;
    }

    ngx_http_set_ctx(r, ctx, ngx_http_image_filter_module);

    len = r-&amp;gt;headers_out.content_length_n;

    if (len != -1 &amp;amp;&amp;amp; len &amp;gt; (off_t) conf-&amp;gt;buffer_size) {
        ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0,
                      &lt;span style="color: #2aa198;"&gt;"image filter: too big response: %O"&lt;/span&gt;, len);

        return NGX_HTTP_UNSUPPORTED_MEDIA_TYPE;
    }

    if (len == -1) {
        ctx-&amp;gt;length = conf-&amp;gt;buffer_size;

    } else {
        ctx-&amp;gt;length = (size_t) len;
    }

    if (r-&amp;gt;headers_out.refresh) {
        r-&amp;gt;headers_out.refresh-&amp;gt;hash = 0;
    }

    r-&amp;gt;main_filter_need_in_memory = 1;
    r-&amp;gt;allow_ranges = 0;

    return NGX_OK;
}


static ngx_int_t
ngx_http_image_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_int_t                      rc;
    ngx_str_t                     *ct;
    ngx_chain_t                    out;
    ngx_http_image_filter_ctx_t   *ctx;
    ngx_http_image_filter_conf_t  *conf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r-&amp;gt;connection-&amp;gt;log, 0, &lt;span style="color: #2aa198;"&gt;"image filter"&lt;/span&gt;);

    if (in == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    ctx = ngx_http_get_module_ctx(r, ngx_http_image_filter_module);

    if (ctx == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    switch (ctx-&amp;gt;phase) {

    case NGX_HTTP_IMAGE_START:

        ctx-&amp;gt;type = ngx_http_image_test(r, in);

        conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

        if (ctx-&amp;gt;type == NGX_HTTP_IMAGE_NONE) {

            if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_SIZE) {
                out.buf = ngx_http_image_json(r, NULL);

                if (out.buf) {
                    out.next = NULL;
                    ctx-&amp;gt;phase = NGX_HTTP_IMAGE_DONE;

                    return ngx_http_image_send(r, ctx, &amp;amp;out);
                }
            }

            return ngx_http_filter_finalize_request(r,
                                              &amp;amp;ngx_http_image_filter_module,
                                              NGX_HTTP_UNSUPPORTED_MEDIA_TYPE);
        }

        /* override content type */

        ct = &amp;amp;ngx_http_image_types[ctx-&amp;gt;type - 1];
        r-&amp;gt;headers_out.content_type_len = ct-&amp;gt;len;
        r-&amp;gt;headers_out.content_type = *ct;
        r-&amp;gt;headers_out.content_type_lowcase = NULL;

        if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_TEST) {
            ctx-&amp;gt;phase = NGX_HTTP_IMAGE_PASS;

            return ngx_http_image_send(r, ctx, in);
        }

        ctx-&amp;gt;phase = NGX_HTTP_IMAGE_READ;

        /* fall through */

    case NGX_HTTP_IMAGE_READ:

        rc = ngx_http_image_read(r, in);

        if (rc == NGX_AGAIN) {
            return NGX_OK;
        }

        if (rc == NGX_ERROR) {
            return ngx_http_filter_finalize_request(r,
                                              &amp;amp;ngx_http_image_filter_module,
                                              NGX_HTTP_UNSUPPORTED_MEDIA_TYPE);
        }

        /* fall through */

    case NGX_HTTP_IMAGE_PROCESS:

        out.buf = ngx_http_image_process(r);

        if (out.buf == NULL) {
            return ngx_http_filter_finalize_request(r,
                                              &amp;amp;ngx_http_image_filter_module,
                                              NGX_HTTP_UNSUPPORTED_MEDIA_TYPE);
        }

        out.next = NULL;
        ctx-&amp;gt;phase = NGX_HTTP_IMAGE_PASS;

        return ngx_http_image_send(r, ctx, &amp;amp;out);

    case NGX_HTTP_IMAGE_PASS:

        return ngx_http_next_body_filter(r, in);

    default: /* NGX_HTTP_IMAGE_DONE */

        rc = ngx_http_next_body_filter(r, NULL);

        /* NGX_ERROR resets any pending data */
        return (rc == NGX_OK) ? NGX_ERROR : rc;
    }
}


static ngx_int_t
ngx_http_image_send(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx,
    ngx_chain_t *in)
{
    ngx_int_t  rc;

    rc = ngx_http_next_header_filter(r);

    if (rc == NGX_ERROR || rc &amp;gt; NGX_OK || r-&amp;gt;header_only) {
        return NGX_ERROR;
    }

    rc = ngx_http_next_body_filter(r, in);

    if (ctx-&amp;gt;phase == NGX_HTTP_IMAGE_DONE) {
        /* NGX_ERROR resets any pending data */
        return (rc == NGX_OK) ? NGX_ERROR : rc;
    }

    return rc;
}


static ngx_uint_t
ngx_http_image_test(ngx_http_request_t *r, ngx_chain_t *in)
{
    u_char  *p;

    p = in-&amp;gt;buf-&amp;gt;pos;

    if (in-&amp;gt;buf-&amp;gt;last - p &amp;lt; 16) {
        return NGX_HTTP_IMAGE_NONE;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r-&amp;gt;connection-&amp;gt;log, 0,
                   &lt;span style="color: #2aa198;"&gt;"image filter: \"%c%c\""&lt;/span&gt;, p[0], p[1]);

    if (p[0] == 0xff &amp;amp;&amp;amp; p[1] == 0xd8) {

        /* JPEG */

        return NGX_HTTP_IMAGE_JPEG;

    } else if (p[0] == 'G' &amp;amp;&amp;amp; p[1] == 'I' &amp;amp;&amp;amp; p[2] == 'F' &amp;amp;&amp;amp; p[3] == '8'
               &amp;amp;&amp;amp; p[5] == 'a')
    {
        if (p[4] == '9' || p[4] == '7') {
            /* GIF */
            return NGX_HTTP_IMAGE_GIF;
        }

    } else if (p[0] == 0x89 &amp;amp;&amp;amp; p[1] == 'P' &amp;amp;&amp;amp; p[2] == 'N' &amp;amp;&amp;amp; p[3] == 'G'
               &amp;amp;&amp;amp; p[4] == 0x0d &amp;amp;&amp;amp; p[5] == 0x0a &amp;amp;&amp;amp; p[6] == 0x1a &amp;amp;&amp;amp; p[7] == 0x0a)
    {
        /* PNG */

        return NGX_HTTP_IMAGE_PNG;
    }

    return NGX_HTTP_IMAGE_NONE;
}


static ngx_int_t
ngx_http_image_read(ngx_http_request_t *r, ngx_chain_t *in)
{
    u_char                       *p;
    size_t                        size, rest;
    ngx_buf_t                    *b;
    ngx_chain_t                  *cl;
    ngx_http_image_filter_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_image_filter_module);

    if (ctx-&amp;gt;image == NULL) {
        ctx-&amp;gt;image = ngx_palloc(r-&amp;gt;pool, ctx-&amp;gt;length);
        if (ctx-&amp;gt;image == NULL) {
            return NGX_ERROR;
        }

        ctx-&amp;gt;last = ctx-&amp;gt;image;
    }

    p = ctx-&amp;gt;last;

    for (cl = in; cl; cl = cl-&amp;gt;next) {

        b = cl-&amp;gt;buf;
        size = b-&amp;gt;last - b-&amp;gt;pos;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&amp;gt;connection-&amp;gt;log, 0,
                       &lt;span style="color: #2aa198;"&gt;"image buf: %uz"&lt;/span&gt;, size);

        rest = ctx-&amp;gt;image + ctx-&amp;gt;length - p;
        size = (rest &amp;lt; size) ? rest : size;

        p = ngx_cpymem(p, b-&amp;gt;pos, size);
        b-&amp;gt;pos += size;

        if (b-&amp;gt;last_buf) {
            ctx-&amp;gt;last = p;
            return NGX_OK;
        }
    }

    ctx-&amp;gt;last = p;
    r-&amp;gt;connection-&amp;gt;buffered |= NGX_HTTP_IMAGE_BUFFERED;

    return NGX_AGAIN;
}


static ngx_buf_t *
ngx_http_image_process(ngx_http_request_t *r)
{
    ngx_int_t                      rc;
    ngx_http_image_filter_ctx_t   *ctx;
    ngx_http_image_filter_conf_t  *conf;

    r-&amp;gt;connection-&amp;gt;buffered &amp;amp;= ~NGX_HTTP_IMAGE_BUFFERED;

    ctx = ngx_http_get_module_ctx(r, ngx_http_image_filter_module);

    rc = ngx_http_image_size(r, ctx);

    conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

    if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_SIZE) {
        return ngx_http_image_json(r, rc == NGX_OK ? ctx : NULL);
    }

    ctx-&amp;gt;angle = ngx_http_image_filter_get_value(r, conf-&amp;gt;acv, conf-&amp;gt;angle);

    if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_ROTATE) {

        if (ctx-&amp;gt;angle != 90 &amp;amp;&amp;amp; ctx-&amp;gt;angle != 180 &amp;amp;&amp;amp; ctx-&amp;gt;angle != 270) {
            return NULL;
        }

        return ngx_http_image_resize(r, ctx);
    }

    if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_WATERMARK) {

        if (!conf-&amp;gt;watermark.data) {
            return NULL;
        }

        return ngx_http_image_resize(r, ctx);
    }    

    ctx-&amp;gt;max_width = ngx_http_image_filter_get_value(r, conf-&amp;gt;wcv, conf-&amp;gt;width);
    if (ctx-&amp;gt;max_width == 0) {
        return NULL;
    }

    ctx-&amp;gt;max_height = ngx_http_image_filter_get_value(r, conf-&amp;gt;hcv,
                                                      conf-&amp;gt;height);
    if (ctx-&amp;gt;max_height == 0) {
        return NULL;
    }

    if (rc == NGX_OK
        &amp;amp;&amp;amp; ctx-&amp;gt;width &amp;lt;= ctx-&amp;gt;max_width
        &amp;amp;&amp;amp; ctx-&amp;gt;height &amp;lt;= ctx-&amp;gt;max_height
        &amp;amp;&amp;amp; ctx-&amp;gt;angle == 0
        &amp;amp;&amp;amp; !ctx-&amp;gt;force)
    {
        return ngx_http_image_asis(r, ctx);
    }

    return ngx_http_image_resize(r, ctx);
}


static ngx_buf_t *
ngx_http_image_json(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    size_t      len;
    ngx_buf_t  *b;

    b = ngx_pcalloc(r-&amp;gt;pool, sizeof(ngx_buf_t));
    if (b == NULL) {
        return NULL;
    }

    b-&amp;gt;memory = 1;
    b-&amp;gt;last_buf = 1;

    ngx_http_clean_header(r);

    r-&amp;gt;headers_out.status = NGX_HTTP_OK;
    ngx_str_set(&amp;amp;r-&amp;gt;headers_out.content_type, &lt;span style="color: #2aa198;"&gt;"text/plain"&lt;/span&gt;);
    r-&amp;gt;headers_out.content_type_lowcase = NULL;

    if (ctx == NULL) {
        b-&amp;gt;pos = (u_char *) &lt;span style="color: #2aa198;"&gt;"{}"&lt;/span&gt; CRLF;
        b-&amp;gt;last = b-&amp;gt;pos + sizeof(&lt;span style="color: #2aa198;"&gt;"{}"&lt;/span&gt; CRLF) - 1;

        ngx_http_image_length(r, b);

        return b;
    }

    len = sizeof(&lt;span style="color: #2aa198;"&gt;"{ \"img\" : "&lt;/span&gt;
                 &lt;span style="color: #2aa198;"&gt;"{ \"width\": , \"height\": , \"type\": \"jpeg\" } }"&lt;/span&gt; CRLF) - 1
          + 2 * NGX_SIZE_T_LEN;

    b-&amp;gt;pos = ngx_pnalloc(r-&amp;gt;pool, len);
    if (b-&amp;gt;pos == NULL) {
        return NULL;
    }

    b-&amp;gt;last = ngx_sprintf(b-&amp;gt;pos,
                          &lt;span style="color: #2aa198;"&gt;"{ \"img\" : "&lt;/span&gt;
                                       &lt;span style="color: #2aa198;"&gt;"{ \"width\": %uz,"&lt;/span&gt;
                                        &lt;span style="color: #2aa198;"&gt;" \"height\": %uz,"&lt;/span&gt;
                                        &lt;span style="color: #2aa198;"&gt;" \"type\": \"%s\" } }"&lt;/span&gt; CRLF,
                          ctx-&amp;gt;width, ctx-&amp;gt;height,
                          ngx_http_image_types[ctx-&amp;gt;type - 1].data + 6);

    ngx_http_image_length(r, b);

    return b;
}


static ngx_buf_t *
ngx_http_image_asis(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    ngx_buf_t  *b;

    b = ngx_pcalloc(r-&amp;gt;pool, sizeof(ngx_buf_t));
    if (b == NULL) {
        return NULL;
    }

    b-&amp;gt;pos = ctx-&amp;gt;image;
    b-&amp;gt;last = ctx-&amp;gt;last;
    b-&amp;gt;memory = 1;
    b-&amp;gt;last_buf = 1;

    ngx_http_image_length(r, b);

    return b;
}


static void
ngx_http_image_length(ngx_http_request_t *r, ngx_buf_t *b)
{
    r-&amp;gt;headers_out.content_length_n = b-&amp;gt;last - b-&amp;gt;pos;

    if (r-&amp;gt;headers_out.content_length) {
        r-&amp;gt;headers_out.content_length-&amp;gt;hash = 0;
    }

    r-&amp;gt;headers_out.content_length = NULL;
}


static ngx_int_t
ngx_http_image_size(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    u_char      *p, *last;
    size_t       len, app;
    ngx_uint_t   width, height;

    p = ctx-&amp;gt;image;

    switch (ctx-&amp;gt;type) {

    case NGX_HTTP_IMAGE_JPEG:

        p += 2;
        last = ctx-&amp;gt;image + ctx-&amp;gt;length - 10;
        width = 0;
        height = 0;
        app = 0;

        while (p &amp;lt; last) {

            if (p[0] == 0xff &amp;amp;&amp;amp; p[1] != 0xff) {

                ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r-&amp;gt;connection-&amp;gt;log, 0,
                               &lt;span style="color: #2aa198;"&gt;"JPEG: %02xd %02xd"&lt;/span&gt;, p[0], p[1]);

                p++;

                if ((*p == 0xc0 || *p == 0xc1 || *p == 0xc2 || *p == 0xc3
                     || *p == 0xc9 || *p == 0xca || *p == 0xcb)
                    &amp;amp;&amp;amp; (width == 0 || height == 0))
                {
                    width = p[6] * 256 + p[7];
                    height = p[4] * 256 + p[5];
                }

                ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r-&amp;gt;connection-&amp;gt;log, 0,
                               &lt;span style="color: #2aa198;"&gt;"JPEG: %02xd %02xd"&lt;/span&gt;, p[1], p[2]);

                len = p[1] * 256 + p[2];

                if (*p &amp;gt;= 0xe1 &amp;amp;&amp;amp; *p &amp;lt;= 0xef) {
                    /* application data, e.g., EXIF, Adobe XMP, etc. */
                    app += len;
                }

                p += len;

                continue;
            }

            p++;
        }

        if (width == 0 || height == 0) {
            return NGX_DECLINED;
        }

        if (ctx-&amp;gt;length / 20 &amp;lt; app) {
            /* force conversion if application data consume more than 5% */
            ctx-&amp;gt;force = 1;
            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&amp;gt;connection-&amp;gt;log, 0,
                           &lt;span style="color: #2aa198;"&gt;"app data size: %uz"&lt;/span&gt;, app);
        }

        break;

    case NGX_HTTP_IMAGE_GIF:

        if (ctx-&amp;gt;length &amp;lt; 10) {
            return NGX_DECLINED;
        }

        width = p[7] * 256 + p[6];
        height = p[9] * 256 + p[8];

        break;

    case NGX_HTTP_IMAGE_PNG:

        if (ctx-&amp;gt;length &amp;lt; 24) {
            return NGX_DECLINED;
        }

        width = p[18] * 256 + p[19];
        height = p[22] * 256 + p[23];

        break;

    default:

        return NGX_DECLINED;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r-&amp;gt;connection-&amp;gt;log, 0,
                   &lt;span style="color: #2aa198;"&gt;"image size: %d x %d"&lt;/span&gt;, width, height);

    ctx-&amp;gt;width = width;
    ctx-&amp;gt;height = height;

    return NGX_OK;
}


static ngx_buf_t *
ngx_http_image_resize(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    int                            sx, sy, dx, dy, ox, oy, ax, ay, size,
                                   colors, palette, transparent, sharpen,
                                   red, green, blue, t;
    u_char                        *out;
    ngx_buf_t                     *b;
    ngx_uint_t                     resize;
    gdImagePtr                     src, dst;
    ngx_pool_cleanup_t            *cln;
    ngx_http_image_filter_conf_t  *conf;

    src = ngx_http_image_source(r, ctx);

    if (src == NULL) {
        return NULL;
    }

    sx = gdImageSX(src);
    sy = gdImageSY(src);

    conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

    if (!ctx-&amp;gt;force
        &amp;amp;&amp;amp; ctx-&amp;gt;angle == 0
        &amp;amp;&amp;amp; (ngx_uint_t) sx &amp;lt;= ctx-&amp;gt;max_width
        &amp;amp;&amp;amp; (ngx_uint_t) sy &amp;lt;= ctx-&amp;gt;max_height)
    {
        gdImageDestroy(src);
        return ngx_http_image_asis(r, ctx);
    }

    colors = gdImageColorsTotal(src);

    if (colors &amp;amp;&amp;amp; conf-&amp;gt;transparency) {
        transparent = gdImageGetTransparent(src);

        if (transparent != -1) {
            palette = colors;
            red = gdImageRed(src, transparent);
            green = gdImageGreen(src, transparent);
            blue = gdImageBlue(src, transparent);

            goto transparent;
        }
    }

    palette = 0;
    transparent = -1;
    red = 0;
    green = 0;
    blue = 0;

transparent:

    gdImageColorTransparent(src, -1);

    dx = sx;
    dy = sy;

    if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_RESIZE) {

        if ((ngx_uint_t) dx &amp;gt; ctx-&amp;gt;max_width) {
            dy = dy * ctx-&amp;gt;max_width / dx;
            dy = dy ? dy : 1;
            dx = ctx-&amp;gt;max_width;
        }

        if ((ngx_uint_t) dy &amp;gt; ctx-&amp;gt;max_height) {
            dx = dx * ctx-&amp;gt;max_height / dy;
            dx = dx ? dx : 1;
            dy = ctx-&amp;gt;max_height;
        }

        resize = 1;

    } else if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_ROTATE) {

        resize = 0;
    } else if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_WATERMARK) {
        
        resize = 0;
    } else { /* NGX_HTTP_IMAGE_CROP */

        resize = 0;

        if ((double) dx / dy &amp;lt; (double) ctx-&amp;gt;max_width / ctx-&amp;gt;max_height) {
            if ((ngx_uint_t) dx &amp;gt; ctx-&amp;gt;max_width) {
                dy = dy * ctx-&amp;gt;max_width / dx;
                dy = dy ? dy : 1;
                dx = ctx-&amp;gt;max_width;
                resize = 1;
            }

        } else {
            if ((ngx_uint_t) dy &amp;gt; ctx-&amp;gt;max_height) {
                dx = dx * ctx-&amp;gt;max_height / dy;
                dx = dx ? dx : 1;
                dy = ctx-&amp;gt;max_height;
                resize = 1;
            }
        }
    }

    if (resize) {
        dst = ngx_http_image_new(r, dx, dy, palette);
        if (dst == NULL) {
            gdImageDestroy(src);
            return NULL;
        }

        if (colors == 0) {
            gdImageSaveAlpha(dst, 1);
            gdImageAlphaBlending(dst, 0);
        }

        gdImageCopyResampled(dst, src, 0, 0, 0, 0, dx, dy, sx, sy);

        if (colors) {
            gdImageTrueColorToPalette(dst, 1, 256);
        }

        gdImageDestroy(src);

    } else {
        dst = src;
    }

    if (ctx-&amp;gt;angle) {
        src = dst;

        ax = (dx % 2 == 0) ? 1 : 0;
        ay = (dy % 2 == 0) ? 1 : 0;

        switch (ctx-&amp;gt;angle) {

        case 90:
        case 270:
            dst = ngx_http_image_new(r, dy, dx, palette);
            if (dst == NULL) {
                gdImageDestroy(src);
                return NULL;
            }
            if (ctx-&amp;gt;angle == 90) {
                ox = dy / 2 + ay;
                oy = dx / 2 - ax;

            } else {
                ox = dy / 2 - ay;
                oy = dx / 2 + ax;
            }

            gdImageCopyRotated(dst, src, ox, oy, 0, 0,
                               dx + ax, dy + ay, ctx-&amp;gt;angle);
            gdImageDestroy(src);

            t = dx;
            dx = dy;
            dy = t;
            break;

        case 180:
            dst = ngx_http_image_new(r, dx, dy, palette);
            if (dst == NULL) {
                gdImageDestroy(src);
                return NULL;
            }
            gdImageCopyRotated(dst, src, dx / 2 - ax, dy / 2 - ay, 0, 0,
                               dx + ax, dy + ay, ctx-&amp;gt;angle);
            gdImageDestroy(src);
            break;
        }
    }

    if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_CROP) {

        src = dst;

        if ((ngx_uint_t) dx &amp;gt; ctx-&amp;gt;max_width) {
            ox = dx - ctx-&amp;gt;max_width;

        } else {
            ox = 0;
        }

        if ((ngx_uint_t) dy &amp;gt; ctx-&amp;gt;max_height) {
            oy = dy - ctx-&amp;gt;max_height;

        } else {
            oy = 0;
        }

        if (ox || oy) {

            dst = ngx_http_image_new(r, dx - ox, dy - oy, colors);

            if (dst == NULL) {
                gdImageDestroy(src);
                return NULL;
            }

            ox /= 2;
            oy /= 2;

            ngx_log_debug4(NGX_LOG_DEBUG_HTTP, r-&amp;gt;connection-&amp;gt;log, 0,
                           &lt;span style="color: #2aa198;"&gt;"image crop: %d x %d @ %d x %d"&lt;/span&gt;,
                           dx, dy, ox, oy);

            if (colors == 0) {
                gdImageSaveAlpha(dst, 1);
                gdImageAlphaBlending(dst, 0);
            }

            gdImageCopy(dst, src, 0, 0, ox, oy, dx - ox, dy - oy);

            if (colors) {
                gdImageTrueColorToPalette(dst, 1, 256);
            }

            gdImageDestroy(src);
        }
    }

    if (transparent != -1 &amp;amp;&amp;amp; colors) {
        gdImageColorTransparent(dst, gdImageColorExact(dst, red, green, blue));
    }

    if (conf-&amp;gt;filter == NGX_HTTP_IMAGE_WATERMARK &amp;amp;&amp;amp; conf-&amp;gt;watermark.data) {
        FILE *watermark_file = fopen((const char *)conf-&amp;gt;watermark.data, &lt;span style="color: #2aa198;"&gt;"r"&lt;/span&gt;);
        if (watermark_file) {
            gdImagePtr watermark, watermark_mix;
            ngx_int_t wdx = 0, wdy = 0;
            
            watermark = gdImageCreateFromPng(watermark_file);
                
            if(watermark != NULL) {
                watermark_mix = gdImageCreateTrueColor(watermark-&amp;gt;sx, watermark-&amp;gt;sy);
                wdx = dx/2 - watermark-&amp;gt;sx/2;
                wdy = dy/2 - watermark-&amp;gt;sy/2;
                gdImageCopy(watermark_mix, dst, 0, 0, wdx, wdy, watermark-&amp;gt;sx, watermark-&amp;gt;sy);
                gdImageCopy(watermark_mix, watermark, 0, 0, 0, 0, watermark-&amp;gt;sx, watermark-&amp;gt;sy);
                gdImageCopyMerge(dst, watermark_mix, wdx, wdy, 0, 0, watermark-&amp;gt;sx, watermark-&amp;gt;sy, conf-&amp;gt;watermark_transparency);
                gdFree(watermark);
                gdFree(watermark_mix);
            } else { ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0, &lt;span style="color: #2aa198;"&gt;"watermark file '%s' is not PNG"&lt;/span&gt;, conf-&amp;gt;watermark.data);}
        } else {
            ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0, &lt;span style="color: #2aa198;"&gt;"watermark file '%s' not found"&lt;/span&gt;, conf-&amp;gt;watermark.data);
        }
    }
    
    sharpen = ngx_http_image_filter_get_value(r, conf-&amp;gt;shcv, conf-&amp;gt;sharpen);
    if (sharpen &amp;gt; 0) {
        gdImageSharpen(dst, sharpen);
    }

    out = ngx_http_image_out(r, ctx-&amp;gt;type, dst, &amp;amp;size);

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r-&amp;gt;connection-&amp;gt;log, 0,
                   &lt;span style="color: #2aa198;"&gt;"image: %d x %d %d"&lt;/span&gt;, sx, sy, colors);

    gdImageDestroy(dst);
    ngx_pfree(r-&amp;gt;pool, ctx-&amp;gt;image);

    if (out == NULL) {
        return NULL;
    }

    cln = ngx_pool_cleanup_add(r-&amp;gt;pool, 0);
    if (cln == NULL) {
        gdFree(out);
        return NULL;
    }

    b = ngx_pcalloc(r-&amp;gt;pool, sizeof(ngx_buf_t));
    if (b == NULL) {
        gdFree(out);
        return NULL;
    }

    cln-&amp;gt;handler = ngx_http_image_cleanup;
    cln-&amp;gt;data = out;

    b-&amp;gt;pos = out;
    b-&amp;gt;last = out + size;
    b-&amp;gt;memory = 1;
    b-&amp;gt;last_buf = 1;

    ngx_http_image_length(r, b);

    return b;
}


static gdImagePtr
ngx_http_image_source(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    char        *failed;
    gdImagePtr   img;

    img = NULL;

    switch (ctx-&amp;gt;type) {

    case NGX_HTTP_IMAGE_JPEG:
        img = gdImageCreateFromJpegPtr(ctx-&amp;gt;length, ctx-&amp;gt;image);
        failed = &lt;span style="color: #2aa198;"&gt;"gdImageCreateFromJpegPtr() failed"&lt;/span&gt;;
        break;

    case NGX_HTTP_IMAGE_GIF:
        img = gdImageCreateFromGifPtr(ctx-&amp;gt;length, ctx-&amp;gt;image);
        failed = &lt;span style="color: #2aa198;"&gt;"gdImageCreateFromGifPtr() failed"&lt;/span&gt;;
        break;

    case NGX_HTTP_IMAGE_PNG:
        img = gdImageCreateFromPngPtr(ctx-&amp;gt;length, ctx-&amp;gt;image);
        failed = &lt;span style="color: #2aa198;"&gt;"gdImageCreateFromPngPtr() failed"&lt;/span&gt;;
        break;

    default:
        failed = &lt;span style="color: #2aa198;"&gt;"unknown image type"&lt;/span&gt;;
        break;
    }

    if (img == NULL) {
        ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0, failed);
    }

    return img;
}


static gdImagePtr
ngx_http_image_new(ngx_http_request_t *r, int w, int h, int colors)
{
    gdImagePtr  img;

    if (colors == 0) {
        img = gdImageCreateTrueColor(w, h);

        if (img == NULL) {
            ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0,
                          &lt;span style="color: #2aa198;"&gt;"gdImageCreateTrueColor() failed"&lt;/span&gt;);
            return NULL;
        }

    } else {
        img = gdImageCreate(w, h);

        if (img == NULL) {
            ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0,
                          &lt;span style="color: #2aa198;"&gt;"gdImageCreate() failed"&lt;/span&gt;);
            return NULL;
        }
    }

    return img;
}


static u_char *
ngx_http_image_out(ngx_http_request_t *r, ngx_uint_t type, gdImagePtr img,
    int *size)
{
    char                          *failed;
    u_char                        *out;
    ngx_int_t                      jq;
    ngx_http_image_filter_conf_t  *conf;

    out = NULL;

    switch (type) {

    case NGX_HTTP_IMAGE_JPEG:
        conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

        jq = ngx_http_image_filter_get_value(r, conf-&amp;gt;jqcv, conf-&amp;gt;jpeg_quality);
        if (jq &amp;lt;= 0) {
            return NULL;
        }

        out = gdImageJpegPtr(img, size, jq);
        failed = &lt;span style="color: #2aa198;"&gt;"gdImageJpegPtr() failed"&lt;/span&gt;;
        break;

    case NGX_HTTP_IMAGE_GIF:
        out = gdImageGifPtr(img, size);
        failed = &lt;span style="color: #2aa198;"&gt;"gdImageGifPtr() failed"&lt;/span&gt;;
        break;

    case NGX_HTTP_IMAGE_PNG:
        out = gdImagePngPtr(img, size);
        failed = &lt;span style="color: #2aa198;"&gt;"gdImagePngPtr() failed"&lt;/span&gt;;
        break;

    default:
        failed = &lt;span style="color: #2aa198;"&gt;"unknown image type"&lt;/span&gt;;
        break;
    }

    if (out == NULL) {
        ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0, failed);
    }

    return out;
}


static void
ngx_http_image_cleanup(void *data)
{
    gdFree(data);
}


static ngx_uint_t
ngx_http_image_filter_get_value(ngx_http_request_t *r,
    ngx_http_complex_value_t *cv, ngx_uint_t v)
{
    ngx_str_t  val;

    if (cv == NULL) {
        return v;
    }

    if (ngx_http_complex_value(r, cv, &amp;amp;val) != NGX_OK) {
        return 0;
    }

    return ngx_http_image_filter_value(&amp;amp;val);
}


static ngx_uint_t
ngx_http_image_filter_value(ngx_str_t *value)
{
    ngx_int_t  n;

    if (value-&amp;gt;len == 1 &amp;amp;&amp;amp; value-&amp;gt;data[0] == '-') {
        return (ngx_uint_t) -1;
    }

    n = ngx_atoi(value-&amp;gt;data, value-&amp;gt;len);

    if (n &amp;gt; 0) {
        return (ngx_uint_t) n;
    }

    return 0;
}


static void *
ngx_http_image_filter_create_conf(ngx_conf_t *cf)
{
    ngx_http_image_filter_conf_t  *conf;

    conf = ngx_pcalloc(cf-&amp;gt;pool, sizeof(ngx_http_image_filter_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf-&amp;gt;width = 0;
     *     conf-&amp;gt;height = 0;
     *     conf-&amp;gt;angle = 0;
     *     conf-&amp;gt;wcv = NULL;
     *     conf-&amp;gt;hcv = NULL;
     *     conf-&amp;gt;acv = NULL;
     *     conf-&amp;gt;jqcv = NULL;
     *     conf-&amp;gt;shcv = NULL;
     */

    conf-&amp;gt;filter = NGX_CONF_UNSET_UINT;
    conf-&amp;gt;jpeg_quality = NGX_CONF_UNSET_UINT;
    conf-&amp;gt;sharpen = NGX_CONF_UNSET_UINT;
    conf-&amp;gt;transparency = NGX_CONF_UNSET;
    conf-&amp;gt;buffer_size = NGX_CONF_UNSET_SIZE;
    conf-&amp;gt;watermark_transparency = NGX_CONF_UNSET_UINT;

    return conf;
}


static char *
ngx_http_image_filter_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_image_filter_conf_t *prev = parent;
    ngx_http_image_filter_conf_t *conf = child;

    if (conf-&amp;gt;filter == NGX_CONF_UNSET_UINT) {

        if (prev-&amp;gt;filter == NGX_CONF_UNSET_UINT) {
            conf-&amp;gt;filter = NGX_HTTP_IMAGE_OFF;

        } else {
            conf-&amp;gt;filter = prev-&amp;gt;filter;
            conf-&amp;gt;width = prev-&amp;gt;width;
            conf-&amp;gt;height = prev-&amp;gt;height;
            conf-&amp;gt;angle = prev-&amp;gt;angle;
            conf-&amp;gt;wcv = prev-&amp;gt;wcv;
            conf-&amp;gt;hcv = prev-&amp;gt;hcv;
            conf-&amp;gt;acv = prev-&amp;gt;acv;
        }
    }

    if (conf-&amp;gt;jpeg_quality == NGX_CONF_UNSET_UINT) {

        /* 75 is libjpeg default quality */
        ngx_conf_merge_uint_value(conf-&amp;gt;jpeg_quality, prev-&amp;gt;jpeg_quality, 75);

        if (conf-&amp;gt;jqcv == NULL) {
            conf-&amp;gt;jqcv = prev-&amp;gt;jqcv;
        }
    }

    if (conf-&amp;gt;sharpen == NGX_CONF_UNSET_UINT) {
        ngx_conf_merge_uint_value(conf-&amp;gt;sharpen, prev-&amp;gt;sharpen, 0);

        if (conf-&amp;gt;shcv == NULL) {
            conf-&amp;gt;shcv = prev-&amp;gt;shcv;
        }
    }

    ngx_conf_merge_value(conf-&amp;gt;transparency, prev-&amp;gt;transparency, 1);

    ngx_conf_merge_size_value(conf-&amp;gt;buffer_size, prev-&amp;gt;buffer_size,
                              1 * 1024 * 1024);

    ngx_conf_merge_str_value(conf-&amp;gt;watermark, prev-&amp;gt;watermark, &lt;span style="color: #2aa198;"&gt;""&lt;/span&gt;);

    ngx_conf_merge_uint_value(conf-&amp;gt;watermark_transparency,
                              prev-&amp;gt;watermark_transparency, 90);
    
    return NGX_CONF_OK;
}


static char *
ngx_http_image_filter(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_image_filter_conf_t *imcf = conf;

    ngx_str_t                         *value;
    ngx_int_t                          n;
    ngx_uint_t                         i;
    ngx_http_complex_value_t           cv;
    ngx_http_compile_complex_value_t   ccv;

    value = cf-&amp;gt;args-&amp;gt;elts;

    i = 1;

    if (cf-&amp;gt;args-&amp;gt;nelts == 2) {
        if (ngx_strcmp(value[i].data, &lt;span style="color: #2aa198;"&gt;"off"&lt;/span&gt;) == 0) {
            imcf-&amp;gt;filter = NGX_HTTP_IMAGE_OFF;

        } else if (ngx_strcmp(value[i].data, &lt;span style="color: #2aa198;"&gt;"test"&lt;/span&gt;) == 0) {
            imcf-&amp;gt;filter = NGX_HTTP_IMAGE_TEST;

        } else if (ngx_strcmp(value[i].data, &lt;span style="color: #2aa198;"&gt;"size"&lt;/span&gt;) == 0) {
            imcf-&amp;gt;filter = NGX_HTTP_IMAGE_SIZE;

        } else if (ngx_strcmp(value[i].data, &lt;span style="color: #2aa198;"&gt;"watermark"&lt;/span&gt;) == 0) {
            imcf-&amp;gt;filter = NGX_HTTP_IMAGE_WATERMARK;
            
        } else {
            goto failed;
        }

        return NGX_CONF_OK;

    } else if (cf-&amp;gt;args-&amp;gt;nelts == 3) {

        if (ngx_strcmp(value[i].data, &lt;span style="color: #2aa198;"&gt;"rotate"&lt;/span&gt;) == 0) {
            if (imcf-&amp;gt;filter != NGX_HTTP_IMAGE_RESIZE
                &amp;amp;&amp;amp; imcf-&amp;gt;filter != NGX_HTTP_IMAGE_CROP)
            {
                imcf-&amp;gt;filter = NGX_HTTP_IMAGE_ROTATE;
            }

            ngx_memzero(&amp;amp;ccv, sizeof(ngx_http_compile_complex_value_t));

            ccv.cf = cf;
            ccv.value = &amp;amp;value[++i];
            ccv.complex_value = &amp;amp;cv;

            if (ngx_http_compile_complex_value(&amp;amp;ccv) != NGX_OK) {
                return NGX_CONF_ERROR;
            }

            if (cv.lengths == NULL) {
                n = ngx_http_image_filter_value(&amp;amp;value[i]);

                if (n != 90 &amp;amp;&amp;amp; n != 180 &amp;amp;&amp;amp; n != 270) {
                    goto failed;
                }

                imcf-&amp;gt;angle = (ngx_uint_t) n;

            } else {
                imcf-&amp;gt;acv = ngx_palloc(cf-&amp;gt;pool,
                                       sizeof(ngx_http_complex_value_t));
                if (imcf-&amp;gt;acv == NULL) {
                    return NGX_CONF_ERROR;
                }

                *imcf-&amp;gt;acv = cv;
            }

            return NGX_CONF_OK;

        } else {
            goto failed;
        }
    }

    if (ngx_strcmp(value[i].data, &lt;span style="color: #2aa198;"&gt;"resize"&lt;/span&gt;) == 0) {
        imcf-&amp;gt;filter = NGX_HTTP_IMAGE_RESIZE;

    } else if (ngx_strcmp(value[i].data, &lt;span style="color: #2aa198;"&gt;"crop"&lt;/span&gt;) == 0) {
        imcf-&amp;gt;filter = NGX_HTTP_IMAGE_CROP;

    } else {
        goto failed;
    }

    ngx_memzero(&amp;amp;ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &amp;amp;value[++i];
    ccv.complex_value = &amp;amp;cv;

    if (ngx_http_compile_complex_value(&amp;amp;ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (cv.lengths == NULL) {
        n = ngx_http_image_filter_value(&amp;amp;value[i]);

        if (n == 0) {
            goto failed;
        }

        imcf-&amp;gt;width = (ngx_uint_t) n;

    } else {
        imcf-&amp;gt;wcv = ngx_palloc(cf-&amp;gt;pool, sizeof(ngx_http_complex_value_t));
        if (imcf-&amp;gt;wcv == NULL) {
            return NGX_CONF_ERROR;
        }

        *imcf-&amp;gt;wcv = cv;
    }

    ngx_memzero(&amp;amp;ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &amp;amp;value[++i];
    ccv.complex_value = &amp;amp;cv;

    if (ngx_http_compile_complex_value(&amp;amp;ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (cv.lengths == NULL) {
        n = ngx_http_image_filter_value(&amp;amp;value[i]);

        if (n == 0) {
            goto failed;
        }

        imcf-&amp;gt;height = (ngx_uint_t) n;

    } else {
        imcf-&amp;gt;hcv = ngx_palloc(cf-&amp;gt;pool, sizeof(ngx_http_complex_value_t));
        if (imcf-&amp;gt;hcv == NULL) {
            return NGX_CONF_ERROR;
        }

        *imcf-&amp;gt;hcv = cv;
    }

    return NGX_CONF_OK;

failed:

    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, &lt;span style="color: #2aa198;"&gt;"invalid parameter \"%V\""&lt;/span&gt;,
                       &amp;amp;value[i]);

    return NGX_CONF_ERROR;
}


static char *
ngx_http_image_filter_jpeg_quality(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    ngx_http_image_filter_conf_t *imcf = conf;

    ngx_str_t                         *value;
    ngx_int_t                          n;
    ngx_http_complex_value_t           cv;
    ngx_http_compile_complex_value_t   ccv;

    value = cf-&amp;gt;args-&amp;gt;elts;

    ngx_memzero(&amp;amp;ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &amp;amp;value[1];
    ccv.complex_value = &amp;amp;cv;

    if (ngx_http_compile_complex_value(&amp;amp;ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (cv.lengths == NULL) {
        n = ngx_http_image_filter_value(&amp;amp;value[1]);

        if (n &amp;lt;= 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               &lt;span style="color: #2aa198;"&gt;"invalid value \"%V\""&lt;/span&gt;, &amp;amp;value[1]);
            return NGX_CONF_ERROR;
        }

        imcf-&amp;gt;jpeg_quality = (ngx_uint_t) n;

    } else {
        imcf-&amp;gt;jqcv = ngx_palloc(cf-&amp;gt;pool, sizeof(ngx_http_complex_value_t));
        if (imcf-&amp;gt;jqcv == NULL) {
            return NGX_CONF_ERROR;
        }

        *imcf-&amp;gt;jqcv = cv;
    }

    return NGX_CONF_OK;
}


static char *
ngx_http_image_filter_sharpen(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    ngx_http_image_filter_conf_t *imcf = conf;

    ngx_str_t                         *value;
    ngx_int_t                          n;
    ngx_http_complex_value_t           cv;
    ngx_http_compile_complex_value_t   ccv;

    value = cf-&amp;gt;args-&amp;gt;elts;

    ngx_memzero(&amp;amp;ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &amp;amp;value[1];
    ccv.complex_value = &amp;amp;cv;

    if (ngx_http_compile_complex_value(&amp;amp;ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (cv.lengths == NULL) {
        n = ngx_http_image_filter_value(&amp;amp;value[1]);

        if (n &amp;lt; 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               &lt;span style="color: #2aa198;"&gt;"invalid value \"%V\""&lt;/span&gt;, &amp;amp;value[1]);
            return NGX_CONF_ERROR;
        }

        imcf-&amp;gt;sharpen = (ngx_uint_t) n;

    } else {
        imcf-&amp;gt;shcv = ngx_palloc(cf-&amp;gt;pool, sizeof(ngx_http_complex_value_t));
        if (imcf-&amp;gt;shcv == NULL) {
            return NGX_CONF_ERROR;
        }

        *imcf-&amp;gt;shcv = cv;
    }

    return NGX_CONF_OK;
}


static ngx_int_t
ngx_http_image_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_image_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_image_body_filter;

    return NGX_OK;
}
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3-3" class="outline-4"&gt;
&lt;h4 id="sec-3-3"&gt;&#32534;&#35793;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-3"&gt;




&lt;pre class="src src-sh"&gt;--with-debug --with-http_image_filter_module --add-module=/home/tangxinfa/Opensource/nginx-1.2.7/../ngx_http_qrcode_module/ --add-module=/home/tangxinfa/Opensource/nginx-1.2.7/../ngx_devel_kit/ --add-module=/home/tangxinfa/Opensource/nginx-1.2.7/../set-misc-nginx-module/ --add-module=/home/tangxinfa/Opensource/nginx-1.2.7/../echo-nginx-module/
&lt;/pre&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3-4" class="outline-4"&gt;
&lt;h4 id="sec-3-4"&gt;&#37197;&#32622;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-4"&gt;




&lt;pre class="example"&gt;location ~ /qr {
    qrcode_fg_color FF0000;
    qrcode_bg_color FFFFFF;    
    qrcode_level 2;
    qrcode_hint 2;
    qrcode_size 120;
    qrcode_margin 2;
    qrcode_version 5;
    set_unescape_uri $txt $arg_txt;
    qrcode_txt $txt;
    qrcode_casesensitive 1; 
    qrcode_gen;  

    image_filter_watermark "/usr/share/pixmaps/gnome-word.png";
    image_filter_watermark_transparency 95; #0-100
    image_filter watermark;
}
&lt;/pre&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3-5" class="outline-4"&gt;
&lt;h4 id="sec-3-5"&gt;&#35775;&#38382;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-5"&gt;




&lt;pre class="example"&gt;http://localhost:8080/qr?txt=hello
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&#26174;&#31034;&#25928;&#26524;&#65306;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;     &lt;img src="../../../posts/2013/03/30_4e8c7ef4780178147a76/hello_qr.png"  alt="../../../posts/2013/03/30_4e8c7ef4780178147a76/hello_qr.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-4" class="outline-3"&gt;
&lt;h3 id="sec-4"&gt;&#20108;&#32500;&#30721;&#22522;&#30784;&#26381;&#21153;&#30340;&#19968;&#28857;&#24605;&#32034;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4"&gt;

&lt;ul&gt;
&lt;li&gt;&#24517;&#39035;&#24314;&#31435;&#22312;cdn&#30340;&#22522;&#30784;&#19978;
&lt;/li&gt;
&lt;li&gt;&#29992;&#25143;&#21482;&#38656;&#25353;&#29031;&#32422;&#23450;&#23558;&#20869;&#23481;&#20197;&#21450;&#23450;&#21046;&#21442;&#25968;&#25353;&#29031;&#30452;&#35266;&#30340;&#26041;&#24335;&#32534;&#30721;&#25104;&#20108;&#32500;&#30721;&#22270;&#29255;&#38142;&#25509;&#21363;&#21487;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
   &#21442;&#32771;&#65306;&lt;a href="https://developers.google.com/chart/infographics/docs/qr_codes"&gt;https://developers.google.com/chart/infographics/docs/qr_codes&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title type="html">Archlinux下安装cups打印系统</title><author><name>nil</name></author><link href="http://blog.kankanan.com/posts/2013/03/27_archlinux4e0b5b8988c5cups625353707cfb7edf.html"/><updated>2013-03-27T21:56:00Z</updated><published>2013-03-27T21:56:00Z</published><id>posts/2013/03/27_archlinux4e0b5b8988c5cups625353707cfb7edf.html</id><category scheme="/tags/archlinux.html" term="archlinux" label="archlinux"/><content type="html">&lt;dl&gt;
&lt;dt&gt;&#23433;&#35013;&lt;/dt&gt;&lt;dd&gt;
&lt;/dd&gt;
&lt;/dl&gt;




&lt;pre class="src src-sh"&gt;yaourt -S cups-pdf
&lt;/pre&gt;


&lt;dl&gt;
&lt;dt&gt;&#21551;&#21160;&lt;/dt&gt;&lt;dd&gt;
&lt;/dd&gt;
&lt;/dl&gt;




&lt;pre class="src src-sh"&gt;sudo systemctl start cups
&lt;/pre&gt;


&lt;dl&gt;
&lt;dt&gt;&#37197;&#32622;&lt;/dt&gt;&lt;dd&gt;
&lt;p&gt;
    &#21442;&#32771;&#65306;&lt;a href="https://wiki.archlinux.org/index.php/Cups#PDF_virtual_printer"&gt;https://wiki.archlinux.org/index.php/Cups#PDF_virtual_printer&lt;/a&gt;
    &#30331;&#24405;&#30340;&#29992;&#25143;&#21517;&#35201;&#20026;root&#65292;&#21542;&#21017;&#21518;&#38754;&#36824;&#26159;&#26080;&#27861;&#28155;&#21152;&#25171;&#21360;&#26426;&#65292;web&#30028;&#38754;&#27809;&#26377;&#36864;&#20986;&#30331;&#24405;&#30340;&#36873;&#39033;&#65292;&#21487;&#20197;&#35797;&#35797;&#37325;&#21551;cups&#26381;&#21153;&#27983;&#35272;&#22120;&#28165;&#38500;&#32531;&#23384;&#30340;&#25968;&#25454;&#12290;
&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;

</content></entry><entry><title type="html">python中的UTC与本地时区处理</title><author><name>nil</name></author><link href="http://blog.kankanan.com/posts/2013/03/20_python4e2d7684utc4e0e672c573065f6533a59047406.html"/><updated>2013-03-20T17:29:00Z</updated><published>2013-03-20T17:29:00Z</published><id>posts/2013/03/20_python4e2d7684utc4e0e672c573065f6533a59047406.html</id><category scheme="/tags/python.html" term="python" label="python"/><content type="html">&lt;p&gt;
  &#22312;&#36890;&#36807;sqlalchemy&#20351;&#29992;sqlite3&#25968;&#25454;&#24211;&#30340;&#36807;&#31243;&#20013;&#65292;&#21457;&#29616;&#26085;&#26399;&#26102;&#38388;&#23383;&#27573;&#40664;&#35748;&#20540;&#20026;CURRENT_TIMESTAMP&#65292;&#20294;&#26159;&#26597;&#20986;&#30340;&#20540;&#23569;&#20102;8&#20010;&#23567;&#26102;&#12290;&#24456;&#26126;&#26174;&#26159;&#36935;&#21040;&#26102;&#21306;&#38382;&#39064;&#20102;&#12290;
&lt;/p&gt;
&lt;p&gt;
  mysql&#30340;TIMESTAMP&#23383;&#27573;&#31867;&#22411;&#21644;sqlite3&#19968;&#26679;&#20351;&#29992;UTC&#26102;&#38388;&#20445;&#23384;&#65292;&#22240;&#20026;&#22312;&#23384;&#21462;&#26102;&#33258;&#21160;&#36827;&#34892;&#20102;&#26412;&#22320;&#26102;&#38388;&#19982;UTC&#26102;&#38388;&#20114;&#36716;&#65292;&#25152;&#20197;&#19981;&#20250;&#36935;&#21040;&#26102;&#21306;&#38382;&#39064;&#12290;&#20294;&#26159;sqlite3&#27809;&#26377;&#33258;&#21160;&#36827;&#34892;&#36825;&#19968;&#36716;&#25442;&#65292;&#38656;&#35201;&#22312;sql&#20013;&#33258;&#34892;&#36716;&#25442;:
&lt;/p&gt;


&lt;pre class="src src-sql"&gt;select datetime(CURRENT_TIMESTAMP, &lt;span style="color: #2aa198;"&gt;'localtime'&lt;/span&gt;)
&lt;/pre&gt;


&lt;p&gt;
  &#36827;&#19968;&#27493;google&#21518;&#65292;&#25214;&#21040;&#20102;&#36825;&#31687;&#25991;&#31456;&#65306;&#12298;&lt;a href="http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/"&gt;Dealing with Timezones in Python&lt;/a&gt;&#12299;&#65292;&#25991;&#31456;&#22823;&#24847;&#26159;python&#20013;&#30340;datetime&#24211;&#40664;&#35748;&#19981;&#25658;&#24102;&#26102;&#21306;&#20449;&#24687;&#65292;&#32780;&#21152;&#19978;&#26102;&#21306;&#21518;&#21448;&#19982;&#19981;&#24102;&#26102;&#21306;&#30340;datetime&#23545;&#35937;&#26080;&#27861;&#19968;&#36215;&#24037;&#20316;&#65288;&#22914;&#65306;&#27604;&#36739;&#65289;&#65292;&#21478;&#22806;&#20687;datetime.datetime.utcnow()&#36820;&#22238;&#30340;utc&#26102;&#38388;&#21644;datetime.datetime.now()&#36820;&#22238;&#30340;&#26412;&#22320;&#26102;&#38388;&#20063;&#26159;&#19981;&#25658;&#24102;&#26102;&#21306;&#20449;&#24687;&#30340;&#65288;tzinfo&#23646;&#24615;&#20026;None&#65289;&#65292;&#23481;&#26131;&#24341;&#36215;&#28151;&#28102;&#65292;&#22240;&#27492;&#22788;&#29702;&#30340;&#31616;&#21333;&#24615;&#65292;&#20869;&#37096;&#26368;&#22909;&#32479;&#19968;&#20351;&#29992;UTC&#26631;&#20934;&#26102;&#38388;&#65292;&#21644;&#29992;&#25143;&#20132;&#20114;&#26102;&#20877;&#36716;&#25442;&#20026;&#26412;&#22320;&#26102;&#38388;&#12290;
&lt;/p&gt;
&lt;p&gt;
  &#19979;&#38754;&#26159;&#20114;&#36716;&#30340;&#31639;&#27861;&#65306;
&lt;/p&gt;


&lt;pre class="src src-python"&gt;&lt;span style="color: #586e75; font-style: italic;"&gt;#&lt;/span&gt;&lt;span style="color: #586e75; font-style: italic;"&gt;/usr/bin/env python&lt;/span&gt;

&lt;span style="color: #859900;"&gt;import&lt;/span&gt; datetime
&lt;span style="color: #859900;"&gt;import&lt;/span&gt; time
&lt;span style="color: #859900;"&gt;import&lt;/span&gt; sys

&lt;span style="color: #859900;"&gt;if&lt;/span&gt; sys.version &amp;gt;= &lt;span style="color: #2aa198;"&gt;'3.2.'&lt;/span&gt;:
    &lt;span style="color: #268bd2;"&gt;localtimezone&lt;/span&gt; = datetime.timezone(datetime.timedelta(seconds=-time.timezone), time.tzname[0])
    &lt;span style="color: #268bd2;"&gt;utctimezone&lt;/span&gt; = datetime.timezone.utc
&lt;span style="color: #859900;"&gt;else&lt;/span&gt;:
    &lt;span style="color: #859900;"&gt;from&lt;/span&gt; dateutil &lt;span style="color: #859900;"&gt;import&lt;/span&gt; tz
    &lt;span style="color: #268bd2;"&gt;localtimezone&lt;/span&gt; = tz.tzlocal()
    &lt;span style="color: #268bd2;"&gt;utctimezone&lt;/span&gt; = tz.gettz(&lt;span style="color: #2aa198;"&gt;'UTC'&lt;/span&gt;)

&lt;span style="color: #859900;"&gt;def&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;parsedatetime&lt;/span&gt;(dt, fmt=&lt;span style="color: #2aa198;"&gt;"%Y-%m-%d %H:%M:%S"&lt;/span&gt;):
    &lt;span style="color: #2aa198;"&gt;"""parse local datetime string as utc datetime object"""&lt;/span&gt;
    &lt;span style="color: #859900;"&gt;return&lt;/span&gt; datetime.datetime.strptime(dt, fmt).replace(tzinfo=localtimezone).astimezone(utctimezone)

&lt;span style="color: #859900;"&gt;def&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;formatdatetime&lt;/span&gt;(dt, fmt=&lt;span style="color: #2aa198;"&gt;"%Y-%m-%d %H:%M:%S"&lt;/span&gt;):
    &lt;span style="color: #2aa198;"&gt;"""format utc datetime object as local datetime string"""&lt;/span&gt;
    &lt;span style="color: #859900;"&gt;return&lt;/span&gt; dt.replace(tzinfo=utctimezone).astimezone(localtimezone).strftime(fmt)

&lt;span style="color: #859900;"&gt;if&lt;/span&gt; &lt;span style="color: #859900;"&gt;__name__&lt;/span&gt; == &lt;span style="color: #2aa198;"&gt;'__main__'&lt;/span&gt;:
    input_local_datetime = &lt;span style="color: #2aa198;"&gt;'2012-01-02 03:04:05'&lt;/span&gt;
    parsed_utc_datetime = parsedatetime(input_local_datetime)
    &lt;span style="color: #859900;"&gt;assert&lt;/span&gt;(formatdatetime(parsed_utc_datetime) == input_local_datetime)
&lt;/pre&gt;

</content></entry><entry><title type="html">C++的函数、闭包与协程</title><author><name>nil</name></author><link href="http://blog.kankanan.com/posts/2013/03/15_c2b2b768451fd6570300195ed53054e0e534f7a0b.html"/><updated>2013-03-15T10:04:00Z</updated><published>2013-03-15T10:04:00Z</published><id>posts/2013/03/15_c2b2b768451fd6570300195ed53054e0e534f7a0b.html</id><category scheme="/tags/cpp.html" term="cpp" label="cpp"/><content type="html">&lt;div id="outline-container-1" class="outline-3"&gt;
&lt;h3 id="sec-1"&gt;&#23454;&#29616;&#24207;&#21495;&#29983;&#25104;&#22120;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1"&gt;


&lt;/div&gt;

&lt;div id="outline-container-1-1" class="outline-4"&gt;
&lt;h4 id="sec-1-1"&gt;&#20989;&#25968;&#65288;Function&#65289;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1"&gt;




&lt;pre class="src src-c++"&gt;&lt;span style="color: #cb4b16;"&gt;#include&lt;/span&gt; &lt;span style="color: #2aa198;"&gt;&amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;id_generator&lt;/span&gt;(&lt;span style="color: #b58900;"&gt;int&lt;/span&gt;&amp;amp; &lt;span style="color: #268bd2;"&gt;base&lt;/span&gt;, &lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;step&lt;/span&gt;)
{
    &lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;result&lt;/span&gt; = *base;
    *base += step;
    &lt;span style="color: #859900;"&gt;return&lt;/span&gt; result;
}

&lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;main&lt;/span&gt;(&lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;argc&lt;/span&gt;, &lt;span style="color: #b58900;"&gt;char&lt;/span&gt; *&lt;span style="color: #268bd2;"&gt;argv&lt;/span&gt;[])
{
    &lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;odd_base&lt;/span&gt; = 1;
    &lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;even_base&lt;/span&gt; = 0;    
    assert(id_generator(odd_base, 2) == 1);
    assert(id_generator(odd_base, 2) == 3);
    assert(id_generator(odd_base, 2) == 5);
    assert(id_generator(even_base, 2) == 0);
    assert(id_generator(even_base, 2) == 2);
    assert(id_generator(even_base, 2) == 4);        
    &lt;span style="color: #859900;"&gt;return&lt;/span&gt; 0;
}
&lt;/pre&gt;


&lt;dl&gt;
&lt;dt&gt;&#32534;&#35793;&lt;/dt&gt;&lt;dd&gt;



&lt;pre class="example"&gt;g++ -g add.cpp -o add
&lt;/pre&gt;

&lt;/dd&gt;
&lt;/dl&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-1-2" class="outline-4"&gt;
&lt;h4 id="sec-1-2"&gt;&#38381;&#21253;&#65288;Closure&#65289;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2"&gt;




&lt;pre class="src src-c++"&gt;&lt;span style="color: #cb4b16;"&gt;#include&lt;/span&gt; &lt;span style="color: #2aa198;"&gt;&amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;main&lt;/span&gt;(&lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;argc&lt;/span&gt;, &lt;span style="color: #b58900;"&gt;char&lt;/span&gt; *&lt;span style="color: #268bd2;"&gt;argv&lt;/span&gt;[])
{
    &lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;base&lt;/span&gt; = 1;
    &lt;span style="color: #859900;"&gt;auto&lt;/span&gt; &lt;span style="color: #b58900;"&gt;id_generator_odd&lt;/span&gt; = [=]() &lt;span style="color: #859900;"&gt;mutable&lt;/span&gt; { &lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;result&lt;/span&gt; = base; base += 2; &lt;span style="color: #859900;"&gt;return&lt;/span&gt; result; };
    base = 0;
    &lt;span style="color: #859900;"&gt;auto&lt;/span&gt; &lt;span style="color: #b58900;"&gt;id_generator_even&lt;/span&gt; = [=]() &lt;span style="color: #859900;"&gt;mutable&lt;/span&gt; { &lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;result&lt;/span&gt; = base; base += 2; &lt;span style="color: #859900;"&gt;return&lt;/span&gt; result; };
    assert(id_generator_odd() == 1);
    assert(id_generator_odd() == 3);
    assert(id_generator_odd() == 5);
    assert(id_generator_even() == 0);
    assert(id_generator_even() == 2);
    assert(id_generator_even() == 4);
    assert(base == 0);
    &lt;span style="color: #859900;"&gt;return&lt;/span&gt; 0;
}
&lt;/pre&gt;


&lt;dl&gt;
&lt;dt&gt;&#32534;&#35793;&lt;/dt&gt;&lt;dd&gt;



&lt;pre class="example"&gt;g++ -g closure.cpp -o closure -std=c++0x
&lt;/pre&gt;

&lt;/dd&gt;
&lt;/dl&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-1-3" class="outline-4"&gt;
&lt;h4 id="sec-1-3"&gt;&#21327;&#31243;&#65288;Coroutine&#65289;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3"&gt;




&lt;pre class="src src-c++"&gt;&lt;span style="color: #cb4b16;"&gt;#include&lt;/span&gt; &lt;span style="color: #2aa198;"&gt;&amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style="color: #cb4b16;"&gt;#include&lt;/span&gt; &lt;span style="color: #2aa198;"&gt;&amp;lt;boost/coroutine/all.hpp&amp;gt;&lt;/span&gt;

&lt;span style="color: #859900;"&gt;typedef&lt;/span&gt; &lt;span style="color: #2aa198;"&gt;boost&lt;/span&gt;::&lt;span style="color: #2aa198;"&gt;coroutines&lt;/span&gt;::&lt;span style="color: #b58900;"&gt;coroutine&lt;/span&gt;&amp;lt; &lt;span style="color: #b58900;"&gt;int&lt;/span&gt;(&lt;span style="color: #b58900;"&gt;void&lt;/span&gt;) &amp;gt; &lt;span style="color: #b58900;"&gt;IDGenerator&lt;/span&gt;;

&lt;span style="color: #b58900;"&gt;void&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;idGenerator&lt;/span&gt;(&lt;span style="color: #2aa198;"&gt;IDGenerator&lt;/span&gt;::&lt;span style="color: #b58900;"&gt;caller_type&lt;/span&gt;&amp;amp; &lt;span style="color: #268bd2;"&gt;ca&lt;/span&gt;, &lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;base&lt;/span&gt;, &lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;step&lt;/span&gt;)
{
    &lt;span style="color: #859900;"&gt;do&lt;/span&gt;{
        ca(base);
        base += step;
    }&lt;span style="color: #859900;"&gt;while&lt;/span&gt;(&lt;span style="color: #2aa198;"&gt;true&lt;/span&gt;);
}

&lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;main&lt;/span&gt;(&lt;span style="color: #b58900;"&gt;int&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;argc&lt;/span&gt;, &lt;span style="color: #b58900;"&gt;char&lt;/span&gt; *&lt;span style="color: #268bd2;"&gt;argv&lt;/span&gt;[])
{
    &lt;span style="color: #b58900;"&gt;IDGenerator&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;id_generator_odd&lt;/span&gt;(&lt;span style="color: #2aa198;"&gt;boost&lt;/span&gt;::bind(idGenerator, _1, 1, 2));
    &lt;span style="color: #b58900;"&gt;IDGenerator&lt;/span&gt; &lt;span style="color: #268bd2;"&gt;id_generator_even&lt;/span&gt;(&lt;span style="color: #2aa198;"&gt;boost&lt;/span&gt;::bind(idGenerator, _1, 0, 2));
    assert(id_generator_odd.get() == 1);
    assert(id_generator_odd().get() == 3);
    assert(id_generator_odd().get() == 5);
    assert(id_generator_even.get() == 0);
    assert(id_generator_even().get() == 2);
    assert(id_generator_even().get() == 4);
    &lt;span style="color: #859900;"&gt;return&lt;/span&gt; 0;
}
&lt;/pre&gt;


&lt;dl&gt;
&lt;dt&gt;&#32534;&#35793;&lt;/dt&gt;&lt;dd&gt;



&lt;pre class="example"&gt;g++ -g coroutine.cpp -lboost_context -o coroutine -std=c++0x
&lt;/pre&gt;

&lt;/dd&gt;
&lt;/dl&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2" class="outline-3"&gt;
&lt;h3 id="sec-2"&gt;&#29305;&#24615;&#27604;&#36739;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2"&gt;


&lt;/div&gt;

&lt;div id="outline-container-2-1" class="outline-4"&gt;
&lt;h4 id="sec-2-1"&gt;&#20989;&#25968;&#65288;Function&#65289;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1"&gt;

&lt;ul&gt;
&lt;li&gt;&#26080;&#29366;&#24577;
&lt;/li&gt;
&lt;li&gt;&#38656;&#35201;&#29420;&#31435;&#23450;&#20041;&#25191;&#34892;&#20307;
&lt;/li&gt;
&lt;li&gt;&#35843;&#29992;&#36807;&#31243;&#20013;&#20174;&#22836;&#21040;&#23614;&#25191;&#34892;&#20307;&#20869;&#25152;&#26377;&#20195;&#30721;
&lt;/li&gt;
&lt;li&gt;&#22312;&#36755;&#20837;&#30456;&#21516;&#30340;&#24773;&#20917;&#19979;&#65292;&#33021;&#22815;&#20445;&#35777;&#36755;&#20986;&#20063;&#30456;&#21516;
&lt;/li&gt;
&lt;li&gt;&#27809;&#26377;&#21103;&#20316;&#29992;&#65292;&#22810;&#32447;&#31243;&#23433;&#20840;
&lt;/li&gt;
&lt;li&gt;&#35201;&#20511;&#21161;&#22806;&#37096;&#21464;&#37327;&#20445;&#23384;&#29366;&#24577;
&lt;/li&gt;
&lt;li&gt;&#35843;&#29992;&#27604;&#36739;&#40635;&#28902;&#65292;&#38656;&#35201;&#20256;&#20837;&#20445;&#23384;&#29366;&#24577;&#30340;&#21442;&#25968;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2-2" class="outline-4"&gt;
&lt;h4 id="sec-2-2"&gt;&#38381;&#21253;&#65288;Closure&#65289;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2"&gt;

&lt;ul&gt;
&lt;li&gt;&#26377;&#29366;&#24577;&#65292;&#20869;&#37096;&#30452;&#25509;&#20445;&#23384;
&lt;/li&gt;
&lt;li&gt;&#30452;&#25509;&#20869;&#32852;&#23450;&#20041;&#25191;&#34892;&#20307;
&lt;/li&gt;
&lt;li&gt;&#35843;&#29992;&#36807;&#31243;&#20013;&#20174;&#22836;&#21040;&#23614;&#25191;&#34892;&#20307;&#20869;&#25152;&#26377;&#20195;&#30721;
&lt;/li&gt;
&lt;li&gt;&#36755;&#20837;&#30456;&#21516;&#30340;&#24773;&#20917;&#19979;&#65292;&#36755;&#20986;&#21487;&#33021;&#19981;&#21516;
&lt;/li&gt;
&lt;li&gt;&#26377;&#21103;&#20316;&#29992;&#65292;&#38750;&#22810;&#32447;&#31243;&#23433;&#20840;
&lt;/li&gt;
&lt;li&gt;&#23450;&#20041;&#26102;&#21487;&#20197;&#22810;&#31181;&#26041;&#24335;&#23433;&#20840;&#22320;&#24341;&#29992;&#22806;&#37096;&#21464;&#37327;
&lt;/li&gt;
&lt;li&gt;&#35843;&#29992;&#31616;&#21333;&#65292;&#19981;&#38656;&#35201;&#20256;&#20837;&#20445;&#23384;&#29366;&#24577;&#30340;&#21442;&#25968;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2-3" class="outline-4"&gt;
&lt;h4 id="sec-2-3"&gt;&#21327;&#31243;&#65288;Coroutine&#65289;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3"&gt;

&lt;ul&gt;
&lt;li&gt;&#26377;&#29366;&#24577;&#65292;&#20869;&#37096;&#30452;&#25509;&#20445;&#23384;
&lt;/li&gt;
&lt;li&gt;&#38656;&#35201;&#29420;&#31435;&#23450;&#20041;&#25191;&#34892;&#20307;
&lt;/li&gt;
&lt;li&gt;&#35843;&#29992;&#36807;&#31243;&#20013;&#30452;&#25509;&#20174;&#19978;&#27425;&#30340;&#36816;&#34892;&#29366;&#24577;&#32487;&#32493;&#36816;&#34892;
&lt;/li&gt;
&lt;li&gt;&#36755;&#20837;&#30456;&#21516;&#30340;&#24773;&#20917;&#19979;&#65292;&#36755;&#20986;&#21487;&#33021;&#19981;&#21516;
&lt;/li&gt;
&lt;li&gt;&#20005;&#31105;&#22810;&#32447;&#31243;&#35775;&#38382;
&lt;/li&gt;
&lt;li&gt;&#35843;&#29992;&#31616;&#21333;&#65292;&#19981;&#38656;&#35201;&#20256;&#20837;&#20445;&#23384;&#29366;&#24577;&#30340;&#21442;&#25968;    
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title type="html">网页中的自动完成的下拉列表框</title><author><name>nil</name></author><link href="http://blog.kankanan.com/posts/2013/03/10_7f5198754e2d768481ea52a85b8c621076844e0b62c9521788686846.html"/><updated>2013-03-10T21:23:00Z</updated><published>2013-03-10T21:23:00Z</published><id>posts/2013/03/10_7f5198754e2d768481ea52a85b8c621076844e0b62c9521788686846.html</id><category scheme="/tags/web.html" term="web" label="web"/><category scheme="/tags/jquery.html" term="jquery" label="jquery"/><category scheme="/tags/chosen.html" term="chosen" label="chosen"/><content type="html">&lt;div id="outline-container-1" class="outline-3"&gt;
&lt;h3 id="sec-1"&gt;jqueryui&#30340;&lt;a href="http://jqueryui.com/autocomplete/#combobox"&gt;&#32452;&#20214;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1"&gt;

&lt;p&gt;   &#31034;&#20363;&#25928;&#26524;&#30475;&#36215;&#26469;&#25403;&#22909;&#65292;&#19981;&#36807;&#21457;&#29616;&#20960;&#20010;&#38382;&#39064;&#65306;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&#21644;&lt;a href="http://twitter.github.com/bootstrap/"&gt;bootstrap&lt;/a&gt;&#26377;&#20914;&#31361;&#65292;&#23548;&#33268;&#21491;&#36793;&#30340;&#19979;&#25289;&#31661;&#22836;&#37096;&#20998;&#37117;&#30475;&#19981;&#35265;&#12290;
&lt;/li&gt;
&lt;li&gt;&#25805;&#20316;&#36807;&#31243;&#20013;&#26377;&#26102;&#20505;&#26174;&#31034;&#30340;&#20540;&#21644;&#23454;&#38469;&#30340;&#20540;&#19981;&#19968;&#33268;&#65292;&#24212;&#35813;&#26159;&#20013;&#25991;&#36755;&#20837;&#27861;&#25353;&#38190;&#20107;&#20214;&#22312;firefox&#19979;&#26410;&#35302;&#21457;&#24341;&#36215;&#30340;&#26174;&#31034;&#30340;&#30028;&#38754;&#37096;&#20998;&#21644;&#38544;&#34255;&#30340;select&#36755;&#20837;&#26694;&#20540;&#19981;&#21516;&#27493;&#12290;
&lt;/li&gt;
&lt;li&gt;&#27809;&#26377;&#25552;&#20379;&#35774;&#32622;&#24403;&#21069;&#36873;&#20013;&#39033;&#12289;&#31105;&#29992;&#30340;&#21151;&#33021;&#65292;&#35201;&#33258;&#34892;&#23545;&#29983;&#25104;&#30340;&#30028;&#38754;&#20803;&#32032;&#36827;&#34892;&#22788;&#29702;&#12290;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; 
   &#36825;&#20010;&#21482;&#26159;jqueryui&#33258;&#21160;&#23436;&#25104;&#36755;&#20837;&#26694;&#30340;&#19968;&#20010;&#23450;&#21046;&#31034;&#20363;&#65292;&#19981;&#26159;&#24456;&#23436;&#21892;&#65292;&#32780;jqueryui&#33258;&#24102;&#30340;&#27491;&#24335;&#29256;&#30475;&#36215;&#26469;&#21482;&#26159;&#19968;&#20010;&#36755;&#20837;&#26694;&#12290;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2" class="outline-3"&gt;
&lt;h3 id="sec-2"&gt;&lt;a href="https://github.com/harvesthq/chosen"&gt;chosen&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2"&gt;

&lt;p&gt;   &#38750;&#24120;&#23436;&#32654;&#65292;&#37197;&#32622;&#24456;&#31616;&#21333;&#65292;&#32780;&#19988;&#30028;&#38754;&#24456;&#28418;&#20142;&#65292;&#22312;github&#19978;&#35780;&#20998;&#24456;&#39640;&#12290;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title type="html">linux下跨进程传递文件描述符</title><author><name>nil</name></author><link href="http://blog.kankanan.com/posts/2013/03/09_linux4e0b8de88fdb7a0b4f20901265874ef663cf8ff07b26.html"/><updated>2013-03-09T15:11:00Z</updated><published>2013-03-09T15:11:00Z</published><id>posts/2013/03/09_linux4e0b8de88fdb7a0b4f20901265874ef663cf8ff07b26.html</id><category scheme="/tags/linux.html" term="linux" label="linux"/><content type="html">&lt;div id="outline-container-1" class="outline-3"&gt;
&lt;h3 id="sec-1"&gt;&#38382;&#39064;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1"&gt;

&lt;p&gt;   &#22312;web&#24320;&#21457;&#20013;&#65292;&#20197;&#20856;&#22411;&#30340;php-fpm&#20026;&#20363;&#65292;&#23545;&#20110;&#21040;&#22806;&#37096;&#31995;&#32479;&#30340;&#36830;&#25509;&#65288;&#22914;&#65306;mysql&#12289;redis&#65289;&#31561;&#37117;&#25552;&#20379;&#20102;&#25345;&#20037;&#36830;&#25509;&#25509;&#21475;&#65288;pconnect&#65289;&#65292;&#20294;&#26159;&#21463;&#38480;&#20110;&#22810;&#36827;&#31243;&#27169;&#22411;&#65292;&#20107;&#23454;&#19978;&#26159;&#27599;&#20010;php-fpm&#36827;&#31243;&#37117;&#26377;&#21333;&#29420;&#30340;&#19968;&#20010;&#36830;&#25509;&#27744;&#30340;&#65288;&#21442;&#35265;&#65306;&#12298;&lt;a href="php_meet_redis.html"&gt;&#24403;php&#36935;&#19978;redis&lt;/a&gt;&#12299;&#65289;&#65292;&#22823;&#37327;&#31354;&#38386;&#36830;&#25509;&#30340;&#23384;&#22312;&#19981;&#20165;&#23545;&#31995;&#32479;&#36164;&#28304;&#36896;&#25104;&#20102;&#28010;&#36153;&#65288;&#19981;&#21333;&#25351;fd&#31354;&#38388;&#65292;&#20687;mysql&#30340;&#27599;&#36830;&#25509;&#19968;&#32447;&#31243;&#20250;&#38468;&#24102;&#22823;&#37327;&#20869;&#23384;&#31354;&#38388;&#65306;sort_buffer&#12289;read_buffer&#31561;&#65289;&#65292;&#32780;&#19988;&#25972;&#20010;&#31995;&#32479;&#23558;&#26080;&#27861;&#27178;&#21521;&#25193;&#23637;&#65288;&#22914;&#65306;mysql&#36830;&#25509;&#25968;&#38480;&#21046;&#65289;&#12290;&#22914;&#26524;&#21487;&#20197;&#22312;&#36827;&#31243;&#38388;&#20849;&#20139;&#25991;&#20214;&#25551;&#36848;&#31526;&#65292;&#23558;&#21487;&#20197;&#22823;&#22823;&#25552;&#21319;&#31995;&#32479;&#24615;&#33021;&#65292;&#20419;&#36827;&#22810;&#36827;&#31243;&#27169;&#22411;&#30340;&#24212;&#29992;&#12290;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2" class="outline-3"&gt;
&lt;h3 id="sec-2"&gt;&#26041;&#26696;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2"&gt;

&lt;p&gt;   &#22312;linux&#24179;&#21488;&#19979;&#65292;sendmsg&#12289;recvmsg&#21487;&#20197;&#23558;&#19968;&#20010;&#36827;&#31243;&#30340;&#25991;&#20214;&#25551;&#36848;&#31526;&#20256;&#36882;&#32473;&#21478;&#19968;&#36827;&#31243;&#20351;&#29992;&#65292;&#36825;&#20351;&#24471;&#23454;&#29616;&#31995;&#32479;&#32423;&#30340;&#36830;&#25509;&#27744;&#25104;&#20026;&#21487;&#33021;&#12290;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3" class="outline-3"&gt;
&lt;h3 id="sec-3"&gt;&#23454;&#29616;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3"&gt;

&lt;p&gt;   &#12298;The Linux Programming Interface&#12299;61.13.3 Passing File Descriptors
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title type="html">Web模型初探</title><author><name>nil</name></author><link href="http://blog.kankanan.com/posts/2013/02/28_web6a21578b521d63a2.html"/><updated>2013-02-28T15:07:00Z</updated><published>2013-02-28T15:07:00Z</published><id>posts/2013/02/28_web6a21578b521d63a2.html</id><category scheme="/tags/web.html" term="web" label="web"/><content type="html">&lt;ul&gt;
&lt;li&gt;&#24615;&#33021; *
     &#36827;&#31243;&#32423;&#65292;&#27599;&#35831;&#27714;&#19968;&#36827;&#31243;&#12290;&#36827;&#31243;&#21019;&#24314;&#26377;&#24456;&#22823;&#30340;&#24320;&#38144;&#65292;&#24182;&#21457;&#25968;&#19982;&#31995;&#32479;&#36164;&#28304;&#28040;&#32791;&#21576;&#32447;&#24615;&#22686;&#38271;&#65292;&#26377;&#38480;&#30340;&#31995;&#32479;&#36164;&#28304;&#25104;&#20026;&#29942;&#39048;&#12290;
&lt;/li&gt;
&lt;/ul&gt;



&lt;div id="outline-container-1" class="outline-3"&gt;
&lt;h3 id="sec-1"&gt;FastCGI&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1"&gt;

&lt;p&gt;   &#20026;CGI&#30340;&#25913;&#33391;&#65292;CGI&#31243;&#24207;&#20570;&#20026;&#29420;&#31435;&#30340;&#32593;&#32476;&#21518;&#21488;&#31243;&#24207;&#36816;&#34892;&#65292;&#24403;Web&#26381;&#21153;&#22120;&#25910;&#21040;&#19968;&#20010;&#35831;&#27714;&#26102;&#65292;&#21457;&#36215;&#19968;&#20010;tcp&#35831;&#27714;&#21040;&#22788;&#29702;&#31243;&#24207;&#65292;&#36890;&#36807;&#35813;tcp&#36830;&#25509;&#20256;&#20837;&#30456;&#20851;&#21442;&#25968;&#65292;&#22788;&#29702;&#31243;&#24207;&#30340;&#21709;&#24212;&#20063;&#36890;&#36807;&#35813;tcp&#36830;&#25509;&#21457;&#22238;&#32473;Web&#26381;&#21153;&#22120;&#65292;&#22788;&#29702;&#31243;&#24207;&#20851;&#38381;&#35813;&#36830;&#25509;&#34920;&#31034;&#22788;&#29702;&#23436;&#27605;&#65292;Web&#26381;&#21153;&#22120;&#26368;&#32456;&#23558;&#21709;&#24212;&#21457;&#36865;&#32473;&#23458;&#25143;&#31471;&#12290;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&#24615;&#33021; **
     &#32593;&#32476;&#32423;&#65292;&#27599;&#35831;&#27714;&#19968;&#36830;&#25509;&#12290;CGI&#30340;&#25913;&#33391;&#65292;&#37325;&#29992;&#36827;&#31243;&#65292;&#36827;&#31243;&#22788;&#29702;&#23436;&#19968;&#20010;&#35831;&#27714;&#21518;&#20877;&#22788;&#29702;&#19979;&#19968;&#35831;&#27714;&#65292;&#23545;&#20110;&#22810;&#20010;&#35831;&#27714;&#65292;&#21482;&#38656;&#35201;&#20184;&#20986;&#19968;&#27425;&#36827;&#31243;&#21019;&#24314;&#30340;&#24320;&#38144;&#65292;&#21487;&#20197;&#22312;&#21518;&#32487;&#35831;&#27714;&#37325;&#29992;&#36164;&#28304;&#65288;&#20174;&#25991;&#20214;&#36733;&#20837;&#30340;&#37197;&#32622;&#39033;&#12289;&#26597;&#35810;&#21040;&#30340;&#25968;&#25454;&#12289;&#25171;&#24320;&#30340;&#25991;&#20214;&#12289;&#25968;&#25454;&#24211;&#36830;&#25509;&#31561;&#65289;&#12290;&#22240;&#20026;&#22788;&#29702;&#31243;&#24207;&#26159;&#20018;&#34892;&#22788;&#29702;&#35831;&#27714;&#65292;&#24448;&#24448;&#38656;&#35201;&#21516;&#26102;&#36816;&#34892;&#22810;&#20010;&#22788;&#29702;&#31243;&#24207;&#20197;&#25552;&#21319;&#24182;&#21457;&#22788;&#29702;&#33021;&#21147;&#65292;&#36825;&#20123;&#22788;&#29702;&#31243;&#24207;&#26080;&#27861;&#20849;&#20139;&#36164;&#28304;&#20197;&#36827;&#19968;&#27493;&#25552;&#21319;&#24615;&#33021;&#12290;

&lt;/li&gt;
&lt;li&gt;&#38468;&#24405;
     Web&#26381;&#21153;&#22120;&#21487;&#37325;&#29992;&#21040;&#26381;&#21153;&#31243;&#24207;&#30340;&#36830;&#25509;&#36827;&#19968;&#27493;&#25552;&#21319;&#24615;&#33021;&#65288;&#22914;&#65306;nginx&#30340;&lt;a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive"&gt;upstream_keepalive&lt;/a&gt;&#65289;&#12290;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2" class="outline-3"&gt;
&lt;h3 id="sec-2"&gt;WSGI&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2"&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3" class="outline-3"&gt;
&lt;h3 id="sec-3"&gt;uWSGI&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3"&gt;

&lt;/div&gt;
&lt;/div&gt;
</content></entry>
</feed>
