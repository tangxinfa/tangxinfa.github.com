<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>grpc - tangxinfa&apos;s blog</title>
        <link>http://tangxinfa.github.io/tag/grpc.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Fri, 30 Oct 2020 05:13:24 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>grpc - tangxinfa&apos;s blog</title>
            <url>http://tangxinfa.github.io/static/favicon.ico</url>
            <link>http://tangxinfa.github.io/tag/grpc.xml</link>
        </image>
        <copyright>版权所有 © 2011-2020 tangxinfa</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[golang gRPC 负载均衡方案]]></title>
            <link>/article/golang-grpc-8d1f8f7d5747886165b96848.html</link>
            <guid>/article/golang-grpc-8d1f8f7d5747886165b96848.html</guid>
            <pubDate>Mon, 14 Sep 2020 08:57:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org205254e" class="outline-2">
<h2 id="org205254e">服务器端负载均衡选项： <code>MaxConnectionAge</code></h2>
<div class="outline-text-2" id="text-org205254e">
<p>
默认情况下，gRPC 客户端与服务器间存在一条 HTTP/2 长连接，当服务器端添加了新结点时，客户端是无感知的，新上线的结点将不会有请求进来。 <code>MaxConnectionAge</code> 指定长连接的存活时间，当客户端检测到 gRPC 长连接断开时，会解析服务器域名，重新建立连接，从而为负载均衡提供了基础。
</p>

<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc/keepalive"</span>
server = grpc.<span style="color: #00578E; font-weight: bold;">NewServer</span>(
    grpc.<span style="color: #00578E; font-weight: bold;">KeepaliveParams</span>(<span style="color: #2F8B58; font-weight: bold;">keepalive.ServerParameters</span>{<span style="color: #F5666D;">MaxConnectionAge</span>: 2 * time.Minute}),
)
</pre>
</div>
</div>
</div>

<div id="outline-container-org932f51d" class="outline-2">
<h2 id="org932f51d">客户端负载均衡器： <code>Pick First</code></h2>
<div class="outline-text-2" id="text-org932f51d">
<p>
适用于终端用户与服务间通信，由于存在大量终端用户，服务器端的负载均衡不成问题。
</p>


<div class="figure">
<p><img src="../static/grpc_lb_pick_first.png" alt="grpc_lb_pick_first.png" />
</p>
</div>

<p>
<code>Pick First</code> 是 golang gRPC 默认的负载均衡器，采用 "一服务一连接" 模型，客户端与服务间只有一条长连接。
</p>

<p>
它从服务器域名解析出 IP 列表后，依次尝试建立一条长连接，直到成功为止，当长连接断开时，重复以上过程。
</p>

<p>
客户端通过 <code>服务器域名</code> 建立 gRPC 连接来启用 <code>Pick First</code> 负载均衡器。
</p>

<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> pb <span style="color: #4E9A06;">"google.golang.org/grpc/examples/helloworld/helloworld"</span>
<span style="color: #0084C8; font-weight: bold;">conn</span>, <span style="color: #0084C8; font-weight: bold;">err</span> := grpc.<span style="color: #00578E; font-weight: bold;">Dial</span>(
    <span style="color: #4E9A06;">"greeter_server"</span>,
    grpc.<span style="color: #00578E; font-weight: bold;">WithInsecure</span>(),
)
<span style="color: #0084C8; font-weight: bold;">c</span> := pb.<span style="color: #00578E; font-weight: bold;">NewGreeterClient</span>(conn)
</pre>
</div>
</div>
</div>

<div id="outline-container-org828c337" class="outline-2">
<h2 id="org828c337">客户端负载均衡器： <code>Round Robin</code></h2>
<div class="outline-text-2" id="text-org828c337">
<p>
适用于内部服务间通信，在 K8S 中配合 <a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services">Headless Services</a> 非常容易部署。
</p>


<div class="figure">
<p><img src="../static/grpc_lb_round_robin.png" alt="grpc_lb_round_robin.png" />
</p>
</div>

<p>
<code>Round Robin</code> 是 golang gRPC 内置支持的负载均衡器，采用 "一服务器 IP 一连接" 模型，客户端与服务器的每一个 IP 间都有一条长连接。
</p>

<p>
它从服务器域名解析出 IP 列表后，对每一个 IP 确保存在一条长连接，当有长连接断开时，重复以上过程。
</p>

<p>
客户端通过 "dns:///服务器域名" 建立 gRPC 连接并指定 "roundrobin" 启用 <code>Round Robin</code> 负载均衡器。
</p>

<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc/balancer/roundrobin"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> pb <span style="color: #4E9A06;">"google.golang.org/grpc/examples/helloworld/helloworld"</span>
<span style="color: #0084C8; font-weight: bold;">conn</span>, <span style="color: #0084C8; font-weight: bold;">err</span> := grpc.<span style="color: #00578E; font-weight: bold;">Dial</span>(
    <span style="color: #4E9A06;">"dns:///greeter_server"</span>,
    grpc.<span style="color: #00578E; font-weight: bold;">WithInsecure</span>(),
    grpc.<span style="color: #00578E; font-weight: bold;">WithBalancerName</span>(roundrobin.Name),
)
<span style="color: #0084C8; font-weight: bold;">c</span> := pb.<span style="color: #00578E; font-weight: bold;">NewGreeterClient</span>(conn)
</pre>
</div>
</div>
</div>

<div id="outline-container-orga4ea548" class="outline-2">
<h2 id="orga4ea548">客户端负载均衡器： <code>Pool</code></h2>
<div class="outline-text-2" id="text-orga4ea548">
<p>
适用于外部服务间通信，在 K8S 中以 SLB 方式暴露的服务对外表现为一个 IP，此时采用连接池可以确保负载均衡。
</p>


<div class="figure">
<p><img src="../static/grpc_lb_pool.png" alt="grpc_lb_pool.png" />
</p>
</div>

<p>
最新的 go-grpc 库（v1.28+）提供了 <code>ClientConnInterface</code> 接口，通过该接口可以很方便地实现 gRPC 连接池，参考 <a href="https://github.com/googleapis/google-api-go-client/blob/master/transport/grpc/dial.go">googleapis</a> 。
</p>

<p>
采用 "一服务器 IP N 连接" 模型，客户端与服务器的每一个 IP 间都有 N 条长连接，各连接间的负载均衡采用 <code>Round Robin</code> 算法。
</p>

<p>
它从服务器域名解析出 IP 列表后，对每一个 IP 确保存在 N 条长连接，当有长连接断开时，重复以上过程。
</p>

<p>
<code>conn_pool.go</code>
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">package</span> main

<span style="color: #A52A2A; font-weight: bold;">import</span> (
    <span style="color: #4E9A06;">"sync/atomic"</span>

    <span style="color: #4E9A06;">"golang.org/x/net/context"</span>
    <span style="color: #4E9A06;">"google.golang.org/grpc"</span>
    <span style="color: #4E9A06;">"google.golang.org/grpc/balancer/roundrobin"</span>
)

<span style="color: #A52A2A; font-weight: bold;">type</span> <span style="color: #2F8B58; font-weight: bold;">ConnPool</span> <span style="color: #A52A2A; font-weight: bold;">struct</span> {
    conns []*<span style="color: #2F8B58; font-weight: bold;">grpc.ClientConn</span>
    idx   <span style="color: #2F8B58; font-weight: bold;">uint32</span>
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">Num</span>() <span style="color: #2F8B58; font-weight: bold;">int</span> {
    <span style="color: #A52A2A; font-weight: bold;">return</span> <span style="color: #A020F0;">len</span>(p.conns)
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">Conn</span>() *<span style="color: #2F8B58; font-weight: bold;">grpc.ClientConn</span> {
    <span style="color: #0084C8; font-weight: bold;">i</span> := atomic.<span style="color: #00578E; font-weight: bold;">AddUint32</span>(&amp;p.idx, 1)
    <span style="color: #A52A2A; font-weight: bold;">return</span> p.conns[i%<span style="color: #00578E; font-weight: bold;">uint32</span>(<span style="color: #A020F0;">len</span>(p.conns))]
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">Close</span>() <span style="color: #2F8B58; font-weight: bold;">error</span> {
    <span style="color: #A52A2A; font-weight: bold;">var</span> <span style="color: #0084C8; font-weight: bold;">firstError</span> <span style="color: #2F8B58; font-weight: bold;">error</span>
    <span style="color: #A52A2A; font-weight: bold;">for</span> <span style="color: #0084C8; font-weight: bold;">_</span>, <span style="color: #0084C8; font-weight: bold;">conn</span> := <span style="color: #A52A2A; font-weight: bold;">range</span> p.conns {
        <span style="color: #A52A2A; font-weight: bold;">if</span> <span style="color: #0084C8; font-weight: bold;">err</span> := conn.<span style="color: #00578E; font-weight: bold;">Close</span>(); err != <span style="color: #F5666D;">nil</span> {
            <span style="color: #A52A2A; font-weight: bold;">if</span> firstError != <span style="color: #F5666D;">nil</span> {
                firstError = err
            }
        }
    }
    <span style="color: #A52A2A; font-weight: bold;">return</span> firstError
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">Invoke</span>(<span style="color: #0084C8; font-weight: bold;">ctx</span> <span style="color: #2F8B58; font-weight: bold;">context.Context</span>, <span style="color: #0084C8; font-weight: bold;">method</span> <span style="color: #2F8B58; font-weight: bold;">string</span>, <span style="color: #0084C8; font-weight: bold;">args</span> <span style="color: #A52A2A; font-weight: bold;">interface</span>{}, <span style="color: #0084C8; font-weight: bold;">reply</span> <span style="color: #A52A2A; font-weight: bold;">interface</span>{}, <span style="color: #0084C8; font-weight: bold;">opts</span> ...<span style="color: #2F8B58; font-weight: bold;">grpc.CallOption</span>) <span style="color: #2F8B58; font-weight: bold;">error</span> {
    <span style="color: #A52A2A; font-weight: bold;">return</span> p.<span style="color: #00578E; font-weight: bold;">Conn</span>().<span style="color: #00578E; font-weight: bold;">Invoke</span>(ctx, method, args, reply, opts...)
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">NewStream</span>(<span style="color: #0084C8; font-weight: bold;">ctx</span> <span style="color: #2F8B58; font-weight: bold;">context.Context</span>, <span style="color: #0084C8; font-weight: bold;">desc</span> *<span style="color: #2F8B58; font-weight: bold;">grpc.StreamDesc</span>, <span style="color: #0084C8; font-weight: bold;">method</span> <span style="color: #2F8B58; font-weight: bold;">string</span>, <span style="color: #0084C8; font-weight: bold;">opts</span> ...<span style="color: #2F8B58; font-weight: bold;">grpc.CallOption</span>) (<span style="color: #2F8B58; font-weight: bold;">grpc.ClientStream</span>, <span style="color: #2F8B58; font-weight: bold;">error</span>) {
    <span style="color: #A52A2A; font-weight: bold;">return</span> p.<span style="color: #00578E; font-weight: bold;">Conn</span>().<span style="color: #00578E; font-weight: bold;">NewStream</span>(ctx, desc, method, opts...)
}

<span style="color: #A52A2A; font-weight: bold;">func</span> <span style="color: #00578E; font-weight: bold;">NewConnPool</span>(<span style="color: #0084C8; font-weight: bold;">ctx</span> <span style="color: #2F8B58; font-weight: bold;">context.Context</span>, <span style="color: #0084C8; font-weight: bold;">address</span> <span style="color: #2F8B58; font-weight: bold;">string</span>, <span style="color: #0084C8; font-weight: bold;">poolSize</span> <span style="color: #2F8B58; font-weight: bold;">int</span>) (*<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>, <span style="color: #2F8B58; font-weight: bold;">error</span>) {
    <span style="color: #0084C8; font-weight: bold;">pool</span> := &amp;<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>{}
    <span style="color: #A52A2A; font-weight: bold;">for</span> <span style="color: #0084C8; font-weight: bold;">i</span> := 0; i &lt; poolSize; i++ {
        <span style="color: #0084C8; font-weight: bold;">conn</span>, <span style="color: #0084C8; font-weight: bold;">err</span> := grpc.<span style="color: #00578E; font-weight: bold;">Dial</span>(
            address,
            grpc.<span style="color: #00578E; font-weight: bold;">WithInsecure</span>(),
            grpc.<span style="color: #00578E; font-weight: bold;">WithBalancerName</span>(roundrobin.Name),
        )
        <span style="color: #A52A2A; font-weight: bold;">if</span> err != <span style="color: #F5666D;">nil</span> {
            <span style="color: #A52A2A; font-weight: bold;">defer</span> pool.<span style="color: #00578E; font-weight: bold;">Close</span>() <span style="color: #204A87;">// </span><span style="color: #d0bf8f;">NOTE</span><span style="color: #204A87;">: error from Close is ignored.</span>
            <span style="color: #A52A2A; font-weight: bold;">return</span> <span style="color: #F5666D;">nil</span>, err
        }
        pool.conns = <span style="color: #A020F0;">append</span>(pool.conns, conn)
    }
    <span style="color: #A52A2A; font-weight: bold;">return</span> pool, <span style="color: #F5666D;">nil</span>
}
</pre>
</div>

<p>
使用连接池
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"golang.org/x/net/context"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> pb <span style="color: #4E9A06;">"google.golang.org/grpc/examples/helloworld/helloworld"</span>
<span style="color: #0084C8; font-weight: bold;">conn</span>, <span style="color: #0084C8; font-weight: bold;">err</span> := <span style="color: #00578E; font-weight: bold;">NewConnPool</span>(
    context.<span style="color: #00578E; font-weight: bold;">Background</span>(),
    <span style="color: #4E9A06;">"dns:///greeter_server"</span>,
    10,
)
<span style="color: #0084C8; font-weight: bold;">c</span> := pb.<span style="color: #00578E; font-weight: bold;">NewGreeterClient</span>(conn)
</pre>
</div>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 下 Go gRPC 编译环境搭建]]></title>
            <link>/article/centos-4e0b-go-grpc-7f168bd173af5883642d5efa.html</link>
            <guid>/article/centos-4e0b-go-grpc-7f168bd173af5883642d5efa.html</guid>
            <pubDate>Tue, 12 Dec 2017 11:28:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
安装 <code>protobuf</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">git clone https://github.com/google/protobuf.git
<span style="color: #A020F0;">cd</span> protobuf
git checkout v3.4.1 -b v3.4.1
./autogen.sh
./configure
make
make install
</pre>
</div></li>

<li><p>
安装 <code>protobuf go 插件</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
</pre>
</div>

<p>
在 <code>~/.profile</code> 中将 <code>protoc-gen-go</code> 所在路径加到 <code>PATH</code> 环境变量中
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">PATH</span>=<span style="color: #4E9A06;">"`go env GOPATH`/bin:$PATH"</span>
</pre>
</div>

<p>
最新版本的 <code>protoc-gen-go</code> 默认生成的 protobuf 4.x 的代码，我们的项目目前还是使用 protobuf 3.x，这会导致生成的代码无法通过编译，错误信息
</p>
<pre class="example">
xxx.pb.go:2799:21: c.cc.NewStream undefined (type *grpc.ClientConn has no field or method NewStream)
xxx.pb.go:2831:13: c.cc.Invoke undefined (type *grpc.ClientConn has no field or method Invoke)
</pre>

<p>
需要改回生成 protobuf 3.x 的代码，修改
<code>github.com/golang/protobuf/protoc-gen-go/grpc/grpc.go</code>
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #F5666D;">generatedCodeVersion</span> = 4
</pre>
</div>
<p>
改为 
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #F5666D;">generatedCodeVersion</span> = 3
</pre>
</div>

<p>
重新编译安装 <code>protoc-gen-go</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">cd</span> github.com/golang/protobuf
make install
</pre>
</div></li>

<li><p>
参考
</p>

<p>
<a href="http://www.jianshu.com/p/e2435b834d68">golang开发环境搭建-安装go 和 grpc - 简书</a>
</p>

<p>
<a href="https://github.com/golang/protobuf/issues/264">grpc version conflict · Issue #264 · golang/protobuf</a>
</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在浏览器中访问 gRPC 消息推送服务的一些思索]]></title>
            <link>/article/57286d4f89c856684e2d8bbf95ee-grpc-6d88606f63a89001670d52a176844e004e9b601d7d22.html</link>
            <guid>/article/57286d4f89c856684e2d8bbf95ee-grpc-6d88606f63a89001670d52a176844e004e9b601d7d22.html</guid>
            <pubDate>Thu, 26 Oct 2017 09:13:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
gRPC 数据编码采用 Protobuf、底层传输协议使用了 HTTP/2，支持双向流（ <code>Bidirectional streaming</code> ）接口，用来开发消息推送服务的再完美不过。
</p>

<p>
由于 gRPC 的实现需要访问 HTTP/2 的底层细节（如： Trailers），而这些实现细节浏览器上是无法访问到的，因此也就注定了无法在浏览器上直接进行调用 gRPC。
</p>

<p>
HTTP/2 在 2015 年底开始被广泛支持（参考 <a href="https://zh.wikipedia.org/wiki/HTTP/2">HTTP/2 - 维基百科，自由的百科全书</a>），另一个流行的消息推送技术 WebSocket 在 2013 年底开始被广泛支持（参考 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API#Browser_compatibility">WebSockets - Web APIs | MDN</a>）。从 <a href="http://caniuse.com/#search=HTTP2">HTTP/2支持情况</a> 页面可以看到 IE11 以下都不支持，从 <a href="http://caniuse.com/#search=WebSocket">WebSocket支持情况</a> 页面可以看到 IE11 以下及 Android 4.4 以下都不支持。相对来讲 WebSocket 更成熟，而且由于 <a href="https://socket.io/">socket.io</a> 的存在，即使在旧浏览器上也能提供服务。
</p>

<p>
现在的情况下，最好是开发一个 <a href="https://socket.io/">socket.io</a> 代理供浏览器访问 gRPC 服务，一个 WebSocket 连接可以很方便地映射到一个 gRPC 双向流（ Bidirectional streaming）接口。
</p>


<p>
下面是方案调研时接触的一些相关开源项目，供参考。
</p>

<div id="outline-container-org4dbaff8" class="outline-2">
<h2 id="org4dbaff8"><a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a></h2>
<div class="outline-text-2" id="text-org4dbaff8">
<blockquote>
<p>
grpc-gateway is a plugin of protoc. It reads gRPC service definition, and generates a reverse-proxy server which translates a RESTful JSON API into gRPC. This server is generated according to custom options in your gRPC definition.
</p>
</blockquote>

<p>
grpc-gateway 为 Grpc 服务生成 HTTP/1.1 JSON RESTful 反向代理服务，使得 Grpc 服务可以被不方便采用 Grpc 的客户端访问。
</p>

<ul class="org-ul">
<li><p>
存在的问题
</p>

<p>
不支持双向流（Bidirectional streaming）
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org5b1207f" class="outline-2">
<h2 id="org5b1207f"><a href="https://github.com/tmc/grpc-websocket-proxy">grpc-websocket-proxy</a></h2>
<div class="outline-text-2" id="text-org5b1207f">
<blockquote>
<p>
A proxy to transparently upgrade grpc-gateway streaming endpoints to use websockets
</p>
</blockquote>

<p>
<a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a> 的 WebSocket 代理，进行了多次协议转换：
</p>

<pre class="example">
WebSocket &lt;-&gt; HTTP/1.1 &lt;-&gt; gRPC
</pre>

<p>
在收到 WebSocket 连接后，会创建一个 HTTP/1.1 客户端，与 <a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a> 进行对接。
</p>

<p>
根据示例 Protobuf 协议文件中的描述，貌似支持 <code>Bidirectional streaming</code> ，但是 <a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a> 的 README 中明确声明了不打算支持 <code>True bi-directional streaming</code> ，理论上只要是基于 HTTP/1.1，就不可能实现  <code>Bidirectional streaming</code> 。
</p>

<p>
这个方案的一个优点就是 proxy 代码是根据 proto 定义自动生成的，开发效率超高。
</p>

<p>
然而运行效率低下，特别是维护大量长连接的消息推送应用，连接数要翻倍。
</p>
</div>
</div>

<div id="outline-container-orgfc230d3" class="outline-2">
<h2 id="orgfc230d3"><a href="https://socket.io/">socket.io</a></h2>
<div class="outline-text-2" id="text-orgfc230d3">
<blockquote>
<p>
Socket.IO enables real-time bidirectional event-based communication.
It works on every platform, browser or device, focusing equally on reliability and speed. 
</p>
</blockquote>

<p>
<code>node.js</code> 下的实时双向通讯方案，优先使用 <code>websocket</code> 做为传输层，使用其它传输方式做为备选：ajax、jsonp 轮询，flash。
</p>

<p>
<a href="https://socket.io/">socket.io</a> 本身已经进化成了一种规范，有各种语言下的实现。
</p>

<p>
go 语言实现 <a href="https://github.com/googollee/go-socket.io">go-socket.io</a> ，这个项目 README 中建议使用 v1.4 版本，实际使用时发现浏览器直接关闭时服务器未能检测客户端离线，未转化成 "Disconnect" 事件，使用 master 分支则没有这个问题：
</p>

<div class="org-src-container">
<pre class="src src-sh">go get github.com/googollee/go-socket.io
</pre>
</div>

<p>
go 的 socket.io 实现没有官方支持，很不完善，<a href="https://github.com/googollee/go-socket.io">go-socket.io</a> 只有服务器端实现，已经很久没有更新了，而 go 的 socket.io 客户端实现就更不靠谱了，实际使用时很多问题，直接使用 websocket 会更靠谱一些。
</p>
</div>
</div>

<div id="outline-container-org7074006" class="outline-2">
<h2 id="org7074006"><a href="https://lyft.github.io/envoy/">envoy</a></h2>
<div class="outline-text-2" id="text-org7074006">
<p>
<a href="https://lyft.github.io/envoy/">envoy</a> 有一些插件完成了部分功能：
</p>

<ul class="org-ul">
<li><p>
<a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_http1_bridge_filter.html">gRPC HTTP/1.1 bridge</a>
</p>

<p>
实现了通过 HTTP/1.1 协议调用 gRPC（HTTP/2） 的功能。
</p>

<p>
采用和 gRPC 一致的数据编码方式（Protobuf 二进制数据），只支持 <code>unary gRPC API</code> 。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
<a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_json_transcoder_filter.html">gRPC-JSON transcoder filter</a>
</p>

<p>
支持 gRPC 的 <code>Server streaming</code> 和 <code>Client streaming</code> ，Envoy 将流式请求及响应缓存起来了，所以实时性较差；不支持 <code>Bidirectional streaming</code> 。
</p>

<p>
由于客户端是通过 HTTP/1.1 进行访问，所以不支持真正的 streaming。
</p>

<p>
详见 <a href="http://tangxinfa.github.io/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html">Envoy 的 json_transcoder_filter 介绍</a>
</p>

<p>
要在 Envoy 中实现 Websocket 访问 gRPC 可以参考 <a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_json_transcoder_filter.html">gRPC-JSON transcoder filter</a> 。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
<a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_web_filter.html">gRPC-Web filter</a>
</p>

<p>
基于 <a href="https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md">gRPC Web</a> 协议的实现，跟原始的 gRPC 协议基本一致，通过去除对 HTTP/2 底层（如 frame）的依赖，使得在浏览器上调用 gRPC 成为可能。
</p>

<p>
当前不支持 <code>Bidirectional Streaming</code> ，以后在最新的浏览器中可能支持。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
<a href="https://envoyproxy.github.io/envoy/intro/arch_overview/websocket.html?highlight=websocket">WebSocket support</a>
</p>

<p>
支持接入 WebSocket，会建立一条到 Upstream 的 TCP 连接，Upstream 服务需要是一个完整的 WebSocket 服务器，相当于是一个 WebSocket 的透明代理。
</p>

<p>
由于客户端发起的 WebSocket 连接与到 Upstream 的连接（TCP）是 <code>1:1</code> 的关系，可扩展性较差。
</p></li>
</ul>


<p>
Envoy 中编写插件支持 WebSocket 到 gRPC 的协议转换（支持 <code>Bidirectional streaming</code> ）理论上是可以实现的，不过难度会比较高，需要对 Envoy 的实现非常了解。初步看了一下 envoy 的相关代码，表面上代码层次分明，但是实际上却是错综复杂，大量使用继承，上下层会互相调用，由于大量采用回调函数，逻辑不好理解。
</p>
</div>
</div>


<div id="outline-container-org10a1535" class="outline-2">
<h2 id="org10a1535">nginx</h2>
<div class="outline-text-2" id="text-org10a1535">
<p>
与 envoy 的 <a href="https://envoyproxy.github.io/envoy/intro/arch_overview/websocket.html?highlight=websocket">WebSocket support</a> 相似，支持接入 WebSocket，会建立一条到 Upstream 的 TCP 连接，Upstream 服务需要是一个完整的 WebSocket 服务器，相当于是一个 WebSocket 的透明代理，由于客户端发起的 WebSocket 连接与到 Upstream 的连接（通过 proxy_pass 指令）是 <code>1:1</code> 的关系，连接数倍增，参考 <a href="https://www.nginx.com/blog/http2-module-nginx/#QandAnginx">https://www.nginx.com/blog/http2-module-nginx/#QandAnginx</a> 。
</p>

<ul class="org-ul">
<li><p>
<a href="https://github.com/slact/nchan">Nchan</a>
</p>

<blockquote>
<p>
Fast, horizontally scalable, multiprocess pub/sub queuing server and proxy for HTTP, long-polling, Websockets and EventSource (SSE), powered by Nginx.
</p>
</blockquote>

<p>
是 Nginx 的一个插件，支持各种接入方式，是搭建消息推送系统的一种很好的选择。通过回调（HTTP/1.1 Restful）与业务系统集成在一起，使得业务系统不需要关心客户端接入细节。</p></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Envoy 的 json_transcoder_filter 介绍]]></title>
            <link>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</link>
            <guid>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</guid>
            <pubDate>Thu, 12 Oct 2017 11:56:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
json_transcoder_filter 实现 HTTP/1.1+JSON 与 HTTP/2+GRPC 的互转。
</p>

<p>
使用第三方库 <a href="https://github.com/grpc-ecosystem/grpc-httpjson-transcoding">grpc-httpjson-transcoding</a> 完成 json 与 grpc 的协议转换，转换规则由 <a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 定义。
</p>

<p>
<a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 通过注解（Annotations）为 GRPC 接口添加 RESTful HTTP 接口映射。
</p>

<p>
<code>json_transcoder_filter</code> 对 stream 有一定支持，由于它是基于 HTTP/1.1，本质上是请求-响应模型，只支持 GRPC 的 <code>Server streaming</code> 和 <code>Client streaming</code> ，不支持 <code>Bidirectional streaming</code> ，它将 GRPC 消息流映射为消息数组（Json array）。
</p>

<div id="outline-container-org309a9f5" class="outline-2">
<h2 id="org309a9f5">示例项目</h2>
<div class="outline-text-2" id="text-org309a9f5">
<p>
Envoy 带了一个 <a href="https://github.com/envoyproxy/envoy/tree/master/examples/grpc-bridge">grpc-bridge 示例项目</a>，依照它做了一个 grpc_json_transcoder 示例项目：
</p>

<ul class="org-ul">
<li><a href="https://github.com/tangxinfa/grpc_json_transcoder_example">tangxinfa/grpc_json_transcoder_example: Envoy grpc_json_transcoder filter example</a></li>
</ul>
</div>
</div>

<div id="outline-container-org22d4843" class="outline-2">
<h2 id="org22d4843">参考</h2>
<div class="outline-text-2" id="text-org22d4843">
<ul class="org-ul">
<li><a href="https://cloud.google.com/endpoints/docs/grpc/transcoding">Transcoding HTTP/JSON to gRPC  |  Cloud Endpoints with gRPC  |  Google Cloud Platform</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>