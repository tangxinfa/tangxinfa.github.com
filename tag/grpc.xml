<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>grpc - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/grpc.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Wed, 29 Nov 2017 16:40:58 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>grpc - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/grpc.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[在浏览器中访问 gRPC 消息推送服务的一些思索]]></title>
            <link>/article/57286d4f89c856684e2d8bbf95ee-grpc-6d88606f63a89001670d52a176844e004e9b601d7d22.html</link>
            <guid>/article/57286d4f89c856684e2d8bbf95ee-grpc-6d88606f63a89001670d52a176844e004e9b601d7d22.html</guid>
            <pubDate>Thu, 26 Oct 2017 09:13:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
gRPC 数据编码采用 Protobuf、底层传输协议使用了 HTTP/2，支持双向流（ <code>Bidirectional streaming</code> ）接口，用来开发消息推送服务的再完美不过。
</p>

<p>
由于 gRPC 的实现需要访问 HTTP/2 的底层细节（如： Trailers），而这些实现细节浏览器上是无法访问到的，因此也就注定了无法在浏览器上直接进行调用 gRPC。
</p>

<p>
HTTP/2 在 2015 年底开始被广泛支持（参考 <a href="https://zh.wikipedia.org/wiki/HTTP/2">HTTP/2 - 维基百科，自由的百科全书</a>），另一个流行的消息推送技术 WebSocket 在 2013 年底开始被广泛支持（参考 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API#Browser_compatibility">WebSockets - Web APIs | MDN</a>）。从 <a href="http://caniuse.com/#search=HTTP2">HTTP/2支持情况</a> 页面可以看到 IE11 以下都不支持，从 <a href="http://caniuse.com/#search=WebSocket">WebSocket支持情况</a> 页面可以看到 IE11 以下及 Android 4.4 以下都不支持。相对来讲 WebSocket 更成熟，而且由于 <a href="https://socket.io/">socket.io</a> 的存在，即使在旧浏览器上也能提供服务。
</p>

<p>
现在的情况下，最好是开发一个 <a href="https://socket.io/">socket.io</a> 代理供浏览器访问 gRPC 服务，一个 WebSocket 连接可以很方便地映射到一个 gRPC 双向流（ Bidirectional streaming）接口。
</p>


<p>
下面是方案调研时接触的一些相关开源项目，供参考。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a></h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
grpc-gateway is a plugin of protoc. It reads gRPC service definition, and generates a reverse-proxy server which translates a RESTful JSON API into gRPC. This server is generated according to custom options in your gRPC definition.
</p>
</blockquote>

<p>
grpc-gateway 为 Grpc 服务生成 HTTP/1.1 JSON RESTful 反向代理服务，使得 Grpc 服务可以被不方便采用 Grpc 的客户端访问。
</p>

<ul class="org-ul">
<li>存在的问题

<p>
不支持双向流（Bidirectional streaming）
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a href="https://github.com/tmc/grpc-websocket-proxy">grpc-websocket-proxy</a></h2>
<div class="outline-text-2" id="text-2">
<blockquote>
<p>
A proxy to transparently upgrade grpc-gateway streaming endpoints to use websockets
</p>
</blockquote>

<p>
<a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a> 的 WebSocket 代理，进行了多次协议转换：
</p>

<pre class="example">
WebSocket &lt;-&gt; HTTP/1.1 &lt;-&gt; gRPC
</pre>

<p>
在收到 WebSocket 连接后，会创建一个 HTTP/1.1 客户端，与 <a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a> 进行对接。
</p>

<p>
根据示例 Protobuf 协议文件中的描述，貌似支持 <code>Bidirectional streaming</code> ，但是 <a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a> 的 README 中明确声明了不打算支持 <code>True bi-directional streaming</code> ，理论上只要是基于 HTTP/1.1，就不可能实现  <code>Bidirectional streaming</code> 。
</p>

<p>
这个方案的一个优点就是 proxy 代码是根据 proto 定义自动生成的，开发效率超高。
</p>

<p>
然而运行效率低下，特别是维护大量长连接的消息推送应用，连接数要翻倍。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><a href="https://socket.io/">socket.io</a></h2>
<div class="outline-text-2" id="text-3">
<blockquote>
<p>
Socket.IO enables real-time bidirectional event-based communication.
It works on every platform, browser or device, focusing equally on reliability and speed. 
</p>
</blockquote>

<p>
<code>node.js</code> 下的实时双向通讯方案，优先使用 <code>websocket</code> 做为传输层，使用其它传输方式做为备选：ajax、jsonp 轮询，flash。
</p>

<p>
<a href="https://socket.io/">socket.io</a> 本身已经进化成了一种规范，有各种语言下的实现。
</p>

<p>
go 语言实现 <a href="https://github.com/googollee/go-socket.io">go-socket.io</a> ，这个项目 README 中建议使用 v1.4 版本，实际使用时发现浏览器直接关闭时服务器未能检测客户端离线，未转化成 "Disconnect" 事件，使用 master 分支则没有这个问题：
</p>

<div class="org-src-container">

<pre class="src src-sh">go get github.com/googollee/go-socket.io
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><a href="https://lyft.github.io/envoy/">envoy</a></h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="https://lyft.github.io/envoy/">envoy</a> 有一些插件完成了部分功能：
</p>

<ul class="org-ul">
<li><a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_http1_bridge_filter.html">gRPC HTTP/1.1 bridge</a>

<p>
实现了通过 HTTP/1.1 协议调用 gRPC（HTTP/2） 的功能。
</p>

<p>
采用和 gRPC 一致的数据编码方式（Protobuf 二进制数据），只支持 <code>unary gRPC API</code> 。
</p>
</li>
</ul>


<ul class="org-ul">
<li><a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_json_transcoder_filter.html">gRPC-JSON transcoder filter</a>

<p>
支持 gRPC 的 <code>Server streaming</code> 和 <code>Client streaming</code> ，Envoy 将流式请求及响应缓存起来了，所以实时性较差；不支持 <code>Bidirectional streaming</code> 。
</p>

<p>
由于客户端是通过 HTTP/1.1 进行访问，所以不支持真正的 streaming。
</p>

<p>
详见 <a href="http://blog.kankanan.com/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html">Envoy 的 json_transcoder_filter 介绍</a>
</p>

<p>
要在 Envoy 中实现 Websocket 访问 gRPC 可以参考 <a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_json_transcoder_filter.html">gRPC-JSON transcoder filter</a> 。
</p>
</li>
</ul>


<ul class="org-ul">
<li><a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_web_filter.html">gRPC-Web filter</a>

<p>
基于 <a href="https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md">gRPC Web</a> 协议的实现，跟原始的 gRPC 协议基本一致，通过去除对 HTTP/2 底层（如 frame）的依赖，使得在浏览器上调用 gRPC 成为可能。
</p>

<p>
当前不支持 Streaming，以后在最新的浏览器中可能支持。
</p>
</li>
</ul>


<ul class="org-ul">
<li><a href="https://envoyproxy.github.io/envoy/intro/arch_overview/websocket.html?highlight=websocket">WebSocket support</a>

<p>
支持接入 WebSocket，会建立一条到 Upstream 的 TCP 连接，Upstream 服务需要是一个完整的 WebSocket 服务器，
相当于是一个 WebSocket 的透明代理。
</p>

<p>
由于客户端发起的 WebSocket 连接与到 Upstream 的连接（TCP）是 <code>1:1</code> 的关系，可扩展性较差。
</p>
</li>
</ul>


<p>
Envoy 中编写插件支持 WebSocket 到 gRPC 的协议转换（支持 <code>Bidirectional streaming</code> ）理论上是可以实现的，不过难度会比较高，需要对 Envoy 的实现非常了解。初步看了一下 envoy 的相关代码，表面上代码层次分明，但是实际上却是错综复杂，大量使用继承，上下层会互相调用，由于大量采用回调函数，逻辑不好理解。
</p>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">nginx</h2>
<div class="outline-text-2" id="text-5">
<p>
与 envoy 的 <a href="https://envoyproxy.github.io/envoy/intro/arch_overview/websocket.html?highlight=websocket">WebSocket support</a> 相似，支持接入 WebSocket，会建立一条到 Upstream 的 TCP 连接，Upstream 服务需要是一个完整的 WebSocket 服务器，相当于是一个 WebSocket 的透明代理，由于客户端发起的 WebSocket 连接与到 Upstream 的连接（通过 proxy_pass 指令）是 <code>1:1</code> 的关系，连接数倍增，参考 <a href="https://www.nginx.com/blog/http2-module-nginx/#QandAnginx">https://www.nginx.com/blog/http2-module-nginx/#QandAnginx</a> 。
</p>

<ul class="org-ul">
<li><a href="https://github.com/slact/nchan">Nchan</a>

<blockquote>
<p>
Fast, horizontally scalable, multiprocess pub/sub queuing server and proxy for HTTP, long-polling, Websockets and EventSource (SSE), powered by Nginx.
</p>
</blockquote>

<p>
是 Nginx 的一个插件，支持各种接入方式，是搭建消息推送系统的一种很好的选择。
通过回调（HTTP/1.1 Restful）与业务系统集成在一起，使得业务系统不需要关心客户端接入细节。</p>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Envoy 的 json_transcoder_filter 介绍]]></title>
            <link>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</link>
            <guid>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</guid>
            <pubDate>Thu, 12 Oct 2017 11:56:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
json_transcoder_filter 实现 HTTP/1.1+JSON 与 HTTP/2+GRPC 的互转。
</p>

<p>
使用第三方库 <a href="https://github.com/grpc-ecosystem/grpc-httpjson-transcoding">grpc-httpjson-transcoding</a> 完成 json 与 grpc 的协议转换，
转换规则由 <a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 定义。
</p>

<p>
<a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 通过注解（Annotations）为 GRPC 接口添加 RESTful HTTP 接口映射。
</p>

<p>
<code>json_transcoder_filter</code> 对 stream 有一定支持，由于它是基于 HTTP/1.1，本质上是请求-响应模型，
只支持 GRPC 的 <code>Server streaming</code> 和 <code>Client streaming</code> ，不支持 <code>Bidirectional streaming</code> ，
它将 GRPC 消息流映射为消息数组（Json array）。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">示例项目</h2>
<div class="outline-text-2" id="text-1">
<p>
Envoy 带了一个 <a href="https://github.com/envoyproxy/envoy/tree/master/examples/grpc-bridge">grpc-bridge 示例项目</a>，依照它做了一个 grpc_json_transcoder 示例项目：
</p>

<ul class="org-ul">
<li><a href="https://github.com/tangxinfa/grpc_json_transcoder_example">tangxinfa/grpc_json_transcoder_example: Envoy grpc_json_transcoder filter example</a>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">参考</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="https://cloud.google.com/endpoints/docs/grpc/transcoding">Transcoding HTTP/JSON to gRPC  |  Cloud Endpoints with gRPC  |  Google Cloud Platform</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>