<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>linux - 看看俺 – KanKanAn.com</title>
        <description>记我所思，忆我所为。</description>
        <link>http://blog.kankanan.com/tag/linux.xml</link>
        <lastBuildDate>Thu, 17 Mar 2016 10:36:55 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <image>
            <title>linux - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/linux.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <generator>Feed for Node.js</generator>
        <category>技术</category>
        <item>
            <title><![CDATA[linux 系统时间同步]]></title>
            <link>/article/linux-7cfb7edf65f695f4540c6b65.html</link>
            <guid>/article/linux-7cfb7edf65f695f4540c6b65.html</guid>
            <pubDate>Thu, 10 Mar 2016 06:07:00 GMT</pubDate>
            <content:encoded><![CDATA[<dl class="org-dl">
<dt> ntp </dt><dd>Network Time Protocol，即网络时间同步协议。
</dd>
</dl>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">安装 ntp</h2>
<div class="outline-text-2" id="text-1">
<p>
ntpdate 和 ntpd 通常包含在 ntp 软件包里，但有的系统是单独打包。
</p>

<p>
ntpdate 命令用于直接同步时间。
</p>

<p>
ntpd 服务用于平滑同步时间。
</p>

<div class="org-src-container">

<pre class="src src-sh">yaourt -S ntp
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">使用 ntpdate 命令同步时间</h2>
<div class="outline-text-2" id="text-2">
<p>
ntpdate 命令用于强制性的将系统时间设置为 ntp 服务器时间，导致时钟跃变，可能会引起系统不稳定。
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">手工同步一次</h3>
<div class="outline-text-3" id="text-2-1">
<p>
带 -d 选项，调试运行，不修改本地时间
</p>
<pre class="example">
<span class="linenr"> 1: </span># ntpdate -d s1a.time.edu.cn
<span class="linenr"> 2: </span> 9 Mar 18:46:29 ntpdate[20537]: ntpdate 4.2.4p8@1.1612-o Fri Feb 22 11:23:28 UTC 2013 (1)
<span class="linenr"> 3: </span>Looking for host s1a.time.edu.cn and service ntp
<span class="linenr"> 4: </span>host found : 202.112.10.60
<span class="linenr"> 5: </span>transmit(202.112.10.60)
<span class="linenr"> 6: </span>receive(202.112.10.60)
<span class="linenr"> 7: </span>transmit(202.112.10.60)
<span class="linenr"> 8: </span>receive(202.112.10.60)
<span class="linenr"> 9: </span>transmit(202.112.10.60)
<span class="linenr">10: </span>receive(202.112.10.60)
<span class="linenr">11: </span>transmit(202.112.10.60)
<span class="linenr">12: </span>receive(202.112.10.60)
<span class="linenr">13: </span>transmit(202.112.10.60)
<span class="linenr">14: </span>server 202.112.10.60, port 123
<span class="linenr">15: </span>stratum 1, precision -20, leap 00, trust 000
<span class="linenr">16: </span>refid [PPS], delay 0.06285, dispersion 0.00003
<span class="linenr">17: </span>transmitted 4, in filter 4
<span class="linenr">18: </span>reference time:    da8a8b53.73391350  Wed, Mar  9 2016 19:45:23.450
<span class="linenr">19: </span>originate timestamp: da8a8b5c.3f42dc7c  Wed, Mar  9 2016 19:45:32.247
<span class="linenr">20: </span>transmit timestamp:  da8a7d86.32fde4c3  Wed, Mar  9 2016 18:46:30.199
<span class="linenr">21: </span>filter delay:  0.06323  0.06317  0.06299  0.06285 
<span class="linenr">22: </span>         0.00000  0.00000  0.00000  0.00000 
<span class="linenr">23: </span>filter offset: 3542.028 3542.028 3542.028 3542.028
<span class="linenr">24: </span>         0.000000 0.000000 0.000000 0.000000
<span class="linenr">25: </span>delay 0.06285, dispersion 0.00003
<span id="coderef-ntpdate_debug_offset" class="coderef-off"><span class="linenr">26: </span>offset 3542.028898</span>
<span class="linenr">27: </span>
<span class="linenr">28: </span> 9 Mar 18:46:30 ntpdate[20537]: step time server 202.112.10.60 offset 3542.028898 sec
</pre>

<dl class="org-dl">
<dt> 行 <a href="#coderef-ntpdate_debug_offset"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ntpdate_debug_offset');" onmouseout="CodeHighlightOff(this, 'coderef-ntpdate_debug_offset');">26</a>  </dt><dd>本机时间比时间服务器慢了 3542.028898 秒
</dd>
</dl>

<p>
不带 -d 选项，修改本地时间
</p>
<pre class="example">
# ntpdate s1a.time.edu.cn
ntpdate s1a.time.edu.cn
 9 Mar 19:51:51 ntpdate[20553]: step time server 202.112.10.60 offset 3542.052347 sec
</pre>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">定期自动同步时间</h3>
<div class="outline-text-3" id="text-2-2">
<p>
长时间运行的系统，会与标准时间产生偏差，通过 crontab 每日运行一次
</p>

<p>
<code>/etc/cron.daily/ntpdate</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

/usr/sbin/ntpdate s1a.time.edu.cn &gt;/dev/null 2&gt;&amp;1
</pre>
</div>

<p>
请记得为 <code>/etc/cron.daily/ntpdate</code> 添加可执行权限。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">使用 ntpd 服务同步时间</h2>
<div class="outline-text-2" id="text-3">
<dl class="org-dl">
<dt> ntpd </dt><dd>Network Time Protocol (NTP) Daemon
The ntpd program is an operating system daemon that synchronizes the system clock to remote NTP time servers or local reference clocks.
</dd>
</dl>


<p>
ntpd 服务的配置文件为 /etc/ntp.conf 。
</p>

<p>
ntpd 如果时间偏差过大（默认 1000 秒钟），ntpd 会输出错误到系统日志后退出，所以在服务启动前需要先同步好时间。
</p>

<p>
某嵌入式系统上的 ntpd 服务脚本：
</p>

<p>
<code>/etc/init.d/S49ntp</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">! /bin/</span><span style="color: #b5bd68;">sh</span>
<span style="color: #969896; font-style: italic;">#</span>
<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">System-V init script for the openntp daemon</span>
<span style="color: #969896; font-style: italic;">#</span>

<span style="color: #f0c674;">PATH</span>=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
<span style="color: #f0c674;">DESC</span>=<span style="color: #8abeb7;">"network time protocol daemon"</span>
<span style="color: #f0c674;">NAME</span>=ntpd
<span style="color: #f0c674;">DAEMON</span>=/usr/sbin/$<span style="color: #f0c674;">NAME</span>
<span style="color: #f0c674;">NTPDATE_BIN</span>=/usr/bin/ntpdate

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Gracefully exit if the package has been removed.</span>
<span style="color: #b294bb;">test</span> -x $<span style="color: #f0c674;">DAEMON</span> || <span style="color: #b5bd68;">exit</span> 0

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Read config file if it is present.</span>
<span style="color: #b5bd68;">if</span> [ -r /etc/default/$<span style="color: #f0c674;">NAME</span> ]
<span style="color: #b5bd68;">then</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b294bb;">.</span> /etc/default/$<span style="color: #f0c674;">NAME</span>
<span style="color: #b5bd68;">fi</span>

<span style="color: #b5bd68;">case</span> <span style="color: #8abeb7;">"$1"</span><span style="color: #b5bd68;"> in</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span> start)
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">if</span> [ -x $<span style="color: #f0c674;">NTPDATE_BIN</span> ] ; <span style="color: #b5bd68;">then</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b294bb;">echo</span> -n <span style="color: #8abeb7;">"Getting initial time via ntp"</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   $<span style="color: #f0c674;">NTPDATE_BIN</span> $<span style="color: #f0c674;">NTPDATE_OPTS</span> $<span style="color: #f0c674;">NTPSERVERS</span> &gt; /dev/null 2&gt;&amp;1
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"."</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">fi</span>

<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b294bb;">echo</span> -n <span style="color: #8abeb7;">"Starting $DESC: $NAME"</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   start-stop-daemon -S -q -x $<span style="color: #f0c674;">DAEMON</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"."</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   ;;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> stop) <span style="color: #b294bb;">echo</span> -n <span style="color: #8abeb7;">"Stopping $DESC: $NAME"</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   start-stop-daemon -K -q -n $<span style="color: #f0c674;">NAME</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"."</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   ;;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> reload|force-reload) <span style="color: #b294bb;">echo</span> -n <span style="color: #8abeb7;">"Reloading $DESC configuration..."</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   start-stop-daemon -K -q -n $<span style="color: #f0c674;">NAME</span> -s 1
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"done."</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span> ;;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> restart) <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"Restarting $DESC: $NAME"</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   $<span style="color: #f0c674;">0</span> stop
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   sleep 1
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   $<span style="color: #f0c674;">0</span> start
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   ;;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> *) <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}"</span> &gt;&amp;2
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">exit</span> 1
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   ;;
<span style="color: #b5bd68;">esac</span>

<span style="color: #b5bd68;">exit</span> 0
</pre>
</div>

<p>
其中 $NTPDATE_OPTS 定义在 /etc/default/ntpd 中：
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #f0c674;">NTPDATE_OPTS</span>=<span style="color: #8abeb7;">"-t 5"</span>
</pre>
</div>

<p>
通过 ntpdate 同步初始时间失败，ntpd 服务可能因为当前系统时间与时间服务器偏差过大而退出。
</p>

<p>
同步失败的原因：
</p>

<ul class="org-ul">
<li>开机后网络尚未连通
</li>

<li>时间服务器繁忙
</li>

<li>网络环境限制使用 NTP 协议
</li>

<li>命令执行超时

<p>
域名解析、网络请求处理都会占用时间，5 秒钟不一定能完成。
</p>
</li>
</ul>

<p>
由于脚本是在系统启动过程中运行，再延长超时时间可能导致开机启动时间变长。
</p>

<p>
可以配置 ntpd 在时间偏差过大时仍然同步时间（注意：ntpd 第一次需要 4-5 分钟才能完成同步），有以下几种方法：
</p>

<ul class="org-ul">
<li>添加 -g 命令行选项

<p>
<code>-g</code> 本地时间与时间服务器偏差达过大（默认为 1000 秒）时，不退出，同步一次时间。
</p>
</li>

<li>设置 NTPD_PANICGATE 环境变量

<p>
绝大部分命令行选项都可以通过加 NTPD_ 前缀的环境变量进行设置。
</p>
</li>

<li>修改配置文件

<p>
将以下内容添加到 /etc/ntp.conf 最前面
</p>
<div class="org-src-container">

<pre class="src src-sh">tinker panic 0
</pre>
</div>
</li>
</ul>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">手工同步一次</h3>
<div class="outline-text-3" id="text-3-1">
<p>
通过 ntpd 的命令行选项可以更好地完成 ntpdate 的功能。
</p>

<p>
<code>-q</code> 同步一次后退出。
</p>

<div class="org-src-container">

<pre class="src src-sh">ntpd -g -q
</pre>
</div>

<p>
上面的命令会确保同步一次时间后结束。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">参考</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><a href="http://blog.csdn.net/suer0101/article/details/7868813">使用ntpdate更新系统时间</a>
</li>

<li><a href="http://acooly.iteye.com/blog/1993484">NTP服务及时间同步(CentOS6.x)</a>
</li>

<li><a href="http://www.psce.com/blog/kb/how-to-periodically-synchronize-time-in-linux/">How to periodically synchronize time in Linux?</a>
</li>

<li><a href="http://www.tldp.org/LDP/sag/html/basic-ntp-config.html">Basic NTP configuration</a>
</li>

<li><a href="http://linux.die.net/man/8/ntpd">ntpd(8): Network Time Protocol daemon - Linux man page</a>
</li>

<li><a href="http://askubuntu.com/a/443077/397632">How to force a clock update using ntp? - Ask Ubuntu</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 6.4 生产环境上安装 pm2]]></title>
            <link>/article/centos-6.4-751f4ea773af58834e0a5b8988c5-pm2.html</link>
            <guid>/article/centos-6.4-751f4ea773af58834e0a5b8988c5-pm2.html</guid>
            <pubDate>Thu, 25 Feb 2016 09:27:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
确保系统要干净（尚未安装 node.js），使用 root 帐号登录。
</p>

<ul class="org-ul">
<li>安装 LTS 版的 node.js

<p>
当前 <a href="https://nodejs.org/en/">官方</a> 推荐的 LTS 版本为 v4.3.1，通过淘宝镜像下载速度快一些，直接安装在系统目录中 /usr 下，便于使用。
</p>

<div class="org-src-container">

<pre class="src src-sh">wget http://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.3.1-linux-x64.tar.xz<span style="text-decoration: underline;"> -O node-v4.3.1-linux-x64.tar.xz</span>
tar xJvf node-v4.3.1-linux-x64.tar.xz --no-same-owner --exclude CHANGELOG.md --e<span style="text-decoration: underline;">xclude LICENSE --exclude README.md --strip-components 1 -C /usr</span>
</pre>
</div>

<p>
参考：<a href="https://gist.github.com/TooTallNate/2477f53a23a51537332e">Install Node.js one-liner</a>
</p>
</li>

<li>安装稳定版 pm2

<p>
从 <a href="https://github.com/Unitech/pm2/blob/master/CHANGELOG.md">CHANGELOG.md</a> 查到的当前的稳定版本为 v0.14.3，pm2 发布很频繁,不宜追新。
</p>

<div class="org-src-container">

<pre class="src src-sh">npm install pm2@0.14.3 -g
</pre>
</div>
</li>

<li>设置 pm2 为开机启动

<div class="org-src-container">

<pre class="src src-sh">pm2 startup centos
</pre>
</div>
</li>

<li>定期清理日志

<p>
按《 <a href="http://blog.kankanan.com/article/pm2-768465e55fd77ba17406.html#sec-6">pm2的日志管理</a> 》中的“定期清理日志”一节所述使用 logrotate 服务定期清理日志。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 6.4 上编译安装 gcc 5.2.0]]></title>
            <link>/article/centos-6.4-4e0a7f168bd15b8988c5-gcc-5.2.0.html</link>
            <guid>/article/centos-6.4-4e0a7f168bd15b8988c5-gcc-5.2.0.html</guid>
            <pubDate>Fri, 22 Jan 2016 13:12:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
node.js 4.x 的第三方扩展编译时要求 gcc 版本为 4.8，但是 CentOS 6.4 仓库里的版本为 4.4.7，
在生产环境从第三方仓库里安装最新版 gcc 又不放心，还是自已从源代码编译安装吧。
</p>

<ul class="org-ul">
<li>下载 gcc 源代码

<div class="org-src-container">

<pre class="src src-sh">wget http://mirror.lzu.edu.cn/gnu/gcc/gcc-5.2.0/gcc-5.2.0.tar.bz2
tar xjvf gcc-5.2.0.tar.bz2
<span style="color: #b294bb;">cd</span> gcc-5.2.0
</pre>
</div>

<p>
官方的下载地址为 <a href="ftp://ftp.gnu.org/gnu/gcc/">ftp://ftp.gnu.org/gnu/gcc/</a> ，使用国内镜像 <a href="http://mirror.lzu.edu.cn/gnu/gcc">http://mirror.lzu.edu.cn/gnu/gcc</a> 快很多。
</p>
</li>

<li>安装依赖的包

<div class="org-src-container">

<pre class="src src-sh">yum install gmp-devel
yum install mpfr-devel
yum install libmpc-devel
</pre>
</div>

<p>
参考自 INSTALL 目录下的文档。
</p>
</li>

<li>编译安装

<div class="org-src-container">

<pre class="src src-sh">./configure --prefix=/opt/gcc-5.2.0 --disable-multilib
make
make -k check
make install
</pre>
</div>

<p>
<code>--disable-multilib</code> 只编译 64 位。
</p>

<p>
编译时间会耗时几个小时，这段时间最好去干点别的。
</p>
</li>

<li>切换gcc版本

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">export</span> <span style="color: #f0c674;">PATH</span>=/opt/gcc-5.2.0/bin:$<span style="color: #f0c674;">PATH</span>
</pre>
</div>

<p>
或
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">export</span> <span style="color: #f0c674;">CC</span>=/opt/gcc-5.2.0/bin/gcc
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">CPP</span>=/opt/gcc-5.2.0/bin/cpp
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">CXX</span>=/opt/gcc-5.2.0/bin/c++
</pre>
</div>
</li>

<li>参考

<p>
<a href="http://superuser.com/questions/381160/how-to-install-gcc-4-7-x-4-8-x-on-centos">yum - How to Install gcc 4.7.x/4.8.x on CentOS - Super User</a>
</p>

<p>
<a href="https://wiki.mikejung.biz/Gcc_CentOS">Gcc CentOS - How to compile gcc-4.8.2 on CentOS 6.6</a></p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 6.4 上安装 ruby 1.9.3]]></title>
            <link>/article/centos-6.4-4e0a5b8988c5-ruby-1.9.3.html</link>
            <guid>/article/centos-6.4-4e0a5b8988c5-ruby-1.9.3.html</guid>
            <pubDate>Fri, 22 Jan 2016 13:12:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
CentOS 6.4 上仓库中的 Ruby 版本为 1.8.7 太旧了，<a href="https://github.com/yaauie/redis-copy">redis-copy</a> 要求 Ruby 版本至少为 1.9.3。
</p>

<ul class="org-ul">
<li>安装 rvm

<div class="org-src-container">

<pre class="src src-sh">curl -L get.rvm.io | bash -s stable
</pre>
</div>
</li>

<li>安装 Ruby 1.9.3

<div class="org-src-container">

<pre class="src src-sh">/usr/local/rvm/bin/rvm install 1.9.3
</pre>
</div>

<ul class="org-ul">
<li>启用 Ruby 1.9.3

<div class="org-src-container">

<pre class="src src-js">source /usr/local/rvm/scripts/rvm
rvm use 1.9.3
</pre>
</div>
</li>

<li>安装 RubyGems

<div class="org-src-container">

<pre class="src src-sh">rvm rubygems current
</pre>
</div>
</li>

<li>RubyGems 官方源国内访问不稳定，换成淘宝的镜像

<div class="org-src-container">

<pre class="src src-sh">gem sources --remove https://rubygems.org/
gem sources -a https://ruby.taobao.org/
</pre>
</div>
</li>

<li>安装 <a href="https://github.com/yaauie/redis-copy">redis-copy</a>

<div class="org-src-container">

<pre class="src src-sh">gem install redis-copy
</pre>
</div>

<p>
安装后程序路径为 /usr/local/rvm/gems/ruby-1.9.3-p551/bin/redis-copy
</p>

<p>
启用 Ruby 1.9.3 后，redis-copy 可以直接运行。
</p>
</li>
</ul>
</li>

<li>参考

<p>
<a href="https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-on-centos-6-with-rvm">How To Install Ruby on Rails on CentOS 6 with RVM | DigitalOcean</a>
</p>

<p>
<a href="https://ruby-china.org/topics/3705">手把手安装RVM以及为什么RVM is not a function » Topics » Ruby China</a>
</p>

<p>
<a href="http://www.jb51.net/article/49079.htm">淘宝网提供的国内RubyGems镜像简介和使用方法_ruby专题_脚本之家</a></p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[修复libcurl域名解析超时引起的内存越界问题]]></title>
            <link>/article/4fee590d-libcurl-57df540d89e367908d8565f65f158d77768451855b588d8a754c95ee9898.html</link>
            <guid>/article/4fee590d-libcurl-57df540d89e367908d8565f65f158d77768451855b588d8a754c95ee9898.html</guid>
            <pubDate>Wed, 09 Dec 2015 06:17:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
程序发布后在一个用户的机器上频繁出现崩溃，最终定位到崩溃来自一个断言失败：
</p>

<div class="org-src-container">

<pre class="src src-c">assert(pthread_self() != main_thread_id);
</pre>
</div>

<p>
上面这条语句出现在工作线程回调的函数中，竟然发生了工作线程ID和主线程ID相同的怪事，
观察了运行日志，发现使用libcurl发起HTTP请求如果超时则有很大机率会断言失败导致崩溃，
在使用libcurl发起HTTP请求的代码块前后输出工作线程ID，工作线程ID出现了变化，
根据经验很可能是出现了内存越界。
</p>

<p>
最终找到了几篇 <code>libcurl</code> 多线程安全相关的文章：
</p>

<ul class="org-ul">
<li>《<a href="http://blog.csdn.net/balderfan/article/details/7599554">libcurl 多线程使用注意事项</a>》
</li>

<li>《<a href="http://blog.csdn.net/delphiwcdj/article/details/18284429">Libcurl多线程crash问题</a>》
</li>
</ul>

<p>
修复步骤总结如下：
</p>

<ul class="org-ul">
<li>在主线程起始处初始化 <code>libcurl</code> 库

<div class="org-src-container">

<pre class="src src-c">curl_global_init(CURL_GLOBAL_ALL);
</pre>
</div>
</li>

<li>禁止 <code>libcurl</code> 通过 <code>alarm</code> 实现域名解析超时

<div class="org-src-container">

<pre class="src src-c">curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1L);
</pre>
</div>

<p>
如果不做下面的最后一步， <code>libcurl</code> 上设置的超时都会无效。
</p>
</li>

<li>编译 <code>libcurl</code> 时启用 <code>c-ares</code> 或 <code>threaded resolver</code> ，以支持域名解析超时

<div class="org-src-container">

<pre class="src src-sh">./configure --enable-ares
</pre>
</div>

<p>
或
</p>

<div class="org-src-container">

<pre class="src src-sh">./configure --enable-threaded-resolver
</pre>
</div>

<p>
《<a href="http://daniel.haxx.se/blog/2011/04/25/libcurls-name-resolving/">Asynch resolving in libcurl</a>》对 <code>c-ares</code> 或 <code>threaded resolver</code> 两种方式进行了比较，简而言之：
</p>

<ul class="org-ul">
<li><code>c-ares</code> 是一个异步的域名解析库，开销更少，但是它并非使用系统原生的方式实现，对于定制系统（如：hosts或resolv.conf不在标准位置）可能会有问题。
</li>

<li><code>threaded resolver</code> 每次域名解析都会开一个线程，解析完成后销毁线程，开销会大一些，但是稳定性、兼容性更好。
</li>
</ul>
</li>
</ul>

<p>
按照上面的步骤启用 <code>c-ares</code> 进行修改后程序运行了一整天，没有再崩溃。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[/etc/passwd、/etc/passwd+、/etc/passwd- 文件介绍]]></title>
            <link>/article/etc-passwd-3001-etc-passwd-3001-etc-passwd-65874ef64ecb7ecd.html</link>
            <guid>/article/etc-passwd-3001-etc-passwd-3001-etc-passwd-65874ef64ecb7ecd.html</guid>
            <pubDate>Tue, 24 Nov 2015 07:58:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
busybox下修改密码或创建用户的时候，有时候操作会失败，此时 <code>/etc</code> 目录可能出现 <code>passwd+</code> 、 <code>passwd-</code> 两个文件。
</p>

<p>
当出现 <code>/etc/passwd+</code> 文件时，修改密码会耗时几秒钟然后报错：
</p>

<pre class="example">
# passwd root
Changing password for root
New password: 123456

Retype password: 123456

passwd: can't create '/etc/passwd+': File exists
passwd: can't update password file /etc/passwd
#
</pre>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">根据 <a href="https://svn.mcs.anl.gov/repos/ZeptoOS/trunk/BGP/packages/busybox/src/libbb/update_passwd.c">update_passwd.c</a> 可以获得以下信息</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><code>/etc/passwd</code> 用户帐号配置文件
</li>

<li><code>/etc/passwd+</code> 更新过程中的临时文件
</li>

<li><code>/etc/passwd-</code> 用户帐号配置文件的备份
</li>
</ul>

<p>
更新密码逻辑：
</p>

<ul class="org-ul">
<li>创建 <code>/etc/passwd+</code> 文件

<p>
如果 <code>/etc/passwd+</code> 文件存在，则会返回错误.
</p>
</li>

<li>备份 <code>/etc/passwd</code> 文件到 <code>/etc/passwd-</code>
</li>

<li>更新后的帐号配置写到 <code>/etc/passwd+</code> 文件
</li>

<li>将 <code>/etc/passwd+</code> 文件重命名为 <code>/etc/passwd</code>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">经验法则</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><code>/etc/passwd</code> 文件损坏时，使用备份文件 <code>/etc/passwd-</code> 还原
</li>

<li><code>/etc/passwd+</code> 文件存在导致无法更新帐号信息，直接删除 <code>/etc/passwd+</code> 文件即可
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下编程获取/etc/resolv.conf中的域名解析服务器]]></title>
            <link>/article/linux-4e0b7f167a0b83b753d6-etc-resolv.conf-4e2d768457df540d89e36790670d52a15668.html</link>
            <guid>/article/linux-4e0b7f167a0b83b753d6-etc-resolv.conf-4e2d768457df540d89e36790670d52a15668.html</guid>
            <pubDate>Fri, 14 Aug 2015 10:01:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
直接上代码吧：
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;unistd.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;sys/types.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;netinet/in.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;arpa/inet.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;arpa/nameser.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;resolv.h&gt;</span>

<span style="color: #81a2be;">int</span> <span style="color: #de935f;">main</span>(<span style="color: #81a2be;">int</span> <span style="color: #f0c674;">argc</span>, <span style="color: #81a2be;">char</span> *<span style="color: #f0c674;">argv</span>[])
{
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">struct</span> <span style="color: #81a2be;">__res_state</span> <span style="color: #f0c674;">res</span>;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   res.options &amp;= ~ RES_INIT;

<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #81a2be;">int</span> <span style="color: #f0c674;">err</span> = res_ninit(&amp;res);
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   fprintf(stderr, <span style="color: #8abeb7;">"res_init error: %d\n"</span>, err);
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">return</span> err;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   }

<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #81a2be;">char</span> <span style="color: #f0c674;">ip</span>[16];
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">for</span>(<span style="color: #81a2be;">int</span> <span style="color: #f0c674;">i</span> = 0 ; i &lt; res.nscount; ++i) {
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   ip[0] = <span style="color: #8abeb7;">'\0'</span>;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">if</span> (<span style="color: #81a2be;">!</span> inet_ntop(AF_INET, &amp;res.nsaddr_list[i].sin_addr, ip, <span style="color: #b5bd68;">sizeof</span>(ip))) <span style="text-decoration: underline;">{</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   perror(<span style="color: #8abeb7;">"inet_ntop"</span>);
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">continue</span>;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   }
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   printf(<span style="color: #8abeb7;">"ip: %s\n"</span>, ip);
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   }

<span style="color: #c5c8c6; background-color: #373b41;"> </span>   res_nclose(&amp;res);

<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">return</span> 0;
}
</pre>
</div>

<ul class="org-ul">
<li>参考

<p>
《<a href="http://stackoverflow.com/questions/2916675/programmatically-obtain-dns-servers-of-host">Programmatically obtain DNS servers of host</a>》</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux服务器出现大量CLOSE_WAIT状态的连接]]></title>
            <link>/article/linux-670d52a1566851fa73b0592791cf-close_wait-72b6600176848fde63a5.html</link>
            <guid>/article/linux-670d52a1566851fa73b0592791cf-close_wait-72b6600176848fde63a5.html</guid>
            <pubDate>Sat, 01 Aug 2015 19:21:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
昨天服务器停止服务，node.js进程耗光了服务器的内存及CPU，node.js进程卡死无法被 <code>kill</code> 掉，最后要来root帐号密码，直接 <code>kill -9</code> 才结束掉进程。
</p>

<p>
再次鄙视一下 <a href="https://github.com/nodejitsu/forever">forever</a> ，杀不掉原来的 node.js 进程组也就罢了，竟然又拉起了一套新的 node.js 进程组。
</p>

<p>
统计了一下 <code>10</code> 万个fd都耗光了，其中 <code>9</code> 万多个为 <code>CLOSE_WAIT</code> 状态，此时服务器已经无法响应请求。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">CLOSE_WAIT 状态介绍</h2>
<div class="outline-text-2" id="text-1">
<p>
先看一副TCP连接关闭的状态图（ <a href="http://intronetworks.cs.luc.edu/current/html/tcp.html#index-29">来源</a> ）：
</p>


<div class="figure">
<p><img src="../static/tcp_normal_close.png" alt="tcp_normal_close.png" />
</p>
</div>

<p>
被动关闭一方才会出现 <code>CLOSE_WAIT</code> 状态，由于被动关闭方未调用 <code>close</code> 关闭socket导致，问题肯定是由服务器代码引起。
</p>

<p>
检测到对端socket关闭然后关闭本端socket是由 node.js 自行完成的，最大的可能是没有机会执行 <code>close</code> 。
</p>

<p>
我们的应用客户端与服务器有一个tls长连接，当连接断开时客户端会等待3-10秒后尝试重连服务器，如果服务器出现卡顿会导致客户端频繁重连，
</p>

<p>
如果服务器来不及关闭这些连接，则会出现 CLOSE_WAIT 状态的连接，占用大量文件描述符，减少 CLOSE_WAIT 超时时间能够在一定程度上缓解这个问题，
</p>

<p>
但是对于我们这种长连接的环境，大量CLOSE_WAIT是问题的表象，而非根源。
</p>

<p>
参考：《<a href="http://lvxuehu.iteye.com/blog/452487">解决CLOSE_WAIT 问题</a>》
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">内存及CPU占用彪升问题</h2>
<div class="outline-text-2" id="text-2">
<p>
伴随着 CLOSE_WAIT 出现的状况是 node.js 进程内存及CPU占用超高，单node.js进程内存占用达到 1.5G，CPU占用 90% 以上，此时应该会导致 node.js 响应慢，
来不及关闭连上来的socket。
</p>

<p>
所以解决问题的关键就是：找出什么原因导致 node.js 内存及CPU 100%占用。
</p>

<p>
想到的可能是redis负载过高引起，从运维监控图上可以看出一些蹊跷，node.js出问题时redis的连接数也同样彪升，而出问题的机器上刚好就是跑redis的机器，
另一台服务器一直相安无事，没有跑redis。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">一次午夜故障元凶浮出水面</h2>
<div class="outline-text-2" id="text-3">
<p>
在晚上两点的时候服务出现问题，同样的现象，特别留意了一下redis的统计，请求速度很低，只有1200，平时都是5000。偶然在进程列表中发现了 redis-rdb-bgsave 的身影，
不断地执行ps看进程列表，发现 redis-rdb-bgsave 进程不断地出现，查看redis的持久化配置如下：
</p>

<pre class="example">
save 900 1
save 300 10
save 60 10000
</pre>

<p>
我们的系统有大量的redis，1分钟肯定过万，这样redis持久化变是常态了，而且由于用的是机械硬盘，持久化肯定会引起系统卡顿，先将它调整为15分钟最多持久化一次：
</p>

<pre class="example">
config set save "900 1"
</pre>

<p>
重启程序释放资源后系统开始正常响应，但是10多分钟后系统再次无响应，才想起一则经验教训：
</p>

<pre class="example">
     跑redis的机器至少要预留和redis占用内存同样大小的空闲内存空间，redis RDB持久化进行fork时最坏会占用双倍内存，内存不足就会动用交换分区，系统性能急剧下降。
</pre>

<p>
于是，立即改配置将redis所在机器上的node.js cluster进程数调小，腾出大把内存，总算没有再出现问题，今晚终于可以入眠。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">更多疑问</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>我们的node.js进程为什么常常会占用很多内存？
</li>

<li>netstat中看到CLOSE_WAIT状态的连接输入缓冲往往有数据，而ESTABLISHED状态的连接读写缓冲区往往为空，为什么？
</li>

<li>node.js卡顿时forever杀不死反而启动了新实例帮倒忙，pm2就一定能够解决吗？
</li>

<li>redis持久化引起服务挂掉，已经是在第二个项目中遇到了，终极解决方案是什么？
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[config库避免磁盘满时配置文件被截断]]></title>
            <link>/article/config-5e93907f514d78c176d86ee165f6914d7f6e65874ef688ab622a65ad.html</link>
            <guid>/article/config-5e93907f514d78c176d86ee165f6914d7f6e65874ef688ab622a65ad.html</guid>
            <pubDate>Mon, 20 Jul 2015 09:35:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://github.com/tangxinfa/config">config</a> 库在实际使用过程中发现一个问题：磁盘满时写配置文件可能导致配置文件被清空（文件大小为0）。
</p>

<p>
想到两种方案：
</p>

<ul class="org-ul">
<li>写-替换

<p>
先写到一个临时文件，写成功后替换目标文件，这是由linux下重命名（rename）文件的原子性保证的。由于我们是通过对配置文件加锁的方式支持多进程访问的，可以对配置文件使用独立的锁文件，一想起到配置文件目录里将出现一大堆锁文件，胃就不舒服。
</p>
</li>

<li>预分配空间

<p>
先确保文件拥有足够的空间再写入。虽然不是原子性的，但已经能够解决问题。我比较倾向于这个方案。
</p>
</li>
</ul>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">通过预分配空间方式安全写文件算法</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>如果当前文件过小（不足以容纳新内容），在文件尾部通过追加占位字符（\0）直到文件大小合适
</li>

<li>写入新内容
</li>

<li>将过多的空间截掉
</li>
</ul>

<p>
具体实现参见： <a href="https://github.com/tangxinfa/config/commit/5ed686fc42c3356658d67d2d3bb59d3435f8c68f">5ed686f Fix bug: config file content missing when disk full</a> .
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">测试</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">创建模拟磁盘目录 /mnt/disk</h3>
<div class="outline-text-3" id="text-2-1">
<p>
先确保存在 <code>/dev/loop*</code> 设备，如果不存在先尝试挂载 <code>loop</code> 内核模块
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo modprobe loop
</pre>
</div>

<p>
如果还是没有 <code>loop</code> 设备，可能是最近进行了系统升级，重启后再试。
</p>

<p>
创建模拟磁盘（/mnt/disk）：
</p>

<pre class="example">
$ sudo dd if=/dev/zero of=~/Examples/disk.img bs=8M count=1
$ sudo losetup /dev/loop0 ~/Examples/disk.img
$ sudo parted /dev/loop0
GNU Parted 3.2
Using /dev/loop0
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) mklabel gpt
Warning: The existing disk label on /dev/loop0 will be destroyed and all data on
this disk will be lost. Do you want to continue?
Yes/No? yes
(parted) mkpart primary 0MB 8MB
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? Ignore
(parted) print
Model: Loopback device (loopback)
Disk /dev/loop0: 8389kB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags: 

Number  Start   End     Size    File system  Name  Flags
 1      17.4kB  8372kB  8354kB

(parted) quit
$ sudo mkfs.ext4 /dev/loop0p1
$ sudo mkdir /mnt/disk
$ sudo mount /dev/loop0p1 /mnt/disk
</pre>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">修复前</h3>
<div class="outline-text-3" id="text-2-2">
<p>
磁盘空间不足写配置导致配置文件被损坏
</p>

<pre class="example">
$ sudo ~/Opensource/config/config /mnt/disk/test.json set name libconfig
name: libconfig
$ sudo dd if=/dev/zero of=/mnt/disk/other.data bs=1 obs=1 count=100000000
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.44769 s, 916 kB/s
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.53017 s, 906 kB/s
$ sudo ~/Opensource/config/config /mnt/disk/test.json set data "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
config: write: No space left on device
config: save config file(/mnt/disk/test.json) failed
data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
$ sudo ~/Opensource/config/config /mnt/disk/test.json get name
config: get items(name,,,,,) from config file(/mnt/disk/test.json) failed
</pre>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">修复后</h3>
<div class="outline-text-3" id="text-2-3">
<p>
磁盘空间不足写配置不会对配置文件造成实质影响
</p>

<pre class="example">
$ sudo ~/Opensource/config/config /mnt/disk/test.json set name libconfig
name: libconfig
$ sudo dd if=/dev/zero of=/mnt/disk/other.data bs=1 obs=1 count=100000000
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.6254 s, 895 kB/s
$ sudo ~/Opensource/config/config /mnt/disk/test.json set data "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
config: write: No space left on device
config: save config file(/mnt/disk/test.json) failed
data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
$ sudo ~/Opensource/config/config /mnt/disk/test.json get name
name: libconfig
</pre>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">清除测试环境</h3>
<div class="outline-text-3" id="text-2-4">
<div class="org-src-container">

<pre class="src src-sh">sudo umount /dev/loop0p1
sudo losetup -d /dev/loop0
sudo rmdir /mnt/disk
sudo rm ~/Examples/disk.img
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">参考</h2>
<div class="outline-text-2" id="text-3">
<p>
《<a href="http://www.oschina.net/translate/reliable-file-updates-with-python">使用 Python 进行稳定可靠的文件操作</a>》</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux非交互方式修改用户密码]]></title>
            <link>/article/linux-975e4ea44e9265b95f0f4fee6539752862375bc67801.html</link>
            <guid>/article/linux-975e4ea44e9265b95f0f4fee6539752862375bc67801.html</guid>
            <pubDate>Tue, 16 Jun 2015 09:35:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
linux下的 <code>passwd</code> 命令是交互式运行的（密码需要由用户使用键盘输入），后台程序如果要改用户密码需要一定的技巧。
</p>

<p>
如：以下命令可以将 <code>root</code> 帐号的密码改为 <code>123456</code>
</p>

<div class="org-src-container">

<pre class="src src-sh">(<span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">'123456'</span>; sleep 1; <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">'123456'</span>) | passwd <span style="color: #8abeb7;">'root'</span> &gt; /dev/null
</pre>
</div>

<p>
但是，此时也不好判断密码是否改成功了，需要验证一下。
</p>

<p>
linux 系统的密码编码（不可逆）后存储在 /etc/shadow（以前是 /etc/passwd） 文件里。
</p>

<p>
参考文章《<a href="http://www.xinotes.net/notes/note/1833/">Check Linux user password in C</a> 》编写了以下程序用于非交互式修改密码：
</p>

<p>
<a href="../static/change_password.c">change_password.c</a>
</p>

<p>
编译：
</p>
<div class="org-src-container">

<pre class="src src-sh">gcc -g change_password.c -o change_password -lcrypt
</pre>
</div>

<p>
运行：
</p>
<div class="org-src-container">

<pre class="src src-sh">./change_password root 123456
</pre>
</div>

<p>
参考：
</p>

<ul class="org-ul">
<li><a href="http://tldp.org/HOWTO/Shadow-Password-HOWTO-2.html">Why shadow your passwd file?</a>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下创建另一个root帐号]]></title>
            <link>/article/linux-4e0b521b5efa53e64e004e2a-root-5e1053f7.html</link>
            <guid>/article/linux-4e0b521b5efa53e64e004e2a-root-5e1053f7.html</guid>
            <pubDate>Thu, 04 Jun 2015 12:27:00 GMT</pubDate>
            <content:encoded><![CDATA[<div class="org-src-container">

<pre class="src src-sh">useradd -g 0 -u 0 -o root1
</pre>
</div>

<p>
上面的命令创建了一个和 <code>root</code> 帐号几乎一模一样的帐号 <code>root1</code> ，这个帐号登录后甚至连 <code>$USER</code> 环境变量都是 <code>root=， 应该是由于 =uid</code> 和 <code>root</code> 帐号一样都是 <code>0</code> ，所以使用了 <code>root</code> 帐号的用户名，但是可以指定不同的 <code>HOME</code> 以及密码等。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[FlashCache多盘方案实战]]></title>
            <link>/article/flashcache-591a76d865b968485b9e6218.html</link>
            <guid>/article/flashcache-591a76d865b968485b9e6218.html</guid>
            <pubDate>Wed, 29 Apr 2015 09:38:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
目标系统为单SSD+多HDD，将多HDD创建为RAID5逻辑盘，然后使用FlashCache将SSD做为RAID5逻辑盘的缓存。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">系统信息</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>OS

<p>
CentOS release 6.5 (Final) x86_64
</p>
</li>

<li>CPU

<p>
8
</p>

<p>
Intel(R) Atom(TM) CPU  C2750  @ 2.40GHz
</p>
</li>

<li>MEMORY

<p>
4
</p>

<p>
TOTAL 16G
</p>
</li>

<li>HDD

<p>
4
</p>

<p>
WDC WD4000FYYZ-0 4TB 7200转
</p>

<p>
/dev/sdc /dev/sdd /dev/sde /dev/sdf
</p>
</li>

<li>SSD

<p>
1
</p>

<p>
INTEL SSDSC2BB30 300GB
</p>

<p>
/dev/sdb
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">卸载HDD及SSD盘</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-sh">umount /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdb
</pre>
</div>

<p>
确保系统重启后不会自动挂载这些盘。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">将多HDD创建为RAID5逻辑盘</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>格式化HDD盘

<div class="org-src-container">

<pre class="src src-sh">parted /dev/sdc
(parted) mklabel gpt
(parted) unit TB
(parted) mkpart primary 0.00TB 4.00TB
(parted) print
</pre>
</div>

<p>
其它HDD盘也做如上处理.
</p>
</li>

<li>创建RAID5逻辑分区

<div class="org-src-container">

<pre class="src src-sh">mdadm --create /dev/md0 --level=raid5 --raid-devices=4 /dev/sd[c-f]1
parted /dev/md0
(parted) mklabel gpt
(parted) unit TB
(parted) mkpart primary 0.00TB 12.00TB
(parted) print
(parted) quit
</pre>
</div>
</li>

<li>保存RAID5配置

<div class="org-src-container">

<pre class="src src-sh">mdadm --detail --scan &gt; /etc/mdadm.conf
</pre>
</div>

<p>
参考：<a href="https://raid.wiki.kernel.org/index.php/RAID_setup#Saving_your_RAID_configuration">Saving your RAID configuration</a>
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">安装Flashcache</h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">

<pre class="src src-sh">wget https://github.com/facebook/flashcache/archive/stable_v3.1.3.zip -O flashca<span style="text-decoration: underline;">che_stable_v3.1.3.zip</span>
unzip flashcache_stable_v3.1.3.zip
<span style="color: #b294bb;">cd</span> flashcache-stable_v3.1.3
make
make install
modprobe flashcache
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">创建Flashcache混合设备</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-sh">flashcache_create -p around cachedev /dev/sdb /dev/md0p1
mkfs.ext4 /dev/mapper/cachedev
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">挂载Flashcache混合设备</h2>
<div class="outline-text-2" id="text-6">
<div class="org-src-container">

<pre class="src src-sh">mkdir /data
mount /dev/mapper/cachedev /data
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">系统重启后需要重新创建并挂载Flashcache设备</h2>
<div class="outline-text-2" id="text-7">
<div class="org-src-container">

<pre class="src src-sh">flashcache_create -p around cachedev /dev/sdb /dev/md0p1
mount /dev/mapper/cachedev /data
</pre>
</div>

<p>
注意：使用除 <code>writethrough</code> 和 <code>writearound</code> 以外的模式需要使用 <code>flashcache_load</code> 重新创建设备。
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">写入速度测试</h2>
<div class="outline-text-2" id="text-8">
<p>
循环创建60MiB大小的文件，测得的磁盘写入速度为 <b>35.6MiB</b> ，磁盘读取速度为 <b>2.1MiB</b> 。
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">读取速度测试</h2>
<div class="outline-text-2" id="text-9">
<ul class="org-ul">
<li>500并发120G文件每次读取32KB顺序读取

<ul class="org-ul">
<li>请求处理速度

<p>
2107
</p>
</li>

<li>传输速度

<p>
132.35MiB/s
</p>
</li>
</ul>
</li>

<li>500并发500G文件每次读取32KB顺序读取

<ul class="org-ul">
<li>请求处理速度

<p>
1937
</p>
</li>

<li>传输速度

<p>
61.09MiB
</p>
</li>
</ul>
</li>

<li>500并发1T文件每次读取32KB顺序读取

<ul class="org-ul">
<li>请求处理速度

<p>
1574
</p>
</li>

<li>传输速度

<p>
49.64MiB/s
</p>
</li>
</ul>
</li>

<li>500并发120G文件每次读取64KB顺序读取

<ul class="org-ul">
<li>请求处理速度

<p>
5006
</p>
</li>

<li>传输速度

<p>
157.88MiB/s
</p>
</li>
</ul>
</li>

<li>500并发500G文件每次读取64KB顺序读取

<ul class="org-ul">
<li>请求处理速度

<p>
897
</p>
</li>

<li>传输速度

<p>
56.37MiB/s
</p>
</li>
</ul>
</li>

<li>500并发1T文件每次读取64KB顺序读取

<ul class="org-ul">
<li>请求处理速度

<p>
782
</p>
</li>

<li>传输速度

<p>
49.10MiB/s
</p>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10">注意事项</h2>
<div class="outline-text-2" id="text-10">
<ul class="org-ul">
<li>重建（rebuild）

<p>
当一块盘坏掉后，如果配置了热备盘（Hot spare disk），会自动重建，请将坏盘换掉并配置成热备盘；\
如果未配置热备盘，读性能会下降（坏盘中的数据需要全部通过计算重现），请将坏盘换掉系统会自动进行重建。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11">潜在的优化选项</h2>
<div class="outline-text-2" id="text-11">
<ul class="org-ul">
<li>开启SSD写Cache
</li>

<li>禁用文件、目录访问时间戳

<p>
noatime,nodiratime
</p>
</li>

<li><code>Write-Back</code> 模式优化

<div class="org-src-container">

<pre class="src src-sh">sysctl -w dev.flashcache.sdb+md0p1.dirty_thresh_pct=80
</pre>
</div>
</li>
</ul>
</div>
</div>


<div id="outline-container-sec-12" class="outline-2">
<h2 id="sec-12">卸载Flashcache设备</h2>
<div class="outline-text-2" id="text-12">
<div class="org-src-container">

<pre class="src src-sh">umount /dev/mapper/cachedev
dmsetup remove cachedev
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-13" class="outline-2">
<h2 id="sec-13">Q&amp;A</h2>
<div class="outline-text-2" id="text-13">
<ul class="org-ul">
<li>重新调整 Flashcache 选项会不会删除数据？

<p>
<code>writethrough</code> 、 <code>writearound</code> 模式不会，其它的会。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-14" class="outline-2">
<h2 id="sec-14">相关参考</h2>
<div class="outline-text-2" id="text-14">
<dl class="org-dl">
<dt> 《<a href="http://lzw.me/a/linux-lvm.html">Linux LVM逻辑卷管理详细介绍</a>》 </dt><dd>非常好的LVM入门文章
</dd>

<dt> 《<a href="http://www.linux-mag.com/id/7582/">Pick Your Pleasure: RAID-0 mdadm Striping or LVM Striping?</a>》 </dt><dd>LVM与RAID-0的比较
</dd>

<dt> 《<a href="http://www.tecmint.com/create-raid0-in-linux/">Creating Software RAID0 (Stripe) on ‘Two Devices’ Using ‘mdadm’ Tool in Linux – Part 2</a>》 </dt><dd>构建RAID-0教程
</dd>

<dt> 《<a href="http://zengrong.net/post/2014.htm">在CentOS 6.1上配置 4TB硬盘+RAID1</a>》 </dt><dd>使用 <code>parted</code> 代替 <code>fdisk</code> 对大于2TB的硬盘进行分区
</dd>

<dt> 《<a href="http://wiki.mikejung.biz/Software_RAID">Software RAID - How to Optimize Software RAID on Linux using Mdadm</a>》 </dt><dd>优化RAID
</dd>

<dt> 《<a href="http://sysadmin.blog.51cto.com/83876/236802">RAID5单盘故障读写分析</a>》 </dt><dd>RAID5一块盘坏掉后的情形分析
</dd>
</dl>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下通过HTTP同步系统时间]]></title>
            <link>/article/linux-4e0b901a8fc7-http-540c6b657cfb7edf65f695f4.html</link>
            <guid>/article/linux-4e0b901a8fc7-http-540c6b657cfb7edf65f695f4.html</guid>
            <pubDate>Tue, 21 Apr 2015 03:54:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在 <code>NTP</code> 被禁用的网络环境下，可以通过 <code>HTTP</code> 协议从公开的网站（如：www.baidu.com）同步时间，因为HTTP响应通常会带一个Date字段，这是WEB服务器的系统时间，可以用它来设置本机时间。
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo date --rfc-2822 -s <span style="color: #8abeb7;">"`curl -s -i -X HEAD --header "Connection: close" http:/</span><span style="color: #8abeb7; text-decoration: underline;">/www.baidu.com | grep -E '^Date: ' | awk -F ': ' '{print $2}'`"</span>
</pre>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在linux使用nfs挂载其它linux机器上的文件夹]]></title>
            <link>/article/5728-linux-4f7f7528-nfs-63028f7d51765b83-linux-673a56684e0a768465874ef65939.html</link>
            <guid>/article/5728-linux-4f7f7528-nfs-63028f7d51765b83-linux-673a56684e0a768465874ef65939.html</guid>
            <pubDate>Tue, 23 Sep 2014 08:52:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
下面的IP地址以及工作目录需按实际情况进行修改。
</p>

<ul class="org-ul">
<li>在本地机器上允许目录被远程挂载

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">'/home/tangxinfa/workdir *(rw,sync,no_root_squash)'</span> &gt;&gt; /etc/exports
sudo exportfs -arv
</pre>
</div>
</li>

<li>在远程机器上挂载本地机器上的文件夹

<div class="org-src-container">

<pre class="src src-sh">mkdir /tmp/Projects; mount -t nfs -o nolock 192.168.111.100:/home/tangxinfa/Proj<span style="text-decoration: underline;">ects /tmp/Projects</span>
</pre>
</div>
</li>
</ul>

<p>
问题诊断
</p>

<ul class="org-ul">
<li>mount: RPC: Unable to receive; errno = Connection refused

<p>
需要启动nfs-server服务：
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo systemctl enable nfs-server.service
sudo systemctl start nfs-server.service
</pre>
</div>

<p>
另外，如果刚刚做了linux内核更新而没有重启系统也可能导致这个问题，重启一下再试。
</p>
</li>

<li>mount: 192.168.111.100:/home/tangxinfa/Projects failed, reason given by server: Permission denied

<p>
在/etc/exports文件中允许目录被远程挂载即可。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thinkpad T540p修复linux下触摸板按下时光标位置移动问题]]></title>
            <link>/article/thinkpad-t540p-4fee590d-linux-4e0b89e66478677f63094e0b65f6514968074f4d7f6e79fb52a895ee9898.html</link>
            <guid>/article/thinkpad-t540p-4fee590d-linux-4e0b89e66478677f63094e0b65f6514968074f4d7f6e79fb52a895ee9898.html</guid>
            <pubDate>Mon, 22 Sep 2014 06:29:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li>执行以下设置命令即可

<div class="org-src-container">

<pre class="src src-sh">synclient <span style="color: #f0c674;">HorizHysteresis</span>=30 <span style="color: #f0c674;">VertHysteresis</span>=30
</pre>
</div>

<p>
将上面的命令放到~/.xprofile中，以便重启后仍然生效。
</p>
</li>
</ul>

<p>
参考：<a href="https://blog.lnx.cx/2014/03/20/fedora-20-and-the-thinkpad-t440s-touchpad/">Fedora 20 and the ThinkPad T440s touchpad | Technitribe</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下修改键位映射]]></title>
            <link>/article/linux-4e0b4fee6539952e4f4d66205c04.html</link>
            <guid>/article/linux-4e0b4fee6539952e4f4d66205c04.html</guid>
            <pubDate>Fri, 19 Sep 2014 06:07:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在linux下会大量使用ctrl和alt键，但是普通键盘上这两个键所在位置太偏，按起来非常吃力，交换键位可以很好的解决这个问题。
</p>

<ul class="org-ul">
<li>通过gnome-tweak-tool进行修改

<p>
Typing页可以完成常用的修改，如：交换Caps Lock和Ctrl，交换左Ctrl和Alt。但是在我的笔记本上设置好后有时候会失效.
</p>
</li>

<li>通过setxkbmap命令进行修改

<p>
Caps Lock改为Ctrl：setxkbmap -option ctrl:nocaps
</p>

<p>
可以查看/usr/share/X11/xkb/rules/evdev.lst查看支持的交换方式。Ctrl和Alt交换试了一下没有效果。
</p>

<p>
将setxkbmap设置命令放到~/.xprofile中即可开机生效。
</p>
</li>
</ul>


<ul class="org-ul">
<li>通过配置~/.Xmodmap进行修改

<p>
可以完成任意的键盘映射。
</p>

<p>
如下所示：Caps Lock改为Ctrl，左Ctrl改为Alt：
</p>

<pre class="example">
keycode 66 = Control_L
clear Lock
add control = Control_L

clear control
clear mod1
keycode 37 = Alt_L Meta_L
add control = Control_L Control_R
add mod1 = Alt_L Meta_L
</pre>

<p>
启用设置：
</p>

<div class="org-src-container">

<pre class="src src-sh">xmodmap ~/.Xmodmap
</pre>
</div>

<p>
在~/.xprofile中添加以上指令以便开机生效：
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b5bd68;">if</span> [ -f $<span style="color: #f0c674;">HOME</span>/.Xmodmap ]; <span style="color: #b5bd68;">then</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   /usr/bin/xmodmap $<span style="color: #f0c674;">HOME</span>/.Xmodmap
<span style="color: #b5bd68;">fi</span>
</pre>
</div>

<p>
参考：
</p>

<ul class="org-ul">
<li><a href="http://earthviaradio.wordpress.com/2012/02/06/swapping-the-left-alt-and-ctrl-keys-in-ubuntu-11-10/">Swapping the left Alt and Ctrl keys in Ubuntu 11.10</a>
</li>

<li><a href="http://efod.se/writings/linuxbook/html/caps-lock-to-ctrl.html">Changing your caps lock into Ctrl in X</a>
</li>

<li><a href="https://wiki.archlinux.org/index.php/Xmodmap_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Xmodmap (简体中文)</a>
</li>
</ul>
</li>

<li>清除xmodmap以及setxkbmap的配置

<div class="org-src-container">

<pre class="src src-sh">setxkbmap -layout us
</pre>
</div>
</li>

<li>换hhkb pro2键盘

<p>
linux用户必备，ctrl和alt键已经放置到最优位置，而且后面的跳线开关支持常用的键位交换，即使是linux文本模式下也可用。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 6.4下安装redmine]]></title>
            <link>/article/centos-6.4-4e0b5b8988c5-redmine.html</link>
            <guid>/article/centos-6.4-4e0b5b8988c5-redmine.html</guid>
            <pubDate>Fri, 07 Mar 2014 06:17:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
本文为CentOS 6.4下安装redmine-2.5.0的笔记，按照 <a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall">官方文档</a> 进行安装。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">安装 <code>ruby</code></h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-sh">yum install ruby
yum install ruby-devel
yum install rubygems
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">安装 <code>redmine</code></h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-sh">wget <span style="color: #8abeb7;">'http://www.redmine.org/releases/redmine-2.5.0.tar.gz'</span>
tar xzvf redmine-2.5.0.tar.gz
gem install bundler
gem install mysql2.
yum install ImageMagick ImageMagick-devel
bundle install --without development test
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">配置 <code>redmine</code></h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>以 root 用户登录 <code>mysql</code>

<div class="org-src-container">

<pre class="src src-sh">mysql -uroot -p
</pre>
</div>
</li>

<li>创建 <code>redmine</code> 用户及库

<div class="org-src-container">

<pre class="src src-sql"><span style="color: #b5bd68;">CREATE</span> DATABASE redmine <span style="color: #81a2be;">CHARACTER</span> <span style="color: #b5bd68;">SET</span> utf8;
<span style="color: #b5bd68;">CREATE</span> <span style="color: #b294bb;">USER</span> <span style="color: #8abeb7;">'redmine'</span>@<span style="color: #8abeb7;">'localhost'</span> IDENTIFIED <span style="color: #b5bd68;">BY</span> <span style="color: #8abeb7;">'redmine'</span>;
<span style="color: #b5bd68;">GRANT</span> <span style="color: #b5bd68;">ALL</span> <span style="color: #b5bd68;">PRIVILEGES</span> <span style="color: #b5bd68;">ON</span> redmine.* <span style="color: #b5bd68;">TO</span> <span style="color: #8abeb7;">'redmine'</span>@<span style="color: #8abeb7;">'localhost'</span>;
</pre>
</div>
</li>

<li>修改数据库配置文件

<div class="org-src-container">

<pre class="src src-sh">cp config/database.yml.example config/database.yml
diff config/database.yml config/database.yml.example
10,11c10,11
&lt;   username: redmine
&lt;   password: <span style="color: #8abeb7;">"redmine"</span>
---
&gt;   username: root
&gt;   password: <span style="color: #8abeb7;">""</span>
</pre>
</div>
</li>

<li>初始化会话存储

<div class="org-src-container">

<pre class="src src-sh">rake generate_secret_token
</pre>
</div>
</li>

<li>创建数据库表结构

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #f0c674;">RAILS_ENV</span>=production rake db:migrate
</pre>
</div>
</li>

<li>解决上一步可能出现的错误

<blockquote>
<p>
rake aborted!
Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)
</p>

<p>
Tasks: TOP =&gt; db:migrate =&gt; environment
</p>
</blockquote>

<p>
确定 <code>mysql</code> 启动时指定的 <code>mysql.sock</code> 文件的路径
</p>

<div class="org-src-container">

<pre class="src src-sh">ps aux | grep mysql.sock
</pre>
</div>

<p>
显示的 <code>mysql.sock</code> 路径可能为“ <code>--socket=/tmp/mysql.sock</code> ”
</p>

<p>
修改 <code>redmine</code> 数据库配置，在 <code>production</code> 配置中添加 <code>socket</code> 项：
</p>

<pre class="example">
production:
  ...
  socket: /tmp/mysql.sock
</pre>

<p>
重新进行上一步操作。
</p>
</li>

<li>初始化数据

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #f0c674;">RAILS_ENV</span>=production <span style="color: #f0c674;">REDMINE_LANG</span>=zh rake redmine:load_default_data
</pre>
</div>
</li>

<li>创建相关目录

<div class="org-src-container">

<pre class="src src-sh">mkdir -p tmp tmp/pdf public/plugin_assets
sudo chown -R nobody:nobody files log tmp public/plugin_assets
sudo chmod -R 755 files log tmp public/plugin_assets
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">试运行 <code>redmine</code></h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">

<pre class="src src-sh">ruby script/rails server webrick -e production
</pre>
</div>

<ul class="org-ul">
<li>浏览器打开页面

<p>
<a href="http://localhost:3000">http://localhost:3000</a>
</p>

<p>
使用 用户名 <code>admin</code> ，密码 <code>admin</code> 登录后，立即修改密码。
</p>

<p>
使用下面的命令生成随机的密码：
</p>

<div class="org-src-container">

<pre class="src src-sh">cat /dev/urandom | head -1 | md5sum | head -c 8
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">配置 <code>redmine</code></h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>修改 <code>config/settings.yml</code>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">使用 <code>Nginx</code> 和 <code>passenger</code></h2>
<div class="outline-text-2" id="text-6">
<div class="org-src-container">

<pre class="src src-sh">wget <span style="color: #8abeb7;">'http://nginx.org/download/nginx-1.4.6.tar.gz'</span>
tar xzvf nginx-1.4.6.tar.gz
gem install passenger
yum install pcre-devel
passenger-install-nginx-module
</pre>
</div>

<ul class="org-ul">
<li>交互式安装过程

<ul class="org-ul">
<li>Automatically download and install Nginx?

<p>
选 2. No: I want to customize my Nginx installation. (for advanced users)
</p>
</li>

<li>Where is your Nginx source code located?

<p>
填解压的 <code>nginx</code> 源码包路径
</p>
</li>

<li>Where do you want to install Nginx to?

<p>
填 <code>/usr/local/nginx</code>
</p>
</li>
</ul>
</li>

<li>修改 /usr/local/nginx/conf/nginx.conf

<p>
在最后的 <code>}</code> 前添加以下配置
</p>

<pre class="example">
include vhosts/*.conf;
</pre>
</li>

<li>添加站点配置文件 <code>/usr/local/nginx/conf/vhosts/redmine.conf</code>

<pre class="example">
server {
  listen  80;
  server_name &lt;域名&gt;;
  root &lt;redmine根目录&gt;/public;
  passenger_enabled on;
  client_max_body_size 10m; # Max attachemnt size
}
</pre>
</li>

<li>启动 <code>nginx</code>

<div class="org-src-container">

<pre class="src src-sh">/usr/local/nginx/sbin/nginx
</pre>
</div>
</li>

<li>现在可以正式访问站点了

<p>
<a href="http://">http://</a>&lt;域名&gt;
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">支持 <code>OpenID</code> 第三方帐号登录</h2>
<div class="outline-text-2" id="text-7">
<ul class="org-ul">
<li>安装 <code>openid</code> 库

<div class="org-src-container">

<pre class="src src-sh">gem install ruby-openid
</pre>
</div>
</li>

<li>使用 <code>admin</code> 帐号登录系统，在“管理 - 配置 - 认证”中勾选上“允许使用OpenID登录和注册”。 
</li>

<li>用户注册时“密码”可以省略， 填上 <code>OpenID URL</code> 即可。
</li>

<li>如何获得Google的OpenID URL？

<ul class="org-ul">
<li>先在 <code>Google</code> 的站点上登录
</li>
<li>打开 <a href="https://profiles.google.com">https://profiles.google.com</a> 后会跳转到类似这样（ <code>https://plus.google.com/000000000000000000000/posts</code> ）的网页
</li>
<li>你的 <code>OpenID URL</code> 为 <a href="http://profiles.google.com/000000000000000000000">http://profiles.google.com/000000000000000000000</a>
</li>
</ul>
<p>
上面的 <code>000000000000000000000</code> 可能为任意的数字串
</p>
</li>

<li>管理员确认注册后即可在登录界面上输入 <code>OpenID URL</code> 直接登录

<p>
一般浏览器的输入框是有记忆功能的，双击后会出现输入历史下拉列表，直接选择即可。
</p>
</li>

<li>安装插件简化 <code>OpenID</code> 登录

<ul class="org-ul">
<li><a href="https://github.com/jorgebg/redmine-openid-selector">https://github.com/jorgebg/redmine-openid-selector</a> （不推荐） 为原始分枝，在 <code>redmine-2.5.0</code> 下不能直接安装会导致站点登录界面出现404错误，解决方案在 <a href="http://www.redmine.org/boards/3/topics/34327?r=38778#message-38778">这里</a> ，简而言之就是把插件目录名中的 <code>-</code> 改为 <code>_</code> 。
</li>

<li><a href="https://github.com/computerminds/redmine_openid_selector">https://github.com/computerminds/redmine_openid_selector</a> （不推荐） 这个分枝安装后可用，但界面为英文（其实界面就一句英文）。
</li>

<li><a href="https://github.com/tangxinfa/redmine_openid_selector">https://github.com/tangxinfa/redmine_openid_selector</a> （推荐） 为支持中文我fork了上一个分枝。
</li>

<li>通用的插件安装过程：

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">cd</span> plugins
git clone https://github.com/tangxinfa/redmine_openid_selector.git
rake redmine:plugins:migrate <span style="color: #f0c674;">RAILS_ENV</span>=production
touch tmp/restart.txt
</pre>
</div>
</li>

<li>通用的插件卸载过程：

<div class="org-src-container">

<pre class="src src-sh">rake redmine:plugins:migrate <span style="color: #f0c674;">NAME</span>=redmine-openid-selector <span style="color: #f0c674;">VERSION</span>=0 <span style="color: #f0c674;">RAILS_ENV</span>=pr<span style="text-decoration: underline;">oduction</span>
rm -rf plugins/redmine-openid-selector
touch tmp/restart.txt
</pre>
</div>
</li>
</ul>
<p>
现在在登录及注册页面直接点击第三方站点Logo即可。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">样式美化</h2>
<div class="outline-text-2" id="text-8">
<div class="org-src-container">

<pre class="src src-sh">git clone git://github.com/pixel-cookers/redmine-theme.git public/themes/pixel-c<span style="text-decoration: underline;">ookers</span>
touch tmp/restart.txt
</pre>
</div>

<p>
现在可以使用 <code>admin</code> 登录后台，在“管理 - 配置 - 显示 - 主题”中启用主题 <code>Pixel-cookers</code> 。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下允许普通用户执行需要root权限的命令]]></title>
            <link>/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html</link>
            <guid>/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html</guid>
            <pubDate>Thu, 26 Dec 2013 07:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
最典型的情况是要实现一个通过web界面重启系统的功能，通常为了安全会以非root用户身份（通常是nobody）运行服务端脚本，这样脚本中就不能执行危险操作了。
</p>

<p>
下面的c工具程序可以允许任意用户执行需要root权限的命令：
</p>

<p>
[[<a href="../static/as_root.c][as_root.c">../static/as_root.c][as_root.c</a>]
</p>

<p>
编译：
</p>
<div class="org-src-container">

<pre class="src src-sh">gcc -g as_root.c -o as_root
</pre>
</div>

<p>
配置：
</p>
<div class="org-src-container">

<pre class="src src-sh">chown root:root ./as_root; chmod 4755 ./as_root
</pre>
</div>

<p>
运行：
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo -u <span style="color: #8abeb7;">"nobody"</span> ./as_root <span style="color: #8abeb7;">"reboot"</span>
</pre>
</div>

<p>
参考：<a href="http://blog.tianya.cn/blogger/post_show.asp?BlogID=126326&PostID=1629441">如何在普通用户下执行一些需要root用户执行的命令</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下翻墙访问bitbucket.org仓库]]></title>
            <link>/article/linux-4e0b7ffb58998bbf95ee-bitbucket.org-4ed35e93.html</link>
            <guid>/article/linux-4e0b7ffb58998bbf95ee-bitbucket.org-4ed35e93.html</guid>
            <pubDate>Fri, 28 Jun 2013 05:57:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
今天往bitbucket.org push时才发现bitbucket被GFW了。我的仓库为Mercurial hg，hg项目根目录下的 <code>.hg/hgrc</code> 配置文件中可指定http_proxy，试了一下不支持socks代理（我的浏览器用它来翻墙），最终使用tsocks软件实现翻墙访问bitbucket.org仓库。
</p>

<ul class="org-ul">
<li>利用vps建本地socks代理的脚本 <code>ssh_proxy.sh</code>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

<span style="color: #f0c674;">n</span>=<span style="color: #b294bb;">`ps waux | grep 'bash .*/ssh_proxy.sh' | grep -v grep | wc -l`</span>
<span style="color: #b5bd68;">if</span> [ $<span style="color: #f0c674;">n</span> -lt 3 ]; <span style="color: #b5bd68;">then</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">while</span> [ true ]; <span style="color: #b5bd68;">do</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">n</span>=<span style="color: #b294bb;">`ps aux | grep 'ssh' | grep '7070' | grep -v grep | wc -l`</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">if</span> [ $<span style="color: #f0c674;">n</span> -lt 1 ]; <span style="color: #b5bd68;">then</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"start ssh connecting"</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   ssh -qTnNf -D 7070 user@host
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">fi</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"wait for next checking"</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   sleep 30
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">done</span>
<span style="color: #b5bd68;">fi</span>
<span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"ssh_proxy.sh already running"</span>
</pre>
</div>

<p>
请将user@host改为你的vps用户及主机，并配置为免输入密码。
</p>
</li>

<li>启动socks代理脚本

<div class="org-src-container">

<pre class="src src-sh">nohup bash ./ssh_proxy.sh &amp;
</pre>
</div>

<p>
浏览器也可以利用它来翻墙。
</p>
</li>

<li>安装tsocks
<div class="org-src-container">

<pre class="src src-sh">yaourt -S tsocks
</pre>
</div>
</li>

<li>配置tsocks

<p>
<code>/etc/tsocks.conf</code>
</p>
<pre class="example">
# We can access 192.168.0.* directly
local = 192.168.0.0/255.255.255.0
local = 10.0.0.0/255.0.0.0

# Otherwise we use the server
server = 127.0.0.1
server_port = 7070
</pre>
<p>
具体用法 <code>man tsocks.conf</code>
</p>
</li>

<li>使用tsocks让hg用上socks代理功能
<div class="org-src-container">

<pre class="src src-sh">tsocks hg push
</pre>
</div>
<p>
tsocks看起来很通用，应该也可以让git等进行socks代理访问。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下跨进程传递文件描述符]]></title>
            <link>/article/linux-4e0b8de88fdb7a0b4f20901265874ef663cf8ff07b26.html</link>
            <guid>/article/linux-4e0b8de88fdb7a0b4f20901265874ef663cf8ff07b26.html</guid>
            <pubDate>Sat, 09 Mar 2013 07:11:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">问题</h2>
<div class="outline-text-2" id="text-1">
<p>
在web开发中，以典型的php-fpm为例，对于到外部系统的连接（如：mysql、redis）等都提供了持久连接接口（pconnect），但是受限于多进程模型，事实上是每个php-fpm进程都有单独的一个连接池的（参见：《<a href="http:5f53-php-90474e0a-redis.html">当php遇上redis</a>》），大量空闲连接的存在不仅对系统资源造成了浪费（不单指fd空间，像mysql的每连接一线程会附带大量内存空间：sort_buffer、read_buffer等），而且整个系统将无法横向扩展（如：mysql连接数限制）。如果可以在进程间共享文件描述符，将可以大大提升系统性能，促进多进程模型的应用。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">方案</h2>
<div class="outline-text-2" id="text-2">
<p>
在linux平台下，sendmsg、recvmsg可以将一个进程的文件描述符传递给另一进程使用，这使得实现系统级的连接池成为可能。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">实现</h2>
<div class="outline-text-2" id="text-3">
<p>
《The Linux Programming Interface》61.13.3 Passing File Descriptors
</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[搭建jabber服务器]]></title>
            <link>/article/642d5efa-jabber-670d52a15668.html</link>
            <guid>/article/642d5efa-jabber-670d52a15668.html</guid>
            <pubDate>Tue, 03 May 2011 16:32:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li>编译安装

<p>
<code>下载</code>
</p>
<div class="org-src-container">

<pre class="src src-sh">wget http://download.jabberd.org/jabberd14/jabberd14-1.6.1.1.tar.gz
tar xzvf jabberd14-1.6.1.1.tar.gz
<span style="color: #b294bb;">cd</span> jabberd14-1.6.1.1
</pre>
</div>

<p>
<code>修改代码以解决编译错误</code>
</p>
<div class="org-src-container">

<pre class="src src-sh">diff -r jabberd14-1.6.1.1/jabberd/lib/xmlnode.cc tmp/jabberd14-1.6.1.1/jabberd/l<span style="text-decoration: underline;">ib/xmlnode.cc</span>
882,884c882,884
&lt;     const char *next_step = NULL;
&lt;     const char *start_predicate = NULL;
&lt;     const char *end_predicate = NULL;
---
&gt;     char *next_step = NULL;
&gt;     char *start_predicate = NULL;
&gt;     char *end_predicate = NULL;
1836c1836
&lt;         ((char*)strchr(lang, <span style="color: #8abeb7;">'-'</span>))[0] = 0;
---
&gt;         strchr(lang, <span style="color: #8abeb7;">'-'</span>)[0] = 0;
diff -r jabberd14-1.6.1.1/jabberd/log.cc tmp/jabberd14-1.6.1.1/jabberd/log.cc
89c89
&lt;         pos = (char*)strchr(zone,<span style="color: #8abeb7;">'.'</span>);
---
&gt;     pos = strchr(zone,<span style="color: #8abeb7;">'.'</span>);
diff -r jabberd14-1.6.1.1/jabberd/mio_tls.cc tmp/jabberd14-1.6.1.1/jabberd/mio_t<span style="text-decoration: underline;">ls.cc</span>
615c615
&lt;         ret = gnutls_certificate_set_openpgp_key_file(current_credentials, pub<span style="text-decoration: underline;">file, privfile, GNUTLS_OPENPGP_FMT_BASE64);</span>
---
&gt;         ret = gnutls_certificate_set_openpgp_key_file(current_credentials, pub<span style="text-decoration: underline;">file, privfile);</span>
634c634
&lt;         ret = gnutls_certificate_set_openpgp_keyring_file(current_credentials,<span style="text-decoration: underline;"> file, GNUTLS_OPENPGP_FMT_BASE64);</span>
---
&gt;         ret = gnutls_certificate_set_openpgp_keyring_file(current_credentials,<span style="text-decoration: underline;"> file);</span>
640a641,657
&gt;     }
&gt;
&gt;     // load GnuPG trustdb
&gt;     if (j_strcmp(xmlnode_get_localname(cur), <span style="color: #8abeb7;">"trustdb"</span>) == 0) {
&gt;         char const *const file = xmlnode_get_data(cur);
&gt;
&gt;         if (file == NULL) {
&gt;         log_warn(NULL, <span style="color: #8abeb7;">"Initializing TLS subsystem: &lt;trustdb/&gt; element inside </span><span style="color: #8abeb7; text-decoration: underline;">the TLS configuration, that does not contain a file-name."</span><span style="text-decoration: underline;">);</span>
&gt;         continue;
&gt;         }
&gt;
&gt;         // load the GnuPG trustdb
&gt;         ret = gnutls_certificate_set_openpgp_trustdb(current_credentials, file<span style="text-decoration: underline;">);</span>
&gt;         if (ret &lt; 0) {
&gt;         log_error(NULL, <span style="color: #8abeb7;">"Error loading GnuPG trustdb %s: %s"</span>, file, gnutls_str<span style="text-decoration: underline;">error(ret));</span>
&gt;         continue;
&gt;         }
</pre>
</div>

<p>
<code>编译安装</code>
</p>
<div class="org-src-container">

<pre class="src src-sh">./configure &amp;&amp; make &amp;&amp; sudo make install
</pre>
</div>

<p>
如出错通常是少了相关依赖库，用包管理工具（如：ubuntu下的新立得）安装即可。
</p>
</li>

<li>配置

<p>
按照mysql.sql中的注释配置数据库：
</p>

<div class="org-src-container">

<pre class="src src-sh">mysql -uroot -p
mysql&gt; CREATE DATABASE jabber CHARACTER SET utf8;
mysql&gt; use jabber;
mysql&gt; grant all on jabber.* to jabber@localhost identified by <span style="color: #8abeb7;">'secret'</span>;
mysql&gt; <span style="color: #8abeb7;">\.</span> mysql.sql
</pre>
</div>
</li>

<li>运行

<div class="org-src-container">

<pre class="src src-sh">sudo jabberd -h localhost -B
</pre>
</div>
</li>

<li>注册用户1

<div class="org-src-container">

<pre class="src src-sh">telnet localhost 5222
&lt;stream:stream
<span style="color: #c5c8c6; background-color: #373b41;"> </span> <span style="color: #f0c674;">to</span>=<span style="color: #8abeb7;">'localhost'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span> <span style="color: #f0c674;">xmlns</span>=<span style="color: #8abeb7;">'jabber:client'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span> xmlns:<span style="color: #f0c674;">stream</span>=<span style="color: #8abeb7;">'http://etherx.jabber.org/streams'</span>&gt;

&lt;iq <span style="color: #f0c674;">id</span>=<span style="color: #8abeb7;">'reg1'</span> <span style="color: #f0c674;">type</span>=<span style="color: #8abeb7;">'set'</span>&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> &lt;query <span style="color: #f0c674;">xmlns</span>=<span style="color: #8abeb7;">'jabber:iq:register'</span>&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;username&gt;jack&lt;/username&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;password&gt;jack&lt;/password&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;name&gt;jack&lt;/name&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;email&gt;&lt;/email&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> &lt;/query&gt;
&lt;/iq&gt;

&lt;/stream:stream&gt;
</pre>
</div>
</li>

<li>登录用户1

<pre class="example">
Empathy菜单-&gt;编辑-&gt;帐户-&gt;添加：
协议: Jabber
登录ID: jack@localhost
记住密码
密码: jack
登录
</pre>
</li>

<li>注册用户2

<div class="org-src-container">

<pre class="src src-sh">telnet localhost 5222
&lt;stream:stream
<span style="color: #c5c8c6; background-color: #373b41;"> </span> <span style="color: #f0c674;">to</span>=<span style="color: #8abeb7;">'localhost'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span> <span style="color: #f0c674;">xmlns</span>=<span style="color: #8abeb7;">'jabber:client'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span> xmlns:<span style="color: #f0c674;">stream</span>=<span style="color: #8abeb7;">'http://etherx.jabber.org/streams'</span>&gt;

&lt;iq <span style="color: #f0c674;">id</span>=<span style="color: #8abeb7;">'reg1'</span> <span style="color: #f0c674;">type</span>=<span style="color: #8abeb7;">'set'</span>&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> &lt;query <span style="color: #f0c674;">xmlns</span>=<span style="color: #8abeb7;">'jabber:iq:register'</span>&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;username&gt;rose&lt;/username&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;password&gt;rose&lt;/password&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;name&gt;rose&lt;/name&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;email&gt;&lt;/email&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> &lt;/query&gt;
&lt;/iq&gt;

&lt;/stream:stream&gt;
</pre>
</div>
</li>

<li>用户1加用户2为联系人

<pre class="example">
Empathy菜单-&gt;聊天-&gt;添加联系人:
帐户：jack@localhost
标识符: rose@localhost
添加
</pre>
</li>

<li>登录用户2，并发一个消息给用户1

<div class="org-src-container">

<pre class="src src-sh">telnet localhost 5222
&lt;stream:stream
<span style="color: #c5c8c6; background-color: #373b41;"> </span> <span style="color: #f0c674;">to</span>=<span style="color: #8abeb7;">'localhost'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span> <span style="color: #f0c674;">xmlns</span>=<span style="color: #8abeb7;">'jabber:client'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span> xmlns:<span style="color: #f0c674;">stream</span>=<span style="color: #8abeb7;">'http://etherx.jabber.org/streams'</span>&gt;

&lt;iq <span style="color: #f0c674;">id</span>=<span style="color: #8abeb7;">'auth1'</span> <span style="color: #f0c674;">type</span>=<span style="color: #8abeb7;">'set'</span>&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> &lt;query <span style="color: #f0c674;">xmlns</span>=<span style="color: #8abeb7;">'jabber:iq:auth'</span>&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;username&gt;rose&lt;/username&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;password&gt;rose&lt;/password&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   &lt;resource&gt;test&lt;/resource&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> &lt;/query&gt;
&lt;/iq&gt;

&lt;presence/&gt;

&lt;message <span style="color: #f0c674;">to</span>=<span style="color: #8abeb7;">'jack@localhost'</span>&gt;
<span style="color: #c5c8c6; background-color: #373b41;"> </span> &lt;body&gt;hello, jack&lt;/body&gt;
&lt;/message&gt;

&lt;/stream:stream&gt;
</pre>
</div>
</li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>