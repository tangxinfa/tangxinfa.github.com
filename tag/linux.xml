<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>linux - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/linux.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Mon, 14 Sep 2020 09:18:25 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>linux - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/linux.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[mlterm-fb 与 fbterm 的比较]]></title>
            <link>/article/mlterm-fb-4e0e-fbterm-76846bd48f83.html</link>
            <guid>/article/mlterm-fb-4e0e-fbterm-76846bd48f83.html</guid>
            <pubDate>Sat, 12 Oct 2019 10:35:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a> 是跟 <a href="https://code.google.com/archive/p/fbterm/">fbterm</a>  类似，是 linux 下支持中文的基于 framebuffer 的终端模拟器，基于使用体验对它们做一下比较。
</p>

<div id="outline-container-orgd060e26" class="outline-2">
<h2 id="orgd060e26">维护活跃度</h2>
<div class="outline-text-2" id="text-orgd060e26">
<p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a> &gt; <a href="https://code.google.com/archive/p/fbterm/">fbterm</a>
</p>

<ul class="org-ul">
<li><p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> 
</p>

<p>
开发已经停止，目前处于维护状态。
</p></li>

<li><p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a>
</p>

<p>
做为 <a href="https://sourceforge.net/projects/mlterm/">mlterm</a> 支持的一个环境目前仍然在继续开发。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org12d3945" class="outline-2">
<h2 id="org12d3945">成熟度</h2>
<div class="outline-text-2" id="text-org12d3945">
<p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> &gt; <a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a>
</p>

<ul class="org-ul">
<li><p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> 
</p>

<p>
相对比较成熟，网上相关资料比较丰富。
</p></li>

<li><p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a> 
</p>

<p>
很不成熟，网上相关资料很少。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org72e9c13" class="outline-2">
<h2 id="org72e9c13">显示稳定性</h2>
<div class="outline-text-2" id="text-org72e9c13">
<p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> &gt; <a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a>
</p>

<ul class="org-ul">
<li><p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> 
</p>

<p>
界面很少出现坏块。
</p></li>

<li><p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a>
</p>

<p>
从其它 TTY 切回来后显示黑屏，需要手工刷新一次屏幕。
</p>

<p>
界面经常出现坏块，光标处文字容易显示错位。
</p>

<p>
有可能是我的 <a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a> 配置问题引起，跟 <a href="https://code.google.com/archive/p/fbterm/">fbterm</a> 开启 <code>ambiguous-wide=yes</code> 配置项后遇到特殊字符（Unicode 图标）时出现的问题比较类似。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgebf717a" class="outline-2">
<h2 id="orgebf717a">重绘速度</h2>
<div class="outline-text-2" id="text-orgebf717a">
<p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> &gt; <a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a>
</p>

<ul class="org-ul">
<li><p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> 
</p>

<p>
重绘快速，应该是采用 Double-Buffer 的结果。
</p></li>

<li><p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a> 
</p>

<p>
重绘很慢，应该是没有采用 Double-Buffer 的结果。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org125113a" class="outline-2">
<h2 id="org125113a">颜色支持</h2>
<div class="outline-text-2" id="text-org125113a">
<p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a> &gt; <a href="https://code.google.com/archive/p/fbterm/">fbterm</a>
</p>

<ul class="org-ul">
<li><p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> 
</p>

<p>
支持 256 色。
</p></li>

<li><p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a>
</p>

<p>
支持 24 位真彩色。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgd005ace" class="outline-2">
<h2 id="orgd005ace">字体显示效果</h2>
<div class="outline-text-2" id="text-orgd005ace">
<p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a> &gt; <a href="https://code.google.com/archive/p/fbterm/">fbterm</a>
</p>

<ul class="org-ul">
<li><p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> 
</p>

<p>
需要谨慎选择及微调字体，显示效果一般。
</p></li>

<li><p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a> 
</p>

<p>
开箱即用，显示效果好。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org887b634" class="outline-2">
<h2 id="org887b634">键盘支持</h2>
<div class="outline-text-2" id="text-org887b634">
<p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a> &gt; <a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a>
</p>

<ul class="org-ul">
<li><p>
<a href="https://code.google.com/archive/p/fbterm/">fbterm</a>
</p>

<p>
开箱即用，不需要配置。
</p></li>

<li><p>
<a href="https://sourceforge.net/projects/mlterm/">mlterm-fb</a> 
</p>

<p>
只支持一个键盘。
</p>

<p>
可通过环境变量 <code>KBD_INPUT_NUM</code> 明确指定键盘设备编号，指定设备编号为 <code>-1</code> 表面上是支持多个键盘了，但是 Alt 键会失效。
</p>

<p>
详见文档 <a href="https://bitbucket.org/arakiken/mlterm/src/tip/doc/en/README.fb">arakiken / mlterm / doc / en / README.fb — Bitbucket</a></p></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux 手工安装 AUR 包]]></title>
            <link>/article/archlinux-624b5de55b8988c5-aur-5305.html</link>
            <guid>/article/archlinux-624b5de55b8988c5-aur-5305.html</guid>
            <pubDate>Mon, 28 Jan 2019 07:19:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
以 <code>libfprint-git</code> 包为例。
</p>

<ul class="org-ul">
<li><p>
下载包信息
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -G libfprint-git
<span style="color: #A020F0;">cd</span> libfprint-git
</pre>
</div></li>

<li><p>
修改包信息
</p>

<p>
可编辑 <code>PKGBUILD</code> 文件，如 <code>source</code> 指定 <code>branch</code>
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">source</span>=(<span style="color: #4E9A06;">"git+https://gitlab.freedesktop.org/libfprint/libfprint.git"</span>)
</pre>
</div>

<p>
改为
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">source</span>=(<span style="color: #4E9A06;">"git+https://gitlab.freedesktop.org/libfprint/libfprint.git#branch=wip/h</span><span style="color: #4E9A06; text-decoration: underline;">adess/too-many-minutiae"</span><span style="text-decoration: underline;">)</span>
</pre>
</div></li>

<li>下载包源代码</li>
</ul>

<div class="org-src-container">
<pre class="src src-sh">makepkg -sr --nobuild
</pre>
</div>

<ul class="org-ul">
<li><p>
修改源代码
</p>

<p>
修改 <code>src/libfprint</code> 下的项目源代码文件
</p></li>

<li><p>
编译安装修改后的包
</p>

<div class="org-src-container">
<pre class="src src-sh">makepkg -ei
</pre>
</div>

<p>
如果之前有编译出包，需要将它删除，否则不会重新编译而是安装之前的包
</p>

<div class="org-src-container">
<pre class="src src-sh">rm libfprint-git-*-x86_64.pkg.tar.xz
</pre>
</div></li>

<li><p>
参考
</p>

<p>
<a href="https://wiki.archlinux.org/index.php/Makepkg">makepkg - ArchWiki</a>
</p>

<p>
<a href="https://jlk.fjfi.cvut.cz/arch/manpages/man/PKGBUILD.5">PKGBUILD(5) — Arch manual pages</a>
</p>

<p>
<a href="https://linuxtoy.org/archives/archlinux-pkgbuild-aur-and-abs.html">Archlinux 的灵魂──PKGBUILD、AUR 和 ABS (1) · LinuxTOY</a></p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 deprecated 声明防止开发人员使用危险的系统函数]]></title>
            <link>/article/4f7f7528-deprecated-58f0660e96326b625f0053d14eba54584f7f75285371966976847cfb7edf51fd6570.html</link>
            <guid>/article/4f7f7528-deprecated-58f0660e96326b625f0053d14eba54584f7f75285371966976847cfb7edf51fd6570.html</guid>
            <pubDate>Mon, 28 Jan 2019 07:19:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在 linux 下开发时有一些系统函数初看起来很易用，其实却非常危险，比如 <code>dirname</code> 和
<code>basename</code> ，其中 <code>dirname</code> 用来获取路径除去文件名的部分， <code>basename</code> 用来获取文件名部分，函数原型定义如下：
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #00578E; font-weight: bold;">dirname</span>(<span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">path</span>);
<span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #00578E; font-weight: bold;">basename</span>(<span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">path</span>);
</pre>
</div>

<p>
从原型可以初步看出，很难有安全的实现方式，要么直接修改参数 <code>path</code> ，要么返回一个新的 buffer 存放获取到的文件路径部分，没有标准来明确应该使用哪种实现方式。
</p>

<p>
也就是说这两个函数是有负作用的，并没有想像中的那么易用。而开发人员在开发过程中很容易就忽略了它的负作用，导致未定义的行为。
</p>

<p>
对于一个有大量开发人员参与的项目，很难防止开发人员误用这些系统函数，加强对开发人员的教育以及代码 review 可以减少危险，但是无法从根本上解决问题。
</p>

<p>
一个比较好的方式添加 deprecated 声明，项目代码中一旦用到这些函数则报编译告警。以
<code>basename</code> 为例，在项目通用的头文件中添加 deprecated 声明：
</p>

<div class="org-src-container">
<pre class="src src-c"> <span style="color: #A52A2A; font-weight: bold;">__attribute__</span> ((<span style="color: #2F8B58; font-weight: bold;">deprecated</span>))
<span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #00578E; font-weight: bold;">dirname</span>(<span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">path</span>);
</pre>
</div>

<p>
所有用到 <code>dirname</code> 的地方都会编译告警，开发人员通过使用安全版本的系统函数（如：
<code>dirname_r</code> ）来修复编译告警。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux 下编译 Android]]></title>
            <link>/article/archlinux-4e0b7f168bd1-android.html</link>
            <guid>/article/archlinux-4e0b7f168bd1-android.html</guid>
            <pubDate>Thu, 09 Aug 2018 07:26:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-orgc18192c" class="outline-2">
<h2 id="orgc18192c">安装 openjdk</h2>
<div class="outline-text-2" id="text-orgc18192c">
<p>
根据 Android 版本选择 <code>openjdk</code> 版本进行安装
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S jdk8-openjdk
</pre>
</div>

<ul class="org-ul">
<li>参考 <a href="https://wiki.archlinux.org/index.php/Android#Java_Development_Kit">Java_Development_Kit - Android - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgdc68a82" class="outline-2">
<h2 id="orgdc68a82">安装 repo</h2>
<div class="outline-text-2" id="text-orgdc68a82">
<p>
<a href="https://android.googlesource.com/tools/repo">repo</a> 是用来从多个 <code>Git</code> 仓库构建 <code>Android</code> 的工具。
</p>

<div class="org-src-container">
<pre class="src src-sh">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/repo
chmod a+x ~/repo
sudo mv ~/repo /usr/local/bin/
</pre>
</div>

<p>
参考 <a href="https://source.android.com/setup/build/downloading#installing-repo">Downloading the Source  |  Android Open Source Project</a>
</p>
</div>
</div>

<div id="outline-container-org605b78f" class="outline-2">
<h2 id="org605b78f">设置编译环境</h2>
<div class="outline-text-2" id="text-org605b78f">
<div class="org-src-container">
<pre class="src src-sh">mkdir -p ~/Opensource/android
<span style="color: #A020F0;">cd</span> ~/Opensource/android
virtualenv2 venv
<span style="color: #A020F0;">source</span> venv/bin/activate
</pre>
</div>

<ul class="org-ul">
<li>参考 <a href="https://wiki.archlinux.org/index.php/Android#Setting_up_the_build_environment">Setting up the build environment - Android - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-org1175b7b" class="outline-2">
<h2 id="org1175b7b">下载源代码</h2>
<div class="outline-text-2" id="text-org1175b7b">
<div class="org-src-container">
<pre class="src src-sh">repo init -u https://android.googlesource.com/platform/manifest -b master
repo sync -j4
</pre>
</div>

<p>
以后如果要同步最新代码，则执行
</p>

<div class="org-src-container">
<pre class="src src-sh">repo sync
</pre>
</div>

<p>
下载过程中可能被墙导致失败，可以考虑使用 <code>proxychains</code> 来翻墙，最好还是国内找一个镜像，加快下载速度。
</p>

<p>
代码有几十个 G，下载和编译都需要很长时间。
</p>

<ul class="org-ul">
<li>参考 <a href="https://wiki.archlinux.org/index.php/Android#Downloading%20the%20source%20code">Downloading the source code - Android - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-org44b0872" class="outline-2">
<h2 id="org44b0872">编译</h2>
<div class="outline-text-2" id="text-org44b0872">
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">source</span> build/envsetup.sh
lunch full-eng
make -j4
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd6fa73f" class="outline-2">
<h2 id="orgd6fa73f">测试</h2>
<div class="outline-text-2" id="text-orgd6fa73f">
<div class="org-src-container">
<pre class="src src-sh">emulator
</pre>
</div>
</div>
</div>

<div id="outline-container-orge61b59c" class="outline-2">
<h2 id="orge61b59c">参考</h2>
<div class="outline-text-2" id="text-orge61b59c">
<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/Android#Building">Building - Android - ArchWiki</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CMakeLists.txt 如何控制库路径的顺序]]></title>
            <link>/article/cmakelists.txt-59824f5563a752365e938def5f847684987a5e8f.html</link>
            <guid>/article/cmakelists.txt-59824f5563a752365e938def5f847684987a5e8f.html</guid>
            <pubDate>Thu, 12 Jul 2018 10:10:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
一般来说，系统默认的配置会放在 <code>LDFLAGS</code> 环境变量中，用于指定默认的库查找路径，有一些子项目会使用自已附带的最新版或定制版第三方库，会希望将自已附带的库路径放到最前面。
</p>

<p>
<code>LDFLAGS</code> 环境变量指定了库查找路径 A <code>-L/opt/a/lib</code> ， <code>CMakeLists.txt</code> 指定了库查找路径 B <code>link_directories(/opt/b/lib)</code> ，实际上 A 总是会位于 B 之前，这是因为
CMake 并没有解析 <code>LDFLAGS</code> 中的 <code>-L</code> 选项。
</p>

<p>
相关讨论 <a href="https://cmake.org/pipermail/cmake/2007-November/017479.html">{CMake} Link directories order</a>
</p>

<p>
当对库查找路径的顺序有要求时，不应该使用 <code>link_directories</code> 选项来指定库查找路径，而是使用 <code>CMAKE_*_LINKER_FLAGS</code> ，如
</p>

<div class="org-src-container">
<pre class="src src-cmake"><span style="color: #00578E; font-weight: bold;">set</span>(CMAKE_EXE_LINKER_FLAGS <span style="color: #4E9A06;">"-L/opt/b/lib ${</span><span style="color: #0084C8; font-weight: bold;">CMAKE_EXE_LINKER_FLAGS</span><span style="color: #4E9A06;">}"</span>)
</pre>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 下 Go gRPC 编译环境搭建]]></title>
            <link>/article/centos-4e0b-go-grpc-7f168bd173af5883642d5efa.html</link>
            <guid>/article/centos-4e0b-go-grpc-7f168bd173af5883642d5efa.html</guid>
            <pubDate>Tue, 12 Dec 2017 11:28:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
安装 <code>protobuf</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">git clone https://github.com/google/protobuf.git
<span style="color: #A020F0;">cd</span> protobuf
git checkout v3.4.1 -b v3.4.1
./autogen.sh
./configure
make
make install
</pre>
</div></li>

<li><p>
安装 <code>protobuf go 插件</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
</pre>
</div>

<p>
在 <code>~/.profile</code> 中将 <code>protoc-gen-go</code> 所在路径加到 <code>PATH</code> 环境变量中
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">PATH</span>=<span style="color: #4E9A06;">"`go env GOPATH`/bin:$PATH"</span>
</pre>
</div>

<p>
最新版本的 <code>protoc-gen-go</code> 默认生成的 protobuf 4.x 的代码，我们的项目目前还是使用 protobuf 3.x，这会导致生成的代码无法通过编译，错误信息
</p>
<pre class="example">
xxx.pb.go:2799:21: c.cc.NewStream undefined (type *grpc.ClientConn has no field or method NewStream)
xxx.pb.go:2831:13: c.cc.Invoke undefined (type *grpc.ClientConn has no field or method Invoke)
</pre>

<p>
需要改回生成 protobuf 3.x 的代码，修改
<code>github.com/golang/protobuf/protoc-gen-go/grpc/grpc.go</code>
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #F5666D;">generatedCodeVersion</span> = 4
</pre>
</div>
<p>
改为 
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #F5666D;">generatedCodeVersion</span> = 3
</pre>
</div>

<p>
重新编译安装 <code>protoc-gen-go</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">cd</span> github.com/golang/protobuf
make install
</pre>
</div></li>

<li><p>
参考
</p>

<p>
<a href="http://www.jianshu.com/p/e2435b834d68">golang开发环境搭建-安装go 和 grpc - 简书</a>
</p>

<p>
<a href="https://github.com/golang/protobuf/issues/264">grpc version conflict · Issue #264 · golang/protobuf</a>
</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux 下调试剥去调试信息的程序崩溃]]></title>
            <link>/article/linux-4e0b8c038bd5526553bb8c038bd54fe1606f76847a0b5e8f5d296e83.html</link>
            <guid>/article/linux-4e0b8c038bd5526553bb8c038bd54fe1606f76847a0b5e8f5d296e83.html</guid>
            <pubDate>Tue, 14 Nov 2017 10:18:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-orgcc2a6a9" class="outline-2">
<h2 id="orgcc2a6a9">为什么要剥去调试信息</h2>
<div class="outline-text-2" id="text-orgcc2a6a9">
<ul class="org-ul">
<li><p>
减少程序文件尺寸
</p>

<p>
剥去掉调试信息后，程序可能只有之前的 1/5 大小，占用的空间更少，下载安装更快。
</p></li>

<li><p>
安全
</p>

<p>
函数、变量名称去掉后能够大大增加逆向工程的难度。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgc9259b8" class="outline-2">
<h2 id="orgc9259b8">如何添加调试信息</h2>
<div class="outline-text-2" id="text-orgc9259b8">
<p>
<code>gcc</code> 编译程序时指定 <code>-g</code> 选项。
</p>
</div>
</div>

<div id="outline-container-org6fbe938" class="outline-2">
<h2 id="org6fbe938">如何剥去调试信息</h2>
<div class="outline-text-2" id="text-org6fbe938">
<div class="org-src-container">
<pre class="src src-sh">strip /path/to/app
</pre>
</div>
</div>
</div>

<div id="outline-container-org26732e6" class="outline-2">
<h2 id="org26732e6">从程序崩溃后产生的 core 文件定位源代码行</h2>
<div class="outline-text-2" id="text-org26732e6">
<ul class="org-ul">
<li><p>
示例程序
</p>

<p>
<code>app.c</code>
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;unistd.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;stdio.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;stdlib.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;pthread.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;errno.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;stdint.h&gt;</span>

<span style="color: #2F8B58; font-weight: bold;">void</span> <span style="color: #00578E; font-weight: bold;">bug</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">id</span>) {
  <span style="color: #204A87;">/* </span><span style="color: #204A87;">illegal pointer, si_code = 128 (send by kernel)</span><span style="color: #204A87;"> */</span>
  printf(<span style="color: #4E9A06;">"[%d] This is bug\n"</span>, id);
  <span style="color: #2F8B58; font-weight: bold;">int</span> *<span style="color: #0084C8; font-weight: bold;">p</span> = (<span style="color: #2F8B58; font-weight: bold;">int</span> *)-1;
  printf(<span style="color: #4E9A06;">"%d\n"</span>, *p);
}

<span style="color: #2F8B58; font-weight: bold;">void</span> <span style="color: #00578E; font-weight: bold;">extra_func</span>() {
  printf(<span style="color: #4E9A06;">""</span>);
}

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">func_b</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">id</span>)
{
  printf(<span style="color: #4E9A06;">"[%d] This is func_b\n"</span>, id);
  sleep(rand()%5);
  extra_func();
  bug(id);
  extra_func();
}

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">func_a</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">id</span>)
{
  printf(<span style="color: #4E9A06;">"[%d] This is func_a\n"</span>, id);
  sleep(rand()%5);
  extra_func();
  func_b(id);
  extra_func();
}

<span style="color: #2F8B58; font-weight: bold;">void</span>* <span style="color: #00578E; font-weight: bold;">func</span>(<span style="color: #2F8B58; font-weight: bold;">void</span>* <span style="color: #0084C8; font-weight: bold;">param</span>) {
  <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">id</span> = (<span style="color: #2F8B58; font-weight: bold;">int</span>)param;
  sleep(1);
  extra_func();
  func_a(id);
  extra_func();
  <span style="color: #A52A2A; font-weight: bold;">return</span> <span style="color: #F5666D;">NULL</span>;
}

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">argc</span>, <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">argv</span>[])
{
  <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">i</span>;
  <span style="color: #A52A2A; font-weight: bold;">for</span>(i = 0; i &lt; 10; ++i) {
    <span style="color: #2F8B58; font-weight: bold;">pthread_t</span> <span style="color: #0084C8; font-weight: bold;">pid</span>;
    <span style="color: #A52A2A; font-weight: bold;">if</span> (0 != pthread_create(&amp;pid, <span style="color: #F5666D;">NULL</span>, func, (<span style="color: #2F8B58; font-weight: bold;">void</span>*)i)) {
      fprintf(stderr, <span style="color: #4E9A06;">"create thread %d failed (%d).\n"</span>, errno);
      exit(1);
    }
  }

  sleep(100);

  <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}
</pre>
</div>

<p>
编译
</p>

<div class="org-src-container">
<pre class="src src-sh">gcc -g -O2 app.c -lm -lpthread -o app
</pre>
</div></li>

<li><p>
记得保留调试信息
</p>

<p>
一种简单的方法是保留未剥去调试信息前的可执行程序
</p>
<div class="org-src-container">
<pre class="src src-sh">cp app app_debug
strip app
</pre>
</div>

<p>
或者保留调试信息到调试符号文件
</p>
<div class="org-src-container">
<pre class="src src-sh">objcopy --only-keep-debug app app.debug
strip app
objcopy --add-gnu-debuglink=app.debug app
</pre>
</div>
<p>
这种方法在调试时需要将调试符号 <code>app.debug</code> 文件放到当前目录下，或者在 <code>gdb</code> 中通过 <code>set debug-file-directory /tmp/debug</code> 指定其它目录（如 <code>/tmp/debug</code> ）。详情请参考 <a href="https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html">Debugging with GDB: Separate Debug Files</a> 。
</p>

<p>
并不是所有工具都和 <code>gdb</code> 一样支持分离的调试符号文件，如 <code>str2line</code> 就不支持，可以将调试符号文件和 strip 后的可执行程序重新合并成带调试符号的程序
<code>app_debug</code> ：
</p>
<div class="org-src-container">
<pre class="src src-sh">cp ./app.debug ./app_debug
eu-unstrip ./app ./app_debug
</pre>
</div>
<p>
参考 <a href="https://stackoverflow.com/questions/2509301/how-to-reverse-the-objcopys-strip-with-only-keep-debug/38645662#38645662">binutils - How to reverse the objcopy's strip with only-keep-debug? - Stack Overflow</a>
</p></li>

<li><p>
运行程序崩溃产生 core 文件
</p>

<pre class="example">
$ ulimit -c unlimited
$ ./app
[2] This is func_a
[5] This is func_a
[8] This is func_a
[7] This is func_a
[3] This is func_a
[4] This is func_a
[7] This is func_b
[4] This is func_b
[9] This is func_a
[0] This is func_a
[6] This is func_a
[1] This is func_a
[5] This is func_b
[7] This is bug
[5] This is bug
[0] This is func_b
Segmentation fault (core dumped)
</pre>

<p>
以 <code>Archlinux</code> 为例，core 文件由 systemd 接管，提取 core 文件到当前目录下
</p>

<div class="org-src-container">
<pre class="src src-sh">coredumpctl -r -1 -o app.core dump app
</pre>
</div></li>

<li><p>
使用 <code>gdb</code> 从 core 文件获取崩溃调用栈
</p>

<p>
使用 <code>gdb</code> 提取崩溃调用栈使用 strip 掉调试符号的可执行程序即可，因此可以在现场进行提取。
</p>

<pre class="example">
$ gdb -q --nh --nx --batch -ex bt ./app --core=./app.core
[New LWP 7790]
[New LWP 7783]
[New LWP 7785]
[New LWP 7791]
[New LWP 7786]
[New LWP 7787]
[New LWP 7789]
[New LWP 7784]
[New LWP 7788]
[New LWP 7782]
[New LWP 7792]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/usr/lib/libthread_db.so.1".
Core was generated by `./app'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x000055de44fb79a4 in ?? ()
[Current thread is 1 (Thread 0x7f60834ee700 (LWP 7790))]
#0  0x000055de44fb79a4 in ?? ()
#1  0x000055de44fb7a0b in ?? ()
#2  0x000055de44fb7a65 in ?? ()
#3  0x00007f60872e508a in start_thread () from /usr/lib/libpthread.so.0
#4  0x00007f608701c47f in clone () from /usr/lib/libc.so.6
</pre></li>

<li><p>
使用 <code>eu-addr2line</code> 获取地址对应的代码行
</p>

<pre class="example">
$ eu-addr2line -e ./app_debug --core ./app.core 0x000055de44fb79a4 0x000055de44fb7a0b 0x000055de44fb7a65
/home/tangxinfa/Examples/c/addr2line_demo/app.c:12
/home/tangxinfa/Examples/c/addr2line_demo/app.c:26
/home/tangxinfa/Examples/c/addr2line_demo/app.c:44
</pre>

<p>
<code>app.c:12</code> 正对应产生崩溃的代码行：
</p>
<div class="org-src-container">
<pre class="src src-c">printf(<span style="color: #4E9A06;">"%d\n"</span>, *p);
</pre>
</div>

<p>
但是除了崩溃的位置给出了正确的代码行 <code>app.c:12</code> ，其它两处给出的代码行指向了函数定义的尾扩号处，如果一个函数有在多个地方调用另一函数，则无法区分具体是哪个地方的调用引起了崩溃。
</p>

<p>
问题：依赖于 core 文件
</p>

<p>
一般来说崩溃可能发生在不受控的设备里，如果崩溃产生的 core 文件过大则上传会耗时过长，甚至有的网络环境是按流量收费的，需要找到一种方法直接从可执行程序或其它信息获取到崩溃的源代码行。
</p></li>

<li><p>
使用 <code>addr2line</code> 获取地址对应的代码行
</p>

<pre class="example">
$ addr2line -e ./app_debug 0x000055de44fb79a4
??:0
</pre>
<p>
使用 addr2line 获取 gdb 输出的调用栈地址对应的源代码行失败了，应该是 addr2line
不支持重定址（relocations）后的地址，程序运行时的地址一般都是重定址过的。这估计也是前面的 <code>eu-addr2line</code> 工具需要 <code>core</code> 文件的原因，它可以从 core 文件获取信息拿到重定址前的地址值。
</p>

<p>
<code>gdb</code> 输出的地址需要减去基础地址（base address）才能用于 <code>addr2line</code> ，获取基础地址的方式有很多种：
</p>

<ul class="org-ul">
<li><p>
读取 <code>/proc/&lt;pid&gt;/maps</code> 文件
</p>

<p>
使用 gdb 调试 core 文件时，程序往往已经结束，可能无法获取。
</p></li>

<li><p>
通过 <code>gdb</code> 的 <code>info target</code> 命令获取
</p>

<p>
可以获得地址映射空间信息，只是对象名称被隐藏了，不方便分析。
</p></li>

<li><p>
通过 <code>gdb</code> 的 <code>info proc mapping</code>
</p>

<p>
获取的地址映射空间信息，很简洁，很容易分析。
</p></li>
</ul>

<p>
获取了地址映射空间地址段信息后，遍历一下所有地址段看 <code>gdb</code> 崩溃堆栈地址在哪个段中，然后减去该地址段的起始地址，应该就是重定址前的地址值了，如下所示：
</p>

<p>
首先从 core 文件获取地址映射空间
</p>
<pre class="example">
$ gdb -q --nh --nx --batch -ex 'info proc mapping' --core ./app.core
[New LWP 10780]
[New LWP 10771]
[New LWP 10777]
[New LWP 10779]
[New LWP 10778]
[New LWP 10776]
[New LWP 10774]
[New LWP 10773]
[New LWP 10775]
[New LWP 10772]
[New LWP 10781]
Core was generated by `./app'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x0000563b029d09a4 in ?? ()
[Current thread is 1 (LWP 10780)]
Mapped address spaces:

          Start Addr           End Addr       Size     Offset objfile
      0x563b029d0000     0x563b029d1000     0x1000        0x0 /home/tangxinfa/Examples/c/addr2line_demo/app
      0x563b02bd0000     0x563b02bd1000     0x1000        0x0 /home/tangxinfa/Examples/c/addr2line_demo/app
      0x563b02bd1000     0x563b02bd2000     0x1000     0x1000 /home/tangxinfa/Examples/c/addr2line_demo/app
      0x7f9fb40e9000     0x7f9fb4297000   0x1ae000        0x0 /usr/lib/libc-2.26.so
      0x7f9fb4297000     0x7f9fb4497000   0x200000   0x1ae000 /usr/lib/libc-2.26.so
      0x7f9fb4497000     0x7f9fb449b000     0x4000   0x1ae000 /usr/lib/libc-2.26.so
      0x7f9fb449b000     0x7f9fb449d000     0x2000   0x1b2000 /usr/lib/libc-2.26.so
      0x7f9fb44a1000     0x7f9fb44ba000    0x19000        0x0 /usr/lib/libpthread-2.26.so
      0x7f9fb44ba000     0x7f9fb46b9000   0x1ff000    0x19000 /usr/lib/libpthread-2.26.so
      0x7f9fb46b9000     0x7f9fb46ba000     0x1000    0x18000 /usr/lib/libpthread-2.26.so
      0x7f9fb46ba000     0x7f9fb46bb000     0x1000    0x19000 /usr/lib/libpthread-2.26.so
      0x7f9fb46bf000     0x7f9fb480a000   0x14b000        0x0 /usr/lib/libm-2.26.so
      0x7f9fb480a000     0x7f9fb4a09000   0x1ff000   0x14b000 /usr/lib/libm-2.26.so
      0x7f9fb4a09000     0x7f9fb4a0a000     0x1000   0x14a000 /usr/lib/libm-2.26.so
      0x7f9fb4a0a000     0x7f9fb4a0b000     0x1000   0x14b000 /usr/lib/libm-2.26.so
      0x7f9fb4a0b000     0x7f9fb4a30000    0x25000        0x0 /usr/lib/ld-2.26.so
      0x7f9fb4c2f000     0x7f9fb4c30000     0x1000    0x24000 /usr/lib/ld-2.26.so
</pre>

<p>
可以看到崩溃地址 <code>0x0000563b029d09a4</code> 在第一个地址段（ <code>0x563b029d0000
  0x563b029d1000</code> ）中，减去起始地址后的值为 <code>0x9a4</code> ，尝试将该值用于
<code>addr2line</code>
</p>
<pre class="example">
$ addr2line -e ./app_debug 0x9a4
/home/tangxinfa/Examples/c/addr2line_demo/app.c:12
</pre>
<p>
最终找到了正确的源代码行，这样我们通过在生产环境使用 <code>gdb</code> 提取崩溃调用栈以及地址映射空间，就可以在调试环境进行源代码级的问题定位，而不需要从生产环境取得
core 文件。
</p>

<p>
相关讨论：
</p>

<ul class="org-ul">
<li><a href="https://stackoverflow.com/questions/6934659/how-to-make-backtrace-backtrace-symbols-print-the-function-names">c - How to make backtrace()/backtrace_symbols() print the function names? - Stack Overflow</a></li>

<li><a href="https://www.winehq.org/pipermail/wine-devel/2016-August/114583.html">How to find out the source code function from compiled running address</a></li>

<li><a href="https://www.sourceware.org/ml/gdb/2008-06/msg00043.html">How can I get a memory map out of a core file?</a></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-orgb913b90" class="outline-2">
<h2 id="orgb913b90">从程序崩溃后输出的调用栈定位崩溃对应的代码行</h2>
<div class="outline-text-2" id="text-orgb913b90">
<blockquote>
<p>
libSegFault     The segmentation fault signal handler, used by catchsegv 
</p>
</blockquote>
<p>
引用自 <a href="http://www.linuxfromscratch.org/hlfs/view/development/chapter06/glibc.html">6.9. Glibc-2.12.2</a>
</p>

<blockquote>
<p>
/lib/libSegFault.so是glibc自身提供的一个动态库，我们可以通过LD_PRELOAD环境变量的设置来提前加载它。在这个 环境下程序的SIGSEGV信号都被libSegment.so中的逻辑处理了，并且它会打印出崩溃现场的寄存器信息，堆栈信息，内存map等
</p>
</blockquote>
<p>
引用自 <a href="http://awhite2008.blog.sohu.com/155610926.html">使用libSegFault.so拦截段错误信号-泛舟-搜狐博客</a>
</p>

<p>
本节主要参考 <a href="https://www.quora.com/Does-addr2line-work-in-Linux">Does addr2line work in Linux? - Quora</a>
</p>

<ul class="org-ul">
<li><p>
使用 <code>catchsegv</code> 来运行程序以获取崩溃堆栈信息
</p>

<p>
<code>catchsegv</code> 对 <code>libSegFault.so</code> 进行了封装，如通过设置环境变量将崩溃信息输出到临时文件避免和程序的错误输出混在一起。
</p>

<pre class="example">
$ catchsegv ./app &gt; ./app.log
$ cat ./app.log
*** Segmentation fault
Register dump:

 RAX: 0000000000000010   RBX: 0000000000000009   RCX: 0000000000000000
 RDX: 00007fb65877e980   RSI: 0000000000000000   RDI: 00007fb65877e980
 RBP: 0000000000000000   R8 : 0000000000000001   R9 : 0000000000000000
 R10: 0000000000000000   R11: 0000000000000000   R12: 00007ffdc4b5a34e
 R13: 00007ffdc4b5a34f   R14: 00007fb65877f700   R15: 0000000000000000
 RSP: 00007fb65877eee0

 RIP: 000055a0ae63e9a4   EFLAGS: 00010206

 CS: 0033   FS: 0000   GS: 0000

 Trap: 0000000e   Error: 00000005   OldMask: 00000000   CR2: ffffffff

 FPUCW: 0000037f   FPUSW: 00000000   TAG: 00000000
 RIP: 00000000   RDP: 00000000

 ST(0) 0000 0000000000000000   ST(1) 0000 0000000000000000
 ST(2) 0000 0000000000000000   ST(3) 0000 0000000000000000
 ST(4) 0000 0000000000000000   ST(5) 0000 0000000000000000
 ST(6) 0000 0000000000000000   ST(7) 0000 0000000000000000
 mxcsr: 1f80
 XMM0:  00000000000000000000000025252525 XMM1:  00000000000000000000000025252525
 XMM2:  00000000000000000000000025252525 XMM3:  00000000000000000000000025252525
 XMM4:  00000000000000000000000025252525 XMM5:  00000000000000000000000025252525
 XMM6:  00000000000000000000000025252525 XMM7:  00000000000000000000000025252525
 XMM8:  00000000000000000000000025252525 XMM9:  00000000000000000000000025252525
 XMM10: 00000000000000000000000025252525 XMM11: 00000000000000000000000025252525
 XMM12: 00000000000000000000000025252525 XMM13: 00000000000000000000000025252525
 XMM14: 00000000000000000000000025252525 XMM15: 00000000000000000000000025252525

Backtrace:
./app(+0x9a4)[0x55a0ae63e9a4]
./app(+0xa0b)[0x55a0ae63ea0b]
./app(+0xa65)[0x55a0ae63ea65]
/usr/lib/libpthread.so.0(+0x708a)[0x7fb65d61808a]
/usr/lib/libc.so.6(clone+0x3f)[0x7fb65d34f47f]

Memory map:

55a0ae63e000-55a0ae63f000 r-xp 00000000 08:02 42863171 /home/tangxinfa/Examples/c/addr2line_demo/app
55a0ae83e000-55a0ae83f000 r--p 00000000 08:02 42863171 /home/tangxinfa/Examples/c/addr2line_demo/app
55a0ae83f000-55a0ae840000 rw-p 00001000 08:02 42863171 /home/tangxinfa/Examples/c/addr2line_demo/app
55a0ae85d000-55a0ae87e000 rw-p 00000000 00:00 0 [heap]
7fb648000000-7fb648021000 rw-p 00000000 00:00 0
7fb648021000-7fb64c000000 ---p 00000000 00:00 0
7fb650000000-7fb650021000 rw-p 00000000 00:00 0
7fb650021000-7fb654000000 ---p 00000000 00:00 0
7fb657d18000-7fb657d2e000 r-xp 00000000 08:12 1644549 /usr/lib/libgcc_s.so.1
7fb657d2e000-7fb657f2d000 ---p 00016000 08:12 1644549 /usr/lib/libgcc_s.so.1
7fb657f2d000-7fb657f2e000 r--p 00015000 08:12 1644549 /usr/lib/libgcc_s.so.1
7fb657f2e000-7fb657f2f000 rw-p 00016000 08:12 1644549 /usr/lib/libgcc_s.so.1
7fb657f2f000-7fb657f30000 ---p 00000000 00:00 0
7fb657f30000-7fb658780000 rw-p 00000000 00:00 0
7fb658780000-7fb658781000 ---p 00000000 00:00 0
7fb658781000-7fb658fd1000 rw-p 00000000 00:00 0
7fb658fd1000-7fb658fd2000 ---p 00000000 00:00 0
7fb658fd2000-7fb659822000 rw-p 00000000 00:00 0
7fb659822000-7fb659823000 ---p 00000000 00:00 0
7fb659823000-7fb65a073000 rw-p 00000000 00:00 0
7fb65a073000-7fb65a074000 ---p 00000000 00:00 0
7fb65a074000-7fb65a8c4000 rw-p 00000000 00:00 0
7fb65a8c4000-7fb65a8c5000 ---p 00000000 00:00 0
7fb65a8c5000-7fb65b115000 rw-p 00000000 00:00 0
7fb65b115000-7fb65b116000 ---p 00000000 00:00 0
7fb65b116000-7fb65b966000 rw-p 00000000 00:00 0
7fb65b966000-7fb65b967000 ---p 00000000 00:00 0
7fb65b967000-7fb65c1b7000 rw-p 00000000 00:00 0
7fb65c1b7000-7fb65c1b8000 ---p 00000000 00:00 0
7fb65c1b8000-7fb65ca08000 rw-p 00000000 00:00 0
7fb65ca08000-7fb65ca09000 ---p 00000000 00:00 0
7fb65ca09000-7fb65d259000 rw-p 00000000 00:00 0
7fb65d259000-7fb65d407000 r-xp 00000000 08:12 1575097 /usr/lib/libc-2.26.so
7fb65d407000-7fb65d607000 ---p 001ae000 08:12 1575097 /usr/lib/libc-2.26.so
7fb65d607000-7fb65d60b000 r--p 001ae000 08:12 1575097 /usr/lib/libc-2.26.so
7fb65d60b000-7fb65d60d000 rw-p 001b2000 08:12 1575097 /usr/lib/libc-2.26.so
7fb65d60d000-7fb65d611000 rw-p 00000000 00:00 0
7fb65d611000-7fb65d62a000 r-xp 00000000 08:12 1575121 /usr/lib/libpthread-2.26.so
7fb65d62a000-7fb65d829000 ---p 00019000 08:12 1575121 /usr/lib/libpthread-2.26.so
7fb65d829000-7fb65d82a000 r--p 00018000 08:12 1575121 /usr/lib/libpthread-2.26.so
7fb65d82a000-7fb65d82b000 rw-p 00019000 08:12 1575121 /usr/lib/libpthread-2.26.so
7fb65d82b000-7fb65d82f000 rw-p 00000000 00:00 0
7fb65d82f000-7fb65d97a000 r-xp 00000000 08:12 1575030 /usr/lib/libm-2.26.so
7fb65d97a000-7fb65db79000 ---p 0014b000 08:12 1575030 /usr/lib/libm-2.26.so
7fb65db79000-7fb65db7a000 r--p 0014a000 08:12 1575030 /usr/lib/libm-2.26.so
7fb65db7a000-7fb65db7b000 rw-p 0014b000 08:12 1575030 /usr/lib/libm-2.26.so
7fb65db7b000-7fb65db7f000 r-xp 00000000 08:12 1574894 /usr/lib/libSegFault.so
7fb65db7f000-7fb65dd7e000 ---p 00004000 08:12 1574894 /usr/lib/libSegFault.so
7fb65dd7e000-7fb65dd7f000 r--p 00003000 08:12 1574894 /usr/lib/libSegFault.so
7fb65dd7f000-7fb65dd80000 rw-p 00004000 08:12 1574894 /usr/lib/libSegFault.so
7fb65dd80000-7fb65dda5000 r-xp 00000000 08:12 1575098 /usr/lib/ld-2.26.so
7fb65df5a000-7fb65df5c000 rw-p 00000000 00:00 0
7fb65dfa2000-7fb65dfa4000 rw-p 00000000 00:00 0
7fb65dfa4000-7fb65dfa5000 r--p 00024000 08:12 1575098 /usr/lib/ld-2.26.so
7fb65dfa5000-7fb65dfa6000 rw-p 00025000 08:12 1575098 /usr/lib/ld-2.26.so
7fb65dfa6000-7fb65dfa7000 rw-p 00000000 00:00 0
7ffdc4b3a000-7ffdc4b5b000 rw-p 00000000 00:00 0 [stack]
7ffdc4bc8000-7ffdc4bcb000 r--p 00000000 00:00 0 [vvar]
7ffdc4bcb000-7ffdc4bcd000 r-xp 00000000 00:00 0 [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall]
</pre>

<p>
使用 <code>addr2line</code> 显示崩溃调用栈的源代码行
</p>
<pre class="example">
$ grep -E '^Backtrace:$' -A 10 app.log | grep -E '^\./app' | sed -r ':a;s/.\/app\(\+0x(.*)\)\[.*/\1/;ta;' | xargs addr2line -e ./app_debug
/home/tangxinfa/Examples/c/addr2line_demo/app.c:12
/home/tangxinfa/Examples/c/addr2line_demo/app.c:26
/home/tangxinfa/Examples/c/addr2line_demo/app.c:44
</pre>
<p>
需要注意的是 <code>addr2line</code> 需要依赖未 strip 调试符号的可执行程序版本，适合在调试环境进行。
</p>

<p>
可以看到显示了调用栈对应的源代码行，但是除了崩溃的位置给出了正确的代码行
<code>app.c:12</code> ，其它两处给出的代码行指向了函数定义的尾扩号，如果一个函数有在多个地方调用另一函数，则无法区分具体是哪个地方的调用引起了崩溃。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org64d886d" class="outline-2">
<h2 id="org64d886d">使用 MAP 文件</h2>
<div class="outline-text-2" id="text-org64d886d">
<p>
一开始有调研过使用 Map 文件，试验失败，看了一下 Map 文件的内容，其中记载了函数的地址，但没有详细的代码行地址，理论上是实现不了从崩溃地址获取源代码行地址的目标的，所以开始研究其它方案。
</p>

<p>
后来一直在查资料，通过阅读《<a href="http://www.cchsu.com/arthur/prg_bg5/map_debug.htm">使用 MAP file 除錯的技巧</a>》一文，发现是之前姿势不对。
</p>

<blockquote>
<p>
MAP file 是 linker 将 object files 编译成 binary (EXE, DLL, &#x2026;) 时所产生的对应表，亦即系统的 linker loader 如何载入这个 binary image 的报表。有了这个 map
文件，再加上 compiler 产生的 assembly source code，就成为找程序崩溃的最佳利器。
</p>
</blockquote>
<p>
引用自 <a href="http://www.cchsu.com/arthur/prg_bg5/map_debug.htm">使用 MAP file 除錯的技巧</a>。
</p>

<p>
这个方案需要在编译 <code>.obj</code> 文件时顺带输出 <code>.cod</code> ，在编译可执行程序时输出
<code>.map</code> 文件，获取到崩溃的地址后，查阅 <code>.map</code> 文件确定崩溃的函数，再根据崩溃地址减去 <code>.map</code> 文件记录的函数地址算出偏移量，再根据偏移量从 <code>.cod</code> 文件中找到代码行。
</p>

<ul class="org-ul">
<li><p>
编译过程中生成 <code>.cod</code> 和 <code>.map</code> 文件
</p>

<div class="org-src-container">
<pre class="src src-sh">gcc -c -g -Wa,-a,-ad app.c &gt; app.cod
gcc -g3 app.o -lpthread -Wl,-Map,app.map -o app
strip app
</pre>
</div></li>

<li><p>
使用 <code>libSegFault.so</code> 输出崩溃调用栈
</p>

<pre class="example">
$ catchsegv ./app &gt; ./app.log
$ cat ./app.log
*** Segmentation fault
Register dump:

 RAX: ffffffffffffffff   RBX: 0000000000000000   RCX: 0000000000000000
 RDX: 00007f6058689910   RSI: 0000000000000000   RDI: 00007f6058689910
 RBP: 00007f6058689e90   R8 : 0000000000000001   R9 : 0000000000000000
 R10: 0000000000000000   R11: 0000000000000000   R12: 00007ffdff6a66ae
 R13: 00007ffdff6a66af   R14: 00007f605868a700   R15: 0000000000000000
 RSP: 00007f6058689e70

 RIP: 00005641ac5ac917   EFLAGS: 00010202

 CS: 0033   FS: 0000   GS: 0000

 Trap: 0000000e   Error: 00000005   OldMask: 00000000   CR2: ffffffff

 FPUCW: 0000037f   FPUSW: 00000000   TAG: 00000000
 RIP: 00000000   RDP: 00000000

 ST(0) 0000 0000000000000000   ST(1) 0000 0000000000000000
 ST(2) 0000 0000000000000000   ST(3) 0000 0000000000000000
 ST(4) 0000 0000000000000000   ST(5) 0000 0000000000000000
 ST(6) 0000 0000000000000000   ST(7) 0000 0000000000000000
 mxcsr: 1f80
 XMM0:  00000000000000000000000025252525 XMM1:  00000000000000000000000025252525
 XMM2:  00000000000000000000000025252525 XMM3:  00000000000000000000000025252525
 XMM4:  00000000000000000000000025252525 XMM5:  00000000000000000000000025252525
 XMM6:  00000000000000000000000025252525 XMM7:  00000000000000000000000025252525
 XMM8:  00000000000000000000000025252525 XMM9:  00000000000000000000000025252525
 XMM10: 00000000000000000000000025252525 XMM11: 00000000000000000000000025252525
 XMM12: 00000000000000000000000025252525 XMM13: 00000000000000000000000025252525
 XMM14: 00000000000000000000000025252525 XMM15: 00000000000000000000000025252525

Backtrace:
./app(+0x917)[0x5641ac5ac917]
./app(+0x998)[0x5641ac5ac998]
./app(+0xa07)[0x5641ac5aca07]
./app(+0xa45)[0x5641ac5aca45]
/usr/lib/libpthread.so.0(+0x708a)[0x7f605a33d08a]
/usr/lib/libc.so.6(clone+0x3f)[0x7f605a07447f]

Memory map:

5641ac5ac000-5641ac5ad000 r-xp 00000000 08:02 42863218 /home/tangxinfa/Examples/c/addr2line_demo/app
5641ac7ad000-5641ac7ae000 r--p 00001000 08:02 42863218 /home/tangxinfa/Examples/c/addr2line_demo/app
5641ac7ae000-5641ac7af000 rw-p 00002000 08:02 42863218 /home/tangxinfa/Examples/c/addr2line_demo/app
5641aca9a000-5641acabb000 rw-p 00000000 00:00 0 [heap]
7f6048000000-7f6048021000 rw-p 00000000 00:00 0
7f6048021000-7f604c000000 ---p 00000000 00:00 0
7f6050000000-7f6050021000 rw-p 00000000 00:00 0
7f6050021000-7f6054000000 ---p 00000000 00:00 0
7f6054a3d000-7f6054a53000 r-xp 00000000 08:12 1644549 /usr/lib/libgcc_s.so.1
7f6054a53000-7f6054c52000 ---p 00016000 08:12 1644549 /usr/lib/libgcc_s.so.1
7f6054c52000-7f6054c53000 r--p 00015000 08:12 1644549 /usr/lib/libgcc_s.so.1
7f6054c53000-7f6054c54000 rw-p 00016000 08:12 1644549 /usr/lib/libgcc_s.so.1
7f6054c54000-7f6054c55000 ---p 00000000 00:00 0
7f6054c55000-7f60554a5000 rw-p 00000000 00:00 0
7f60554a5000-7f60554a6000 ---p 00000000 00:00 0
7f60554a6000-7f6055cf6000 rw-p 00000000 00:00 0
7f6055cf6000-7f6055cf7000 ---p 00000000 00:00 0
7f6055cf7000-7f6056547000 rw-p 00000000 00:00 0
7f6056547000-7f6056548000 ---p 00000000 00:00 0
7f6056548000-7f6056d98000 rw-p 00000000 00:00 0
7f6056d98000-7f6056d99000 ---p 00000000 00:00 0
7f6056d99000-7f60575e9000 rw-p 00000000 00:00 0
7f60575e9000-7f60575ea000 ---p 00000000 00:00 0
7f60575ea000-7f6057e3a000 rw-p 00000000 00:00 0
7f6057e3a000-7f6057e3b000 ---p 00000000 00:00 0
7f6057e3b000-7f605868b000 rw-p 00000000 00:00 0
7f605868b000-7f605868c000 ---p 00000000 00:00 0
7f605868c000-7f6058edc000 rw-p 00000000 00:00 0
7f6058edc000-7f6058edd000 ---p 00000000 00:00 0
7f6058edd000-7f605972d000 rw-p 00000000 00:00 0
7f605972d000-7f605972e000 ---p 00000000 00:00 0
7f605972e000-7f6059f7e000 rw-p 00000000 00:00 0
7f6059f7e000-7f605a12c000 r-xp 00000000 08:12 1575097 /usr/lib/libc-2.26.so
7f605a12c000-7f605a32c000 ---p 001ae000 08:12 1575097 /usr/lib/libc-2.26.so
7f605a32c000-7f605a330000 r--p 001ae000 08:12 1575097 /usr/lib/libc-2.26.so
7f605a330000-7f605a332000 rw-p 001b2000 08:12 1575097 /usr/lib/libc-2.26.so
7f605a332000-7f605a336000 rw-p 00000000 00:00 0
7f605a336000-7f605a34f000 r-xp 00000000 08:12 1575121 /usr/lib/libpthread-2.26.so
7f605a34f000-7f605a54e000 ---p 00019000 08:12 1575121 /usr/lib/libpthread-2.26.so
7f605a54e000-7f605a54f000 r--p 00018000 08:12 1575121 /usr/lib/libpthread-2.26.so
7f605a54f000-7f605a550000 rw-p 00019000 08:12 1575121 /usr/lib/libpthread-2.26.so
7f605a550000-7f605a554000 rw-p 00000000 00:00 0
7f605a554000-7f605a558000 r-xp 00000000 08:12 1574894 /usr/lib/libSegFault.so
7f605a558000-7f605a757000 ---p 00004000 08:12 1574894 /usr/lib/libSegFault.so
7f605a757000-7f605a758000 r--p 00003000 08:12 1574894 /usr/lib/libSegFault.so
7f605a758000-7f605a759000 rw-p 00004000 08:12 1574894 /usr/lib/libSegFault.so
7f605a759000-7f605a77e000 r-xp 00000000 08:12 1575098 /usr/lib/ld-2.26.so
7f605a932000-7f605a935000 rw-p 00000000 00:00 0
7f605a97b000-7f605a97d000 rw-p 00000000 00:00 0
7f605a97d000-7f605a97e000 r--p 00024000 08:12 1575098 /usr/lib/ld-2.26.so
7f605a97e000-7f605a97f000 rw-p 00025000 08:12 1575098 /usr/lib/ld-2.26.so
7f605a97f000-7f605a980000 rw-p 00000000 00:00 0
7ffdff688000-7ffdff6a9000 rw-p 00000000 00:00 0 [stack]
7ffdff75b000-7ffdff75e000 r--p 00000000 00:00 0 [vvar]
7ffdff75e000-7ffdff760000 r-xp 00000000 00:00 0 [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall]
</pre></li>

<li><p>
定位源代码行
</p>

<p>
在 <code>app.map</code> 文件中找到第一个地址小于等于 <code>0x917</code> 的函数是 <code>bug</code>
</p>
<pre class="example">
0x00000000000008ea                bug
</pre>

<p>
计算偏移量
</p>
<pre class="example">
0x917 - 0x8ea = 0x2d
</pre>

<p>
在 <code>bug</code> 函数对应的 <code>.cod</code> 文件 <code>app.cod</code> 中查找这个偏移量
</p>
<pre class="example">
12:app.c         ****   printf("%d\n", *p);
32                    .loc 1 12 0
33 0029 488B45F8      movq    -8(%rbp), %rax
34 002d 8B00          movl    (%rax), %eax
</pre>

<p>
找到了正确的崩溃代码行 <code>app.c</code> 第 <code>12</code> 行 <code>printf("%d\n", *p);</code> 。
</p>

<p>
接着继续找一下地址 <code>0x998</code> ，从 <code>.map</code> 找出的对应函数为 <code>func_b</code> ，计算出的偏移地址为 <code>0x62</code> 对应的源代码行 <code>app.c</code> 第 <code>21</code> 行 <code>printf("[%d] This is
  func_b\n", id)</code> ，找到了错误的代码行。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgfe9f291" class="outline-2">
<h2 id="orgfe9f291">docker 容器内的 core 文件</h2>
<div class="outline-text-2" id="text-orgfe9f291">
<p>
docker 环境下，容器使用的是宿主机的 linux 内核，core 文件的生成位置无论是在宿主机中还是在容器中都是由宿主机的 <code>/proc/sys/kernel/core_pattern</code> 配置决定，为了顺利生成 core 文件，宿主机以及容器都要创建好 core 文件目录。
</p>

<p>
通常来说宿主机与容器中程序及库的位置、环境变量及版本会有比较大的差异，core 文件跟它们是密切相关的，因此宿主机生成的 core 文件应该在宿主机中使用 gdb 进行分析，而容器生成的 core 文件也应该在在容器中使用 gdb 进行分析。
</p>
</div>
</div>

<div id="outline-container-orgc7d180c" class="outline-2">
<h2 id="orgc7d180c">总结</h2>
<div class="outline-text-2" id="text-orgc7d180c">
<p>
三种方案都可以获得同样的结果。
</p>

<p>
使用 <code>gdb</code> 从 core 文件获取崩溃调用栈的方案依赖 core 文件。但如果要实现接管操作系统级的 core dump 处理，然后统一上报则会成为自然的选择，这个方案会非常通用。生产环境需要开启 core dump 以及安装 <code>gdb</code> 。需要预先保管好调试信息或未 strip 调试信息的可执行程序。
</p>

<p>
使用 <code>libSegFault.so</code> 输出崩溃调用栈的方案不依赖 core 文件，更轻量级。但是需要在运行程序时提前以 <code>LD_PRELOAD</code> 环境变量注入 <code>libSegFault.so</code> 。需要预先保管好未 strip 调试信息的可执行程序。
</p>

<p>
使用 Map 文件需要使用前面两种方案一样的方法来获取崩溃的调用栈，只是定位源代码行时不依赖可执行程序。需要进行的手工查找、计算，暂时没有找到简化操作的工具。需要预先保管好 <code>.cod</code> 以及 <code>.map</code> 文件。
</p>
</div>
</div>

<div id="outline-container-org2c35684" class="outline-2">
<h2 id="org2c35684">参考</h2>
<div class="outline-text-2" id="text-org2c35684">
<ul class="org-ul">
<li><a href="https://stackoverflow.com/questions/7556045/how-to-map-function-address-to-function-in-so-files">c - How to map function address to function in *.so files - Stack Overflow</a></li>

<li><a href="http://blog.cuicc.com/blog/2012/09/17/core-dump-and-backtrace/">Core dump与backtrace｜YYGCui's blog</a></li>

<li><a href="https://fedoraproject.org/wiki/StackTraces#Obtaining_a_stack_trace_from_a_core_dump">StackTraces - FedoraProject</a></li>

<li><a href="https://www.quora.com/Does-addr2line-work-in-Linux">Does addr2line work in Linux? - Quora</a></li>

<li><a href="http://awhite2008.blog.sohu.com/155610926.html">使用libSegFault.so拦截段错误信号-泛舟-搜狐博客</a></li>

<li><a href="https://stackoverflow.com/questions/18706496/can-one-use-libsegfault-so-to-get-backtraces-for-sigabrt">stack trace - Can one use libSegFault.so to get backtraces for SIGABRT? - Stack Overflow</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux 下 i3 桌面启动]]></title>
            <link>/article/archlinux-4e0b-i3-684c9762542f52a8.html</link>
            <guid>/article/archlinux-4e0b-i3-684c9762542f52a8.html</guid>
            <pubDate>Wed, 30 Aug 2017 06:11:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org3219b96" class="outline-2">
<h2 id="org3219b96">不使用 gdm</h2>
<div class="outline-text-2" id="text-org3219b96">
<ul class="org-ul">
<li><p>
设置 archlinux 为文本模式启动
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo systemctl set-default multi-user.target
</pre>
</div></li>
</ul>


<ul class="org-ul">
<li><p>
在 ~/.xinitrc 中添加以下内容运行 i3
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A52A2A; font-weight: bold;">exec</span> dbus-launch i3
</pre>
</div></li>
</ul>


<ul class="org-ul">
<li><p>
配置 ~/.bash_profile 中添加以下内容运行 startx
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A52A2A; font-weight: bold;">if</span> [ -z <span style="color: #4E9A06;">"$DISPLAY"</span> ] &amp;&amp; [ -n <span style="color: #4E9A06;">"$XDG_VTNR"</span> ] &amp;&amp; [ <span style="color: #4E9A06;">"$XDG_VTNR"</span> -eq 1 ]; <span style="color: #A52A2A; font-weight: bold;">then</span>
  <span style="color: #A52A2A; font-weight: bold;">exec</span> startx
<span style="color: #A52A2A; font-weight: bold;">fi</span>
</pre>
</div></li>
</ul>

<p>
经过以上设置，首先通过文本模式启动 Archlinux，在 tty1 输入用户名及密码后，进入 i3 桌面。
</p>
</div>
</div>

<div id="outline-container-org53fa057" class="outline-2">
<h2 id="org53fa057">恢复为使用 gdm</h2>
<div class="outline-text-2" id="text-org53fa057">
<ul class="org-ul">
<li><p>
设置 archlinux 为图形模式启动
</p>

<div class="org-src-container">
<pre class="src src-sh">systemctl enable gdm
sudo systemctl set-default graphical.target
</pre>
</div></li>
</ul>


<ul class="org-ul">
<li><p>
注释之前在 ~/.xinitrc 中添加的内容
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;">#</span><span style="color: #204A87;">exec dbus-launch i3</span>
</pre>
</div></li>

<li><p>
注释之前在 ~/.bash_profile 中添加的内容
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;"># </span><span style="color: #204A87;">if [ -z "$DISPLAY" ] &amp;&amp; [ -n "$XDG_VTNR" ] &amp;&amp; [ "$XDG_VTNR" -eq 1 ]; then</span>
<span style="color: #204A87;">#   </span><span style="color: #204A87;">exec startx</span>
<span style="color: #204A87;"># </span><span style="color: #204A87;">fi</span>
</pre>
</div></li>
</ul>

<p>
经过以上设置，首先通过图形模式启动 Archlinux，第一次需在 gdm 登录界面选择桌面为 i3，输入用户名及密码后进入 i3 桌面。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[blobmsg_json 只支持一种整型]]></title>
            <link>/article/blobmsg_json-53ea652f63014e0079cd6574578b.html</link>
            <guid>/article/blobmsg_json-53ea652f63014e0079cd6574578b.html</guid>
            <pubDate>Mon, 31 Oct 2016 12:23:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在使用 ubus 时，发现 <code>blobmsg_policy</code> 中使用 <code>BLOBMSG_TYPE_INT64</code> 或 <code>BLOBMSG_TYPE_INT16</code> 类型后， <code>ubus list -v</code> 显示的参数类型为 <code>(unknown)</code> ， <code>blobmsg_parse</code> 解析请求相应字段为 <code>NULL</code> ，如下例所示
</p>

<p>
<code>blobmsg_json_test.c</code>
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;libubox/blobmsg_json.h&gt;</span>

<span style="color: #A52A2A; font-weight: bold;">static</span> <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blobmsg_policy</span> <span style="color: #0084C8; font-weight: bold;">policy</span>[] = {
    [0] = { .name = <span style="color: #4E9A06;">"name"</span>, .type = BLOBMSG_TYPE_STRING },
    [1] = { .name = <span style="color: #4E9A06;">"length"</span>, .type = BLOBMSG_TYPE_INT64 },
    [2] = { .name = <span style="color: #4E9A06;">"width"</span>, .type = BLOBMSG_TYPE_INT16 },
};

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">argc</span>, <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">argv</span>[])
{
    <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">json</span> = <span style="color: #4E9A06;">"{\"name\":\"tree\", \"length\": 100000000, \"width\": 10</span><span style="color: #4E9A06; text-decoration: underline;">}"</span><span style="text-decoration: underline;">;</span>
    <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blob_buf</span> <span style="color: #0084C8; font-weight: bold;">buf</span> = {<span style="color: #4E9A06;">'\0'</span>};
    blobmsg_buf_init(&amp;buf);
    <span style="color: #A52A2A; font-weight: bold;">if</span> (! blobmsg_add_json_from_string(&amp;buf, json)) {
        fprintf(stderr, <span style="color: #4E9A06;">"load json to blob buf failed\n"</span>);
        <span style="color: #A52A2A; font-weight: bold;">return</span> EXIT_FAILURE;
    }

    <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blob_attr</span> *<span style="color: #0084C8; font-weight: bold;">attr</span>[ARRAY_SIZE(<span style="color: #2F8B58; font-weight: bold;">policy</span>)];
    <span style="color: #A52A2A; font-weight: bold;">if</span> (0 != blobmsg_parse(policy, ARRAY_SIZE(policy), attr, blob_data(buf.head)<span style="text-decoration: underline;">, blob_len(buf.head))) {</span>
        fprintf(stderr, <span style="color: #4E9A06;">"parse failed\n"</span>);
        <span style="color: #A52A2A; font-weight: bold;">return</span> EXIT_FAILURE;
    }

    <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">i</span>;
    <span style="color: #A52A2A; font-weight: bold;">for</span>(i = 0; i &lt; ARRAY_SIZE(policy); ++i) {
        <span style="color: #A52A2A; font-weight: bold;">if</span> (! attr[i]) {
            fprintf(stderr, <span style="color: #4E9A06;">"parse failed: %s\n"</span>, policy[i].name);
        }
    }

    <span style="color: #A52A2A; font-weight: bold;">return</span> EXIT_SUCCESS;
}
</pre>
</div>

<p>
运行结果
</p>
<pre class="example">
$ ./blobmsg_json_test
parse failed: length
parse failed: width
</pre>

<p>
引用相关讨论 <a href="http://logs.nslu2-linux.org/livelogs/openwrt-devel/openwrt-devel.20151103.txt">http://logs.nslu2-linux.org/livelogs/openwrt-devel/openwrt-devel.20151103.txt</a>
</p>
<blockquote>
<p>
Nov 03 00:43:43 &lt;txomon&gt; So I think I found something strange in ubus, but I am not too sure. For some reason, declaring within a policy BLOBMSG_TYPE_INT16, won't be accepted, and blobmsg_get_u16 will return null
</p>

<p>
Nov 03 00:44:04 &lt;txomon&gt; I mean, it is accepted but it will refuse to work
</p>

<p>
Nov 03 00:44:17 &lt;txomon&gt; and in ubus -v list will appear as nil
</p>

<p>
Nov 03 00:45:00 &lt;txomon&gt; it will appear as "(unknown)"
</p>

<p>
Nov 03 00:47:17 &lt;txomon&gt; looking at the cli code, I understand why it appears as unknown, because int16 is not in there, but anyway, why doesn't it work for my client?
</p>

<p>
Nov 03 00:48:17 &lt;txomon&gt; It might be because ubus cli is not prepared to send uint16?
</p>

<p>
Nov 03 00:48:39 &lt;txomon&gt; (I always refer to BLOBMSG_TYPE_INT16)
</p>

<p>
Nov 03 00:51:44 &lt;txomon&gt; well, I understand it isn't because json doesn't have such thing as int16&#x2026; and indeed libubox/blobmsg_json.c L72 is just prepared for u32, but anyway, that means you can't use any datatype that doesn't match those ones!
</p>

<p>
Nov 03 00:52:03 &lt;txomon&gt; shouldn't ubus cli inspect the interface and then send the correct datatype through ubus?
</p>

<p>
Nov 03 00:55:27 &lt;txomon&gt; I suppose it's the same for uhttpd-mod-ubus
</p>

<p>
Nov 03 01:01:23 &lt;txomon&gt; I have checked and yeah&#x2026; so I will just use BLOBMSG_TYPE_INT32&#x2026;. why does ubus even support that then? :(
</p>
</blockquote>

<p>
这是因为 json 只有一种整型，json 转 blogmsg 会转成 BLOBMSG_TYPE_INT32，引用自 <code>blobmsg_json.c</code>
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #2F8B58; font-weight: bold;">bool</span> <span style="color: #00578E; font-weight: bold;">blobmsg_add_json_element</span>(<span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blob_buf</span> *<span style="color: #0084C8; font-weight: bold;">b</span>, <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">name</span>, <span style="color: #2F8B58; font-weight: bold;">json_object</span> <span style="text-decoration: underline;">*</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">obj</span><span style="text-decoration: underline;">)</span>
{
    <span style="color: #2F8B58; font-weight: bold;">bool</span> <span style="color: #0084C8; font-weight: bold;">ret</span> = <span style="color: #F5666D;">true</span>;
    <span style="color: #2F8B58; font-weight: bold;">void</span> *<span style="color: #0084C8; font-weight: bold;">c</span>;

    <span style="color: #A52A2A; font-weight: bold;">if</span> (!obj)
        <span style="color: #A52A2A; font-weight: bold;">return</span> <span style="color: #F5666D;">false</span>;

    <span style="color: #A52A2A; font-weight: bold;">switch</span> (json_object_get_type(obj)) {
    <span style="color: #A52A2A; font-weight: bold;">case</span> json_type_object:
        c = blobmsg_open_table(b, name);
        ret = blobmsg_add_object(b, obj);
        blobmsg_close_table(b, c);
        <span style="color: #A52A2A; font-weight: bold;">break</span>;
    <span style="color: #A52A2A; font-weight: bold;">case</span> json_type_array:
        c = blobmsg_open_array(b, name);
        ret = blobmsg_add_array(b, json_object_get_array(obj));
        blobmsg_close_array(b, c);
        <span style="color: #A52A2A; font-weight: bold;">break</span>;
    <span style="color: #A52A2A; font-weight: bold;">case</span> json_type_string:
        blobmsg_add_string(b, name, json_object_get_string(obj));
        <span style="color: #A52A2A; font-weight: bold;">break</span>;
    <span style="color: #A52A2A; font-weight: bold;">case</span> json_type_boolean:
        blobmsg_add_u8(b, name, json_object_get_boolean(obj));
        <span style="color: #A52A2A; font-weight: bold;">break</span>;
    <span style="color: #A52A2A; font-weight: bold;">case</span> json_type_int:
        blobmsg_add_u32(b, name, json_object_get_int(obj));
        <span style="color: #A52A2A; font-weight: bold;">break</span>;
    <span style="color: #A52A2A; font-weight: bold;">default</span>:
        <span style="color: #A52A2A; font-weight: bold;">return</span> <span style="color: #F5666D;">false</span>;
    }
    <span style="color: #A52A2A; font-weight: bold;">return</span> ret;
}
</pre>
</div>

<p>
而解析 blobmsg 时，因为与预定义类型 <code>blobmsg_policy</code> 不一致 <code>blob_id(attr) != policy[i].type</code> ，相应字段被丢弃，引用自 <code>blobmsg.c</code>
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">blobmsg_parse</span>(<span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blobmsg_policy</span> *<span style="color: #0084C8; font-weight: bold;">policy</span>, <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">policy_len</span>,
                  <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blob_attr</span> **<span style="color: #0084C8; font-weight: bold;">tb</span>, <span style="color: #2F8B58; font-weight: bold;">void</span> *<span style="color: #0084C8; font-weight: bold;">data</span>, <span style="color: #2F8B58; font-weight: bold;">unsigned</span> <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">len</span>)
{
    <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blobmsg_hdr</span> *<span style="color: #0084C8; font-weight: bold;">hdr</span>;
    <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blob_attr</span> *<span style="color: #0084C8; font-weight: bold;">attr</span>;
    <span style="color: #2F8B58; font-weight: bold;">uint8_t</span> *<span style="color: #0084C8; font-weight: bold;">pslen</span>;
    <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">i</span>;

    memset(tb, 0, policy_len * <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(*tb));
    pslen = alloca(policy_len);
    <span style="color: #A52A2A; font-weight: bold;">for</span> (i = 0; i &lt; policy_len; i++) {
        <span style="color: #A52A2A; font-weight: bold;">if</span> (!policy[i].name)
            <span style="color: #A52A2A; font-weight: bold;">continue</span>;

        pslen[i] = strlen(policy[i].name);
    }

    __blob_for_each_attr(attr, data, len) {
        hdr = blob_data(attr);
        <span style="color: #A52A2A; font-weight: bold;">for</span> (i = 0; i &lt; policy_len; i++) {
            <span style="color: #A52A2A; font-weight: bold;">if</span> (!policy[i].name)
                <span style="color: #A52A2A; font-weight: bold;">continue</span>;

            <span style="color: #A52A2A; font-weight: bold;">if</span> (policy[i].type != BLOBMSG_TYPE_UNSPEC &amp;&amp;
                blob_id(attr) != policy[i].type)
                <span style="color: #A52A2A; font-weight: bold;">continue</span>;

            <span style="color: #A52A2A; font-weight: bold;">if</span> (blobmsg_namelen(hdr) != pslen[i])
                <span style="color: #A52A2A; font-weight: bold;">continue</span>;

            <span style="color: #A52A2A; font-weight: bold;">if</span> (!blobmsg_check_attr(attr, <span style="color: #F5666D;">true</span>))
                <span style="color: #A52A2A; font-weight: bold;">return</span> -1;

            <span style="color: #A52A2A; font-weight: bold;">if</span> (tb[i])
                <span style="color: #A52A2A; font-weight: bold;">continue</span>;

            <span style="color: #A52A2A; font-weight: bold;">if</span> (strcmp(policy[i].name, (<span style="color: #2F8B58; font-weight: bold;">char</span> *) hdr-&gt;name) != 0)
                <span style="color: #A52A2A; font-weight: bold;">continue</span>;

            tb[i] = attr;
        }
    }

    <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}
</pre>
</div>

<p>
<code>ubus</code> 命令行工具以及 <code>uhttpd-mod-ubus</code> 以 json 做为请求格式，因此不支持 <code>BLOBMSG_TYPE_INT64</code> 和 <code>BLOBMSG_TYPE_INT16</code> 字段类型，数据类型定义 <code>blobmsg_policy</code> 需要做一下折衷：
</p>

<ul class="org-ul">
<li><code>BLOBMSG_TYPE_INT16</code> 改用 <code>BLOBMSG_TYPE_INT32</code></li>

<li><p>
<code>BLOBMSG_TYPE_INT64</code> 改用 <code>BLOBMSG_TYPE_STRING</code>
</p>

<p>
封装一下方便使用
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #204A87;">/**</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* &#35299;&#26512;&#23383;&#31526;&#20018;&#24418;&#24335;&#20256;&#36882;&#30340; uint64_t &#28040;&#24687;&#23383;&#27573;&#20540;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* UBUS &#20256;&#36882; uint64_t &#31867;&#22411;&#23383;&#27573;&#23384;&#22312; BUG&#65292;&#38656;&#35201;&#20197;&#23383;&#31526;&#20018;&#24418;&#24335;&#20256;&#36882;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* &#29992;&#20110;&#26367;&#25442;</span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">ref</span><span style="color: #204A87;"> </span><span style="color: #0066CC; text-decoration: underline;">blobmsg_get_u64</span><span style="color: #0066CC; text-decoration: underline;">.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">*</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* </span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">param</span><span style="color: #204A87;"> </span><span style="color: #0084C8; font-weight: bold;">attr</span><span style="color: #204A87;"> &#28040;&#24687;&#23383;&#27573;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">*</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* </span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">return</span><span style="color: #204A87;"> &#28040;&#24687;&#23383;&#27573;&#20540;. </span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">ref</span><span style="color: #204A87;"> </span><span style="color: #0066CC; text-decoration: underline;">blobmsg_get_string</span><span style="color: #0066CC; text-decoration: underline;">.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">*/</span>
<span style="color: #A52A2A; font-weight: bold;">static</span> <span style="color: #A52A2A; font-weight: bold;">inline</span> <span style="color: #2F8B58; font-weight: bold;">uint64_t</span>
<span style="color: #00578E; font-weight: bold;">blobmsg_get_u64string</span>(<span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blob_attr</span> *<span style="color: #0084C8; font-weight: bold;">attr</span>) {
    <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">str</span> = blobmsg_get_string(attr);
    <span style="color: #A52A2A; font-weight: bold;">if</span> (str) {
        <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">end</span> = <span style="color: #F5666D;">NULL</span>;
        <span style="color: #2F8B58; font-weight: bold;">uint64_t</span> <span style="color: #0084C8; font-weight: bold;">value</span> = strtoull(str, &amp;end, 10);
        <span style="color: #A52A2A; font-weight: bold;">if</span> (end &amp;&amp; end[0] == <span style="color: #4E9A06;">'\0'</span>) {
            <span style="color: #A52A2A; font-weight: bold;">return</span> value;
        }
    }

    <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}

<span style="color: #204A87;">/**</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* &#28155;&#21152;&#23383;&#31526;&#20018;&#24418;&#24335;&#20256;&#36882;&#30340; uint64_t &#28040;&#24687;&#23383;&#27573;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* UBUS &#20256;&#36882; uint64_t &#31867;&#22411;&#23383;&#27573;&#23384;&#22312; BUG&#65292;&#38656;&#35201;&#20197;&#23383;&#31526;&#20018;&#24418;&#24335;&#20256;&#36882;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* &#29992;&#20110;&#26367;&#25442;</span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">ref</span><span style="color: #204A87;"> </span><span style="color: #0066CC; text-decoration: underline;">blobmsg_add_u64</span><span style="color: #0066CC; text-decoration: underline;">.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">*</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* </span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">param</span><span style="color: #204A87;"> </span><span style="color: #0084C8; font-weight: bold;">buf</span><span style="color: #204A87;"> &#28040;&#24687;&#32531;&#20914;&#21306;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* </span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">param</span><span style="color: #204A87;"> </span><span style="color: #0084C8; font-weight: bold;">name</span><span style="color: #204A87;"> &#28040;&#24687;&#23383;&#27573;&#21517;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* </span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">param</span><span style="color: #204A87;"> </span><span style="color: #0084C8; font-weight: bold;">val</span><span style="color: #204A87;"> &#28040;&#24687;&#23383;&#27573;&#20540;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">*</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* </span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">return</span><span style="color: #204A87;"> &#26159;&#21542;&#25104;&#21151;. </span><span style="color: #204A87; font-style: italic;">@</span><span style="color: #F5666D; font-style: italic;">ref</span><span style="color: #204A87;"> </span><span style="color: #0066CC; text-decoration: underline;">blobmsg_add_string</span><span style="color: #0066CC; text-decoration: underline;">.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">*/</span>
<span style="color: #A52A2A; font-weight: bold;">static</span> <span style="color: #A52A2A; font-weight: bold;">inline</span> <span style="color: #2F8B58; font-weight: bold;">int</span>
<span style="color: #00578E; font-weight: bold;">blobmsg_add_u64string</span>(<span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">blob_buf</span> *<span style="color: #0084C8; font-weight: bold;">buf</span>, <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">name</span>, <span style="color: #2F8B58; font-weight: bold;">uint64_t</span> <span style="color: #0084C8; font-weight: bold;">val</span>) {
    <span style="color: #2F8B58; font-weight: bold;">char</span> <span style="color: #0084C8; font-weight: bold;">value</span>[20 + 1] = {<span style="color: #4E9A06;">'\0'</span>};
    snprintf(value, <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(value), <span style="color: #4E9A06;">"%"</span>PRIu64, val);
    <span style="color: #A52A2A; font-weight: bold;">return</span> blobmsg_add_string(buf, name, value);
}
</pre>
</div></li>
</ul>


<p>
C 中 64 位整形的取值范围，见 <code>/usr/include/limits.h</code>
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #204A87;">/* </span><span style="color: #204A87;">Minimum and maximum values a `signed long int' can hold.</span><span style="color: #204A87;">  */</span>
<span style="color: #A020F0;">#  if</span> __WORDSIZE == 64
<span style="color: #A020F0;">#   define</span> <span style="color: #0084C8; font-weight: bold;">LONG_MAX</span>     9223372036854775807L
<span style="color: #A020F0;">#  else</span>
<span style="color: #A020F0;">#   define</span> <span style="color: #0084C8; font-weight: bold;">LONG_MAX</span>     2147483647L
<span style="color: #A020F0;">#  endif</span>
<span style="color: #A020F0;">#  define</span> <span style="color: #0084C8; font-weight: bold;">LONG_MIN</span>  (-LONG_MAX - 1L)

<span style="color: #204A87;">/* </span><span style="color: #204A87;">Maximum value an `unsigned long int' can hold.  (Minimum is 0.)</span><span style="color: #204A87;">  */</span>
<span style="color: #A020F0;">#  if</span> __WORDSIZE == 64
<span style="color: #A020F0;">#   define</span> <span style="color: #0084C8; font-weight: bold;">ULONG_MAX</span>    18446744073709551615UL
<span style="color: #A020F0;">#  else</span>
<span style="color: #A020F0;">#   define</span> <span style="color: #0084C8; font-weight: bold;">ULONG_MAX</span>    4294967295UL
<span style="color: #A020F0;">#  endif</span>
</pre>
</div>

<p>
JSON/JavaScript 中 64 位整形的取值范围，引用自 <a href="https://cdivilly.wordpress.com/2012/04/11/json-javascript-large-64-bit-integers/">JSON/JavaScript and large 64 bit integer values | The former blog of cdivilly</a>
</p>
<blockquote>
<p>
JavaScript represents all numbers internally as 64 bit floating point values (see the ECMAScript spec here). This means JavaScript runtimes are not able to handle integer values larger than 9007199254740992 (2^53).
</p>

<p>
Note that all the positive and negative integers whose magnitude is no greater than 2^53 are representable in the Number type
</p>
</blockquote>

<p>
可见，json 转 blobmsg 不将整型转化为 <code>BLOBMSG_TYPE_INT64</code> 因为 json 不能精确表示 64 位整型。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 pm2 启动 bash 后台脚本]]></title>
            <link>/article/4f7f7528-pm2-542f52a8-bash-540e53f0811a672c.html</link>
            <guid>/article/4f7f7528-pm2-542f52a8-bash-540e53f0811a672c.html</guid>
            <pubDate>Fri, 02 Sep 2016 02:28:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
我们常常会使用 bash 写一些后台运行的守护进程，然后使用 crontab 实现开机启动并监控，也可以改为使用 pm2 来运行，功能更强大，更简单规范。
</p>

<p>
使用 pm2 来管理后台进程仍然可以获得其大部分功能，如：
</p>

<ul class="org-ul">
<li>日志管理</li>
</ul>


<ul class="org-ul">
<li>监控</li>
</ul>


<ul class="org-ul">
<li>进程管理</li>
</ul>


<ul class="org-ul">
<li>开机启动</li>
</ul>


<ul class="org-ul">
<li>崩溃重启</li>
</ul>


<p>
如下定义 process.json
</p>

<div class="org-src-container">
<pre class="src src-json">{
  apps : [{
    name      : <span style="color: #4E9A06;">"run-log-analyze"</span>,
    script    : <span style="color: #4E9A06;">"./tools/run-log-analyze.sh"</span>,
    env: {
    },
    merge_logs: <span style="color: #F5666D;">true</span>,
    error_file: <span style="color: #4E9A06;">"tools/run-log-analyze.log"</span>,
    out_file: <span style="color: #4E9A06;">"tools/run-log-analyze.log"</span>,
    exec_mode: <span style="color: #4E9A06;">"fork"</span>
  }]
}
</pre>
</div>

<p>
run-log-analyze.sh 用于实时分析应用的日志
</p>

<div class="org-src-container">
<pre class="src src-sh">tail -f ./run.log | bunyan --strict -c <span style="color: #4E9A06;">'this.msg == "file uploaded"'</span> -0 | json -<span style="text-decoration: underline;">ga file | ./tools/file-scan -o ./tools/file-scan-successed.log -e ./tools/file-scan-failed.log</span>
</pre>
</div>

<p>
上面的脚本不断读取 run.log，将上传的文件路径名提取出来，然后传给文件扫描程序（./tools/file-scan），扫描成功日志文件为 ./tools/file-scan-successed.log，扫描失败日志文件为 ./tools/file-scan-failed.log。
</p>

<p>
现在在尝试启动进程
</p>

<div class="org-src-container">
<pre class="src src-sh">pm2 start process.json
</pre>
</div>

<p>
查看进程运行状态
</p>

<div class="org-src-container">
<pre class="src src-sh">pm2 list
</pre>
</div>

<p>
然后尝试重启
</p>

<div class="org-src-container">
<pre class="src src-sh">pm2 restart process.json
</pre>
</div>

<p>
发现后台有两个 <code>file-scan</code> 及 <code>tail -f ./run.log</code> 进程，restart 没有将子进程杀死，不过父进程 /bin/bash 进程倒是杀死了。
</p>

<p>
估计是 bash 使用 pm2 fork-mode 运行后，其终端被 detach 了，相当于是后台 daemon 进程，bash 进程死掉后， <code>tail -f ./run.log</code> 进程收不到 SIGHUP 信号也就没有跟着退出。
</p>

<p>
可以利用 tail 命令的参数 <code>-pid</code> ，指定 bash 结束时中断 <code>tail -f</code> 命令
</p>

<p>
<code>man tail</code>
</p>
<blockquote>
<p>
&#x2013;pid=PID
       with -f, terminate after process ID, PID dies  
</p>
</blockquote>

<p>
将 run-log-analyze.sh 改写如下
</p>

<div class="org-src-container">
<pre class="src src-sh">tail -f --pid=$<span style="color: #0084C8; font-weight: bold;">$</span> ./run.log | bunyan --strict -c <span style="color: #4E9A06;">'this.msg == "file uploaded"'</span> -0<span style="text-decoration: underline;"> | json -ga file | ./tools/file-scan -o ./tools/file-scan-successed.log -e ./tools/file-scan-failed.log</span>
</pre>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[system(3) 与 SIGCHLD 信号]]></title>
            <link>/article/system-3-4e0e-sigchld-4fe153f7.html</link>
            <guid>/article/system-3-4e0e-sigchld-4fe153f7.html</guid>
            <pubDate>Thu, 28 Jul 2016 03:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
system(3) 常用于执行 shell 命令
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;stdlib.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;stdio.h&gt;</span>


<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">argc</span>, <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">argv</span>[])
{
    <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">ret</span> = system(<span style="color: #4E9A06;">"ls -la"</span>);
    printf(<span style="color: #4E9A06;">"ret: %d\n"</span>, ret);
    <span style="color: #A52A2A; font-weight: bold;">return</span> ret;
}
</pre>
</div>

<p>
正常情况下，命令执行成功会返回 0。
</p>

<p>
system(3) 在执行的命令结束时会发出 SIGCHLD 信号，收到 SIGCHLD 信号的线程会从系统调用（如：read，write）中断返回，errno 为 EINTR（4: Interrupted system call）。
</p>

<p>
应用程序应该重试被中断的系统调用，但很多时候是通过第三方库间接进行系统调用，而这些库并未考虑周到，误以为系统调用失败。
</p>

<p>
另外还有信号标志 SA_RESTART ，用于自动重试被中断的系统调用，考虑到它只支持部分系统调用，而且我用到的平台不支持这一标志，所以不作考虑。
</p>

<p>
那么该如何避免 SIGCHLD 信号中断系统调用呢？
</p>


<p>
根据 system(3) 函数的 <a href="http://man7.org/tlpi/code/online/dist/procexec/system.c.html">源码</a> ，其关键逻辑如下：
</p>

<ul class="org-ul">
<li>保存信号掩码</li>

<li>设置信号掩码为阻塞（SIG_BLOCK） SIGCHLD 信号</li>

<li>fork(3)

<ul class="org-ul">
<li><p>
子进程
</p>

<p>
重置为保存的信号掩码，然后 execl(3)
</p></li>

<li><p>
父进程
</p>

<p>
等待子进程（waitpid(3)）结束，重置为保存的信号掩码
</p></li>
</ul></li>
</ul>

<p>
子进程结束时操作系统会给父进程发送 SIGCHLD 信号，父进程会遍历（通常从主线程找起）一个不阻塞 SIGCHLD 的线程进行处理。
</p>


<div id="outline-container-org94cb555" class="outline-2">
<h2 id="org94cb555">在整个应用中忽略 SIGCHLD 信号会导致获取不到子进程退出码</h2>
<div class="outline-text-2" id="text-org94cb555">
<p>
在应用程序最开始的时候（main 函数），添加以下语句
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00578E; font-weight: bold;">signal</span>(<span style="color: #2F8B58; font-weight: bold;">SIGCHLD</span>, <span style="color: #2F8B58; font-weight: bold;">SIG_IGN</span>);
</pre>
</div>

<p>
子线程会继承主线程的信号处理，也就不会导致系统调用被中断。
signal(3) 设置的是整个进程的信号处理，由所有线程共享，千万不要以为子线程继承设置后就跟主线程没有关系了，只有程序中有代码动了 SIGCHLD 的处置方式，所有线程都会受影响。
</p>

<p>
然而，它会导致 system(3) 总是返回 -1，errno 为 ECHILD（10: No child processes），无法判断命令执行是否成功。
</p>

<p>
<a href="http://stackoverflow.com/a/25039605/802708">c - system() function while SIGCHLD is ignored - Stack Overflow</a> 或 man wait(2)
</p>
<blockquote>
<p>
POSIX.1-2001 指明，如果将 SIGCHLD 置为 SIG_IGN，或者为 SIGCHLD 指定 SA_NOCLDWAIT 标志（见 sigaction(2)），子进程结束后将不会成为僵尸进程，调用 wait() 或 waitpid() 将阻塞到所有子进程结束后返回错误，errno 设置为 ECHILD。
</p>

<p>
POSIX.1-2001 specifies that if the disposition of SIGCHLD is set to SIG_IGN or the SA_NOCLDWAIT flag is set for SIGCHLD (see sigaction(2)), then children that terminate do not become zombies and a call to wait() or waitpid() will block until all children have terminated, and then fail with errno set to ECHILD.
</p>
</blockquote>

<p>
<a href="https://www.win.tue.nl/~aeb/linux/lk/lk-5.html">The Linux kernel: Signals</a>
</p>
<blockquote>
<p>
If the parent is not interested it can say so explicitly (before the fork) using
</p>

<p>
signal(SIGCHLD, SIG_IGN);
</p>

<p>
or
</p>

<p>
struct sigaction act;
</p>

<p>
act.sa_handler = something;
</p>

<p>
act.sa_flags = SA_NOCLDWAIT;
</p>

<p>
sigaction (SIGCHLD, &amp;act, NULL);
</p>

<p>
and as a result it will not hear about deceased children, and children will not be transformed into zombies. Note that the default action for SIGCHLD is to ignore this signal; nevertheless signal(SIGCHLD, SIG_IGN) has effect, namely that of preventing the transformation of children into zombies. In this situation, if the parent does a wait(), this call will return only when all children have exited, and then returns -1 with errno set to ECHILD.
</p>
</blockquote>

<p>
system(3) 调用 waitpid(3) 时，子进程已经被系统自动回收，消失得无影无踪，也就取不到子进程的返回值。
</p>
</div>

<div id="outline-container-orgb8cce16" class="outline-3">
<h3 id="orgb8cce16">使用 popen(3)/pclose(3) 来代替 system(3) 通过分析标准输出来判断命令执行是否成功</h3>
<div class="outline-text-3" id="text-orgb8cce16">
<div class="org-src-container">
<pre class="src src-c"><span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">system2</span>(<span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">command</span>, <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">output</span>, <span style="color: #2F8B58; font-weight: bold;">size_t</span> <span style="color: #0084C8; font-weight: bold;">output_size</span>)
{
    <span style="color: #2F8B58; font-weight: bold;">FILE</span>* <span style="color: #0084C8; font-weight: bold;">p</span> = popen(command, <span style="color: #4E9A06;">"r"</span>);
    <span style="color: #A52A2A; font-weight: bold;">if</span> (p) {
        memset(output, <span style="color: #4E9A06;">'\0'</span>, output_size);
        fread(output, output_size - 1, 1, p);
        pclose(p);
        <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
    }

    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
}
</pre>
</div>

<p>
使用示例
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #2F8B58; font-weight: bold;">char</span> <span style="color: #0084C8; font-weight: bold;">output</span>[255];
<span style="color: #A52A2A; font-weight: bold;">if</span> (0 == system2(<span style="color: #4E9A06;">"mkdir /test; echo ret=$?"</span>, output, <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(output)) &amp;&amp; strstr(o<span style="text-decoration: underline;">utput, </span><span style="color: #4E9A06; text-decoration: underline;">"ret=0"</span><span style="text-decoration: underline;">)) {</span>
    printf(<span style="color: #4E9A06;">"mkdir /test successed"</span>);
} <span style="color: #A52A2A; font-weight: bold;">else</span> {
    printf(<span style="color: #4E9A06;">"mkdir /test failed"</span>);
}
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org52fd8ff" class="outline-2">
<h2 id="org52fd8ff">在整个应用中阻塞 SIGCHLD 信号可能导致出现僵尸进程</h2>
<div class="outline-text-2" id="text-org52fd8ff">
<p>
signal(3) 无法阻塞一个信号，只支持忽略（SIG_IGN）和恢复缺省处理（SIG_DFL）。
</p>

<p>
阻塞（ SIG_BLOCK）和取消阻塞（SIG_UNBLOCK）用于信号掩码（Signal Mask），如 sigprocmask(3) ，多线程下请使用 pthread_sigmask(3)。
</p>

<p>
主线程在创建子线程之前阻塞 SIGCHLD 信号
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #2F8B58; font-weight: bold;">sigset_t</span> <span style="color: #0084C8; font-weight: bold;">set</span>;
sigemptyset(&amp;set);
sigaddset(&amp;set, SIGCHLD);
<span style="color: #00578E; font-weight: bold;">pthread_sigmask</span>(<span style="color: #2F8B58; font-weight: bold;">SIG_BLOCK</span>, &amp;set, <span style="color: #F5666D;">NULL</span>);
</pre>
</div>

<p>
通过继承主线程的信号处理，子线程调用 system(3) 创建子进程时能够保证其中的 waitpid(3) 调用成功获取子进程的退出码。
</p>

<p>
man signal(7)
</p>
<blockquote>
<p>
通过 fork(2) 创建的子进程继承父进程的信号掩码，该信号掩码即使在 execve(2) 后仍得以保留。
</p>

<p>
A child created via fork(2) inherits a copy of its parent's signal mask; the signal mask is preserved across execve(2).
</p>
</blockquote>

<p>
system(3) 在替换进程为新程序（execl(3)）之前，会重置为保存的信号掩码，也就是阻塞 SIGCHLD 信号状态，子进程继承这一掩码可能会产生问题。
</p>
</div>

<div id="outline-container-orgf018637" class="outline-3">
<h3 id="orgf018637">在整个应用中阻塞 SIGCHLD 信号会导致一种常用的回收僵尸进程的方法失效</h3>
<div class="outline-text-3" id="text-orgf018637">
<p>
<a href="http://www.microhowto.info/howto/reap_zombie_processes_using_a_sigchld_handler.html">Reap zombie processes using a SIGCHLD handler</a> 有详细描述
</p>

<blockquote>
<p>
The method described here has two steps:
</p>

<ol class="org-ol">
<li>Define a handler for SIGCHLD that calls waitpid.</li>

<li>Register the SIGCHLD handler.</li>
</ol>
</blockquote>

<p>
这种回收僵尸进程的方法不但我们自已不能使用，并且我们调用的子进程也不能使用，除非子进程聪明到先清除 SIGCHLD 信号掩码。
</p>

<p>
相关 BUG 报告
<a href="https://bugzilla.mindrot.org/show_bug.cgi?id=271">271 – SSHD should unblock SIGCHLD - POSIX signal blocks survive exec()</a>
</p>

<p>
通过 system(3) 启动 sshd，有用户尝试登录，sshd 会再 fork(3) 一个孙进程，然后在 SIGCHLD 信号处理函数中通过 waitpid(3) 回收孙进程，但是从父进程（调用 system(3)的进程）继承而来信号掩码阻塞了 SIGCHLD 信号，导致孙进程结束后成为僵尸进程。
</p>
</div>
</div>

<div id="outline-container-orgca953b5" class="outline-3">
<h3 id="orgca953b5">在调用 system(3) 前暂时取消对 SIGCHLD 的阻塞</h3>
<div class="outline-text-3" id="text-orgca953b5">
<div class="org-src-container">
<pre class="src src-C"><span style="color: #204A87;">// </span><span style="color: #204A87;">&#23553;&#35013; system(3) &#65292;&#19968;&#26041;&#38754;&#36991;&#20813;&#20013;&#26029;&#31995;&#32479;&#35843;&#29992;&#65292;&#21478;&#19968;&#26041;&#38754;&#36991;&#20813;&#20986;&#29616;&#20725;&#23608;&#23385;&#36827;&#31243;.</span>
<span style="color: #204A87;">// </span><span style="color: #204A87;">&#35831;&#35760;&#24471;&#20840;&#23616;&#22581;&#22622; SIGCHLD &#20449;&#21495;.</span>
<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">system2</span>(<span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">command</span>)
{
    <span style="color: #204A87;">// </span><span style="color: #204A87;">&#35843;&#29992; system(3) &#21069;&#21462;&#28040;&#23545; SIGCHLD &#30340;&#38459;&#22622;</span>
    <span style="color: #2F8B58; font-weight: bold;">sigset_t</span> <span style="color: #0084C8; font-weight: bold;">set</span>;
    sigemptyset(&amp;set);
    sigaddset(&amp;set, SIGCHLD);
    pthread_sigmask(SIG_UNBLOCK, &amp;set, <span style="color: #F5666D;">NULL</span>);

    <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">code</span> = system(command);

    <span style="color: #204A87;">// </span><span style="color: #204A87;">&#35843;&#29992; system(3) &#21518;&#24674;&#22797;&#23545; SIGCHLD &#30340;&#38459;&#22622;</span>
    sigemptyset(&amp;set);
    sigaddset(&amp;set, SIGCHLD);
    pthread_sigmask(SIG_BLOCK, &amp;set, <span style="color: #F5666D;">NULL</span>);

    <span style="color: #A52A2A; font-weight: bold;">return</span> code;
}
</pre>
</div>

<p>
在调用 system(3) 前暂时取消对 SIGCHLD 的阻塞，使子进程继承到正确的信号掩码，调用返回后恢复对 SIGCHLD 的阻塞，可以解决这个问题。
</p>

<p>
另外还有 popen(3)/pclose(3) 也可以用来创建子进程，也要相应进行替换。
</p>
</div>
</div>
</div>

<div id="outline-container-org9767fee" class="outline-2">
<h2 id="org9767fee">进程的信号处理状态可在 proc 文件系统看到</h2>
<div class="outline-text-2" id="text-org9767fee">
<p>
如进程 pid 为 5526 ，获取到的进程忽略的信号发下
</p>

<pre class="example">
# grep SigIgn /proc/5526/status
SigIgn: 0000000000001004
</pre>

<p>
这是十六进制掩码，转化为二进制
</p>

<pre class="example">
$ node -e 'console.log((0x0000000000001004).toString(2))'
1000000000100
</pre>

<p>
表示信号 3（SIGQUIT） 和 信号 13 （SIGPIPE）被屏蔽。
</p>
</div>
</div>

<div id="outline-container-orgebe33e2" class="outline-2">
<h2 id="orgebe33e2">参考</h2>
<div class="outline-text-2" id="text-orgebe33e2">
<ul class="org-ul">
<li><a href="http://www.linuxprogrammingblog.com/all-about-linux-signals?page=show">All about Linux signals | Linux Programming Blog</a></li>
</ul>


<ul class="org-ul">
<li><a href="https://www.win.tue.nl/~aeb/linux/lk/lk-5.html">The Linux kernel: Signals</a></li>
</ul>


<ul class="org-ul">
<li><a href="http://www.oschina.net/question/54100_30293">Linux下调用system()函数导致的问题 - 开源中国社区</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[解决个人用户目录做为 Web 服务根目录的权限问题]]></title>
            <link>/article/89e351b34e2a4eba7528623776ee5f55505a4e3a-web-670d52a1683976ee5f5576846743965095ee9898.html</link>
            <guid>/article/89e351b34e2a4eba7528623776ee5f55505a4e3a-web-670d52a1683976ee5f5576846743965095ee9898.html</guid>
            <pubDate>Tue, 14 Jun 2016 05:38:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
我们在个人帐号目录下进行日常的开发工作，通常使用弱权限帐号（如：nobody）运行 Web 服务器（如：nginx）。
</p>

<p>
nginx 配置 Web 服务器的根目录为个人用户目录，这样修改代码后刷新浏览器就可以看到效果。
</p>

<pre class="example">
user nobody;

server {
   listen       80;
   server_name  www.example.com;

   location / {
       root   /home/tangxinfa/projects/www.example.com;
       index  index.html index.htm;
   }
}
</pre>

<p>
然而 linux 的用户权限系统禁止 Web 服务器用户（nobody）访问个人用户（tangxinfa）的数据。
</p>

<p>
使用浏览器访问，会得到一个错误页面
</p>
<pre class="example">
403 Forbidden
</pre>

<p>
使用 linux 命令确认问题是由用户权限系统引起
</p>
<pre class="example">
$ sudo -u nobody -g nobody ls -la /home/tangxinfa/projects/www.example.com
ls: cannot access '/home/tangxinfa/projects/www.example.com': Permission denied
</pre>


<p>
解决方法有以下几种：
</p>

<ul class="org-ul">
<li><p>
使用软链接
</p>

<p>
很多人都会下意识地想到通过软链接来解决
</p>
<pre class="example">
sudo ln -s /home/tangxinfa/projects/www.example.com /var/www/
sudo chown -R nobody:nobody /var/www/www.example.com
sudo chown -R nobody:nobody /home/tangxinfa/projects/www.example.com
</pre>
<p>
将个人用户目录链到 Web 服务器用户目录下是没有用的，linux 按原始路径（/home/tangxinfa/projects/www.example.com）来检查权限。
</p>

<p>
可以反过来，将项目从个人用户目录移到 Web 服务器用户目录下，然后反向建一个软链接，即可以让 Web 服务器工作正常，又不影响日常开发。
</p>

<pre class="example">
sudo mv /home/tangxinfa/projects/www.example.com /var/www/
ln -s /var/www/www.example.com /home/tangxinfa/projects/
</pre>

<p>
但是，如果项目是版本控制系统（如：git）仓库的一个子项目（目录），将目录变成软链接后 git 会认为目录被删除了。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
用户目录给 Web 服务帐号开放权限
</p>

<p>
按 linux 的帐号权限系统要求，修改（chmod）用户目录的属性，每一级目录的权限都要修改，容易过渡放开权限，引入安全问题。
</p>

<p>
设置 Web 服务帐号为用户帐号
</p>

<pre class="example">
user tangxinfa;
</pre>

<p>
由于 Web 服务器（nginx）通常配有多个服务，Web 服务帐号是全局共用的，其它服务的目录权限也要进行调整。如果 nginx 只运行这一个服务的话，还是可行的。
</p>

<p>
设置 Web 服务帐号为 root 帐号
</p>

<pre class="example">
user root;
</pre>

<p>
使用 root 帐号会引入安全隐患，一般不推荐，但很少会遇到目录权限方面的问题，可以应急使用。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
将用户目录挂载到 Web 帐号目录下
</p>

<p>
mount 命令支持将一个目录重新挂载到其它位置
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo mkdir /var/www/www.example.com
sudo chown nobody:nobody /var/www/www.example.com
sudo mount --bind -o ro,<span style="color: #0084C8; font-weight: bold;">username</span>=nobody /home/tangxinfa/projects/www.example.com<span style="text-decoration: underline;"> /var/www/www.example.com</span>
</pre>
</div>

<p>
Web 服务器和日常开发可以兼顾，两全其美的方案。
</p>

<p>
bind 形式的挂载放到 /etc/fstab 会挂载失败（估计是挂载时相关依赖还没有准备好），影响开机。
</p>

<p>
创建挂载脚本 /usr/sbin/bind-mounts 并添加可执行权限，内容如下
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;">#</span><span style="color: #204A87;">!/bin/</span><span style="color: #A52A2A; font-weight: bold;">bash</span>

mount --bind -o ro,<span style="color: #0084C8; font-weight: bold;">username</span>=nobody /home/tangxinfa/projects/www.example.com /var<span style="text-decoration: underline;">/www/www.example.com</span>
</pre>
</div>

<p>
创建 systemd 服务文件 /usr/lib/systemd/system/bind-mounts.service
</p>
<pre class="example">
[Unit]
Description=Bind Mounts
After=local-fs.target

[Service]
Type=simple
ExecStart=/usr/sbin/bind-mounts

[Install]
WantedBy=multi-user.target
</pre>

<p>
启用 bind-mounts 服务
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl enable bind-mounts
</pre>
</div></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[诊断 node.js 应用 CPU 占用过高的问题]]></title>
            <link>/article/8bca65ad-node.js-5e947528-cpu-536075288fc79ad8768495ee9898.html</link>
            <guid>/article/8bca65ad-node.js-5e947528-cpu-536075288fc79ad8768495ee9898.html</guid>
            <pubDate>Thu, 12 May 2016 09:25:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
node.js 应用使用 pm2 进行管理，采用 cluster 模式，每台服务器运行 16 个 node.js 实例。
</p>

<p>
应用的开销主要在网络上：
</p>

<p>
平均每个 node.js 实例要维持来自嵌入式设备的约 3K TLS 长连接，平均每秒会有 30 个来自客户端的 HTTP 短连接。
</p>

<p>
TLS 长连接上最多 45 秒会有一次心跳（发送 80 多字节，接收 400 多字节）。
</p>

<div id="outline-container-org3188916" class="outline-2">
<h2 id="org3188916">系统信息</h2>
<div class="outline-text-2" id="text-org3188916">
</div>
<div id="outline-container-orgdaedb39" class="outline-3">
<h3 id="orgdaedb39"><code>CPU</code></h3>
<div class="outline-text-3" id="text-orgdaedb39">
<ul class="org-ul">
<li><p>
逻辑 CPU 数：24 
</p>

<pre class="example">
# cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 
     24  Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz
</pre></li>

<li><p>
物理 CPU 数：2
</p>

<pre class="example">
# cat /proc/cpuinfo | grep 'physical id' | sort | uniq -c
     12 physical id : 0
     12 physical id : 1
</pre></li>

<li><p>
每个物理 CPU 的核数：6
</p>

<pre class="example">
# cat /proc/cpuinfo | grep "cpu cores" | uniq | awk -F: '{print $2}'
 6
</pre></li>

<li><p>
每个核超线程数：2
</p>

<p>
两个逻辑 CPU 具有相同的 <code>core id</code> 则超线程是打开的。
</p>

<pre class="example">
# cat /proc/cpuinfo | grep -E "physical id|core id" | sed -e ':a;N;$!ba;s/\ncore id\s*/       core id /g' | sort | uniq -c
      2 physical id : 0       core id : 0
      2 physical id : 0       core id : 1
      2 physical id : 0       core id : 2
      2 physical id : 0       core id : 3
      2 physical id : 0       core id : 4
      2 physical id : 0       core id : 5
      2 physical id : 1       core id : 0
      2 physical id : 1       core id : 1
      2 physical id : 1       core id : 2
      2 physical id : 1       core id : 3
      2 physical id : 1       core id : 4
      2 physical id : 1       core id : 5
</pre></li>
</ul>

<p>
参考：<a href="http://blog.sina.com.cn/s/blog_4a6151550100iowl.html">Linux CPU数量判断，通过/proc/cpuinfo._一沙一花_新浪博客</a>
</p>
</div>
</div>

<div id="outline-container-org0edf1d2" class="outline-3">
<h3 id="org0edf1d2"><code>内存</code></h3>
<div class="outline-text-3" id="text-org0edf1d2">
<p>
<code>64G</code> 内存， <code>37.8G</code> 空闲内存
</p>

<pre class="example">
# cat /proc/meminfo
MemTotal:       65916740 kB
MemFree:        39663756 kB
Buffers:          595424 kB
Cached:          7627876 kB
SwapCached:            0 kB
Active:         17368112 kB
Inactive:        6936088 kB
Active(anon):   16002524 kB
Inactive(anon):    80820 kB
Active(file):    1365588 kB
Inactive(file):  6855268 kB
Unevictable:          32 kB
Mlocked:              32 kB
SwapTotal:      20971512 kB
SwapFree:       20971512 kB
Dirty:              1896 kB
Writeback:             0 kB
AnonPages:      16081968 kB
Mapped:            19596 kB
Shmem:              1624 kB
Slab:            1087320 kB
SReclaimable:     756368 kB
SUnreclaim:       330952 kB
KernelStack:        5272 kB
PageTables:        64280 kB
NFS_Unstable:          0 kB
Bounce:                0 kB
WritebackTmp:          0 kB
CommitLimit:    53929880 kB
Committed_AS:   17348828 kB
VmallocTotal:   34359738367 kB
VmallocUsed:      436016 kB
VmallocChunk:   34324325464 kB
HardwareCorrupted:     0 kB
AnonHugePages:   2525184 kB
HugePages_Total:       0
HugePages_Free:        0
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
DirectMap4k:        4096 kB
DirectMap2M:     2076672 kB
DirectMap1G:    65011712 kB
</pre>
</div>
</div>
</div>

<div id="outline-container-org35fce4e" class="outline-2">
<h2 id="org35fce4e">系统状态</h2>
<div class="outline-text-2" id="text-org35fce4e">
<p>
<code>top</code>
</p>
<pre class="example">
# top -n 1
top - 13:05:48 up 144 days, 20:52,  2 users,  load average: 2.86, 2.46, 2.78
Tasks: 476 total,  19 running, 457 sleeping,   0 stopped,   0 zombie
Cpu(s): 22.7%us,  1.2%sy,  0.0%ni, 75.0%id,  0.0%wa,  0.0%hi,  1.1%si,  0.0%st
Mem:  65916740k total, 26237540k used, 39679200k free,   595424k buffers
Swap: 20971512k total,        0k used, 20971512k free,  7614508k cached

   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND          
191463 nobody    20   0 1884m 981m 9.8m R 83.3  1.5  12337:09 node /usr/local  
192063 nobody    20   0 1905m 1.0g 9.8m R 73.6  1.6  12320:35 node /usr/local  
194450 nobody    20   0 1842m 937m 9.8m R 62.0  1.5  12060:56 node /usr/local  
191515 nobody    20   0 1911m 1.0g 9.8m R 60.1  1.6  12308:13 node /usr/local  
190881 nobody    20   0 1862m 957m 9.8m R 52.3  1.5  12257:46 node /usr/local  
195178 nobody    20   0 1795m 891m 9.8m R 52.3  1.4  11647:01 node /usr/local  
193068 nobody    20   0 1873m 970m 9.8m R 50.4  1.5  12144:28 node /usr/local  
194523 nobody    20   0 1805m 902m 9.8m R 50.4  1.4  11948:57 node /usr/local  
190790 nobody    20   0 1857m 951m 9.8m R 48.4  1.5  12174:59 node /usr/local  
191609 nobody    20   0 1847m 945m 9.8m R 48.4  1.5  12203:47 node /usr/local  
192946 nobody    20   0 1898m 993m 9.8m R 48.4  1.5  12224:41 node /usr/local  
193029 nobody    20   0 1827m 924m 9.8m R 48.4  1.4  12291:51 node /usr/local  
195276 nobody    20   0 1786m 883m 9.8m R 48.4  1.4  11659:07 node /usr/local  
196001 nobody    20   0 1885m 981m 9.8m R 48.4  1.5  11428:22 node /usr/local  
193725 nobody    20   0 1884m 978m 9.8m R 46.5  1.5  12336:34 node /usr/local  
 80300 root      20   0  611m 454m 1152 R 44.6  0.7  26523:40 redis-server     
195944 nobody    20   0 1815m 912m 9.8m R 44.6  1.4  11353:21 node /usr/local  
</pre>

<p>
<code>vmstat</code>
</p>
<pre class="example">
# vmstat 1
|----+---+------+----------+--------+---------+----+----+----+-------+--------+-------+----+----+----+----+----|
|  r | b | swpd |     free |   buff |   cache | si | so | bi |    bo |     in |    cs | us | sy | id | wa | st |
|----+---+------+----------+--------+---------+----+----+----+-------+--------+-------+----+----+----+----+----|
| 17 | 0 |    0 | 39769884 | 595424 | 7523076 |  0 |  0 |  0 |    71 |      0 |     0 | 23 |  2 | 75 |  0 |  0 |
|  9 | 0 |    0 | 39763800 | 595424 | 7528200 |  0 |  0 |  0 |  5188 | 108347 | 21186 | 53 |  5 | 41 |  0 |  0 |
| 17 | 0 |    0 | 39758360 | 595424 | 7534084 |  0 |  0 |  0 |  5272 | 106375 | 24054 | 49 |  5 | 45 |  0 |  0 |
| 15 | 0 |    0 | 39753912 | 595424 | 7538236 |  0 |  0 |  0 |  5252 | 107669 | 23522 | 50 |  5 | 44 |  0 |  0 |
| 12 | 0 |    0 | 39747588 | 595424 | 7544612 |  0 |  0 |  0 |  5304 | 108452 | 24290 | 49 |  5 | 46 |  0 |  0 |
| 15 | 0 |    0 | 39742744 | 595424 | 7548076 |  0 |  0 |  0 |  5200 | 106615 | 25614 | 47 |  5 | 48 |  0 |  0 |
| 13 | 0 |    0 | 39738224 | 595424 | 7552712 |  0 |  0 |  0 |  5092 | 101642 | 25482 | 44 |  5 | 51 |  0 |  0 |
|  9 | 0 |    0 | 39734116 | 595424 | 7559024 |  0 |  0 |  0 |  5156 |  98440 | 25393 | 42 |  5 | 53 |  0 |  0 |
| 16 | 0 |    0 | 39729280 | 595424 | 7564076 |  0 |  0 |  0 |  5204 | 108933 | 23535 | 49 |  5 | 45 |  0 |  0 |
| 18 | 0 |    0 | 39722832 | 595424 | 7568280 |  0 |  0 |  0 |  5276 | 111563 | 23965 | 51 |  5 | 44 |  0 |  0 |
|----+---+------+----------+--------+---------+----+----+----+-------+--------+-------+----+----+----+----+----|
</pre>

<p>
<code>sar</code>
</p>
<pre class="example">
# sar -n TCP 1
01:58:46 PM  active/s passive/s    iseg/s    oseg/s
01:58:47 PM      3.09    875.26  32375.26  33619.59
01:58:48 PM      0.00    575.25  27972.28  28961.39
01:58:49 PM      0.00    879.59  31104.08  31933.67
01:58:50 PM      1.02    743.88  30183.67  31516.33
01:58:51 PM      0.00    793.94  31734.34  32761.62
01:58:52 PM      0.00    571.88  28690.62  29415.62
01:58:53 PM      1.02   1004.08  33157.14  33673.47
01:58:54 PM      0.99    954.46  33315.84  34532.67
01:58:55 PM      1.00    910.00  33562.00  34338.00
01:58:56 PM      1.02    783.67  31754.08  32412.24
</pre>
</div>
</div>

<div id="outline-container-org51b4ff6" class="outline-2">
<h2 id="org51b4ff6">应用状态</h2>
<div class="outline-text-2" id="text-org51b4ff6">
<p>
<code>ps</code>
</p>
<pre class="example">
# ps waux | grep node
nobody   190790 61.0  1.4 1902228 974408 ?      Rl   Apr20 12154:57 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   190881 61.4  1.4 1907188 980800 ?      Rl   Apr20 12237:31 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   191463 61.8  1.5 1929392 1005164 ?     Sl   Apr20 12317:05 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   191515 61.7  1.5 1957252 1030472 ?     Rl   Apr20 12287:48 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   191609 61.1  1.4 1891508 967896 ?      Rl   Apr20 12183:27 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   192063 61.7  1.5 1951056 1025216 ?     Rl   Apr20 12300:27 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   192946 61.3  1.5 1943880 1017796 ?     Rl   Apr20 12204:24 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   193029 61.6  1.4 1871180 946732 ?      Rl   Apr20 12271:35 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   193068 60.9  1.5 1918404 993536 ?      Rl   Apr20 12124:33 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   193725 61.8  1.5 1929488 1001552 ?     Rl   Apr20 12316:31 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   194450 60.5  1.4 1887224 960012 ?      Sl   Apr20 12040:16 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   194523 59.9  1.4 1848960 924596 ?      Rl   Apr20 11928:46 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   195178 58.4  1.3 1838980 913052 ?      Rl   Apr20 11627:32 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   195276 58.5  1.3 1829848 905212 ?      Rl   Apr20 11639:08 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   195944 56.9  1.4 1859316 933892 ?      Rl   Apr20 11333:25 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   196001 57.3  1.5 1930348 1004912 ?     Rl   Apr20 11408:17 node /usr/local/xxx.xxxxxxxx.com/src/index.js
</pre>

<p>
<code>pm2</code>
</p>
<pre class="example">
# pm2 desc xxx.xxxxxxxx.com | grep 'Loop delay'
│ Loop delay │ 1.96ms │
│ Loop delay │ 2.01ms │
│ Loop delay │ 2.04ms │
│ Loop delay │ 2.3ms  │
│ Loop delay │ 1.76ms │
│ Loop delay │ 1.97ms │
│ Loop delay │ 2.12ms │
│ Loop delay │ 1.98ms │
│ Loop delay │ 2.16ms │
│ Loop delay │ 1.98ms │
│ Loop delay │ 2.07ms │
│ Loop delay │ 1.88ms │
│ Loop delay │ 2.61ms │
│ Loop delay │ 1.84ms │
│ Loop delay │ 1.84ms │
│ Loop delay │ 1.88ms │
</pre>
</div>
</div>

<div id="outline-container-orga859006" class="outline-2">
<h2 id="orga859006">分析</h2>
<div class="outline-text-2" id="text-orga859006">
</div>
<div id="outline-container-orgd29262d" class="outline-3">
<h3 id="orgd29262d">系统负荷正常</h3>
<div class="outline-text-3" id="text-orgd29262d">
<p>
<code>top</code> 的 <code>load average</code> 值远小于 CPU 核数，系统的 CPU 使用率为 25%，还有足够的空闲 CPU 资源。
</p>
</div>
</div>

<div id="outline-container-orgcc7dc97" class="outline-3">
<h3 id="orgcc7dc97">node.js 的 CPU 占用过高</h3>
<div class="outline-text-3" id="text-orgcc7dc97">
<ul class="org-ul">
<li><p>
运行和等待 CPU 时间片的进程数偏高
</p>

<p>
参见 <code>vmstat</code> 的 <code>r</code> 列
</p></li>
</ul>


<ul class="org-ul">
<li><p>
中断数偏多
</p>

<p>
参见 <code>vmstat</code> 的 <code>in</code> 列
</p>

<p>
有可能是网络 I/O 数过多引起，参见 <code>sar</code> 的 <code>iseg/s</code> <code>oseg/s</code> 列。
</p>

<p>
中断数虽多，但并非瓶颈，参见 <code>top</code> 的 <code>%hi</code> 和 <code>%si</code> 值。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
上下文切换较多
</p>

<p>
参见 <code>vmstat</code> 的 <code>cs</code> 列
</p>

<p>
上下文切换数远小于中断数，正常。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
用户模式下 CPU 占用过高
</p>

<p>
超过 50%
</p>

<p>
参见 <code>vmstat</code> 的 <code>us</code> 列
</p></li>

<li><p>
node.js 进程事件循环迟延小于 3ms
</p>

<p>
正常。应用目前还能够提供快速响应。
</p></li>

<li><p>
node.js 进程 CPU 占用过高
</p>

<p>
统计了一天平均占用 65%，高峰占用 85% 以上。
</p>

<p>
参见 <code>ps</code> 输出
</p>

<p>
应用本身是网络密集型，每 node.js 进程每秒钟处理 250 个请求，不存在 CPU 密集操作，这样高的 CPU 占用是不可接受的。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org139fbae" class="outline-3">
<h3 id="org139fbae">网络带宽占用正常</h3>
<div class="outline-text-3" id="text-org139fbae">
<ul class="org-ul">
<li><p>
对外的网卡
</p>

<p>
上行 27Mbps，下行 66Mbps
</p>

<p>
主要是来自设备和客户端的流量。
</p></li>

<li><p>
对内的网卡
</p>

<p>
上行 18.7Mbps，下行 21.7Mbps
</p>

<p>
主要是内部通信流量（redis）。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org59d0bbe" class="outline-3">
<h3 id="org59d0bbe">磁盘访问较少</h3>
<div class="outline-text-3" id="text-org59d0bbe">
<p>
应用除了写少量日志外不访问磁盘。
</p>
</div>
</div>

<div id="outline-container-org4940743" class="outline-3">
<h3 id="org4940743">结论</h3>
<div class="outline-text-3" id="text-org4940743">
<ul class="org-ul">
<li>系统资源不存在瓶颈</li>

<li>系统当前的运行状况良好</li>

<li><p>
node.js 应用的 CPU 占用偏高
</p>

<p>
需要对 node.js 应用进行性能分析及优化
</p></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org120801f" class="outline-2">
<h2 id="org120801f">node.js 应用性能分析</h2>
<div class="outline-text-2" id="text-org120801f">
<p>
node.js 从 4.4.0 版本开始内置了 profiler， <code>--prof</code> 命令选项运行应用会在当前目录生成性能日志文件。
</p>

<p>
解读性能日志文件
</p>
<pre class="example">
# node --prof-process isolate-0x1d1e1b0-v8-10041.log
...
[Summary]:
   ticks  total  nonlib   name
    348    7.3%    7.6%  JavaScript
   4243   88.8%   92.4%  C++
     63    1.3%    1.4%  GC
    184    3.9%          Shared libraries
      2    0.0%          Unaccounted
...
 [C++ entry points]:
   ticks    cpp   total   name
    494   19.4%   10.3%  v8::internal::Runtime_DateCurrentTime(int, v8::internal::Object**, v8::internal::Isolate*)
...
   ticks parent  name
   1739   36.4%  syscall

    586   12.3%  __lll_lock_wait
    413   70.5%    v8::internal::Runtime_DateCurrentTime(int, v8::internal::Object**, v8::internal::Isolate*)
    398   96.4%      LazyCompile: *now native date.js:197:17
    305   76.6%        LazyCompile: *&lt;anonymous&gt; /usr/local/xxxxx.xxxxxxxx.com/src/models.js:43:30
...
</pre>

<p>
最大头的时间花在系统调用上，通过 strace 工具统计 node.js 进程 10 秒钟的系统调用计数
</p>
<pre class="example">
12259 write
10501 read
 9261 epoll_ctl
 1564 epoll_wait
  503 close
  502 recvmsg
  502 getsockopt
  502 getsockname
  103 futex
   23 stat
    6 writev
    1 getpeername
</pre>

<p>
系统调用主要进行网络 I/O ，如：与设备通信（TLS 长连接）、与客户端通信（HTTP 短连接）、与Redis通信（TCP 长连接）。
</p>

<p>
其它调用出现次数最多的是获取当前时间戳的函数 models.js:43：
</p>
<div class="org-src-container">
<pre class="src src-js"><span style="color: #A52A2A; font-weight: bold;">function</span> <span style="color: #00578E; font-weight: bold;">getTimestamp</span> () {
    <span style="color: #A52A2A; font-weight: bold;">return</span> Math.floor(Date.now() / 1000);
}
</pre>
</div>

<p>
它会在很多地方被用到，如：当从 redis 收到一条订阅的消息时，会在消息中添加当前时间戳，方便后面处理。
</p>

<p>
可以通过缓存减少这部分开销：
</p>
<div class="org-src-container">
<pre class="src src-js"><span style="color: #A52A2A; font-weight: bold;">function</span> <span style="color: #00578E; font-weight: bold;">getTimestamp</span> () {
    <span style="color: #A52A2A; font-weight: bold;">if</span> (! getTimestamp._timestamp) {
        getTimestamp._timestamp = Math.floor(Date.now() / 1000);

        setInterval(<span style="color: #A52A2A; font-weight: bold;">function</span> () {
            getTimestamp._timestamp = Math.floor(Date.now() / 1000);
        }, 1000).unref();
    }

    <span style="color: #A52A2A; font-weight: bold;">return</span> getTimestamp._timestamp;
}
getTimestamp._timestamp = 0;
</pre>
</div>

<p>
上面的代码，虽然调用次数相对较多，但并不耗 CPU，经过上面的优化后，总系统 CPU 占用只是略有减少。
</p>

<p>
关键的系统调用消耗难以再优化，在我们的应用中，node.js 单实例处理能力的上限：4K TLS 长连接（平均 CPU 占用 85%）。
</p>

<p>
最终决定，增加服务器上 node.js 进程的数量，node.js 最大连接数限制（ <a href="https://nodejs.org/api/net.html#net_server_maxconnections">net.maxConnections</a> ）进一步减少。
</p>
</div>
</div>

<div id="outline-container-org4a6be11" class="outline-2">
<h2 id="org4a6be11">参考</h2>
<div class="outline-text-2" id="text-org4a6be11">
<p>
<a href="http://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html">理解Linux系统负荷 - 阮一峰的网络日志</a>
</p>

<p>
<a href="http://www.blogjava.net/sliverfancy/archive/2013/04/17/397947.html">Linux-Load Average解析(转) - java技术研究 - BlogJava</a>   
</p>

<p>
<a href="http://www.trueeyu.com/?p=1749">linux系统性能监控与优化（2）–cpu | 小鳄的笔记本</a>
</p>

<p>
<a href="https://nodejs.org/en/docs/guides/simple-profiling/">Easy profiling for Node.js Applications | Node.js</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[collectd exec 插件使用进阶]]></title>
            <link>/article/collectd-exec-63d24ef64f7f75288fdb9636.html</link>
            <guid>/article/collectd-exec-63d24ef64f7f75288fdb9636.html</guid>
            <pubDate>Thu, 05 May 2016 04:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
前面一篇文章《<a href="http://blog.kankanan.com/article/4f7f7528-collectd-8fdb884c670d52a176d163a7.html">使用 collectd 进行服务监控 | 看看俺 – KanKanAn.com</a>》展示了如何使用 collectd 的 exec 插件。
</p>

<p>
要使收集的统计信息显示正常、易于使用，则需要对上报的数据有充分的理解。
</p>

<div id="outline-container-orgbaf97aa" class="outline-2">
<h2 id="orgbaf97aa">数据的标识</h2>
<div class="outline-text-2" id="text-orgbaf97aa">
<p>
引用自 <a href="https://collectd.org/documentation/manpages/collectd-exec.5.shtml">man 5 collectd-exec</a>
</p>
<blockquote>
<p>
PUTVAL Identifier [OptionList] Valuelist
  Submits one or more values (identified by Identifier, see below) to the daemon which will dispatch it to all it's write-plugins.
</p>

<p>
An Identifier is of the form "host/plugin-instance/type-instance" with both instance-parts being optional. If they're omitted the hyphen must be omitted, too. plugin and each instance-part may be chosen freely as long as
the tuple (plugin, plugin instance, type instance) uniquely identifies the plugin within collectd. type identifies the type and number of values (i. e. data-set) passed to collectd. A large list of predefined data-sets is
available in the types.db file. See types.db(5) for a description of the format of this file.
</p>

<p>
The OptionList is an optional list of Options, where each option is a key-value-pair. A list of currently understood options can be found below, all other options will be ignored. Values that contain spaces must be quoted
with double quotes.
</p>

<p>
Valuelist is a colon-separated list of the time and the values, each either an integer if the data-source is a counter, or a double if the data-source is of type "gauge". You can submit an undefined gauge-value by using
U. When submitting U to a counter the behavior is undefined. The time is given as epoch (i. e. standard UNIX time).
</p>

<p>
You can mix options and values, but the order is important: Options only effect following values, so specifying an option as last field is allowed, but useless. Also, an option applies to all following values, so you
don't need to re-set an option over and over again.
</p>

<p>
The currently defined Options are:
</p>

<p>
interval=seconds
    Gives the interval in which the data identified by Identifier is being collected.
</p>

<p>
Please note that this is the same format as used in the unixsock plugin, see collectd-unixsock(5). There's also a bit more information on identifiers in case you're confused.
</p>

<p>
Since examples usually let one understand a lot better, here are some:
</p>

<p>
PUTVAL leeloo/cpu-0/cpu-idle N:2299366
PUTVAL alice/interface/if_octets-eth0 interval=10 1180647081:421465:479194
</p>
</blockquote>

<ul class="org-ul">
<li><p>
<code>Identifier</code> 
</p>

<p>
格式为 <code>host/plugin-instance/type-instance</code> 
</p>

<p>
其中的 <code>-</code> 为分隔符， <code>instance</code> 部分是可省略（此时 <code>-</code> 也要省略）。
</p></li>

<li><p>
<code>host</code>
</p>

<p>
主机名称，通常取自 <code>HOSTNAME</code> 环境变量。
</p></li>

<li><p>
<code>plugin</code> 
</p>

<p>
插件名称。
</p></li>

<li><p>
<code>type</code>
</p>

<p>
预定义的值类型名称，定义值的类型及数量，以及 collectd 服务会对值做何处理（如：按时间间隔平均化）。
</p>

<p>
参考 <a href="https://collectd.org/documentation/manpages/types.db.5.shtml">man 5 types.db</a> <a href="https://collectd.org/wiki/index.php/Data_source">Data source - collectd Wiki</a>
</p>

<p>
如某个上报的统计指标在网页上没有对应的图表产生，请检查 collectd 服务器与客户机上 types.db，数据集必须定义且一致，上报的值必须符合数据集定义。服务器或客户端安装的 collectd 可能版本较低，附带的 types.db 中缺少第三方插件要求的数据集定义，运营人员改动 types.db 中 memory 类型也会导致上报失败：
</p>
<pre class="example">
# memory         value:GAUGE:0:281474976710656
memory          free:GAUGE:0:281474976710656, buffered:GAUGE:0:281474976710656, used:GAUGE:0:281474976710656, cached:GAUGE:0:281474976710656
</pre></li>
</ul>
</div>
</div>


<div id="outline-container-org686273f" class="outline-2">
<h2 id="org686273f">数据的展示</h2>
<div class="outline-text-2" id="text-org686273f">
<p>
数据由上到下分级展示。
</p>

<ul class="org-ul">
<li><p>
主机列表
</p>

<p>
选择要查看的主机，对应上面的 <code>host</code>
</p></li>
</ul>


<ul class="org-ul">
<li><p>
插件列表
</p>

<p>
选择要查看的插件，对应上面的 <code>plugin</code>
</p></li>
</ul>


<ul class="org-ul">
<li><p>
统计图表列表页
</p>

<p>
插件实例（ <code>plugin instance</code> ）+类型（ <code>type</code> ）产生一张图表，类型实例（ <code>type instance</code> ）对应图标上的一条曲线。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
统计图表详情页
</p>

<p>
点击统计图表列表页上的图表进入统计图表详情页，此时可以选择统计的时间范围（如：按小时、天、周、月、年）。
</p>

<p>
另外可以聚合显示所有主机上的相同统计图表，以便进行交叉对比。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org4683757" class="outline-2">
<h2 id="org4683757">标识的使用</h2>
<div class="outline-text-2" id="text-org4683757">
<p>
上报数据时，我们拥有极大的自由性，而 collectd 会宽容地接受并展示结果，但是为了让最终的结果有用、易用，我们需要正确地指定上报的信息项。
</p>

<ul class="org-ul">
<li><p>
<code>host</code>
</p>

<p>
应该填写主机名称，当我们需要整个服务（包括多台主机）的统计时，可以借助 collectd 界面提供的聚合功能实现。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
<code>plugin</code>
</p>

<p>
插件名称
</p></li>

<li><p>
<code>plugin instance</code>
</p>

<p>
插件实例，对应插件收集一个统计指标名称，如：memory。
</p>

<p>
对于简单的插件（只收集一个统计指标），则可以直接省略插件实例（plugin instance）部分，插件名称命名使用统计指标名称。
</p></li>

<li><p>
<code>type</code>
</p>

<p>
请在 types.db 中预定义的类型中选择。
</p></li>

<li><p>
<code>type instance</code>
</p>

<p>
对于主机上的唯一统计指标（如：load），就不需要使用 <code>type instance</code> 了，如果是主机上的非唯一统计指标（如：各分区使用率、进程 cpu 占用率等），则可以使用 <code>type instance</code> 来区分（如：填写为分区路径、进程名称等）。
</p>

<p>
多个 <code>type instance</code> 会在同一张图表中各使用一条曲线展示，如果放在一起展示没有意义，则可能更适合使用 <code>plugin instance</code> 进行标识。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org323007b" class="outline-2">
<h2 id="org323007b">突破 root 帐号限制</h2>
<div class="outline-text-2" id="text-org323007b">
<p>
引用自 <a href="https://collectd.org/documentation/manpages/collectd-exec.5.shtml">man 5 collectd-exec</a>
</p>
<blockquote>
<p>
CAVEATS
    ·   The user, the binary is executed as, may not have root privileges, i. e.  must have an UID that is non-zero. This is for your own good.
</p>
</blockquote>

<p>
Exec 插件不允许以 root 权限执行。
</p>

<ul class="org-ul">
<li><p>
温和的解决办法
</p>

<p>
引用自 <a href="https://collectd.org/wiki/index.php/Plugin:Exec">Plugin:Exec - collectd Wiki</a>
</p>
<blockquote>
<p>
The security concerns are addressed by forcing the plugin to check that custom programs are never executed with superuser privileges. If the daemon runs as root, you have to configure another user ID with which the new process is created. To circumvent missing access privileges to files, you need to lean on the unix group concept. I.e. your script requires access to /var/log/messages, which is owned by root, its common practice to have this file being group readable by the admin-group. Given the used ID corrosponds to MyWatcherUser, you need to add that user to the admin group via /etc/group (or what else manages users / groups on your system). 
</p>
</blockquote>

<p>
将原本需要 <code>root</code> 才能访问的文件，改变属组（ <code>group</code> ）为 <code>admin</code> ，权限为 <code>group</code> 可读，然后将插件账号的 <code>group</code> 也改为 <code>admin</code> 。
</p></li>

<li><p>
暴力的解决方法
</p>

<p>
利用 <code>setuid</code> ，允许可执行程序以 <code>root</code> 身份运行。
</p>

<p>
参考
<a href="http://blog.kankanan.com/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html">linux下允许普通用户执行需要root权限的命令 | 看看俺 – KanKanAn.com</a></p></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[解决 ssh 登录总是提示认证失败次数过多的问题]]></title>
            <link>/article/89e351b3-ssh-767b5f55603b662f63d0793a8ba48bc159318d256b2165708fc7591a768495ee9898.html</link>
            <guid>/article/89e351b3-ssh-767b5f55603b662f63d0793a8ba48bc159318d256b2165708fc7591a768495ee9898.html</guid>
            <pubDate>Sun, 24 Apr 2016 09:08:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
服务器需要 vpn 才能进行 ssh 访问，但是周末在家突然 ssh 登录不上了，如下所示：
</p>
<pre class="example">
$ ssh tangxinfa@xxxx.xxxxxx.xxx
Received disconnect from xxx.xxx.xxx.xxx port 22:2: Too many authentication failures for tangxinfa
Connection to xxxx.xxxxxx.xxx closed by remote host.
Connection to xxxx.xxxxxx.xxx closed.
</pre>

<p>
找运维人员咨询，说有可能是 openvpn 运行后设置的路由有问题，ssh 登录没有走 vpn ，建议重建 vpn 连接或重启机器。但是重启机器后还是一样，在 windows 下使用 openvpn ，通过 pietty 却可以正常 ssh 登录上服务器。
</p>

<p>
网上搜索了一下，找到一个有关的帖子
</p>
<blockquote>
<p>
This is usually caused by inadvertently offering multiple ssh keys to the server. The server will reject any key after too many keys have been offered.
</p>

<p>
You can see this for yourself by adding the -v flag to your ssh command to get verbose output. You will see that a bunch of keys are offered, until the server rejects the connection saying: "Too many authentication failures for [user]". Without verbose mode, you will only see the ambiguous message "Connection reset by peer".
</p>

<p>
To prevent irrelevant keys from being offered, you have to explicitly specify this in every host entry in the ~/.ssh/config file by adding IdentitiesOnly like so:
</p>

<p>
Host www.somehost.com
    IdentityFile ~/.ssh/key_for_somehost_rsa
    IdentitiesOnly yes
    Port 22
</p>
</blockquote>
<p>
引用自《<a href="http://superuser.com/questions/187779/too-many-authentication-failures-for-username">ssh - Too many authentication failures for <b>username</b> - Super User</a>》
</p>

<p>
也就是说，ssh 登录时会使用系统上的公匙依次进行认证，如果公私匙对数量超过服务器登录失败次数限制，就会出现上面提到的问题。
</p>

<p>
为了登录 github 及内部的 gitlab，我创建了不同的 rsa 公私匙对，算上系统默认的公私匙对，达到三对
</p>
<pre class="example">
$ tree ~/.ssh
/home/tangxinfa/.ssh
├── github_id_rsa
├── github_id_rsa.pub
├── id_rsa
├── id_rsa.pub
├── known_hosts
├── gitlab_id_rsa
└── gitlab_id_rsa.pub

0 directories, 7 files
</pre>

<p>
当我们使用 ssh 登录服务器时，默认情况下会尝试使用公钥依次进行身份验证，如果还是失败则会使用密码进行登录
</p>
<pre class="example">
$ ssh -v tangxinfa@xxxx.xxxxxx.xxx
...
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/tangxinfa/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Offering RSA public key: github
debug1: Authentications that can continue: publickey,password
debug1: Offering RSA public key: gitlab
Received disconnect from xxx.xxx.xxx.xxx port 22:2: Too many authentication failures for tangxinfa
debug1: Authentication succeeded (publickey).
Authenticated to xxxx.xxxxxx.xxx ([xxx.xxx.xxx.xxx]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: pledge: network
debug1: channel 0: free: client-session, nchannels 1
Connection to xxxx.xxxxxx.xxx closed by remote host.
Connection to xxxx.xxxxxx.xxx closed.
Transferred: sent 3328, received 2776 bytes, in 0.1 seconds
Bytes per second: sent 59495.7, received 49627.4
debug1: Exit status -1
</pre>

<p>
知道了问题的原因，解决方法就很多了，如：
</p>

<ul class="org-ul">
<li>调整 ssh 服务配置，调高失败次数限制</li>

<li><p>
调整 ssh 客户端配置，不使用公钥认证
</p>

<p>
可以在命令行选项中指定
</p>
<div class="org-src-container">
<pre class="src src-sh">ssh -o <span style="color: #0084C8; font-weight: bold;">PreferredAuthentications</span>=password tangxinfa@xxxx.xxxxxx.xxx
</pre>
</div>

<p>
也可以配置文件中指定
<code>~/.ssh/config</code>
</p>
<pre class="example">
Host xxxx xxxx.xxxxxx.xxx
     HostName xxxx.xxxxxx.xxx
     User tangxinfa
     PreferredAuthentications password
</pre></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 dnsmasq 缓存域名解析结果加快上网速度]]></title>
            <link>/article/4f7f7528-dnsmasq-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html</link>
            <guid>/article/4f7f7528-dnsmasq-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html</guid>
            <pubDate>Thu, 21 Apr 2016 11:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
安装 dnsmasq
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S dnsmasq
</pre>
</div></li>

<li><p>
配置 NetworkManager
</p>

<p>
NetworkManager 包含 dnsmasq 插件，可以很方便地支持 dns 缓存。
</p>

<p>
修改 <code>/etc/NetworkManager/NetworkManager.conf</code>
</p>
<pre class="example">
dns=dnsmasq
</pre>

<p>
参考 <a href="https://wiki.archlinux.org/index.php/dnsmasq#NetworkManager">dnsmasq - ArchWiki</a>
</p></li>

<li><p>
配置 dnsmasq
</p>

<p>
NetworkManager 将 dnsmasq 的配置存放在其它位置。
</p>

<p>
<code>/etc/NetworkManager/dnsmasq.d/dnsmasq.conf</code>
</p>
<pre class="example">
listen-address=127.0.0.1
bind-interfaces
dhcp-authoritative
no-negcache
strict-order    
</pre>

<p>
参考 《<a href="http://blog.kankanan.com/article/4f7f7528-dnsmasq-8fdb884c-dns-7f135b586ce8610f4e8b9879.html">使用 dnsmasq 进行 DNS 缓存注意事项</a>》
</p></li>

<li><p>
生效配置
</p>

<p>
重启 NetworkManager 正式生效配置
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl restart NetworkManager
</pre>
</div>

<p>
dnsmasq 不要通过 systemd 以服务方式启动，它会由 NetworkManager 启动
</p>
<pre class="example">
$ COLUMNS=400 ps wax | grep dnsmasq
 6072 ?        S      0:00 /usr/bin/dnsmasq --no-resolv --keep-in-foreground --no-hosts --bind-interfaces --pid-file=/var/run/NetworkManager/dnsmasq.pid --listen-address=127.0.0.1 --conf-file=/var/run/NetworkManager/dnsmasq.conf --cache-size=400 --proxy-dnssec --conf-dir=/etc/NetworkManager/dnsmasq.d
</pre>

<p>
上游域名服务器在 <code>/var/run/NetworkManager/dnsmasq.conf</code> 中指定，通常由 dhcp 服务分配。
</p>

<p>
添加其它域名服务器，在 <code>/etc/NetworkManager/dnsmasq.d/dnsmasq.conf</code> 中添加以下配置：
</p>
<pre class="example">
server=114.114.114.114
</pre>

<p>
输出日志调试 dnsmasq ，在 <code>/etc/NetworkManager/dnsmasq.d/dnsmasq.conf</code> 中添加以下配置：
</p>
<pre class="example">
log-facility=/var/log/dnsmasq.log
log-queries
</pre>

<p>
重启 NetworkManager 生效。
</p></li>

<li><p>
看看效果
</p>

<p>
多次执行下面的命令，可以感觉到后几次明显比第一次快，这就是 DNS 缓存在起作用。
</p>

<div class="org-src-container">
<pre class="src src-sh">nslookup www.baidu.com
</pre>
</div></li>

<li><p>
与 pdnsd 比较
</p>

<p>
之前写过一篇《 <a href="http://blog.kankanan.com/article/4f7f7528-pdnsd-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html">使用Pdnsd缓存域名解析结果加快上网速度</a> 》，本篇改用 dnsmasq 实现，可以发现 dnsmasq 和 NetworkManager 集成度很高，即插即用，而 pdnsd 则要手动做很多设置，而且很难实现自动使用 dhcp 分配的域名服务器做为上游域名服务器。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 dnsmasq 进行 DNS 缓存注意事项]]></title>
            <link>/article/4f7f7528-dnsmasq-8fdb884c-dns-7f135b586ce8610f4e8b9879.html</link>
            <guid>/article/4f7f7528-dnsmasq-8fdb884c-dns-7f135b586ce8610f4e8b9879.html</guid>
            <pubDate>Thu, 21 Apr 2016 09:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
dnsmasq 不仅能做域名解析结果缓存，它本身就是 dns 服务器。
</p>

<p>
修改 <code>dnsmasq.conf</code>
</p>
<pre class="example">
<span id="coderef-dnsmasq_listen_local" class="coderef-off"><span class="linenr">1: </span>listen-address=127.0.0.1</span>
<span id="coderef-dnsmasq_interface_lo" class="coderef-off"><span class="linenr">2: </span>interface=lo</span>
<span id="coderef-dnsmasq_bind_interfaces" class="coderef-off"><span class="linenr">3: </span>bind-interfaces</span>
<span id="coderef-dnsmasq_disable_authoritative" class="coderef-off"><span class="linenr">4: </span>#dhcp-authoritative</span>
<span id="coderef-dnsmasq_strict_order" class="coderef-off"><span class="linenr">5: </span>strict-order</span>
<span id="coderef-dnsmasq_no_negcache" class="coderef-off"><span class="linenr">6: </span>no-negcache</span>
</pre>

<ul class="org-ul">
<li><p>
行 <a href="#coderef-dnsmasq_listen_local" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_listen_local');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_listen_local');">1</a> <a href="#coderef-dnsmasq_interface_lo" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_interface_lo');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_interface_lo');">2</a> <a href="#coderef-dnsmasq_bind_interfaces" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_bind_interfaces');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_bind_interfaces');">3</a> <a href="#coderef-dnsmasq_disable_authoritative" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_disable_authoritative');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_disable_authoritative');">4</a>
</p>

<p>
只对本机提供服务，避免网络内的其它机器访问。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
行 <a href="#coderef-dnsmasq_strict_order" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_strict_order');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_strict_order');">5</a>
</p>

<p>
dnsmasq 并行向所有上游域名服务器请求解析域名，采用最快返回的解析结果。
</p>

<p>
由于上游服务器列表是从网络环境中获取，可能获取到有问题的域名服务器（立即返回无法解析域名），导致域名解析总是失败，如下所示：
</p>
<pre class="example">
$ nslookup www.baidu.com


Server:    127.0.0.1
Address 1: 127.0.0.1 localhost.lan

nslookup: can't resolve 'www.baidu.com': Name or service not known
</pre>

<p>
<code>strict-order</code> 配置项指定按域名服务器在配置文件（由 <code>resolv-file</code> 配置项指定，默认为 <code>/etc/resolv.conf</code> ）中出现的顺序依次解析，第一个域名服务器配置正确就能够避免这个问题。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
行 <a href="#coderef-dnsmasq_no_negcache" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_no_negcache');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_no_negcache');">6</a>
</p>

<p>
当上游域名服务器返回找不到域名（no such domain）时，不缓存结果。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux 的 collectd 支持监控 redis]]></title>
            <link>/article/archlinux-7684-collectd-652f630176d163a7-redis.html</link>
            <guid>/article/archlinux-7684-collectd-652f630176d163a7-redis.html</guid>
            <pubDate>Thu, 31 Mar 2016 09:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
Archlinux 下使用 <code>pacman</code> 安装的 <code>collectd</code> 没有 redis 插件。
</p>

<p>
查看 collectd 的 <a href="https://projects.archlinux.org/svntogit/community.git/tree/trunk/PKGBUILD?h=packages/collectd">PKGBUILD</a> 文件，并未明令禁止 redis 插件，从源代码编译安装的话，只要系统装了 <code>hiredis</code> ，redis 插件应该就会自动启用。
</p>

<p>
所以我们需要从源代码编译安装 <code>collectd</code> 软件包。
</p>

<div id="outline-container-org5fc0eb0" class="outline-2">
<h2 id="org5fc0eb0">安装 ABS</h2>
<div class="outline-text-2" id="text-org5fc0eb0">
<blockquote>
<p>
What is the Arch Build System?
</p>

<p>
The Arch Build System is a ports-like system for building and packaging software from source code. While pacman is the specialized Arch tool for binary package management (including packages built with the ABS), ABS is a collection of tools for compiling source into installable .pkg.tar.xz packages.    
</p>
</blockquote>
<p>
引用自 <a href="https://wiki.archlinux.org/index.php/Arch_Build_System">Arch Build System - ArchWiki</a>
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S abs
sudo abs
</pre>
</div>
</div>
</div>

<div id="outline-container-orgf057772" class="outline-2">
<h2 id="orgf057772">编译安装 collectd</h2>
<div class="outline-text-2" id="text-orgf057772">
<div class="org-src-container">
<pre class="src src-sh"><span class="linenr">1: </span>yaourt -S hiredis
<span class="linenr">2: </span>cp -R /var/abs/community/collectd ~/
<span class="linenr">3: </span><span style="color: #A020F0;">cd</span> ~/collectd
<span id="coderef-archlinux_makepkg" class="coderef-off"><span class="linenr">4: </span>makepkg</span>
<span class="linenr">5: </span>yaourt -U ./collectd-5.5.1-2-x86_64.pkg.tar.xz
</pre>
</div>

<dl class="org-dl">
<dt>行 <a href="#coderef-archlinux_makepkg" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-archlinux_makepkg');" onmouseout="CodeHighlightOff(this, 'coderef-archlinux_makepkg');">4</a> </dt><dd>如果报 <code>Missing dependencies</code> 错误则按提示使用 pacman 装上缺失的依赖项</dd>
</dl>
</div>
</div>

<div id="outline-container-orgfc3f72a" class="outline-2">
<h2 id="orgfc3f72a">使用以前的 collectd 配置</h2>
<div class="outline-text-2" id="text-orgfc3f72a">
<p>
重新安装 collectd 后，以前的配置保存在 <code>/etc/collectd.conf.pacsave</code> ，恢复一下
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo mv /etc/collectd.conf.pacsave /etc/collectd.conf
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb584b9d" class="outline-2">
<h2 id="orgb584b9d">启用 collectd 插件</h2>
<div class="outline-text-2" id="text-orgb584b9d">
<p>
修改 collectd 配置文件 <code>/etc/collectd.conf</code> 
</p>
<pre class="example">
LoadPlugin redis

&lt;Plugin redis&gt;
  &lt;Node "db"&gt;
     Host "127.0.0.1"
     Port "6379"
     Timeout 2000
  &lt;/Node&gt;
&lt;/Plugin&gt;
</pre>

<p>
重启 collectd 服务，现在可以在界面上看到 redis 的监控项了。
</p>
</div>
</div>

<div id="outline-container-orga01a8ee" class="outline-2">
<h2 id="orga01a8ee">参考</h2>
<div class="outline-text-2" id="text-orga01a8ee">
<ul class="org-ul">
<li><a href="http://arch.acgtyrant.com/2013/12/26/soul/">Arch Linux 的靈魂：PKGBUILD、AUR 和 ABS | Tyrant's Arch Linux</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 collectd 进行服务监控]]></title>
            <link>/article/4f7f7528-collectd-8fdb884c670d52a176d163a7.html</link>
            <guid>/article/4f7f7528-collectd-8fdb884c670d52a176d163a7.html</guid>
            <pubDate>Thu, 31 Mar 2016 04:39:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
collectd 的官网 <a href="https://collectd.org/">collectd.org</a> 。
</p>

<div id="outline-container-orgdd01f9d" class="outline-2">
<h2 id="orgdd01f9d">collectd 服务</h2>
<div class="outline-text-2" id="text-orgdd01f9d">
<ul class="org-ul">
<li><p>
安装
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S collectd
</pre>
</div></li>

<li><p>
启动
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo systemctl enable collectd
sudo systemctl start collectd
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org6755ed5" class="outline-2">
<h2 id="org6755ed5">collectd 界面</h2>
<div class="outline-text-2" id="text-org6755ed5">
</div>
<div id="outline-container-org3d21e22" class="outline-3">
<h3 id="org3d21e22"><a href="http://blog.kankanan.com/article/nginx-4e0b5feb901f642d5efa-php-8fd0884c73af5883.html">nginx下快速搭建php运行环境</a></h3>
</div>

<div id="outline-container-org595ca1a" class="outline-3">
<h3 id="org595ca1a">安装 rrdtool</h3>
<div class="outline-text-3" id="text-org595ca1a">
<div class="org-src-container">
<pre class="src src-sh">yaourt -S rrdtool
</pre>
</div>
</div>
</div>

<div id="outline-container-org76a0a89" class="outline-3">
<h3 id="org76a0a89">下载 GCP</h3>
<div class="outline-text-3" id="text-org76a0a89">
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">cd</span> /usr/share/nginx/html/
sudo git clone https://github.com/pommi/CGP.git
</pre>
</div>
</div>
</div>

<div id="outline-container-org8c61c81" class="outline-3">
<h3 id="org8c61c81">配置 GCP</h3>
<div class="outline-text-3" id="text-org8c61c81">
<p>
修改配置文件 /usr/share/nginx/html/CGP/conf/config.php
</p>
<pre class="example">
# collectd's datadir
$CONFIG['datadir'] = '/var/lib/collectd/rrd';
</pre>
<p>
改为
</p>
<pre class="example">
# collectd's datadir
$CONFIG['datadir'] = '/var/lib/collectd';
</pre>
</div>
</div>

<div id="outline-container-org0df911d" class="outline-3">
<h3 id="org0df911d">打开界面</h3>
<div class="outline-text-3" id="text-org0df911d">
<p>
浏览器打开页面 <a href="http://localhost/CGP/index.php">http://localhost/CGP/index.php</a> ，可以看到服务器自身的监控信息。
</p>
</div>
</div>
</div>

<div id="outline-container-org3e24925" class="outline-2">
<h2 id="org3e24925">collectd 插件</h2>
<div class="outline-text-2" id="text-org3e24925">
<p>
collectd 支持很多 <a href="https://collectd.org/wiki/index.php/Table_of_Plugins">插件</a> ，使用 c 语言开发插件请参考 <a href="https://collectd.org/wiki/index.php/Plugin_architecture">Plugin architecture - collectd Wiki</a>。
</p>

<p>
<a href="https://collectd.org/wiki/index.php/Plugin:Exec">Exec</a> 插件使用 shell 脚本来收集系统监控数据。
</p>

<p>
以监控电池电量为例。
</p>
</div>

<div id="outline-container-org5d20d83" class="outline-3">
<h3 id="org5d20d83">启用 Exec 插件</h3>
<div class="outline-text-3" id="text-org5d20d83">
<p>
修改 collectd 配置文件 /etc/collectd.conf
</p>
<pre class="example">
LoadPlugin exec
&lt;Plugin exec&gt;
   Exec "nobody:nobody" "/usr/bin/power-capacity"
&lt;/Plugin&gt;
</pre>
</div>
</div>

<div id="outline-container-org7992b87" class="outline-3">
<h3 id="org7992b87">监控笔记本电量脚本</h3>
<div class="outline-text-3" id="text-org7992b87">
<p>
<code>/usr/bin/power-capacity</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;">#</span><span style="color: #204A87;">!/bin/</span><span style="color: #A52A2A; font-weight: bold;">bash</span>

<span style="color: #0084C8; font-weight: bold;">HOSTNAME</span>=<span style="color: #4E9A06;">"${COLLECTD_HOSTNAME:-localhost}"</span>
<span style="color: #0084C8; font-weight: bold;">INTERVAL</span>=<span style="color: #4E9A06;">"${COLLECTD_INTERVAL:-60}"</span>

<span style="color: #A52A2A; font-weight: bold;">while</span> sleep <span style="color: #4E9A06;">"$INTERVAL"</span>; <span style="color: #A52A2A; font-weight: bold;">do</span>
  <span style="color: #0084C8; font-weight: bold;">VALUE</span>=$(<span style="color: #ff00ff;">echo</span> -n <span style="color: #ff00ff;">`cat /sys/class/power_supply/BAT0/capacity`</span>)
  <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"PUTVAL \"$HOSTNAME/power/capacity\" interval=$INTERVAL N:$VALUE"</span>
<span style="color: #A52A2A; font-weight: bold;">done</span>
</pre>
</div>

<p>
为脚本添加可执行权限
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo chmod a+x /usr/bin/power-capacity
</pre>
</div>
</div>
</div>

<div id="outline-container-orgca8c8ad" class="outline-3">
<h3 id="orgca8c8ad">重启 collectd 生效插件</h3>
<div class="outline-text-3" id="text-orgca8c8ad">
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl restart collectd
</pre>
</div>

<p>
过一会儿就可以在界面上看到电量监控项。
</p>
</div>
</div>
</div>

<div id="outline-container-org3a353f5" class="outline-2">
<h2 id="org3a353f5">collectd 多机器监控</h2>
<div class="outline-text-2" id="text-org3a353f5">
<p>
监控本机没有什么用处，通过 network 插件，可以将 collectd 配置为服务器或客户端。
</p>

<ul class="org-ul">
<li><p>
collectd 服务器
</p>

<p>
接受 collectd 客户端的上报的数据。
</p></li>

<li><p>
collectd 客户端
</p>

<p>
上报数据到 collectd 服务器。
</p></li>
</ul>
</div>

<div id="outline-container-orgf0285ad" class="outline-3">
<h3 id="orgf0285ad">本机配置为 collectd 服务器</h3>
<div class="outline-text-3" id="text-orgf0285ad">
<p>
通过 <a href="https://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_network">network</a> 插件配置为 server 端。
</p>

<p>
修改 collectd 配置文件 /etc/collectd.conf 
</p>
<pre class="example">
LoadPlugin network

&lt;Plugin network&gt;
    &lt;Listen "0.0.0.0" "25826"&gt;
        SecurityLevel Sign
        AuthFile "/etc/collectd/passwd"
    &lt;/Listen&gt;
&lt;/Plugin&gt;
</pre>

<p>
创建密码文件
<code>/etc/collectd/passwd</code>
</p>
<pre class="example">
user0: foo
user1: bar
</pre>

<p>
重启 collectd 服务，生效配置。
</p>
</div>
</div>

<div id="outline-container-orge4fa4b6" class="outline-3">
<h3 id="orge4fa4b6">其它机器配置为 collectd 客户端</h3>
<div class="outline-text-3" id="text-orge4fa4b6">
<p>
参考前面的 <a href="#orgdd01f9d">collectd 服务</a> 一节安装 collectd。
</p>

<p>
通过 <a href="https://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_network">network</a> 插件配置为 client 端。
</p>

<p>
修改 collectd 配置文件 /etc/collectd.conf 
</p>
<pre class="example">
LoadPlugin network

&lt;Plugin network&gt;
    &lt;Server "172.17.0.1" "25826"&gt;
        SecurityLevel Encrypt
        Username "user0"
        Password "foo"
    &lt;/Server&gt;
&lt;/Plugin&gt;
</pre>
<p>
服务器的 IP 为 172.17.0.1。
</p>

<p>
重启 collectd 服务，生效配置，等一会儿就可以在界面上看到客户端机器的监控信息。
</p>
</div>
</div>
</div>

<div id="outline-container-orga54f45f" class="outline-2">
<h2 id="orga54f45f">参考</h2>
<div class="outline-text-2" id="text-orga54f45f">
<ul class="org-ul">
<li><a href="https://github.com/pommi/CGP/blob/master/README.md">CGP/README.md at master · pommi/CGP</a></li>

<li><a href="https://collectd.org/wiki/index.php/First_steps">First steps - collectd Wiki</a></li>

<li><a href="http://www.drupal001.com/2012/07/system-monitor-collectd/">Collectd详解、Collectd使用说明、Collectd中文说明 - 系统性能监控利器</a></li>

<li><a href="https://collectd.org/wiki/index.php/Plugin:Exec">Plugin:Exec - collectd Wiki</a></li>

<li><a href="http://blog.sina.com.cn/s/blog_502c8cc40100pbgu.html">collectd使用_新浪研发中心_新浪博客</a></li>

<li><a href="https://collectd.org/documentation/manpages/collectd.conf.5.shtml#global_options">collectd.conf(5) – collectd – The system statistics collection daemon</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux 下编译 MaidSafe]]></title>
            <link>/article/archlinux-4e0b7f168bd1-maidsafe.html</link>
            <guid>/article/archlinux-4e0b7f168bd1-maidsafe.html</guid>
            <pubDate>Wed, 30 Mar 2016 08:26:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
按照文档 <a href="https://github.com/maidsafe-archive/MaidSafe/wiki/Build-Instructions-for-Linux">Build Instructions for Linux · maidsafe-archive/MaidSafe Wiki</a> 的指示进行。
</p>

<p>
安装 icu-staticlibs 时，由于与已安装的 icu 软件包存在文件冲突，正常安装是装不了的，加上 <code>--force</code> 选项即可
</p>
<div class="org-src-container">
<pre class="src src-sh">yaourt --force -S icu-staticlibs
</pre>
</div>

<p>
编译 master 分枝会出错，切到 next 分枝再编译即可
</p>
<div class="org-src-container">
<pre class="src src-sh">git submodule foreach <span style="color: #4E9A06;">"git checkout next; git pull"</span>
git checkout next; git pull
</pre>
</div>

<p>
参考
</p>

<ul class="org-ul">
<li><a href="https://github.com/maidsafe-archive/MaidSafe/issues/234">make: <b>*</b> {ExperCommon} Error 2 · Issue #234 · maidsafe-archive/MaidSafe</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[修复 offlineimap 无法收邮件的问题]]></title>
            <link>/article/4fee590d-offlineimap-65e06cd5653690ae4ef6768495ee9898.html</link>
            <guid>/article/4fee590d-offlineimap-65e06cd5653690ae4ef6768495ee9898.html</guid>
            <pubDate>Fri, 18 Mar 2016 02:44:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-orged1646b" class="outline-2">
<h2 id="orged1646b">不使用 ssl</h2>
<div class="outline-text-2" id="text-orged1646b">
<p>
.offlineimaprc 配置
</p>
<pre class="example">
ssl = no
</pre>


<p>
offlineimap 收邮件出错
</p>
<pre class="example">
$ offlineimap
...
 Establishing connection to imap.xxxxxx.com:143
 ERROR: Could not connect via SSL to host 'imap.xxxxxx.com' and non-standard ssl port 143 configured. Make sure you connect to the correct port.
... 
</pre>
<p>
意外地使用了 ssl 进行连接。
</p>


<p>
telnet 邮件服务器进行诊断
</p>
<pre class="example">
$ telnet imap.xxxxxx.com 143
Connected to imap.xxxxxx.com.
Escape character is '^]'.
* OK [CAPABILITY IMAP4rev1 UIDPLUS CHILDREN NAMESPACE THREAD=ORDEREDSUBJECT THREAD=REFERENCES SORT QUOTA IDLE ACL ACL2=UNION STARTTLS] Courier-IMAP ready. Copyright 1998-2011 Double Precision, Inc.  See COPYING for distribution information.
</pre>
<p>
输出的 CAPABILITY 包含 STARTTLS，应该是邮件服务器配置有误
</p>


<p>
修改 offlineimap 的源代码文件 <a href="file:///usr/lib/python2.7/site-packages/offlineimap/imapserver.py">imapserver.py</a> ，我们的邮箱不使用 tls
</p>
<div class="org-src-container">
<pre class="src src-python">269  <span style="color: #A52A2A; font-weight: bold;">def</span> <span style="color: #00578E; font-weight: bold;">__start_tls</span>(<span style="color: #A52A2A; font-weight: bold;">self</span>, imapobj):
270          <span style="color: #A52A2A; font-weight: bold;">if</span> <span style="color: #4E9A06;">'STARTTLS'</span> <span style="color: #A52A2A; font-weight: bold;">in</span> imapobj.capabilities <span style="color: #A52A2A; font-weight: bold;">and</span> <span style="color: #A52A2A; font-weight: bold;">not</span> <span style="color: #A52A2A; font-weight: bold;">self</span>.usessl:
</pre>
</div>

<p>
改成
</p>
<div class="org-src-container">
<pre class="src src-python">269  <span style="color: #A52A2A; font-weight: bold;">def</span> <span style="color: #00578E; font-weight: bold;">__start_tls</span>(<span style="color: #A52A2A; font-weight: bold;">self</span>, imapobj):
270          <span style="color: #A52A2A; font-weight: bold;">if</span> <span style="color: #4E9A06;">'STARTTLS'</span> <span style="color: #A52A2A; font-weight: bold;">in</span> imapobj.capabilities <span style="color: #A52A2A; font-weight: bold;">and</span> <span style="color: #A52A2A; font-weight: bold;">not</span> <span style="color: #A52A2A; font-weight: bold;">self</span>.usessl <span style="color: #A52A2A; font-weight: bold;">and</span> <span style="color: #A52A2A; font-weight: bold;">self</span>.<span style="text-decoration: underline;">repos.account.name != </span><span style="color: #4E9A06; text-decoration: underline;">'xxxxxx'</span><span style="text-decoration: underline;">:</span>
</pre>
</div>


<ul class="org-ul">
<li><p>
更好的做法
</p>

<p>
在 imap 协议许可的情况下，加强容错性，tls 连接失败后，使用普通连接重连。
.offlineimaprc 新加禁用 tls 的配置项，警告用户服务器可能配置有误，提示用户禁用 tls。
</p></li>

<li><p>
相关的问题
</p>

<p>
<a href="https://github.com/OfflineIMAP/offlineimap/pull/54">Optional TLS by mativs · Pull Request #54 · OfflineIMAP/offlineimap</a>
</p>

<p>
有这个问题的 patch，但是没有下文。
</p></li>

<li><p>
<a href="https://github.com/OfflineIMAP/offlineimap">offlineimap</a> 新加的 starttls 选项解决了这个问题
</p>

<pre class="example">
commit ac2a547ec46d590d041d410723f90f45fcb802fe
Author: Nicolas Sebrecht &lt;nicolas.s-dev@laposte.net&gt;
Date:   Thu Jun 23 03:55:00 2016 +0200

learn to disable STARTTLS

Some servers might have this feature broken.

Github-ref: https://github.com/OfflineIMAP/offlineimap/issues/207
Signed-off-by: Nicolas Sebrecht &lt;nicolas.s-dev@laposte.net&gt;
</pre>

<p>
在 .offlineimaprc 中添加禁用 starttls 配置项
</p>
<pre class="example">
starttls = no
</pre></li>
</ul>
</div>
</div>

<div id="outline-container-org1ae1e74" class="outline-2">
<h2 id="org1ae1e74">使用 ssl</h2>
<div class="outline-text-2" id="text-org1ae1e74">
<p>
.offlineimaprc 配置
</p>
<pre class="example">
ssl = yes
</pre>


<p>
offlineimap 收邮件出错
</p>
<pre class="example">
$ offlineimap
...
 Establishing connection to imap.xxxxxx.com:993
 ERROR: Unknown SSL protocol connecting to host 'imap.xxxxxx.com' for repository 'XxxxxxRemote'. OpenSSL responded:
[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590)
... 
</pre>
<p>
ssl 证书验证失败。
</p>

<p>
curl 邮件服务器进行诊断
</p>
<pre class="example">
$ curl https://imap.xxxxxx.com:993/
curl: (60) SSL certificate problem: self signed certificate
</pre>
<p>
邮件服务器的 ssl 证书是自签名的
</p>

<p>
从服务器提取证书
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">echo</span> | openssl s_client -connect imap.xxxxxx.com:993 2&gt;&amp;1 | sed -ne <span style="color: #4E9A06;">'/-BEGIN CER</span><span style="color: #4E9A06; text-decoration: underline;">TIFICATE-/,/-END CERTIFICATE-/p'</span><span style="text-decoration: underline;"> &gt; ~/imap.xxxxxx.com.pem</span>
</pre>
</div>

<p>
.offlineimaprc 指定证书
</p>
<pre class="example">
ssl = yes
sslcacertfile = /home/xxxxxxxx/imap.xxxxxx.com.pem
</pre>


<p>
offlineimap 收邮件出错
</p>
<pre class="example">
$ offlineimap
...
 Establishing connection to imap.xxxxxx.com:993
 ERROR: Unknown SSL protocol connecting to host 'imap.xxxxxx.com' for repository 'XxxxxxRemote'. OpenSSL responded:
[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590)
...
</pre>
<p>
ssl 证书验证失败。
</p>

<p>
curl 邮件服务器进行诊断
</p>
<pre class="example">
$ curl https://imap.xxxxxx.com:993/ --cacert /home/xxxxxxxx/imap.xxxxxx.com.pem
curl: (60) SSL certificate problem: certificate has expired
</pre>
<p>
邮件服务器的 ssl 证书已过期。
</p>


<p>
提取 ssl 证书指纹
</p>
<pre class="example">
$ openssl x509 -noout -in ~/imap.xxxxxx.com.pem -fingerprint -sha1
SHA1 Fingerprint=XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX
</pre>

<p>
.offlineimaprc 使用证书指纹（SHA1 Fingerprint= 后的串剔除冒号再转为小写 ）
</p>
<pre class="example">
ssl = yes
#sslcacertfile = /home/xxxxxxxx/imap.xxxxxx.com.pem
cert_fingerprint = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</pre>
<p>
参考 <a href="https://github.com/OfflineIMAP/offlineimap/pull/8">Adding support for multi-fingerprint IMAP servers by Kdecherf · Pull Request #8 · OfflineIMAP/offlineimap</a>
</p>

<p>
offlineimap 收邮件出错
</p>
<pre class="example">
$ offlineimap
 Establishing connection to imap.xxxxxx.com:993
 ERROR: Unknown SSL protocol connecting to host 'imap.xxxxxx.com' for repository 'XxxxxxRemote'. OpenSSL responded:
[SSL: SSL_NEGATIVE_LENGTH] dh key too small (_ssl.c:590)
</pre>
<p>
邮件服务器的 openssl 可能太老了，生成的 DH KEY 文件只有 768 位不安全，需要重新生成更安全的 KEY 文件。参考 <a href="http://offlineimap-project.alioth.debian.narkive.com/dVTlxZyP/ssl-error-with-offlineimap-version-6-6-1-debian-package">Ssl error with offlineimap version 6.6.1 (debian package)</a>
</p>

<p>
使用 ssl 折腾失败，还是邮件服务器配置问题，除非 offlineimap 支持对服务器不进行安全验证，否则服务器端才能解决。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thinkpad T540p 安装 Archlinux]]></title>
            <link>/article/thinkpad-t540p-5b8988c5-archlinux.html</link>
            <guid>/article/thinkpad-t540p-5b8988c5-archlinux.html</guid>
            <pubDate>Thu, 17 Mar 2016 10:09:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
如果你是重新安装 Archlinux 则建议在安装前记录一下现有系统的软件列表，方便装完新系统后继续安装需要的软件
</p>

<div class="org-src-container">
<pre class="src src-sh">pacman -Qqe | grep -vx <span style="color: #4E9A06;">"$(</span><span style="color: #ff00ff;">pacman</span><span style="color: #4E9A06;"> -Qqm)"</span> &gt; Packages
pacman -Qqm &gt; Packages.aur
</pre>
</div>

<p>
参考
</p>

<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/migrate_installation_to_new_hardware">Migrate installation to new hardware - ArchWiki</a></li>
</ul>

<div id="outline-container-orgfe12ef8" class="outline-2">
<h2 id="orgfe12ef8">下载 ISO</h2>
<div class="outline-text-2" id="text-orgfe12ef8">
<p>
从 <a href="https://www.archlinux.org">Archlinux 官网</a> 下载最新的安装包 <a href="https://www.archlinux.org/download/">archlinux-2016.03.01-dual.iso</a>
</p>
</div>
</div>

<div id="outline-container-org7f872d7" class="outline-2">
<h2 id="org7f872d7">创建安装盘</h2>
<div class="outline-text-2" id="text-org7f872d7">
<p>
通过 dd 将 ISO 写入 U 盘创建安装盘。
</p>

<p>
参考
</p>

<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/USB_flash_installation_media_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#GNU.2FLinux">USB flash installation media (简体中文) - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-org209cf36" class="outline-2">
<h2 id="org209cf36">BIOS 启用 UEFI</h2>
</div>

<div id="outline-container-org7b9ca58" class="outline-2">
<h2 id="org7b9ca58">开始安装</h2>
<div class="outline-text-2" id="text-org7b9ca58">
<p>
按照 <a href="https://wiki.archlinux.org/index.php/Beginners'_guide">Beginners' guide - ArchWiki</a> 一步步安装到 <a href="https://wiki.archlinux.org/index.php/Beginners'_guide#Initramfs">Initramfs</a> ，分区分案选 <a href="https://wiki.archlinux.org/index.php/Beginners'_guide#UEFI.2FGPT_examples">UEFI/GPT</a>。
</p>

<p>
<a href="https://wiki.archlinux.org/index.php/Beginners'_guide#Install_a_boot_loader">Install a boot loader</a> 这一步改成 <a href="#org5192624">使用 UEFI 做为启动管理器</a> 。
</p>


<p>
针对固态硬盘的优化建议
</p>

<ul class="org-ul">
<li><p>
格式化 ext4 分区时添加选项 4K 对齐
</p>

<div class="org-src-container">
<pre class="src src-sh">mkfs.ext4 -b 4096 /dev/sdXX
</pre>
</div></li>

<li><p>
挂载 ext4 分区时添加选项 discard,noatime
</p>

<div class="org-src-container">
<pre class="src src-sh">mount -t ext4 /dev/sdXX /mnt -o discard,noatime
</pre>
</div>

<p>
noatime 读取文件的时候不修改读取的时间，减少对 ssd 的写入次数
discard 启动 trim
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org5192624" class="outline-2">
<h2 id="org5192624">使用 UEFI 做为启动管理器</h2>
<div class="outline-text-2" id="text-org5192624">
<p>
由于主板直接支持 UEFI 启动，使用 `efibootmgr` 来创建 Boot Loader 不但更简单，而且系统启动更快。
</p>

<p>
参考
</p>

<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/EFISTUB#Using_UEFI_directly_.28efibootmgr.29">EFISTUB - Using UEFI directly (efibootmgr) - ArchWiki</a></li>

<li><a href="http://superuser.com/questions/912417/i-wanted-to-install-arch-linux-on-a-uefi-gpt-system-and-had-questions-about-the/912435#912435">I wanted to install arch linux on a UEFI/GPT system and had questions about the process - Super User</a></li>
</ul>
</div>

<div id="outline-container-orgd0b08ff" class="outline-3">
<h3 id="orgd0b08ff">支持休眠</h3>
<div class="outline-text-3" id="text-orgd0b08ff">
<p>
在 `efibootmgr` 命令中添加 `resume=/dev/sdaX` 选项，其中 `/dev/sdaX` 为具体的 `swap` 分区。
</p>

<p>
生成支持 `resume` 的 `initramfs`，修改 <a href="file:///etc/mkinitcpio.conf">file:///etc/mkinitcpio.conf</a> ，在 `HOOKS` 中添加 `resume` 项，确保放到 `udev` 及 `filesystem` 之后。重新生成 `initramfs`：
</p>
<div class="org-src-container">
<pre class="src src-sh">mkinitcpio -p linux
</pre>
</div>

<p>
另外可能还要修改 `/sys/power/image_size` 的值，默认为 `2/5` 内存大小，创建
`/etc/tmpfiles.d/modify_power_image_size.conf` 内容为:
</p>
<pre class="example">
w /sys/power/image_size - - - - 0
</pre>

<p>
启用笔记本盒盖休眠，编辑 `/etc/systemd/logind.conf`，添加以下配置项
</p>
<pre class="example">
HandleLidSwitch=hibernate
</pre>

<p>
参考
</p>

<ul class="org-ul">
<li><a href="https://bbs.archlinux.org/viewtopic.php?id=210919">Hibernation issue. / Newbie Corner / Arch Linux Forums</a></li>

<li><a href="http://www.cnblogs.com/xiaozhang9/p/6443478.html">Archlinux休眠设置 - whilst - 博客园</a></li>

<li><a href="https://wiki.archlinux.org/index.php/Power_management_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Power management (简体中文) - ArchWiki</a></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org791ef9d" class="outline-2">
<h2 id="org791ef9d">开通 sudo 权限组</h2>
<div class="outline-text-2" id="text-org791ef9d">
<p>
运行 visudo，修改如下
</p>

<pre class="example">
## Uncomment to allow members of group wheel to execute any command
%wheel ALL=(ALL) ALL
</pre>

<dl class="org-dl">
<dt>wheel</dt><dd>为 sudo 权限组</dd>
</dl>
</div>
</div>

<div id="outline-container-orgc5b1dae" class="outline-2">
<h2 id="orgc5b1dae">创建个人帐号</h2>
<div class="outline-text-2" id="text-orgc5b1dae">
<p>
加入 sudo 权限组
</p>

<div class="org-src-container">
<pre class="src src-sh">useradd tangxinfa -m -G wheel -p password
</pre>
</div>

<dl class="org-dl">
<dt>tangxinfa</dt><dd>为个人帐号名称，请自行修改</dd>

<dt>password</dt><dd>为个人帐号密码，请自行修改</dd>

<dt>wheel</dt><dd>为 sudo 权限组</dd>
</dl>


<p>
接下来的操作可以切到个人帐号了。
</p>

<div class="org-src-container">
<pre class="src src-sh">su - tangxinfa
</pre>
</div>
</div>
</div>

<div id="outline-container-org530b2db" class="outline-2">
<h2 id="org530b2db">安装 gnome 桌面</h2>
<div class="outline-text-2" id="text-org530b2db">
<div class="org-src-container">
<pre class="src src-sh">sudo pacman -S gnome gnome-extra gdm
sudo systemctl enable gdm
sudo systemctl -f enable graphical.target
sudo systemctl enable NetworkManager
</pre>
</div>

<p>
参考
</p>

<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/GNOME_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">GNOME (简体中文) - ArchWiki</a></li>

<li><a href="https://wiki.archlinux.org/index.php/GDM_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">GDM (简体中文) - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-org5f38d9e" class="outline-2">
<h2 id="org5f38d9e">安装 fcitx 输入法</h2>
<div class="outline-text-2" id="text-org5f38d9e">
<p>
参考
</p>

<ul class="org-ul">
<li><a href="http://blog.kankanan.com/article/archlinux-4e0b5b8988c5-fcitx-8f9351656cd5.html">Archlinux下安装fcitx输入法 | 看看俺 – KanKanAn.com</a></li>

<li><a href="https://wiki.archlinux.org/index.php/Fcitx">Fcitx - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-org5e6cdb7" class="outline-2">
<h2 id="org5e6cdb7">安装 yaourt</h2>
<div class="outline-text-2" id="text-org5e6cdb7">
<dl class="org-dl">
<dt>yaourt</dt><dd>Yet AnOther User Repository Tool</dd>
</dl>


<p>
封装了 pacman，支持安装用户软件仓库里的软件包。
</p>

<p>
<code>/etc/pacman.conf</code> 添加配置
</p>
<pre class="example">
[archlinuxfr]
SigLevel = Optional TrustAll
Server = http://repo.archlinux.fr/$arch
</pre>

<p>
安装 yaourt
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S yaourt
</pre>
</div>

<p>
yaourt 临时目录默认为 <code>/tmp</code> 很容易空间不足，创建 <code>~/.yaourtrc</code> 文件，内容如下
</p>
<pre class="example">
TMPDIR="$HOME/.cache"
</pre>

<p>
参考
</p>

<ul class="org-ul">
<li><a href="http://bashell.nodemedia.cn/archives/install-yaourt.html">Yaourt的安装及使用 | 贝壳博客</a></li>
</ul>
</div>
</div>

<div id="outline-container-org7400e9b" class="outline-2">
<h2 id="org7400e9b">触摸板</h2>
<div class="outline-text-2" id="text-org7400e9b">
<div class="org-src-container">
<pre class="src src-sh">yaourt -S xf86-input-synaptics
</pre>
</div>

<ul class="org-ul">
<li><p>
触摸板调优
</p>

<p>
<a href="http://blog.kankanan.com/article/thinkpad-t540p-4fee590d-linux-4e0b89e66478677f63094e0b65f6514968074f4d7f6e79fb52a895ee9898.html">Thinkpad T540p修复linux下触摸板按下时光标位置移动问题 | 看看俺 – KanKanAn.com</a>
</p>

<p>
为避免打字时误触，在 ~/.xprofile 中添加以下内容：
</p>
<pre class="example">
syndaemon -d -i 2 -t
</pre></li>

<li><p>
触摸板失灵
</p>

<p>
移动光标位置却是滚动效果（就像是单指操作变成双指操作了），移动光标时位置卡顿。
</p>

<p>
安装 evtest
</p>
<div class="org-src-container">
<pre class="src src-sh">yaourt -S evtest
</pre>
</div>

<p>
获取触摸板事件号
</p>
<pre class="example">
$ cat /proc/bus/input/devices | grep Synaptics -A 10 | grep event
H: Handlers=event15 mouse1 
</pre>

<p>
检测触摸板事件
</p>
<pre class="example">
$ sudo evtest /dev/input/event15
</pre>

<p>
发现触摸板失灵时，也有触模板压下事件产生，估计是硬件不灵敏了，应该可以通过调整相关参数忽略掉 <code>man</code> <code>synaptics</code> 。
</p>

<p>
使用蓝牙音箱时，触模板必失灵，需要重启系统触模板才能恢复，暂未找到解决方案。
</p></li>
</ul>

<p>
参考
</p>

<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/Touchpad_Synaptics">Touchpad Synaptics - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-orga892648" class="outline-2">
<h2 id="orga892648">指纹识别</h2>
<div class="outline-text-2" id="text-orga892648">
<p>
安装指纹识别模块
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S fprintd libfprint-git
</pre>
</div>

<p>
录入指纹
</p>

<div class="org-src-container">
<pre class="src src-sh">fprintd-enroll
</pre>
</div>

<p>
测试指纹
</p>

<div class="org-src-container">
<pre class="src src-sh">fprintd-verify
</pre>
</div>

<p>
多测试几次，如果效果不好则重新录入。
</p>

<p>
锁定桌面，试试使用指纹解锁。
</p>


<p>
参考
</p>

<ul class="org-ul">
<li><a href="https://github.com/ars3niy/fprint_vfs5011/issues/9">Verify result always returning "verify-no-match" · Issue #9 · ars3niy/fprint_vfs5011</a></li>
</ul>
</div>
</div>

<div id="outline-container-org910fbe0" class="outline-2">
<h2 id="org910fbe0">定制 gnome3</h2>
<div class="outline-text-2" id="text-org910fbe0">
<p>
安装扩展
</p>

<ul class="org-ul">
<li><p>
程序托盘图标回到屏幕右上角
</p>

<p>
<a href="https://extensions.gnome.org/extension/495/topicons/">TopIcons</a>
</p></li>

<li><p>
窗口标题栏融入活动栏
</p>

<p>
<a href="https://extensions.gnome.org/extension/723/pixel-saver/">Pixel Saver</a>
</p></li>
</ul>

<p>
调试扩展
</p>

<ul class="org-ul">
<li><p>
启动 Looking Glass
</p>

<p>
按快捷键 <code>Alt</code> + <code>F2</code> 输入 <code>lg</code>
</p></li>

<li><p>
切到 Extensions 页
</p>

<p>
找到出问题的插件，点击 Show Errors，一般是系统少安装了某些包，使用 pacman 安装即可
</p></li>

<li><p>
重新载入桌面
</p>

<p>
按快捷键 <code>Alt</code> + <code>F2</code> 输入 <code>r</code>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org4034e8e" class="outline-2">
<h2 id="org4034e8e">避免启动后总是静音</h2>
<div class="outline-text-2" id="text-org4034e8e">
<p>
安装 alsa-utils，保存音量设置。
</p>
</div>
</div>

<div id="outline-container-orgb745563" class="outline-2">
<h2 id="orgb745563">显卡驱动</h2>
<div class="outline-text-2" id="text-orgb745563">
<p>
机器是双显卡，一块 Intel 的集显加上 Nvida 的独显。默认的开源显卡驱动也够用，使用 Nvida 的独显效果更好。
</p>

<div class="org-src-container">
<pre class="src src-sh">pacman -S nvidia
</pre>
</div>
<p>
参考 <a href="http://blog.csdn.net/zhyh1986/article/details/39892611">ArchLinux边用边记 - 竹叶青的专栏 - 博客频道 - CSDN.NET</a>
</p>
</div>
</div>

<div id="outline-container-orgb59dd21" class="outline-2">
<h2 id="orgb59dd21">蓝牙耳机</h2>
<div class="outline-text-2" id="text-orgb59dd21">
<p>
安装相关软件包
</p>
<div class="org-src-container">
<pre class="src src-sh">yaourt -S pulseaudio-bluetooth bluez-firmware bluez-utils paman
</pre>
</div>

<p>
启动蓝牙服务
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl enable bluetooth
sudo systemctl start bluetooth
</pre>
</div>

<p>
参考
</p>
<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/Bluetooth_headset_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">Bluetooth headset (简体中文) - ArchWiki</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux 系统时间同步]]></title>
            <link>/article/linux-7cfb7edf65f695f4540c6b65.html</link>
            <guid>/article/linux-7cfb7edf65f695f4540c6b65.html</guid>
            <pubDate>Thu, 10 Mar 2016 06:07:00 GMT</pubDate>
            <content:encoded><![CDATA[<dl class="org-dl">
<dt>ntp</dt><dd>Network Time Protocol，即网络时间同步协议。</dd>
</dl>

<div id="outline-container-org2869e41" class="outline-2">
<h2 id="org2869e41">安装 ntp</h2>
<div class="outline-text-2" id="text-org2869e41">
<p>
ntpdate 和 ntpd 通常包含在 ntp 软件包里，但有的系统是单独打包。
</p>

<p>
ntpdate 命令用于直接同步时间。
</p>

<p>
ntpd 服务用于平滑同步时间。
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S ntp
</pre>
</div>
</div>
</div>

<div id="outline-container-org33f1f91" class="outline-2">
<h2 id="org33f1f91">使用 ntpdate 命令同步时间</h2>
<div class="outline-text-2" id="text-org33f1f91">
<p>
ntpdate 命令用于强制性的将系统时间设置为 ntp 服务器时间，导致时钟跃变，可能会引起系统不稳定。
</p>
</div>

<div id="outline-container-orgbf3d079" class="outline-3">
<h3 id="orgbf3d079">手工同步一次</h3>
<div class="outline-text-3" id="text-orgbf3d079">
<p>
带 -d 选项，调试运行，不修改本地时间
</p>
<pre class="example">
<span class="linenr"> 1: </span># ntpdate -d s1a.time.edu.cn
<span class="linenr"> 2: </span> 9 Mar 18:46:29 ntpdate[20537]: ntpdate 4.2.4p8@1.1612-o Fri Feb 22 11:23:28 UTC 2013 (1)
<span class="linenr"> 3: </span>Looking for host s1a.time.edu.cn and service ntp
<span class="linenr"> 4: </span>host found : 202.112.10.60
<span class="linenr"> 5: </span>transmit(202.112.10.60)
<span class="linenr"> 6: </span>receive(202.112.10.60)
<span class="linenr"> 7: </span>transmit(202.112.10.60)
<span class="linenr"> 8: </span>receive(202.112.10.60)
<span class="linenr"> 9: </span>transmit(202.112.10.60)
<span class="linenr">10: </span>receive(202.112.10.60)
<span class="linenr">11: </span>transmit(202.112.10.60)
<span class="linenr">12: </span>receive(202.112.10.60)
<span class="linenr">13: </span>transmit(202.112.10.60)
<span class="linenr">14: </span>server 202.112.10.60, port 123
<span class="linenr">15: </span>stratum 1, precision -20, leap 00, trust 000
<span class="linenr">16: </span>refid [PPS], delay 0.06285, dispersion 0.00003
<span class="linenr">17: </span>transmitted 4, in filter 4
<span class="linenr">18: </span>reference time:    da8a8b53.73391350  Wed, Mar  9 2016 19:45:23.450
<span class="linenr">19: </span>originate timestamp: da8a8b5c.3f42dc7c  Wed, Mar  9 2016 19:45:32.247
<span class="linenr">20: </span>transmit timestamp:  da8a7d86.32fde4c3  Wed, Mar  9 2016 18:46:30.199
<span class="linenr">21: </span>filter delay:  0.06323  0.06317  0.06299  0.06285 
<span class="linenr">22: </span>         0.00000  0.00000  0.00000  0.00000 
<span class="linenr">23: </span>filter offset: 3542.028 3542.028 3542.028 3542.028
<span class="linenr">24: </span>         0.000000 0.000000 0.000000 0.000000
<span class="linenr">25: </span>delay 0.06285, dispersion 0.00003
<span id="coderef-ntpdate_debug_offset" class="coderef-off"><span class="linenr">26: </span>offset 3542.028898</span>
<span class="linenr">27: </span>
<span class="linenr">28: </span> 9 Mar 18:46:30 ntpdate[20537]: step time server 202.112.10.60 offset 3542.028898 sec
</pre>

<dl class="org-dl">
<dt>行 <a href="#coderef-ntpdate_debug_offset" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-ntpdate_debug_offset');" onmouseout="CodeHighlightOff(this, 'coderef-ntpdate_debug_offset');">26</a> </dt><dd>本机时间比时间服务器慢了 3542.028898 秒</dd>
</dl>

<p>
不带 -d 选项，修改本地时间
</p>
<pre class="example">
# ntpdate s1a.time.edu.cn
ntpdate s1a.time.edu.cn
 9 Mar 19:51:51 ntpdate[20553]: step time server 202.112.10.60 offset 3542.052347 sec
</pre>
</div>
</div>

<div id="outline-container-orga6c3bcc" class="outline-3">
<h3 id="orga6c3bcc">定期自动同步时间</h3>
<div class="outline-text-3" id="text-orga6c3bcc">
<p>
长时间运行的系统，会与标准时间产生偏差，通过 crontab 每日运行一次
</p>

<p>
<code>/etc/cron.daily/ntpdate</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;">#</span><span style="color: #204A87;">!/bin/</span><span style="color: #A52A2A; font-weight: bold;">bash</span>

/usr/sbin/ntpdate s1a.time.edu.cn &gt;/dev/null 2&gt;&amp;1
</pre>
</div>

<p>
请记得为 <code>/etc/cron.daily/ntpdate</code> 添加可执行权限。
</p>
</div>
</div>
</div>

<div id="outline-container-orgff1fe09" class="outline-2">
<h2 id="orgff1fe09">使用 ntpd 服务同步时间</h2>
<div class="outline-text-2" id="text-orgff1fe09">
<dl class="org-dl">
<dt>ntpd</dt><dd>Network Time Protocol (NTP) Daemon
The ntpd program is an operating system daemon that synchronizes the system clock to remote NTP time servers or local reference clocks.</dd>
</dl>


<p>
ntpd 服务的配置文件为 /etc/ntp.conf 。
</p>

<p>
ntpd 如果时间偏差过大（默认 1000 秒钟），ntpd 会输出错误到系统日志后退出，所以在服务启动前需要先同步好时间。
</p>

<p>
某嵌入式系统上的 ntpd 服务脚本：
</p>

<p>
<code>/etc/init.d/S49ntp</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;">#</span><span style="color: #204A87;">! /bin/</span><span style="color: #A52A2A; font-weight: bold;">sh</span>
<span style="color: #204A87;">#</span>
<span style="color: #204A87;"># </span><span style="color: #204A87;">System-V init script for the openntp daemon</span>
<span style="color: #204A87;">#</span>

<span style="color: #0084C8; font-weight: bold;">PATH</span>=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
<span style="color: #0084C8; font-weight: bold;">DESC</span>=<span style="color: #4E9A06;">"network time protocol daemon"</span>
<span style="color: #0084C8; font-weight: bold;">NAME</span>=ntpd
<span style="color: #0084C8; font-weight: bold;">DAEMON</span>=/usr/sbin/$<span style="color: #0084C8; font-weight: bold;">NAME</span>
<span style="color: #0084C8; font-weight: bold;">NTPDATE_BIN</span>=/usr/bin/ntpdate

<span style="color: #204A87;"># </span><span style="color: #204A87;">Gracefully exit if the package has been removed.</span>
<span style="color: #A020F0;">test</span> -x $<span style="color: #0084C8; font-weight: bold;">DAEMON</span> || <span style="color: #A52A2A; font-weight: bold;">exit</span> 0

<span style="color: #204A87;"># </span><span style="color: #204A87;">Read config file if it is present.</span>
<span style="color: #A52A2A; font-weight: bold;">if</span> [ -r /etc/default/$<span style="color: #0084C8; font-weight: bold;">NAME</span> ]
<span style="color: #A52A2A; font-weight: bold;">then</span>
    <span style="color: #A020F0;">.</span> /etc/default/$<span style="color: #0084C8; font-weight: bold;">NAME</span>
<span style="color: #A52A2A; font-weight: bold;">fi</span>

<span style="color: #A52A2A; font-weight: bold;">case</span> <span style="color: #4E9A06;">"$1"</span><span style="color: #A52A2A; font-weight: bold;"> in</span>
  start)
    <span style="color: #A52A2A; font-weight: bold;">if</span> [ -x $<span style="color: #0084C8; font-weight: bold;">NTPDATE_BIN</span> ] ; <span style="color: #A52A2A; font-weight: bold;">then</span>
        <span style="color: #A020F0;">echo</span> -n <span style="color: #4E9A06;">"Getting initial time via ntp"</span>
        $<span style="color: #0084C8; font-weight: bold;">NTPDATE_BIN</span> $<span style="color: #0084C8; font-weight: bold;">NTPDATE_OPTS</span> $<span style="color: #0084C8; font-weight: bold;">NTPSERVERS</span> &gt; /dev/null 2&gt;&amp;1
        <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"."</span>
    <span style="color: #A52A2A; font-weight: bold;">fi</span>

    <span style="color: #A020F0;">echo</span> -n <span style="color: #4E9A06;">"Starting $DESC: $NAME"</span>
    start-stop-daemon -S -q -x $<span style="color: #0084C8; font-weight: bold;">DAEMON</span>
    <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"."</span>
    ;;
  stop) <span style="color: #A020F0;">echo</span> -n <span style="color: #4E9A06;">"Stopping $DESC: $NAME"</span>
    start-stop-daemon -K -q -n $<span style="color: #0084C8; font-weight: bold;">NAME</span>
    <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"."</span>
    ;;
  reload|force-reload) <span style="color: #A020F0;">echo</span> -n <span style="color: #4E9A06;">"Reloading $DESC configuration..."</span>
    start-stop-daemon -K -q -n $<span style="color: #0084C8; font-weight: bold;">NAME</span> -s 1
    <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"done."</span>
  ;;
  restart) <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"Restarting $DESC: $NAME"</span>
    $<span style="color: #0084C8; font-weight: bold;">0</span> stop
    sleep 1
    $<span style="color: #0084C8; font-weight: bold;">0</span> start
    ;;
  *) <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}"</span> &gt;&amp;2
    <span style="color: #A52A2A; font-weight: bold;">exit</span> 1
    ;;
<span style="color: #A52A2A; font-weight: bold;">esac</span>

<span style="color: #A52A2A; font-weight: bold;">exit</span> 0
</pre>
</div>

<p>
其中 $NTPDATE_OPTS 定义在 /etc/default/ntpd 中：
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">NTPDATE_OPTS</span>=<span style="color: #4E9A06;">"-t 5"</span>
</pre>
</div>

<p>
通过 ntpdate 同步初始时间失败，ntpd 服务可能因为当前系统时间与时间服务器偏差过大而退出。
</p>

<p>
同步失败的原因：
</p>

<ul class="org-ul">
<li>开机后网络尚未连通</li>

<li>时间服务器繁忙</li>

<li>网络环境限制使用 NTP 协议</li>

<li><p>
命令执行超时
</p>

<p>
域名解析、网络请求处理都会占用时间，5 秒钟不一定能完成。
</p></li>
</ul>

<p>
由于脚本是在系统启动过程中运行，再延长超时时间可能导致开机启动时间变长。
</p>

<p>
可以配置 ntpd 在时间偏差过大时仍然同步时间（注意：ntpd 第一次需要 4-5 分钟才能完成同步），有以下几种方法：
</p>

<ul class="org-ul">
<li><p>
添加 -g 命令行选项
</p>

<p>
<code>-g</code> 本地时间与时间服务器偏差达过大（默认为 1000 秒）时，不退出，同步一次时间。
</p></li>

<li><p>
设置 NTPD_PANICGATE 环境变量
</p>

<p>
绝大部分命令行选项都可以通过加 NTPD_ 前缀的环境变量进行设置。
</p></li>

<li><p>
修改配置文件
</p>

<p>
将以下内容添加到 /etc/ntp.conf 最前面
</p>
<div class="org-src-container">
<pre class="src src-sh">tinker panic 0
</pre>
</div></li>
</ul>
</div>

<div id="outline-container-orgc1b82f1" class="outline-3">
<h3 id="orgc1b82f1">手工同步一次</h3>
<div class="outline-text-3" id="text-orgc1b82f1">
<p>
通过 ntpd 的命令行选项可以更好地完成 ntpdate 的功能。
</p>

<p>
<code>-q</code> 同步一次后退出。
</p>

<div class="org-src-container">
<pre class="src src-sh">ntpd -g -q
</pre>
</div>

<p>
上面的命令会确保同步一次时间后结束。
</p>
</div>
</div>
</div>

<div id="outline-container-org047ca8b" class="outline-2">
<h2 id="org047ca8b">参考</h2>
<div class="outline-text-2" id="text-org047ca8b">
<ul class="org-ul">
<li><a href="http://blog.csdn.net/suer0101/article/details/7868813">使用ntpdate更新系统时间</a></li>

<li><a href="http://acooly.iteye.com/blog/1993484">NTP服务及时间同步(CentOS6.x)</a></li>

<li><a href="http://www.psce.com/blog/kb/how-to-periodically-synchronize-time-in-linux/">How to periodically synchronize time in Linux?</a></li>

<li><a href="http://www.tldp.org/LDP/sag/html/basic-ntp-config.html">Basic NTP configuration</a></li>

<li><a href="http://linux.die.net/man/8/ntpd">ntpd(8): Network Time Protocol daemon - Linux man page</a></li>

<li><a href="http://askubuntu.com/a/443077/397632">How to force a clock update using ntp? - Ask Ubuntu</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux 下搭建 Rust 开发环境]]></title>
            <link>/article/archlinux-4e0b642d5efa-rust-5f0053d173af5883.html</link>
            <guid>/article/archlinux-4e0b642d5efa-rust-5f0053d173af5883.html</guid>
            <pubDate>Mon, 29 Feb 2016 12:03:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
Emacs 里安装 rust-mode
</p>

<p>
M-x el-get-install rust-mode
</p></li>

<li><p>
Archlinux 安装 rust 相关包
</p>

<p>
yaourt -S rust cargo
</p>

<p>
安装的版本
</p>

<pre class="example">
$ rustc --version
rustc 1.6.0
$ cargo --version
cargo 0.8.0 (28a0cbb 2016-01-17)
</pre></li>

<li><p>
Hello world!
</p>

<p>
<code>hello_world.rs</code>
</p>
<div class="org-src-container">
<pre class="src src-rust"><span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">main</span>() {
    <span style="color: #A020F0;">println!</span>(<span style="color: #4E9A06;">"Hello, world!"</span>);
}
</pre>
</div>

<p>
编译运行
</p>
<pre class="example">
$ rustc hello_world.rs 
$ ./hello_world 
Hello, world!
</pre></li>

<li><p>
更多配置
</p>

<p>
可以参考文章《<a href="http://bassam.co/emacs/2015/08/24/rust-with-emacs/">Configuring Emacs for Rust</a>》进行更高级的配置，对于我这种 Rust 还没入门的人来说，前面的配置已经足够，还是一步一个脚印吧。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 6.4 生产环境上安装 pm2]]></title>
            <link>/article/centos-6.4-751f4ea773af58834e0a5b8988c5-pm2.html</link>
            <guid>/article/centos-6.4-751f4ea773af58834e0a5b8988c5-pm2.html</guid>
            <pubDate>Thu, 25 Feb 2016 09:27:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
确保系统要干净（尚未安装 node.js），使用 root 帐号登录。
</p>

<ul class="org-ul">
<li><p>
安装 LTS 版的 node.js
</p>

<p>
当前 <a href="https://nodejs.org/en/">官方</a> 推荐的 LTS 版本为 v4.3.1，通过淘宝镜像下载速度快一些，直接安装在系统目录中 /usr 下，便于使用。
</p>

<div class="org-src-container">
<pre class="src src-sh">wget http://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.3.1-linux-x64.tar.xz<span style="text-decoration: underline;"> -O node-v4.3.1-linux-x64.tar.xz</span>
tar xJvf node-v4.3.1-linux-x64.tar.xz --no-same-owner --exclude CHANGELOG.md --e<span style="text-decoration: underline;">xclude LICENSE --exclude README.md --strip-components 1 -C /usr</span>
</pre>
</div>

<p>
参考：<a href="https://gist.github.com/TooTallNate/2477f53a23a51537332e">Install Node.js one-liner</a>
</p></li>

<li><p>
安装稳定版 pm2
</p>

<p>
从 <a href="https://github.com/Unitech/pm2/blob/master/CHANGELOG.md">CHANGELOG.md</a> 查到的当前的稳定版本为 v0.14.3，pm2 发布很频繁,不宜追新。
</p>

<div class="org-src-container">
<pre class="src src-sh">npm install pm2@0.14.3 -g
</pre>
</div></li>

<li><p>
设置 pm2 为开机启动
</p>

<div class="org-src-container">
<pre class="src src-sh">pm2 startup centos
</pre>
</div></li>

<li><p>
定期清理日志
</p>

<p>
按《 <a href="http://blog.kankanan.com/article/pm2-768465e55fd77ba17406.html#sec-6">pm2的日志管理</a> 》中的“定期清理日志”一节所述使用 logrotate 服务定期清理日志。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 6.4 上安装 ruby 1.9.3]]></title>
            <link>/article/centos-6.4-4e0a5b8988c5-ruby-1.9.3.html</link>
            <guid>/article/centos-6.4-4e0a5b8988c5-ruby-1.9.3.html</guid>
            <pubDate>Fri, 22 Jan 2016 13:12:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
CentOS 6.4 上仓库中的 Ruby 版本为 1.8.7 太旧了，<a href="https://github.com/yaauie/redis-copy">redis-copy</a> 要求 Ruby 版本至少为 1.9.3。
</p>

<ul class="org-ul">
<li><p>
安装 rvm
</p>

<div class="org-src-container">
<pre class="src src-sh">curl -L get.rvm.io | bash -s stable
</pre>
</div></li>

<li><p>
安装 Ruby 1.9.3
</p>

<div class="org-src-container">
<pre class="src src-sh">/usr/local/rvm/bin/rvm install 1.9.3
</pre>
</div>

<ul class="org-ul">
<li><p>
启用 Ruby 1.9.3
</p>

<div class="org-src-container">
<pre class="src src-js">source /usr/local/rvm/scripts/rvm
rvm use 1.9.3
</pre>
</div></li>

<li><p>
安装 RubyGems
</p>

<div class="org-src-container">
<pre class="src src-sh">rvm rubygems current
</pre>
</div></li>

<li><p>
RubyGems 官方源国内访问不稳定，换成淘宝的镜像
</p>

<div class="org-src-container">
<pre class="src src-sh">gem sources --remove https://rubygems.org/
gem sources -a https://ruby.taobao.org/
</pre>
</div></li>

<li><p>
安装 <a href="https://github.com/yaauie/redis-copy">redis-copy</a>
</p>

<div class="org-src-container">
<pre class="src src-sh">gem install redis-copy
</pre>
</div>

<p>
安装后程序路径为 /usr/local/rvm/gems/ruby-1.9.3-p551/bin/redis-copy
</p>

<p>
启用 Ruby 1.9.3 后，redis-copy 可以直接运行。
</p></li>
</ul></li>

<li><p>
参考
</p>

<p>
<a href="https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-on-centos-6-with-rvm">How To Install Ruby on Rails on CentOS 6 with RVM | DigitalOcean</a>
</p>

<p>
<a href="https://ruby-china.org/topics/3705">手把手安装RVM以及为什么RVM is not a function » Topics » Ruby China</a>
</p>

<p>
<a href="http://www.jb51.net/article/49079.htm">淘宝网提供的国内RubyGems镜像简介和使用方法_ruby专题_脚本之家</a></p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 6.4 上编译安装 gcc 5.2.0]]></title>
            <link>/article/centos-6.4-4e0a7f168bd15b8988c5-gcc-5.2.0.html</link>
            <guid>/article/centos-6.4-4e0a7f168bd15b8988c5-gcc-5.2.0.html</guid>
            <pubDate>Fri, 22 Jan 2016 13:12:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
node.js 4.x 的第三方扩展编译时要求 gcc 版本为 4.8，但是 CentOS 6.4 仓库里的版本为 4.4.7，在生产环境从第三方仓库里安装最新版 gcc 又不放心，还是自已从源代码编译安装吧。
</p>

<ul class="org-ul">
<li><p>
下载 gcc 源代码
</p>

<div class="org-src-container">
<pre class="src src-sh">wget http://mirror.lzu.edu.cn/gnu/gcc/gcc-5.2.0/gcc-5.2.0.tar.bz2
tar xjvf gcc-5.2.0.tar.bz2
<span style="color: #A020F0;">cd</span> gcc-5.2.0
</pre>
</div>

<p>
官方的下载地址为 <a href="ftp://ftp.gnu.org/gnu/gcc/">ftp://ftp.gnu.org/gnu/gcc/</a> ，使用国内镜像 <a href="http://mirror.lzu.edu.cn/gnu/gcc">http://mirror.lzu.edu.cn/gnu/gcc</a> 快很多。
</p>

<p>
gnu 中国的 <a href="https://www.gnu.org/prep/ftp.html">镜像列表</a>
</p>
<blockquote>
<p>
Asia
</p>

<p>
China
    <a href="http://mirror.hust.edu.cn/gnu/">http://mirror.hust.edu.cn/gnu/</a>
    <a href="http://mirrors.ustc.edu.cn/gnu/">http://mirrors.ustc.edu.cn/gnu/</a>
    <a href="ftp://mirrors.ustc.edu.cn/gnu/">ftp://mirrors.ustc.edu.cn/gnu/</a>
    rsync://mirrors.ustc.edu.cn/gnu/
</p>
</blockquote></li>

<li><p>
安装依赖的包
</p>

<div class="org-src-container">
<pre class="src src-sh">yum install gmp-devel mpfr-devel libmpc-devel
</pre>
</div>

<p>
参考自 INSTALL 目录下的文档。
</p></li>

<li><p>
编译安装
</p>

<div class="org-src-container">
<pre class="src src-sh">./configure --prefix=/opt/gcc-5.2.0 --disable-multilib &amp;&amp;<span style="color: #4E9A06;">\</span>
make &amp;&amp;<span style="color: #4E9A06;">\</span>
make -k check &amp;&amp;<span style="color: #4E9A06;">\</span>
make install
</pre>
</div>

<p>
<code>--disable-multilib</code> 只编译 64 位。
</p>

<p>
编译时间会耗时几个小时，这段时间最好去干点别的。
</p></li>

<li><p>
切换gcc版本
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">PATH</span>=/opt/gcc-5.2.0/bin:$<span style="color: #0084C8; font-weight: bold;">PATH</span>
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">LD_LIBRARY_PATH</span>=/opt/gcc-5.2.0/lib64/:$<span style="color: #0084C8; font-weight: bold;">LD_LIBRARY_PATH</span>
</pre>
</div>

<p>
或
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">CC</span>=/opt/gcc-5.2.0/bin/gcc
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">CPP</span>=/opt/gcc-5.2.0/bin/cpp
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">CXX</span>=/opt/gcc-5.2.0/bin/c++
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">LD_LIBRARY_PATH</span>=/opt/gcc-5.2.0/lib64/:$<span style="color: #0084C8; font-weight: bold;">LD_LIBRARY_PATH</span>
</pre>
</div></li>

<li><p>
参考
</p>

<p>
<a href="http://superuser.com/questions/381160/how-to-install-gcc-4-7-x-4-8-x-on-centos">yum - How to Install gcc 4.7.x/4.8.x on CentOS - Super User</a>
</p>

<p>
<a href="https://wiki.mikejung.biz/Gcc_CentOS">Gcc CentOS - How to compile gcc-4.8.2 on CentOS 6.6</a></p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux下解决上网慢问题]]></title>
            <link>/article/archlinux-4e0b89e351b34e0a7f51616295ee9898.html</link>
            <guid>/article/archlinux-4e0b89e351b34e0a7f51616295ee9898.html</guid>
            <pubDate>Wed, 30 Dec 2015 02:17:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
发现  <code>Firefox</code> 的状态栏长时间显示 <code>Looking up www.xxxx.com ...</code> ，应该是我的电脑的 <code>DNS</code> 配置出问题了。
</p>

<p>
<code>/etc/resolv.conf</code> 内容如下：
</p>

<pre class="example">
# Generated by resolvconf
search lan
nameserver 8.8.8.8
nameserver 192.168.111.1
</pre>

<p>
<code>/etc/resolvconf.conf</code> 内容如下：
</p>

<pre class="example">
resolv_conf=/etc/resolv.conf
name_servers=8.8.8.8
</pre>

<p>
我配置的是使用静态DNS <code>8.8.8.8</code> ，但是 <code>/etc/resolv.conf</code> 文件内容多出了两项，怀疑是 <code>search lan</code> 引起。
</p>

<p>
很多的网络管理工具都会去改动 <code>/etc/resolv.conf</code> 文件，如 <code>pdnsd</code> <code>dnsmasq</code> <code>NetworkManager</code> 。
</p>

<div id="outline-container-org181ca0c" class="outline-2">
<h2 id="org181ca0c">禁止 <code>NetworkManager</code> 改动 <code>/etc/resolv.conf</code></h2>
<div class="outline-text-2" id="text-org181ca0c">
<ul class="org-ul">
<li><p>
修改 <code>/etc/NetworkManager/NetworkManager.conf</code> 配置
</p>

<p>
<code>dns=none</code>
</p></li>

<li><p>
重新载入 <code>systemd</code> 配置
</p>

<p>
<code>sudo systemctl daemon-reload</code>
</p></li>

<li><p>
重启 <code>NetworkManager</code>
</p>

<p>
<code>sudo systemctl restart NetworkManager</code>
</p></li>

<li><p>
重新生成 <code>/etc/resolv.conf</code>
</p>

<p>
<code>sudo resolvconf -u</code>
</p>

<pre class="example">
# Generated by resolvconf
nameserver 8.8.8.8
</pre>

<p>
现在可以正常上网了。
</p>

<p>
但是静态DNS <code>8.8.8.8</code> 不太稳定，最好换成优先使用DHCP分配的本地DNS。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org926b95f" class="outline-2">
<h2 id="org926b95f">使用DHCP分配的本地DNS</h2>
<div class="outline-text-2" id="text-org926b95f">
<ul class="org-ul">
<li><p>
撤销之前对 <code>/etc/NetworkManager/NetworkManager.conf</code> 的修改
</p>

<p>
<code>dns=default</code>
</p></li>

<li><p>
去掉 <code>/etc/resolvconf.conf</code> 配置的静态DNS
</p>

<pre class="example">
resolv_conf=/etc/resolv.conf
#name_servers=8.8.8.8
</pre></li>

<li><p>
重新载入 <code>systemd</code> 配置
</p>

<p>
<code>sudo systemctl daemon-reload</code>
</p></li>

<li><p>
重启 <code>NetworkManager</code>
</p>

<p>
<code>sudo systemctl restart NetworkManager</code>
</p></li>

<li><p>
重新生成 <code>/etc/resolv.conf</code>
</p>

<p>
<code>sudo resolvconf -u</code>
</p>

<pre class="example">
# Generated by resolvconf
nameserver 192.168.111.1
</pre>

<p>
过一会儿 <code>/etc/resolv.conf</code> 内容自动被更新
</p>

<pre class="example">
# Generated by resolvconf
search lan
nameserver 192.168.111.1
</pre>

<p>
<code>search lan</code> 又出现了， <code>NetworkManager</code> 貌似是通过 <code>dhclient</code> 对 <code>/etc/resolv.conf</code> 进行修改的，具体指令参见 <code>/sbin/dhclient-script</code> 。
</p>

<p>
上网又很流畅了，看来之前上网慢是由 <code>8.8.8.8</code> DNS服务器抽风引起，与 <code>search lan</code> 配置无关。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org18a0092" class="outline-2">
<h2 id="org18a0092">参考</h2>
<div class="outline-text-2" id="text-org18a0092">
<p>
<a href="https://wiki.archlinux.org/index.php/Resolv.conf#Preserve_DNS_settings">resolv.conf - ArchWiki</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux下安装运行docker]]></title>
            <link>/article/archlinux-4e0b5b8988c58fd0884c-docker.html</link>
            <guid>/article/archlinux-4e0b5b8988c58fd0884c-docker.html</guid>
            <pubDate>Wed, 09 Dec 2015 15:07:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
安装 <code>docker</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S docker
</pre>
</div></li>

<li><p>
配置 <code>docker</code>
</p>

<p>
由于 <code>docker</code> 的官方仓库被墙，需要从 <code>dockerpool.com</code> 上下载，修改 <code>docker</code> 配置以免 <code>pull</code> 时出现 tls 相关错误。
</p>

<p>
修改 <code>/usr/lib/systemd/system/docker.service</code> 文件，将
</p>

<pre class="example">
ExecStart=/usr/bin/docker daemon -H fd:// --exec-opt native.cgroupdriver=cgroupfs
</pre>

<p>
改为
</p>

<pre class="example">
ExecStart=/usr/bin/docker daemon --insecure-registry dl.dockerpool.com:5000 -H fd:// --exec-opt native.cgroupdriver=cgroupfs
</pre>

<p>
生效配置：
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo systemctl daemon-reload
</pre>
</div></li>

<li><p>
启动 <code>docker</code> 服务
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo systemctl restart docker
</pre>
</div></li>

<li><p>
下载 <code>ubuntu14.04</code> 镜像
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo docker pull <span style="color: #4E9A06;">'dl.dockerpool.com:5000/ubuntu:14.04'</span>
</pre>
</div></li>

<li><p>
试运行容器
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo docker run -t -i <span style="color: #4E9A06;">'dl.dockerpool.com:5000/ubuntu:14.04'</span> /bin/bash
</pre>
</div></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[修复libcurl域名解析超时引起的内存越界问题]]></title>
            <link>/article/4fee590d-libcurl-57df540d89e367908d8565f65f158d77768451855b588d8a754c95ee9898.html</link>
            <guid>/article/4fee590d-libcurl-57df540d89e367908d8565f65f158d77768451855b588d8a754c95ee9898.html</guid>
            <pubDate>Wed, 09 Dec 2015 06:17:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
程序发布后在一个用户的机器上频繁出现崩溃，最终定位到崩溃来自一个断言失败：
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00578E; font-weight: bold;">assert</span>(<span style="color: #2F8B58; font-weight: bold;">pthread_self</span>() != main_thread_id);
</pre>
</div>

<p>
上面这条语句出现在工作线程回调的函数中，竟然发生了工作线程ID和主线程ID相同的怪事，观察了运行日志，发现使用libcurl发起HTTP请求如果超时则有很大机率会断言失败导致崩溃，在使用libcurl发起HTTP请求的代码块前后输出工作线程ID，工作线程ID出现了变化，根据经验很可能是出现了内存越界。
</p>

<p>
最终找到了几篇 <code>libcurl</code> 多线程安全相关的文章：
</p>

<ul class="org-ul">
<li>《<a href="http://blog.csdn.net/balderfan/article/details/7599554">libcurl 多线程使用注意事项</a>》</li>

<li>《<a href="http://blog.csdn.net/delphiwcdj/article/details/18284429">Libcurl多线程crash问题</a>》</li>
</ul>

<p>
修复步骤总结如下：
</p>

<ul class="org-ul">
<li><p>
在主线程起始处初始化 <code>libcurl</code> 库
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00578E; font-weight: bold;">curl_global_init</span>(<span style="color: #2F8B58; font-weight: bold;">CURL_GLOBAL_ALL</span>);
</pre>
</div></li>

<li><p>
禁止 <code>libcurl</code> 通过 <code>alarm</code> 实现域名解析超时
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00578E; font-weight: bold;">curl_easy_setopt</span>(<span style="color: #2F8B58; font-weight: bold;">curl</span>, <span style="color: #2F8B58; font-weight: bold;">CURLOPT_NOSIGNAL</span>, 1L);
</pre>
</div>

<p>
如果不做下面的最后一步， <code>libcurl</code> 上设置的超时都会无效。
</p></li>

<li><p>
编译 <code>libcurl</code> 时启用 <code>c-ares</code> 或 <code>threaded resolver</code> ，以支持域名解析超时
</p>

<div class="org-src-container">
<pre class="src src-sh">./configure --enable-ares
</pre>
</div>

<p>
或
</p>

<div class="org-src-container">
<pre class="src src-sh">./configure --enable-threaded-resolver
</pre>
</div>

<p>
《<a href="http://daniel.haxx.se/blog/2011/04/25/libcurls-name-resolving/">Asynch resolving in libcurl</a>》对 <code>c-ares</code> 或 <code>threaded resolver</code> 两种方式进行了比较，简而言之：
</p>

<ul class="org-ul">
<li><code>c-ares</code> 是一个异步的域名解析库，开销更少，但是它并非使用系统原生的方式实现，对于定制系统（如：hosts或resolv.conf不在标准位置）可能会有问题。</li>

<li><code>threaded resolver</code> 每次域名解析都会开一个线程，解析完成后销毁线程，开销会大一些，但是稳定性、兼容性更好。</li>
</ul></li>
</ul>

<p>
按照上面的步骤启用 <code>c-ares</code> 进行修改后程序运行了一整天，没有再崩溃。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[/etc/passwd、/etc/passwd+、/etc/passwd- 文件介绍]]></title>
            <link>/article/etc-passwd-3001-etc-passwd-3001-etc-passwd-65874ef64ecb7ecd.html</link>
            <guid>/article/etc-passwd-3001-etc-passwd-3001-etc-passwd-65874ef64ecb7ecd.html</guid>
            <pubDate>Tue, 24 Nov 2015 07:58:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
busybox下修改密码或创建用户的时候，有时候操作会失败，此时 <code>/etc</code> 目录可能出现 <code>passwd+</code> 、 <code>passwd-</code> 两个文件。
</p>

<p>
当出现 <code>/etc/passwd+</code> 文件时，修改密码会耗时几秒钟然后报错：
</p>

<pre class="example">
# passwd root
Changing password for root
New password: 123456

Retype password: 123456

passwd: can't create '/etc/passwd+': File exists
passwd: can't update password file /etc/passwd
# 
</pre>

<div id="outline-container-orge2d4e29" class="outline-2">
<h2 id="orge2d4e29">根据 <a href="https://svn.mcs.anl.gov/repos/ZeptoOS/trunk/BGP/packages/busybox/src/libbb/update_passwd.c">update_passwd.c</a> 可以获得以下信息</h2>
<div class="outline-text-2" id="text-orge2d4e29">
<ul class="org-ul">
<li><code>/etc/passwd</code> 用户帐号配置文件</li>

<li><code>/etc/passwd+</code> 更新过程中的临时文件</li>

<li><code>/etc/passwd-</code> 用户帐号配置文件的备份</li>
</ul>

<p>
更新密码逻辑：
</p>

<ul class="org-ul">
<li><p>
创建 <code>/etc/passwd+</code> 文件
</p>

<p>
如果 <code>/etc/passwd+</code> 文件存在，则会返回错误.
</p></li>

<li>备份 <code>/etc/passwd</code> 文件到 <code>/etc/passwd-</code></li>

<li>更新后的帐号配置写到 <code>/etc/passwd+</code> 文件</li>

<li>将 <code>/etc/passwd+</code> 文件重命名为 <code>/etc/passwd</code></li>
</ul>
</div>
</div>

<div id="outline-container-orgf9b6a22" class="outline-2">
<h2 id="orgf9b6a22">经验法则</h2>
<div class="outline-text-2" id="text-orgf9b6a22">
<ul class="org-ul">
<li><code>/etc/passwd</code> 文件损坏时，使用备份文件 <code>/etc/passwd-</code> 还原</li>

<li><code>/etc/passwd+</code> 文件存在导致无法更新帐号信息，直接删除 <code>/etc/passwd+</code> 文件即可</li>

<li>还会存在 <code>/etc/shadow</code> <code>/etc/shadow-</code> <code>/etc/shadow+</code> ，也是同样处理</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下编程获取/etc/resolv.conf中的域名解析服务器]]></title>
            <link>/article/linux-4e0b7f167a0b83b753d6-etc-resolv.conf-4e2d768457df540d89e36790670d52a15668.html</link>
            <guid>/article/linux-4e0b7f167a0b83b753d6-etc-resolv.conf-4e2d768457df540d89e36790670d52a15668.html</guid>
            <pubDate>Fri, 14 Aug 2015 10:01:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
直接上代码吧：
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;unistd.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;sys/types.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;netinet/in.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;arpa/inet.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;arpa/nameser.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;resolv.h&gt;</span>

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">argc</span>, <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">argv</span>[])
{
    <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">__res_state</span> <span style="color: #0084C8; font-weight: bold;">res</span>;
    res.options &amp;= ~ RES_INIT;

    <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">err</span> = res_ninit(&amp;res);
    <span style="color: #A52A2A; font-weight: bold;">if</span> (err) {
        fprintf(stderr, <span style="color: #4E9A06;">"res_init error: %d\n"</span>, err);
        <span style="color: #A52A2A; font-weight: bold;">return</span> err;
    }

    <span style="color: #2F8B58; font-weight: bold;">char</span> <span style="color: #0084C8; font-weight: bold;">ip</span>[16];
    <span style="color: #A52A2A; font-weight: bold;">for</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">i</span> = 0 ; i &lt; res.nscount; ++i) {
        ip[0] = <span style="color: #4E9A06;">'\0'</span>;
        <span style="color: #A52A2A; font-weight: bold;">if</span> (! inet_ntop(AF_INET, &amp;res.nsaddr_list[i].sin_addr, ip, <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(ip))) <span style="text-decoration: underline;">{</span>
            perror(<span style="color: #4E9A06;">"inet_ntop"</span>);
            <span style="color: #A52A2A; font-weight: bold;">continue</span>;
        }
        printf(<span style="color: #4E9A06;">"ip: %s\n"</span>, ip);
    }

    res_nclose(&amp;res);

    <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}
</pre>
</div>

<ul class="org-ul">
<li><p>
参考
</p>

<p>
《<a href="http://stackoverflow.com/questions/2916675/programmatically-obtain-dns-servers-of-host">Programmatically obtain DNS servers of host</a>》</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux服务器出现大量CLOSE_WAIT状态的连接]]></title>
            <link>/article/linux-670d52a1566851fa73b0592791cf-close_wait-72b6600176848fde63a5.html</link>
            <guid>/article/linux-670d52a1566851fa73b0592791cf-close_wait-72b6600176848fde63a5.html</guid>
            <pubDate>Sat, 01 Aug 2015 19:21:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
昨天服务器停止服务，node.js进程耗光了服务器的内存及CPU，node.js进程卡死无法被 <code>kill</code> 掉，最后要来root帐号密码，直接 <code>kill -9</code> 才结束掉进程。
</p>

<p>
再次鄙视一下 <a href="https://github.com/nodejitsu/forever">forever</a> ，杀不掉原来的 node.js 进程组也就罢了，竟然又拉起了一套新的 node.js 进程组。
</p>

<p>
统计了一下 <code>10</code> 万个fd都耗光了，其中 <code>9</code> 万多个为 <code>CLOSE_WAIT</code> 状态，此时服务器已经无法响应请求。
</p>

<div id="outline-container-orge81518e" class="outline-2">
<h2 id="orge81518e">CLOSE_WAIT 状态介绍</h2>
<div class="outline-text-2" id="text-orge81518e">
<p>
先看一副TCP连接关闭的状态图（ <a href="http://intronetworks.cs.luc.edu/current/html/tcp.html#index-29">来源</a> ）：
</p>


<div class="figure">
<p><img src="../static/tcp_normal_close.png" alt="tcp_normal_close.png" />
</p>
</div>

<p>
被动关闭一方才会出现 <code>CLOSE_WAIT</code> 状态，由于被动关闭方未调用 <code>close</code> 关闭socket导致，问题肯定是由服务器代码引起。
</p>

<p>
检测到对端socket关闭然后关闭本端socket是由 node.js 自行完成的，最大的可能是没有机会执行 <code>close</code> 。
</p>

<p>
我们的应用客户端与服务器有一个tls长连接，当连接断开时客户端会等待3-10秒后尝试重连服务器，如果服务器出现卡顿会导致客户端频繁重连，
</p>

<p>
如果服务器来不及关闭这些连接，则会出现 CLOSE_WAIT 状态的连接，占用大量文件描述符，减少 CLOSE_WAIT 超时时间能够在一定程度上缓解这个问题，
</p>

<p>
但是对于我们这种长连接的环境，大量CLOSE_WAIT是问题的表象，而非根源。
</p>

<p>
参考：《<a href="http://lvxuehu.iteye.com/blog/452487">解决CLOSE_WAIT 问题</a>》
</p>
</div>
</div>

<div id="outline-container-org93d660c" class="outline-2">
<h2 id="org93d660c">内存及CPU占用彪升问题</h2>
<div class="outline-text-2" id="text-org93d660c">
<p>
伴随着 CLOSE_WAIT 出现的状况是 node.js 进程内存及CPU占用超高，单node.js进程内存占用达到 1.5G，CPU占用 90% 以上，此时应该会导致 node.js 响应慢，来不及关闭连上来的socket。
</p>

<p>
所以解决问题的关键就是：找出什么原因导致 node.js 内存及CPU 100%占用。
</p>

<p>
想到的可能是redis负载过高引起，从运维监控图上可以看出一些蹊跷，node.js出问题时redis的连接数也同样彪升，而出问题的机器上刚好就是跑redis的机器，另一台服务器一直相安无事，没有跑redis。
</p>
</div>
</div>

<div id="outline-container-org6a9c487" class="outline-2">
<h2 id="org6a9c487">一次午夜故障元凶浮出水面</h2>
<div class="outline-text-2" id="text-org6a9c487">
<p>
在晚上两点的时候服务出现问题，同样的现象，特别留意了一下redis的统计，请求速度很低，只有1200，平时都是5000。偶然在进程列表中发现了 redis-rdb-bgsave 的身影，不断地执行ps看进程列表，发现 redis-rdb-bgsave 进程不断地出现，查看redis的持久化配置如下：
</p>

<pre class="example">
save 900 1
save 300 10
save 60 10000
</pre>

<p>
我们的系统有大量的redis，1分钟肯定过万，这样redis持久化变是常态了，而且由于用的是机械硬盘，持久化肯定会引起系统卡顿，先将它调整为15分钟最多持久化一次：
</p>

<pre class="example">
config set save "900 1"
</pre>

<p>
重启程序释放资源后系统开始正常响应，但是10多分钟后系统再次无响应，才想起一则经验教训：
</p>

<pre class="example">
跑redis的机器至少要预留和redis占用内存同样大小的空闲内存空间，redis RDB持久化进行fork时最坏会占用双倍内存，内存不足就会动用交换分区，系统性能急剧下降。
</pre>

<p>
于是，立即改配置将redis所在机器上的node.js cluster进程数调小，腾出大把内存，总算没有再出现问题，今晚终于可以入眠。
</p>
</div>
</div>

<div id="outline-container-org16f6570" class="outline-2">
<h2 id="org16f6570">更多疑问</h2>
<div class="outline-text-2" id="text-org16f6570">
<ul class="org-ul">
<li>我们的node.js进程为什么常常会占用很多内存？</li>

<li>netstat中看到CLOSE_WAIT状态的连接输入缓冲往往有数据，而ESTABLISHED状态的连接读写缓冲区往往为空，为什么？</li>

<li>node.js卡顿时forever杀不死反而启动了新实例帮倒忙，pm2就一定能够解决吗？</li>

<li>redis持久化引起服务挂掉，已经是在第二个项目中遇到了，终极解决方案是什么？</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[config库避免磁盘满时配置文件被截断]]></title>
            <link>/article/config-5e93907f514d78c176d86ee165f6914d7f6e65874ef688ab622a65ad.html</link>
            <guid>/article/config-5e93907f514d78c176d86ee165f6914d7f6e65874ef688ab622a65ad.html</guid>
            <pubDate>Mon, 20 Jul 2015 09:35:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://github.com/tangxinfa/config">config</a> 库在实际使用过程中发现一个问题：磁盘满时写配置文件可能导致配置文件被清空（文件大小为0）。
</p>

<p>
想到两种方案：
</p>

<ul class="org-ul">
<li><p>
写-替换
</p>

<p>
先写到一个临时文件，写成功后替换目标文件，这是由linux下重命名（rename）文件的原子性保证的。由于我们是通过对配置文件加锁的方式支持多进程访问的，可以对配置文件使用独立的锁文件，一想起到配置文件目录里将出现一大堆锁文件，胃就不舒服。
</p></li>

<li><p>
预分配空间
</p>

<p>
先确保文件拥有足够的空间再写入。虽然不是原子性的，但已经能够解决问题。我比较倾向于这个方案。
</p></li>
</ul>

<div id="outline-container-org339facd" class="outline-2">
<h2 id="org339facd">通过预分配空间方式安全写文件算法</h2>
<div class="outline-text-2" id="text-org339facd">
<ul class="org-ul">
<li>如果当前文件过小（不足以容纳新内容），在文件尾部通过追加占位字符（\0）直到文件大小合适</li>

<li>写入新内容</li>

<li>将过多的空间截掉</li>
</ul>

<p>
具体实现参见： <a href="https://github.com/tangxinfa/config/commit/5ed686fc42c3356658d67d2d3bb59d3435f8c68f">5ed686f Fix bug: config file content missing when disk full</a> .
</p>
</div>
</div>

<div id="outline-container-org4548d4d" class="outline-2">
<h2 id="org4548d4d">测试</h2>
<div class="outline-text-2" id="text-org4548d4d">
</div>
<div id="outline-container-org297fe18" class="outline-3">
<h3 id="org297fe18">创建模拟磁盘目录 /mnt/disk</h3>
<div class="outline-text-3" id="text-org297fe18">
<p>
先确保存在 <code>/dev/loop*</code> 设备，如果不存在先尝试挂载 <code>loop</code> 内核模块
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo modprobe loop
</pre>
</div>

<p>
如果还是没有 <code>loop</code> 设备，可能是最近进行了系统升级，重启后再试。
</p>

<p>
创建模拟磁盘（/mnt/disk）：
</p>

<pre class="example">
$ sudo dd if=/dev/zero of=~/Examples/disk.img bs=8M count=1
$ sudo losetup /dev/loop0 ~/Examples/disk.img
$ sudo parted /dev/loop0
GNU Parted 3.2
Using /dev/loop0
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) mklabel gpt
Warning: The existing disk label on /dev/loop0 will be destroyed and all data on
this disk will be lost. Do you want to continue?
Yes/No? yes
(parted) mkpart primary 0MB 8MB
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? Ignore
(parted) print
Model: Loopback device (loopback)
Disk /dev/loop0: 8389kB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags: 

Number  Start   End     Size    File system  Name  Flags
 1      17.4kB  8372kB  8354kB

(parted) quit
$ sudo mkfs.ext4 /dev/loop0p1
$ sudo mkdir /mnt/disk
$ sudo mount /dev/loop0p1 /mnt/disk
</pre>
</div>
</div>

<div id="outline-container-orga2155a2" class="outline-3">
<h3 id="orga2155a2">修复前</h3>
<div class="outline-text-3" id="text-orga2155a2">
<p>
磁盘空间不足写配置导致配置文件被损坏
</p>

<pre class="example">
$ sudo ~/Opensource/config/config /mnt/disk/test.json set name libconfig
name: libconfig
$ sudo dd if=/dev/zero of=/mnt/disk/other.data bs=1 obs=1 count=100000000
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.44769 s, 916 kB/s
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.53017 s, 906 kB/s
$ sudo ~/Opensource/config/config /mnt/disk/test.json set data "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
config: write: No space left on device
config: save config file(/mnt/disk/test.json) failed
data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
$ sudo ~/Opensource/config/config /mnt/disk/test.json get name
config: get items(name,,,,,) from config file(/mnt/disk/test.json) failed
</pre>
</div>
</div>

<div id="outline-container-orge72d950" class="outline-3">
<h3 id="orge72d950">修复后</h3>
<div class="outline-text-3" id="text-orge72d950">
<p>
磁盘空间不足写配置不会对配置文件造成实质影响
</p>

<pre class="example">
$ sudo ~/Opensource/config/config /mnt/disk/test.json set name libconfig
name: libconfig
$ sudo dd if=/dev/zero of=/mnt/disk/other.data bs=1 obs=1 count=100000000
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.6254 s, 895 kB/s
$ sudo ~/Opensource/config/config /mnt/disk/test.json set data "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
config: write: No space left on device
config: save config file(/mnt/disk/test.json) failed
data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
$ sudo ~/Opensource/config/config /mnt/disk/test.json get name
name: libconfig
</pre>
</div>
</div>

<div id="outline-container-orgcea3f15" class="outline-3">
<h3 id="orgcea3f15">清除测试环境</h3>
<div class="outline-text-3" id="text-orgcea3f15">
<div class="org-src-container">
<pre class="src src-sh">sudo umount /dev/loop0p1
sudo losetup -d /dev/loop0
sudo rmdir /mnt/disk
sudo rm ~/Examples/disk.img
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orge97fed6" class="outline-2">
<h2 id="orge97fed6">参考</h2>
<div class="outline-text-2" id="text-orge97fed6">
<p>
《<a href="http://www.oschina.net/translate/reliable-file-updates-with-python">使用 Python 进行稳定可靠的文件操作</a>》</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用Pdnsd缓存域名解析结果加快上网速度]]></title>
            <link>/article/4f7f7528-pdnsd-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html</link>
            <guid>/article/4f7f7528-pdnsd-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html</guid>
            <pubDate>Tue, 23 Jun 2015 10:56:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
频繁的域名解析容易导致超时出错
</p>

<p>
在执行 <code>opkg-cl update</code> 或 <code>yaourt -Syua</code> 命令更新系统软件信息时，容易因为频繁的域名解析而导致更新速度奇慢甚至是超时出错，通过将要访问的域名添加到 <code>/etc/hosts</code> 中，可以立即解决这个问题。考虑到服务器IP可能会换，使用 <code>/etc/hosts</code> 非长久之计。
</p></li>

<li><p>
缓存域名解析结果
</p>

<p>
更好的办法是缓存域名解析结果，一般来说后台服务程序可以通过缓存域名解析结果加快后继请求的处理，但是对于像 <code>opkg-cl</code> 、 <code>yaourt</code> 之类的工具程序，由于运行一次就退出了，要实现缓存域名解析结果就显得有点小题大作了，最好是在系统底层来实现，而不是每个应用程序都实现这个功能。
</p>

<p>
<a href="http://members.home.nl/p.a.rombouts/pdnsd/">Pdnsd</a> 就是这样一款开源DNS代理服务程序，它安装在客户机上，对于客户端应用程序来说，它是DNS服务程序，对于真正的DNS服务来说它是DNS客户端程序。
</p></li>

<li><p>
<a href="http://members.home.nl/p.a.rombouts/pdnsd/">Pdnsd</a> 安装
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S pdnsd
</pre>
</div></li>

<li><p>
<a href="http://members.home.nl/p.a.rombouts/pdnsd/">Pdnsd</a> 运行
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo systemctl enable pdnsd
sudo systemctl start pdnsd
</pre>
</div></li>

<li><p>
客户机DNS设置
</p>

<p>
修改 <code>/etc/resolv.conf</code> 为如下内容：
</p>

<pre class="example">
nameserver 127.0.0.1
</pre>

<p>
对于 Archlinux <code>/etc/resolv.conf</code> 是由 <code>resolvconf</code> 工具生成，直接修改后随时可能被覆盖，可以修改 <code>/etc/resolvconf.conf</code> 将以下配置行取消注释：
</p>
<pre class="example">
# name_servers=127.0.0.1
</pre>

<p>
然后重新生成 <code>/etc/resolv.conf</code> 配置文件：
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo resolvconf -u
</pre>
</div></li>

<li><p>
看看效果
</p>

<p>
多次执行下面的命令，可以感觉到后几次明显比第一次快，这就是DNS缓存在起作用。
</p>

<div class="org-src-container">
<pre class="src src-sh">nslookup www.google.com
</pre>
</div></li>

<li><p>
适合国内环境的配置（仅供参考）
</p>

<p>
将 <code>/etc/pdnsd.conf</code> 配置文件修改为以下内容：
</p>

<pre class="example">
global {
    perm_cache=1024;
    cache_dir="/var/cache/pdnsd";
    pid_file = /var/run/pdnsd.pid;
    run_as="pdnsd";
    server_ip = 127.0.0.1;
    status_ctl = on;
    query_method=udp_tcp;
    min_ttl=15m;
    max_ttl=1d;
    timeout=10;
    neg_domain_pol=on;
    udpbufsize=1024;
}

server {
    label = "root-servers";
    root_server = discover;
    randomize_servers = on;
    ip = 114.114.114.114,
         223.5.5.5,
         114.114.115.115,
         223.6.6.6;
    timeout = 5;
    uptest = query;
    interval = 30m;
    ping_timeout = 50;
    purge_cache = off;
    exclude = .localdomain;
    policy = included;
    preset = off;
}

source {
    owner=localhost;
    serve_aliases=on;
    file="/etc/hosts";
}

rr {
    name=localhost;
    reverse=on;
    a=127.0.0.1;
    owner=localhost;
    soa=localhost,root.localhost,42,86400,900,86400,86400;
}
</pre>

<p>
重启 <a href="http://members.home.nl/p.a.rombouts/pdnsd/">Pdnsd</a> 生效配置：
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo systemctl restart pdnsd
</pre>
</div></li>

<li><p>
配置pdnsd使用dhcp分配的dns服务器
</p>

<p>
往往dhcp提供的dns服务器是最快的（它可能也做了缓存），用到了本地域名的情况下必须使用dhcp提供的dns服务器，如果将dns服务器写死在pdnsd.conf，切换网络（如从公司回到家里）就上不了网了，其实 <code>resolvconf</code> 对 <code>pdnsd</code> 提供了支持。
</p>

<p>
参考 <code>man resolvconf</code> 将 <code>/etc/resolvconf.conf</code> 改为
</p>
<pre class="example">
name_servers=127.0.0.1
pdnsd_conf=/etc/pdnsd.conf
</pre>

<p>
删掉 <code>/etc/pdnsd.conf</code> 中的所有 <code>server</code> 配置块。
</p>

<p>
重启 <code>NetworkManager</code> 生效配置
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl restart NetworkManager
</pre>
</div>

<p>
现在 <code>/etc/pdnsd.conf</code> 中的 <code>server</code> 配置块将由 <code>resolvconf</code> 来提供。
</p></li>

<li><p>
参考
</p>

<p>
《<a href="http://venmos-com.qiniudn.com/blog/2013/06/19/pdnsd/">用Pdnsd快速打造无污染高速缓存DNS服务器</a>》</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux非交互方式修改用户密码]]></title>
            <link>/article/linux-975e4ea44e9265b95f0f4fee6539752862375bc67801.html</link>
            <guid>/article/linux-975e4ea44e9265b95f0f4fee6539752862375bc67801.html</guid>
            <pubDate>Tue, 16 Jun 2015 09:35:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
linux下的 <code>passwd</code> 命令是交互式运行的（密码需要由用户使用键盘输入），后台程序如果要改用户密码需要一定的技巧。
</p>

<p>
如：以下命令可以将 <code>root</code> 帐号的密码改为 <code>123456</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">(<span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">'123456'</span>; sleep 1; <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">'123456'</span>) | passwd <span style="color: #4E9A06;">'root'</span> &gt; /dev/null
</pre>
</div>

<p>
但是，此时也不好判断密码是否改成功了，需要验证一下。
</p>

<p>
linux 系统的密码编码（不可逆）后存储在 /etc/shadow（以前是 /etc/passwd） 文件里。
</p>

<p>
参考文章《<a href="http://www.xinotes.net/notes/note/1833/">Check Linux user password in C</a> 》编写了以下程序用于非交互式修改密码：
</p>

<p>
<a href="../static/change_password.c">change_password.c</a>
</p>

<p>
编译：
</p>
<div class="org-src-container">
<pre class="src src-sh">gcc -g change_password.c -o change_password -lcrypt
</pre>
</div>

<p>
运行：
</p>
<div class="org-src-container">
<pre class="src src-sh">./change_password root 123456
</pre>
</div>

<p>
参考：
</p>

<ul class="org-ul">
<li><a href="http://tldp.org/HOWTO/Shadow-Password-HOWTO-2.html">Why shadow your passwd file?</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下创建另一个root帐号]]></title>
            <link>/article/linux-4e0b521b5efa53e64e004e2a-root-5e1053f7.html</link>
            <guid>/article/linux-4e0b521b5efa53e64e004e2a-root-5e1053f7.html</guid>
            <pubDate>Thu, 04 Jun 2015 12:27:00 GMT</pubDate>
            <content:encoded><![CDATA[<div class="org-src-container">
<pre class="src src-sh">useradd -g 0 -u 0 -o root1
</pre>
</div>

<p>
上面的命令创建了一个和 <code>root</code> 帐号几乎一模一样的帐号 <code>root1</code> ，这个帐号登录后甚至连 <code>$USER</code> 环境变量都是 <code>root=， 应该是由于 =uid</code> 和 <code>root</code> 帐号一样都是 <code>0</code> ，所以使用了 <code>root</code> 帐号的用户名，但是可以指定不同的 <code>HOME</code> 以及密码等。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[FlashCache多盘方案实战]]></title>
            <link>/article/flashcache-591a76d865b968485b9e6218.html</link>
            <guid>/article/flashcache-591a76d865b968485b9e6218.html</guid>
            <pubDate>Wed, 29 Apr 2015 09:38:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
目标系统为单SSD+多HDD，将多HDD创建为RAID5逻辑盘，然后使用FlashCache将SSD做为RAID5逻辑盘的缓存。
</p>

<div id="outline-container-org3a4ae9b" class="outline-2">
<h2 id="org3a4ae9b">系统信息</h2>
<div class="outline-text-2" id="text-org3a4ae9b">
<ul class="org-ul">
<li><p>
OS
</p>

<p>
CentOS release 6.5 (Final) x86_64
</p></li>

<li><p>
CPU
</p>

<p>
8
</p>

<p>
Intel(R) Atom(TM) CPU  C2750  @ 2.40GHz
</p></li>

<li><p>
MEMORY
</p>

<p>
4
</p>

<p>
TOTAL 16G
</p></li>

<li><p>
HDD
</p>

<p>
4
</p>

<p>
WDC WD4000FYYZ-0 4TB 7200转
</p>

<p>
/dev/sdc /dev/sdd /dev/sde /dev/sdf
</p></li>

<li><p>
SSD
</p>

<p>
1
</p>

<p>
INTEL SSDSC2BB30 300GB
</p>

<p>
/dev/sdb
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org42e4f07" class="outline-2">
<h2 id="org42e4f07">卸载HDD及SSD盘</h2>
<div class="outline-text-2" id="text-org42e4f07">
<div class="org-src-container">
<pre class="src src-sh">umount /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdb
</pre>
</div>

<p>
确保系统重启后不会自动挂载这些盘。
</p>
</div>
</div>

<div id="outline-container-orgf18430c" class="outline-2">
<h2 id="orgf18430c">将多HDD创建为RAID5逻辑盘</h2>
<div class="outline-text-2" id="text-orgf18430c">
<ul class="org-ul">
<li><p>
格式化HDD盘
</p>

<div class="org-src-container">
<pre class="src src-sh">parted /dev/sdc
(parted) mklabel gpt
(parted) unit TB
(parted) mkpart primary 0.00TB 4.00TB
(parted) print
</pre>
</div>

<p>
其它HDD盘也做如上处理.
</p></li>

<li><p>
创建RAID5逻辑分区
</p>

<div class="org-src-container">
<pre class="src src-sh">mdadm --create /dev/md0 --level=raid5 --raid-devices=4 /dev/sd[c-f]1
parted /dev/md0
(parted) mklabel gpt
(parted) unit TB
(parted) mkpart primary 0.00TB 12.00TB
(parted) print
(parted) quit
</pre>
</div></li>

<li><p>
保存RAID5配置
</p>

<div class="org-src-container">
<pre class="src src-sh">mdadm --detail --scan &gt; /etc/mdadm.conf
</pre>
</div>

<p>
参考：<a href="https://raid.wiki.kernel.org/index.php/RAID_setup#Saving_your_RAID_configuration">Saving your RAID configuration</a>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgf972317" class="outline-2">
<h2 id="orgf972317">安装Flashcache</h2>
<div class="outline-text-2" id="text-orgf972317">
<div class="org-src-container">
<pre class="src src-sh">wget https://github.com/facebook/flashcache/archive/stable_v3.1.3.zip -O flashca<span style="text-decoration: underline;">che_stable_v3.1.3.zip</span>
unzip flashcache_stable_v3.1.3.zip
<span style="color: #A020F0;">cd</span> flashcache-stable_v3.1.3
make
make install
modprobe flashcache
</pre>
</div>
</div>
</div>

<div id="outline-container-org01df648" class="outline-2">
<h2 id="org01df648">创建Flashcache混合设备</h2>
<div class="outline-text-2" id="text-org01df648">
<div class="org-src-container">
<pre class="src src-sh">flashcache_create -p around cachedev /dev/sdb /dev/md0p1
mkfs.ext4 /dev/mapper/cachedev
</pre>
</div>
</div>
</div>

<div id="outline-container-orgbe44144" class="outline-2">
<h2 id="orgbe44144">挂载Flashcache混合设备</h2>
<div class="outline-text-2" id="text-orgbe44144">
<div class="org-src-container">
<pre class="src src-sh">mkdir /data
mount /dev/mapper/cachedev /data
</pre>
</div>
</div>
</div>

<div id="outline-container-org2a00f2e" class="outline-2">
<h2 id="org2a00f2e">系统重启后需要重新创建并挂载Flashcache设备</h2>
<div class="outline-text-2" id="text-org2a00f2e">
<div class="org-src-container">
<pre class="src src-sh">flashcache_create -p around cachedev /dev/sdb /dev/md0p1
mount /dev/mapper/cachedev /data
</pre>
</div>

<p>
注意：使用除 <code>writethrough</code> 和 <code>writearound</code> 以外的模式需要使用 <code>flashcache_load</code> 重新创建设备。
</p>
</div>
</div>

<div id="outline-container-org8d4f2ee" class="outline-2">
<h2 id="org8d4f2ee">写入速度测试</h2>
<div class="outline-text-2" id="text-org8d4f2ee">
<p>
循环创建60MiB大小的文件，测得的磁盘写入速度为 <b>35.6MiB</b> ，磁盘读取速度为 <b>2.1MiB</b> 。
</p>
</div>
</div>

<div id="outline-container-org6823e0c" class="outline-2">
<h2 id="org6823e0c">读取速度测试</h2>
<div class="outline-text-2" id="text-org6823e0c">
<ul class="org-ul">
<li>500并发120G文件每次读取32KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
2107
</p></li>

<li><p>
传输速度
</p>

<p>
132.35MiB/s
</p></li>
</ul></li>

<li>500并发500G文件每次读取32KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
1937
</p></li>

<li><p>
传输速度
</p>

<p>
61.09MiB
</p></li>
</ul></li>

<li>500并发1T文件每次读取32KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
1574
</p></li>

<li><p>
传输速度
</p>

<p>
49.64MiB/s
</p></li>
</ul></li>

<li>500并发120G文件每次读取64KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
5006
</p></li>

<li><p>
传输速度
</p>

<p>
157.88MiB/s
</p></li>
</ul></li>

<li>500并发500G文件每次读取64KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
897
</p></li>

<li><p>
传输速度
</p>

<p>
56.37MiB/s
</p></li>
</ul></li>

<li>500并发1T文件每次读取64KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
782
</p></li>

<li><p>
传输速度
</p>

<p>
49.10MiB/s
</p></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-orgdcc51b8" class="outline-2">
<h2 id="orgdcc51b8">注意事项</h2>
<div class="outline-text-2" id="text-orgdcc51b8">
<ul class="org-ul">
<li><p>
重建（rebuild）
</p>

<p>
当一块盘坏掉后，如果配置了热备盘（Hot spare disk），会自动重建，请将坏盘换掉并配置成热备盘；\
如果未配置热备盘，读性能会下降（坏盘中的数据需要全部通过计算重现），请将坏盘换掉系统会自动进行重建。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgf68c50f" class="outline-2">
<h2 id="orgf68c50f">潜在的优化选项</h2>
<div class="outline-text-2" id="text-orgf68c50f">
<ul class="org-ul">
<li>开启SSD写Cache</li>

<li><p>
禁用文件、目录访问时间戳
</p>

<p>
noatime,nodiratime
</p></li>

<li><p>
<code>Write-Back</code> 模式优化
</p>

<div class="org-src-container">
<pre class="src src-sh">sysctl -w dev.flashcache.sdb+md0p1.dirty_thresh_pct=80
</pre>
</div></li>
</ul>
</div>
</div>


<div id="outline-container-org3a28cb6" class="outline-2">
<h2 id="org3a28cb6">卸载Flashcache设备</h2>
<div class="outline-text-2" id="text-org3a28cb6">
<div class="org-src-container">
<pre class="src src-sh">umount /dev/mapper/cachedev
dmsetup remove cachedev
</pre>
</div>
</div>
</div>

<div id="outline-container-org0f6d242" class="outline-2">
<h2 id="org0f6d242">Q&amp;A</h2>
<div class="outline-text-2" id="text-org0f6d242">
<ul class="org-ul">
<li><p>
重新调整 Flashcache 选项会不会删除数据？
</p>

<p>
<code>writethrough</code> 、 <code>writearound</code> 模式不会，其它的会。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org1b70c39" class="outline-2">
<h2 id="org1b70c39">相关参考</h2>
<div class="outline-text-2" id="text-org1b70c39">
<dl class="org-dl">
<dt>《<a href="http://lzw.me/a/linux-lvm.html">Linux LVM逻辑卷管理详细介绍</a>》</dt><dd>非常好的LVM入门文章</dd>

<dt>《<a href="http://www.linux-mag.com/id/7582/">Pick Your Pleasure: RAID-0 mdadm Striping or LVM Striping?</a>》</dt><dd>LVM与RAID-0的比较</dd>

<dt>《<a href="http://www.tecmint.com/create-raid0-in-linux/">Creating Software RAID0 (Stripe) on ‘Two Devices’ Using ‘mdadm’ Tool in Linux – Part 2</a>》</dt><dd>构建RAID-0教程</dd>

<dt>《<a href="http://zengrong.net/post/2014.htm">在CentOS 6.1上配置 4TB硬盘+RAID1</a>》</dt><dd>使用 <code>parted</code> 代替 <code>fdisk</code> 对大于2TB的硬盘进行分区</dd>

<dt>《<a href="http://wiki.mikejung.biz/Software_RAID">Software RAID - How to Optimize Software RAID on Linux using Mdadm</a>》</dt><dd>优化RAID</dd>

<dt>《<a href="http://sysadmin.blog.51cto.com/83876/236802">RAID5单盘故障读写分析</a>》</dt><dd>RAID5一块盘坏掉后的情形分析</dd>
</dl>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在Archlinux上使用FlashCache]]></title>
            <link>/article/5728-archlinux-4e0a4f7f7528-flashcache.html</link>
            <guid>/article/5728-archlinux-4e0a4f7f7528-flashcache.html</guid>
            <pubDate>Thu, 23 Apr 2015 12:16:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://github.com/facebook/flashcache/">Flashcache</a> 是 <a href="https://www.facebook.com">Facebook</a> 的一个开源项目，通过将固态硬盘（SSD）做为机械硬盘（HDD）的缓存层，提升磁盘I/O性能。
</p>

<p>
<a href="https://github.com/facebook/flashcache/">Flashcache</a> 位于磁盘驱动层与文件系统层之间，是一个 <code>linux</code> 内核模块。
</p>

<div id="outline-container-orgd1b1b3c" class="outline-2">
<h2 id="orgd1b1b3c">编译安装</h2>
<div class="outline-text-2" id="text-orgd1b1b3c">
<p>
由于Archlinux总是使用最新的linux内核，最好从最新的 <a href="https://github.com/facebook/flashcache/">Flashcache</a> 源代码进行编译安装。
</p>

<div class="org-src-container">
<pre class="src src-sh">git clone https://github.com/facebook/flashcache.git
<span style="color: #A020F0;">cd</span> flashcache
make
sudo make install
</pre>
</div>
</div>
</div>

<div id="outline-container-org6f02455" class="outline-2">
<h2 id="org6f02455">挂载模块</h2>
<div class="outline-text-2" id="text-org6f02455">
<div class="org-src-container">
<pre class="src src-sh">sudo insmod /lib/modules/<span style="color: #ff00ff;">`uname -r`</span>/extra/flashcache/flashcache.ko
</pre>
</div>

<ul class="org-ul">
<li><p>
修复挂载错误
</p>

<blockquote>
<p>
insmod: ERROR: could not insert module /lib/modules/3.19.3-3-ARCH/extra/flashcache/flashcache.ko: Unknown symbol in module
</p>
</blockquote>

<p>
通过 <code>dmesg | grep flashcache</code> 可以看到以下错误信息：
</p>

<blockquote>
<p>
[ 2130.514615] flashcache: Unknown symbol dm_put_device (err 0)<br />
[ 2130.514654] flashcache: Unknown symbol dm_io_client_create (err 0)<br />
[ 2130.514693] flashcache: Unknown symbol dm_kcopyd_client_create (err 0)<br />
[ 2130.514738] flashcache: Unknown symbol dm_unregister_target (err 0)<br />
[ 2130.514774] flashcache: Unknown symbol dm_io_client_destroy (err 0)<br />
[ 2130.514798] flashcache: Unknown symbol dm_kcopyd_copy (err 0)<br />
[ 2130.514821] flashcache: Unknown symbol dm_register_target (err 0)<br />
[ 2130.514846] flashcache: Unknown symbol dm_kcopyd_client_destroy (err 0)<br />
[ 2130.514870] flashcache: Unknown symbol dm_table_get_mode (err 0)<br />
[ 2130.514895] flashcache: Unknown symbol dm_io (err 0)<br />
[ 2130.514915] flashcache: Unknown symbol dm_get_device (err 0)
</p>
</blockquote>

<p>
先挂载 <code>dm-mod</code> 模块再挂载 <code>flashcache</code> 模块即可：
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo modprobe dm-mod
sudo insmod /lib/modules/<span style="color: #ff00ff;">`uname -r`</span>/extra/flashcache/flashcache.ko
</pre>
</div>

<p>
参考：<a href="https://bbs.archlinux.org/viewtopic.php?id=30478">No entry for device-mapper found</a>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orga0737eb" class="outline-2">
<h2 id="orga0737eb">模拟实验</h2>
<div class="outline-text-2" id="text-orga0737eb">
<p>
参考：<a href="http://my.oschina.net/renguijiayi/blog/303747">flashcache的实现与用法</a>
</p>

<ul class="org-ul">
<li><p>
创建SSD模拟设备
</p>

<p>
使用内存文件模拟块设备（1G）
</p>

<div class="org-src-container">
<pre class="src src-sh">dd <span style="color: #0084C8; font-weight: bold;">if</span>=/dev/zero <span style="color: #0084C8; font-weight: bold;">of</span>=/dev/shm/ssd.img <span style="color: #0084C8; font-weight: bold;">bs</span>=1024k <span style="color: #0084C8; font-weight: bold;">count</span>=1024
sudo losetup /dev/loop1 /dev/shm/ssd.img
</pre>
</div></li>

<li><p>
创建HDD模拟设备
</p>

<p>
使用普通磁盘文件模拟块设备（5G）
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo dd <span style="color: #0084C8; font-weight: bold;">if</span>=/dev/zero <span style="color: #0084C8; font-weight: bold;">of</span>=/hdd.img <span style="color: #0084C8; font-weight: bold;">bs</span>=1024k <span style="color: #0084C8; font-weight: bold;">count</span>=5120
sudo losetup /dev/loop2 /hdd.img
</pre>
</div></li>

<li><p>
创建Flashcache混合设备
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo flashcache_create -p around cachedev /dev/loop1 /dev/loop2
sudo mkfs.ext4 /dev/mapper/cachedev
</pre>
</div></li>

<li><p>
挂载Flashcache混合设备
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo mkdir /data
sudo mount /dev/mapper/cachedev /data
</pre>
</div></li>
</ul>

<p>
/data目录下的数据读写就已经在使用Flashcache了。
</p>

<ul class="org-ul">
<li><p>
创建用来测试的数据文件（1G）
</p>

<div class="org-src-container">
<pre class="src src-sh">dd <span style="color: #0084C8; font-weight: bold;">if</span>=/dev/urandom <span style="color: #0084C8; font-weight: bold;">of</span>=/dev/shm/test.dat <span style="color: #0084C8; font-weight: bold;">bs</span>=1024k <span style="color: #0084C8; font-weight: bold;">count</span>=1024
</pre>
</div></li>

<li><p>
测算使用HDD写耗时
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #4E9A06;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /dev/shm/test.dat /'</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m4.751s
user    0m0.000s
sys 0m0.600s
</pre></li>

<li><p>
测算使用HDD读耗时
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #4E9A06;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /test.dat /dev/shm/</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m10.580s
user    0m0.010s
sys 0m0.727s
</pre></li>

<li><p>
测算使用Flashcache写耗时
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #4E9A06;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /dev/shm/test.dat /data/'</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m7.363s
user    0m0.000s
sys 0m0.760s
</pre></li>

<li><p>
测算使用Flashcache读耗时
</p>

<p>
第一轮测试（缓存预热）
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #4E9A06;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /data/test.dat /dev/shm/'</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m9.557s
user    0m0.013s
sys 0m1.157s
</pre>

<p>
第二轮测试（缓存生效）
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #4E9A06;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /data/test.dat /dev/shm/'</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m3.107s
user    0m0.000s
sys 0m0.850s
</pre></li>

<li><p>
清除测试数据
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo rm /test.dat /dev/shm/test.dat /data/test.dat
</pre>
</div></li>

<li><p>
结果分析
</p>

<ul class="org-ul">
<li>Flashcache读性能： <b>提升70%</b></li>

<li>Flashcache写性能： <b>降低55%</b></li>
</ul>

<p>
因为使用了 <code>Write-Around</code> 方式，所以提升了读性能，降低了写性能。
</p></li>

<li><p>
清除模拟环境
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo umount /data
sudo dmsetup remove cachedev
sudo losetup -d /dev/loop1
sudo rm /dev/shm/ssd.img
sudo losetup -d /dev/loop2
sudo rm /hdd.img
sudo rmdir /data
</pre>
</div></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下通过HTTP同步系统时间]]></title>
            <link>/article/linux-4e0b901a8fc7-http-540c6b657cfb7edf65f695f4.html</link>
            <guid>/article/linux-4e0b901a8fc7-http-540c6b657cfb7edf65f695f4.html</guid>
            <pubDate>Tue, 21 Apr 2015 03:54:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在 <code>NTP</code> 被禁用的网络环境下，可以通过 <code>HTTP</code> 协议从公开的网站（如：www.baidu.com）同步时间，因为HTTP响应通常会带一个Date字段，这是WEB服务器的系统时间，可以用它来设置本机时间。
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo date --rfc-2822 -s <span style="color: #4E9A06;">"`curl -s -i -X HEAD --header "Connection: close" http:/</span><span style="color: #4E9A06; text-decoration: underline;">/www.baidu.com | grep -E '^Date: ' | awk -F ': ' '{print $2}'`"</span>
</pre>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux安装文本语音合成（TTS）]]></title>
            <link>/article/archlinux-5b8988c56587672c8bed97f354086210ff08-tts-ff09.html</link>
            <guid>/article/archlinux-5b8988c56587672c8bed97f354086210ff08-tts-ff09.html</guid>
            <pubDate>Wed, 15 Apr 2015 12:21:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org166656b" class="outline-2">
<h2 id="org166656b">安装 <code>festival</code></h2>
<div class="outline-text-2" id="text-org166656b">
<div class="org-src-container">
<pre class="src src-sh">yaourt -S festival festival-english festival-us
</pre>
</div>
</div>
</div>

<div id="outline-container-org0ff319d" class="outline-2">
<h2 id="org0ff319d">测试运行</h2>
<div class="outline-text-2" id="text-org0ff319d">
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"This is an example. Arch is the best."</span> | festival --tts
</pre>
</div>

<ul class="org-ul">
<li>修复错误 <code>Linux: can't open /dev/dsp</code></li>
</ul>

<p>
参考 <a href="https://wiki.archlinux.org/index.php/Festival#Can.27t_open_.2Fdev.2Fdsp">这里</a> 将以下内容添加到 <code>~/.festivalrc</code>
</p>

<div class="org-src-container">
<pre class="src src-lisp">(Parameter.set 'Audio_Method 'Audio_Command)
(Parameter.set 'Audio_Command <span style="color: #4E9A06;">"aplay -q -c 1 -t raw -f s16 -r $SR $FILE"</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-orgdeae1c3" class="outline-2">
<h2 id="orgdeae1c3">参考</h2>
<div class="outline-text-2" id="text-orgdeae1c3">
<p>
<a href="https://wiki.archlinux.org/index.php/Festival">https://wiki.archlinux.org/index.php/Festival</a>
</p>

<p>
<a href="https://linuxtoy.org/archives/festival_on_ubuntu.html">https://linuxtoy.org/archives/festival_on_ubuntu.html</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在linux使用nfs挂载其它linux机器上的文件夹]]></title>
            <link>/article/5728-linux-4f7f7528-nfs-63028f7d51765b83-linux-673a56684e0a768465874ef65939.html</link>
            <guid>/article/5728-linux-4f7f7528-nfs-63028f7d51765b83-linux-673a56684e0a768465874ef65939.html</guid>
            <pubDate>Tue, 23 Sep 2014 08:52:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
下面的IP地址以及工作目录需按实际情况进行修改。
</p>

<ul class="org-ul">
<li><p>
在本地机器上允许目录被远程挂载
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">'/home/tangxinfa/workdir *(rw,sync,no_root_squash)'</span> &gt;&gt; /etc/exports
sudo exportfs -arv
</pre>
</div></li>

<li><p>
在远程机器上挂载本地机器上的文件夹
</p>

<div class="org-src-container">
<pre class="src src-sh">mkdir /tmp/Projects; mount -t nfs -o nolock 192.168.111.100:/home/tangxinfa/Proj<span style="text-decoration: underline;">ects /tmp/Projects</span>
</pre>
</div></li>
</ul>

<p>
问题诊断
</p>

<ul class="org-ul">
<li><p>
mount: RPC: Unable to receive; errno = Connection refused
</p>

<p>
需要启动nfs-server服务：
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo systemctl enable nfs-server.service
sudo systemctl start nfs-server.service
</pre>
</div>

<p>
另外，如果刚刚做了linux内核更新而没有重启系统也可能导致这个问题，重启一下再试。
</p></li>

<li><p>
mount: 192.168.111.100:/home/tangxinfa/Projects failed, reason given by server: Permission denied
</p>

<p>
在/etc/exports文件中允许目录被远程挂载即可。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thinkpad T540p修复linux下触摸板按下时光标位置移动问题]]></title>
            <link>/article/thinkpad-t540p-4fee590d-linux-4e0b89e66478677f63094e0b65f6514968074f4d7f6e79fb52a895ee9898.html</link>
            <guid>/article/thinkpad-t540p-4fee590d-linux-4e0b89e66478677f63094e0b65f6514968074f4d7f6e79fb52a895ee9898.html</guid>
            <pubDate>Mon, 22 Sep 2014 06:29:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
执行以下设置命令即可
</p>

<div class="org-src-container">
<pre class="src src-sh">synclient <span style="color: #0084C8; font-weight: bold;">HorizHysteresis</span>=30 <span style="color: #0084C8; font-weight: bold;">VertHysteresis</span>=30
</pre>
</div>

<p>
将上面的命令放到~/.xprofile中，以便重启后仍然生效。
</p></li>
</ul>

<p>
参考：<a href="https://blog.lnx.cx/2014/03/20/fedora-20-and-the-thinkpad-t440s-touchpad/">Fedora 20 and the ThinkPad T440s touchpad | Technitribe</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下修改键位映射]]></title>
            <link>/article/linux-4e0b4fee6539952e4f4d66205c04.html</link>
            <guid>/article/linux-4e0b4fee6539952e4f4d66205c04.html</guid>
            <pubDate>Fri, 19 Sep 2014 06:07:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在linux下会大量使用ctrl和alt键，但是普通键盘上这两个键所在位置太偏，按起来非常吃力，交换键位可以很好的解决这个问题。
</p>

<ul class="org-ul">
<li><p>
通过gnome-tweak-tool进行修改
</p>

<p>
Typing页可以完成常用的修改，如：交换Caps Lock和Ctrl，交换左Ctrl和Alt。但是在我的笔记本上设置好后有时候会失效.
</p></li>

<li><p>
通过setxkbmap命令进行修改
</p>

<p>
Caps Lock改为Ctrl：setxkbmap -option ctrl:nocaps
</p>

<p>
可以查看/usr/share/X11/xkb/rules/evdev.lst查看支持的交换方式。Ctrl和Alt交换试了一下没有效果。
</p>

<p>
将setxkbmap设置命令放到~/.xprofile中即可开机生效。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
通过配置~/.Xmodmap进行修改
</p>

<p>
可以完成任意的键盘映射。
</p>

<p>
如下所示：Caps Lock改为Ctrl，左Ctrl改为Alt：
</p>

<pre class="example">
keycode 66 = Control_L
clear Lock
add control = Control_L

clear control
clear mod1
keycode 37 = Alt_L Meta_L
add control = Control_L Control_R
add mod1 = Alt_L Meta_L
</pre>

<p>
启用设置：
</p>

<div class="org-src-container">
<pre class="src src-sh">xmodmap ~/.Xmodmap
</pre>
</div>

<p>
在~/.xprofile中添加以上指令以便开机生效：
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A52A2A; font-weight: bold;">if</span> [ -f $<span style="color: #0084C8; font-weight: bold;">HOME</span>/.Xmodmap ]; <span style="color: #A52A2A; font-weight: bold;">then</span>
    /usr/bin/xmodmap $<span style="color: #0084C8; font-weight: bold;">HOME</span>/.Xmodmap
<span style="color: #A52A2A; font-weight: bold;">fi</span>
</pre>
</div>

<p>
参考：
</p>

<ul class="org-ul">
<li><a href="http://earthviaradio.wordpress.com/2012/02/06/swapping-the-left-alt-and-ctrl-keys-in-ubuntu-11-10/">Swapping the left Alt and Ctrl keys in Ubuntu 11.10</a></li>

<li><a href="http://efod.se/writings/linuxbook/html/caps-lock-to-ctrl.html">Changing your caps lock into Ctrl in X</a></li>

<li><a href="https://wiki.archlinux.org/index.php/Xmodmap_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">Xmodmap (简体中文)</a></li>
</ul></li>

<li><p>
清除xmodmap以及setxkbmap的配置
</p>

<div class="org-src-container">
<pre class="src src-sh">setxkbmap -layout us
</pre>
</div></li>

<li><p>
换hhkb pro2键盘
</p>

<p>
linux用户必备，ctrl和alt键已经放置到最优位置，而且后面的跳线开关支持常用的键位交换，即使是linux文本模式下也可用。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux网络接口上出现两个IP]]></title>
            <link>/article/archlinux-7f517edc63a553e34e0a51fa73b04e244e2a-ip.html</link>
            <guid>/article/archlinux-7f517edc63a553e34e0a51fa73b04e244e2a-ip.html</guid>
            <pubDate>Wed, 12 Mar 2014 03:32:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
发现两个IP
</p>

<p>
我的电脑是直接连到公司的墙上的网口上网的，在测试路由器的时候，我把路由器的WAN口接墙上的网口，然后电脑连到路由器的LAN口上，上网正常。查看分配到的IP为192.168.111.2，路由器的IP为192.168.111.1， 想到我一直用 <code>192.168.90.73</code> 这个IP，有些配置也依赖这个IP，所以还想分到这个IP，所以把路由器的DHCP做了设置，路由器IP改为192.168.90.74，分配的IP范围为192.168.90.71-192.168.90.73，再次重连电脑分配的IP为192.168.90.71，然后发现上不了网了，浏览器上输入路由器的IP（192.168.90.74）竟然打开了我机器（192.168.90.71）上建的WEB服务，其他人连这个网络却可以通过192.168.90.74这个IP正常打开路由器界面，最终通过“ip address show”这个命令发现我的网口上有两个IP（192.168.90.71、192.168.90.74）， <code>ipconfig</code> 和其它GUI工具只能看到第一个IP。
</p></li>

<li><p>
第二个IP是怎么来的？
</p>

<p>
抓包分析了一下DHCP网络包，只给分配了192.168.90.71这个IP，看来192.168.90.74这个IP是我机器上配置的，于是搜索/etc、/var下的文件，最后在/var/log/journal/*/system.journal中找到了日志：
</p>

<pre class="example">
NetworkManager[375]: &lt;debug&gt; [1394509845.924245] [nm-system.c:280] sync_addresses(): (eno1): adding address '192.168.90.74/24'
</pre>

<p>
然后在NetworkManager的配置文件 <code>/etc/NetworkManager/system-connections/Profile 1</code> 中找到了相关配置：
</p>

<pre class="example">
[ipv4]
method=auto
address1=192.168.90.74/24,192.168.90.2
</pre>

<p>
删除掉 <code>address1</code> 后，再重连网络，就只有一个IP了。
</p>

<p>
这应该是 <code>NetworkManager</code> 的一个 <a href="https://bugs.archlinux.org/task/41395">BUG</a> ，当手动设置IP后切回DHCP自动获取IP方式时不清除手动设置的时会出现。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 6.4下安装redmine]]></title>
            <link>/article/centos-6.4-4e0b5b8988c5-redmine.html</link>
            <guid>/article/centos-6.4-4e0b5b8988c5-redmine.html</guid>
            <pubDate>Fri, 07 Mar 2014 06:17:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
本文为CentOS 6.4下安装redmine-2.5.0的笔记，按照 <a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall">官方文档</a> 进行安装。
</p>

<div id="outline-container-orgb0038b9" class="outline-2">
<h2 id="orgb0038b9">安装 <code>ruby</code></h2>
<div class="outline-text-2" id="text-orgb0038b9">
<div class="org-src-container">
<pre class="src src-sh">yum install ruby
yum install ruby-devel
yum install rubygems
</pre>
</div>
</div>
</div>

<div id="outline-container-org49f8dbd" class="outline-2">
<h2 id="org49f8dbd">安装 <code>redmine</code></h2>
<div class="outline-text-2" id="text-org49f8dbd">
<div class="org-src-container">
<pre class="src src-sh">wget <span style="color: #4E9A06;">'http://www.redmine.org/releases/redmine-2.5.0.tar.gz'</span>
tar xzvf redmine-2.5.0.tar.gz
gem install bundler
gem install mysql2.
yum install ImageMagick ImageMagick-devel
bundle install --without development test<span style="text-decoration: underline;">  </span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org781e645" class="outline-2">
<h2 id="org781e645">配置 <code>redmine</code></h2>
<div class="outline-text-2" id="text-org781e645">
<ul class="org-ul">
<li><p>
以 root 用户登录 <code>mysql</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">mysql -uroot -p
</pre>
</div></li>

<li><p>
创建 <code>redmine</code> 用户及库
</p>

<div class="org-src-container">
<pre class="src src-sql"><span style="color: #A52A2A; font-weight: bold;">CREATE</span> DATABASE redmine <span style="color: #2F8B58; font-weight: bold;">CHARACTER</span> <span style="color: #A52A2A; font-weight: bold;">SET</span> utf8;
<span style="color: #A52A2A; font-weight: bold;">CREATE</span> <span style="color: #A020F0;">USER</span> <span style="color: #4E9A06;">'redmine'</span>@<span style="color: #4E9A06;">'localhost'</span> IDENTIFIED <span style="color: #A52A2A; font-weight: bold;">BY</span> <span style="color: #4E9A06;">'redmine'</span>;
<span style="color: #A52A2A; font-weight: bold;">GRANT</span> <span style="color: #A52A2A; font-weight: bold;">ALL</span> <span style="color: #A52A2A; font-weight: bold;">PRIVILEGES</span> <span style="color: #A52A2A; font-weight: bold;">ON</span> redmine.* <span style="color: #A52A2A; font-weight: bold;">TO</span> <span style="color: #4E9A06;">'redmine'</span>@<span style="color: #4E9A06;">'localhost'</span>;
</pre>
</div></li>

<li><p>
修改数据库配置文件
</p>

<div class="org-src-container">
<pre class="src src-sh">cp config/database.yml.example config/database.yml
diff config/database.yml config/database.yml.example
10,11c10,11
&lt;   username: redmine
&lt;   password: <span style="color: #4E9A06;">"redmine"</span>
---
&gt;   username: root
&gt;   password: <span style="color: #4E9A06;">""</span>
</pre>
</div></li>

<li><p>
初始化会话存储
</p>

<div class="org-src-container">
<pre class="src src-sh">rake generate_secret_token
</pre>
</div></li>

<li><p>
创建数据库表结构
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">RAILS_ENV</span>=production rake db:migrate
</pre>
</div></li>

<li><p>
解决上一步可能出现的错误
</p>

<blockquote>
<p>
rake aborted!
Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)
</p>

<p>
Tasks: TOP =&gt; db:migrate =&gt; environment
</p>
</blockquote>

<p>
确定 <code>mysql</code> 启动时指定的 <code>mysql.sock</code> 文件的路径
</p>

<div class="org-src-container">
<pre class="src src-sh">ps aux | grep mysql.sock
</pre>
</div>

<p>
显示的 <code>mysql.sock</code> 路径可能为“ <code>--socket=/tmp/mysql.sock</code> ”
</p>

<p>
修改 <code>redmine</code> 数据库配置，在 <code>production</code> 配置中添加 <code>socket</code> 项：
</p>

<pre class="example">
production:
  ...
  socket: /tmp/mysql.sock
</pre>

<p>
重新进行上一步操作。
</p></li>

<li><p>
初始化数据
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">RAILS_ENV</span>=production <span style="color: #0084C8; font-weight: bold;">REDMINE_LANG</span>=zh rake redmine:load_default_data
</pre>
</div></li>

<li><p>
创建相关目录
</p>

<div class="org-src-container">
<pre class="src src-sh">mkdir -p tmp tmp/pdf public/plugin_assets
sudo chown -R nobody:nobody files log tmp public/plugin_assets
sudo chmod -R 755 files log tmp public/plugin_assets
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org260e996" class="outline-2">
<h2 id="org260e996">试运行 <code>redmine</code></h2>
<div class="outline-text-2" id="text-org260e996">
<div class="org-src-container">
<pre class="src src-sh">ruby script/rails server webrick -e production
</pre>
</div>

<ul class="org-ul">
<li><p>
浏览器打开页面
</p>

<p>
<a href="http://localhost:3000">http://localhost:3000</a>
</p>

<p>
使用 用户名 <code>admin</code> ，密码 <code>admin</code> 登录后，立即修改密码。
</p>

<p>
使用下面的命令生成随机的密码：
</p>

<div class="org-src-container">
<pre class="src src-sh">cat /dev/urandom | head -1 | md5sum | head -c 8
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org9fb45cb" class="outline-2">
<h2 id="org9fb45cb">配置 <code>redmine</code></h2>
<div class="outline-text-2" id="text-org9fb45cb">
<ul class="org-ul">
<li>修改 <code>config/settings.yml</code></li>
</ul>
</div>
</div>

<div id="outline-container-orgd72907f" class="outline-2">
<h2 id="orgd72907f">使用 <code>Nginx</code> 和 <code>passenger</code></h2>
<div class="outline-text-2" id="text-orgd72907f">
<div class="org-src-container">
<pre class="src src-sh">wget <span style="color: #4E9A06;">'http://nginx.org/download/nginx-1.4.6.tar.gz'</span>
tar xzvf nginx-1.4.6.tar.gz
gem install passenger
yum install pcre-devel
passenger-install-nginx-module
</pre>
</div>

<ul class="org-ul">
<li>交互式安装过程

<ul class="org-ul">
<li><p>
Automatically download and install Nginx?
</p>

<p>
选 2. No: I want to customize my Nginx installation. (for advanced users)
</p></li>

<li><p>
Where is your Nginx source code located?
</p>

<p>
填解压的 <code>nginx</code> 源码包路径
</p></li>

<li><p>
Where do you want to install Nginx to?
</p>

<p>
填 <code>/usr/local/nginx</code>
</p></li>
</ul></li>

<li><p>
修改 /usr/local/nginx/conf/nginx.conf
</p>

<p>
在最后的 <code>}</code> 前添加以下配置
</p>

<pre class="example">
include vhosts/*.conf;
</pre></li>

<li><p>
添加站点配置文件 <code>/usr/local/nginx/conf/vhosts/redmine.conf</code>
</p>

<pre class="example">
server {
  listen  80;
  server_name &lt;域名&gt;;
  root &lt;redmine根目录&gt;/public;
  passenger_enabled on;
  client_max_body_size 10m; # Max attachemnt size
}
</pre></li>

<li><p>
启动 <code>nginx</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">/usr/local/nginx/sbin/nginx
</pre>
</div></li>

<li><p>
现在可以正式访问站点了
</p>

<p>
<a href="http://">http://</a>&lt;域名&gt;
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org865c42f" class="outline-2">
<h2 id="org865c42f">支持 <code>OpenID</code> 第三方帐号登录</h2>
<div class="outline-text-2" id="text-org865c42f">
<ul class="org-ul">
<li><p>
安装 <code>openid</code> 库
</p>

<div class="org-src-container">
<pre class="src src-sh">gem install ruby-openid
</pre>
</div></li>

<li>使用 <code>admin</code> 帐号登录系统，在“管理 - 配置 - 认证”中勾选上“允许使用OpenID登录和注册”。</li>

<li>用户注册时“密码”可以省略， 填上 <code>OpenID URL</code> 即可。</li>

<li><p>
如何获得Google的OpenID URL？
</p>

<ul class="org-ul">
<li>先在 <code>Google</code> 的站点上登录</li>
<li>打开 <a href="https://profiles.google.com">https://profiles.google.com</a> 后会跳转到类似这样（ <code>https://plus.google.com/000000000000000000000/posts</code> ）的网页</li>
<li>你的 <code>OpenID URL</code> 为 <a href="http://profiles.google.com/000000000000000000000">http://profiles.google.com/000000000000000000000</a></li>
</ul>

<p>
上面的 <code>000000000000000000000</code> 可能为任意的数字串
</p></li>

<li><p>
管理员确认注册后即可在登录界面上输入 <code>OpenID URL</code> 直接登录
</p>

<p>
一般浏览器的输入框是有记忆功能的，双击后会出现输入历史下拉列表，直接选择即可。
</p></li>

<li><p>
安装插件简化 <code>OpenID</code> 登录
</p>

<ul class="org-ul">
<li><a href="https://github.com/jorgebg/redmine-openid-selector">https://github.com/jorgebg/redmine-openid-selector</a> （不推荐） 为原始分枝，在 <code>redmine-2.5.0</code> 下不能直接安装会导致站点登录界面出现404错误，解决方案在 <a href="http://www.redmine.org/boards/3/topics/34327?r=38778#message-38778">这里</a> ，简而言之就是把插件目录名中的 <code>-</code> 改为 <code>_</code> 。</li>

<li><a href="https://github.com/computerminds/redmine_openid_selector">https://github.com/computerminds/redmine_openid_selector</a> （不推荐） 这个分枝安装后可用，但界面为英文（其实界面就一句英文）。</li>

<li><a href="https://github.com/tangxinfa/redmine_openid_selector">https://github.com/tangxinfa/redmine_openid_selector</a> （推荐） 为支持中文我fork了上一个分枝。</li>

<li><p>
通用的插件安装过程：
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">cd</span> plugins
git clone https://github.com/tangxinfa/redmine_openid_selector.git
rake redmine:plugins:migrate <span style="color: #0084C8; font-weight: bold;">RAILS_ENV</span>=production
touch tmp/restart.txt
</pre>
</div></li>

<li><p>
通用的插件卸载过程：
</p>

<div class="org-src-container">
<pre class="src src-sh">rake redmine:plugins:migrate <span style="color: #0084C8; font-weight: bold;">NAME</span>=redmine-openid-selector <span style="color: #0084C8; font-weight: bold;">VERSION</span>=0 <span style="color: #0084C8; font-weight: bold;">RAILS_ENV</span>=pr<span style="text-decoration: underline;">oduction</span>
rm -rf plugins/redmine-openid-selector
touch tmp/restart.txt
</pre>
</div></li>
</ul>

<p>
现在在登录及注册页面直接点击第三方站点Logo即可。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgf266ea3" class="outline-2">
<h2 id="orgf266ea3">样式美化</h2>
<div class="outline-text-2" id="text-orgf266ea3">
<div class="org-src-container">
<pre class="src src-sh">git clone git://github.com/pixel-cookers/redmine-theme.git public/themes/pixel-c<span style="text-decoration: underline;">ookers</span>
touch tmp/restart.txt
</pre>
</div>

<p>
现在可以使用 <code>admin</code> 登录后台，在“管理 - 配置 - 显示 - 主题”中启用主题 <code>Pixel-cookers</code> 。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下允许普通用户执行需要root权限的命令]]></title>
            <link>/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html</link>
            <guid>/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html</guid>
            <pubDate>Thu, 26 Dec 2013 07:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
最典型的情况是要实现一个通过web界面重启系统的功能，通常为了安全会以非root用户身份（通常是nobody）运行服务端脚本，这样脚本中就不能执行危险操作了。
</p>

<p>
下面的c工具程序可以允许任意用户执行需要root权限的命令：
</p>

<p>
<a href="../static/as_root.c">as_root.c</a>
</p>

<p>
编译：
</p>
<div class="org-src-container">
<pre class="src src-sh">gcc -g as_root.c -o as_root
</pre>
</div>

<p>
配置：
</p>
<div class="org-src-container">
<pre class="src src-sh">chown root:root ./as_root; chmod 4755 ./as_root
</pre>
</div>

<p>
运行：
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo -u <span style="color: #4E9A06;">"nobody"</span> ./as_root <span style="color: #4E9A06;">"reboot"</span>
</pre>
</div>

<p>
参考：<a href="http://blog.tianya.cn/blogger/post_show.asp?BlogID=126326&amp;PostID=1629441">如何在普通用户下执行一些需要root用户执行的命令</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下翻墙访问bitbucket.org仓库]]></title>
            <link>/article/linux-4e0b7ffb58998bbf95ee-bitbucket.org-4ed35e93.html</link>
            <guid>/article/linux-4e0b7ffb58998bbf95ee-bitbucket.org-4ed35e93.html</guid>
            <pubDate>Fri, 28 Jun 2013 05:57:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
今天往 bitbucket.org push 时才发现 bitbucket 被 GFW 了。我的仓库为 Mercurial hg，hg 项目根目录下的 <code>.hg/hgrc</code> 配置文件中可指定 http_proxy，试了一下不支持 socks 代理（我的浏览器用它来翻墙），最终使用 tsocks 或 proxychains 实现翻墙访问 bitbucket.org 仓库。
</p>

<div id="outline-container-orgb1c215e" class="outline-2">
<h2 id="orgb1c215e">使用 ssh 服务代理网络访问</h2>
<div class="outline-text-2" id="text-orgb1c215e">
<p>
创建本地 socks 代理的脚本 <code>ssh_proxy.sh</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;">#</span><span style="color: #204A87;">!/bin/</span><span style="color: #A52A2A; font-weight: bold;">bash</span>

<span style="color: #0084C8; font-weight: bold;">n</span>=<span style="color: #ff00ff;">`ps waux | grep 'bash .*/ssh_proxy.sh' | grep -v grep | wc -l`</span>
<span style="color: #A52A2A; font-weight: bold;">if</span> [ $<span style="color: #0084C8; font-weight: bold;">n</span> -lt 3 ]; <span style="color: #A52A2A; font-weight: bold;">then</span>
    <span style="color: #A52A2A; font-weight: bold;">while</span> [ true ]; <span style="color: #A52A2A; font-weight: bold;">do</span>
        <span style="color: #0084C8; font-weight: bold;">n</span>=<span style="color: #ff00ff;">`ps aux | grep 'ssh' | grep '7070' | grep -v grep | wc -l`</span>
        <span style="color: #A52A2A; font-weight: bold;">if</span> [ $<span style="color: #0084C8; font-weight: bold;">n</span> -lt 1 ]; <span style="color: #A52A2A; font-weight: bold;">then</span>
            <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"start ssh connecting"</span>
            ssh -qTnNf -D 7070 user@host
        <span style="color: #A52A2A; font-weight: bold;">fi</span>
        <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"wait for next checking"</span>
        sleep 30
    <span style="color: #A52A2A; font-weight: bold;">done</span>
<span style="color: #A52A2A; font-weight: bold;">fi</span>
<span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"ssh_proxy.sh already running"</span>
</pre>
</div>

<p>
请将 user@host 改为你的 vps 用户及主机，并配置为免输入密码。
</p>

<p>
启动 socks 代理脚本
</p>

<div class="org-src-container">
<pre class="src src-sh">nohup bash ./ssh_proxy.sh &amp;
</pre>
</div>

<p>
通过 ssh 隧道是最简单的方式，vps 一般都会开 ssh 服务，拿来即用。
</p>
</div>
</div>

<div id="outline-container-orgf4ba390" class="outline-2">
<h2 id="orgf4ba390">使用 shadowsocks 服务代理网络访问</h2>
<div class="outline-text-2" id="text-orgf4ba390">
<p>
vps 上安装并启动 shadowsocks 服务器（ss-server），配置文件 <code>/etc/shadowsocks.json</code> 内容如下
</p>
<div class="org-src-container">
<pre class="src src-json">{
  <span style="color: #A52A2A; font-weight: bold;">"server"</span>:<span style="color: #4E9A06;">"0.0.0.0"</span>,
  <span style="color: #A52A2A; font-weight: bold;">"server_port"</span>:<span style="color: #F5666D;">8989</span>,
  <span style="color: #A52A2A; font-weight: bold;">"password"</span>:<span style="color: #4E9A06;">"7FdiirqD"</span>,
  <span style="color: #A52A2A; font-weight: bold;">"timeout"</span>:<span style="color: #F5666D;">600</span>,
  <span style="color: #A52A2A; font-weight: bold;">"method"</span>:<span style="color: #4E9A06;">"aes-256-cfb"</span>,
  <span style="color: #A52A2A; font-weight: bold;">"fast_open"</span>: <span style="color: #F5666D;">false</span>,
  <span style="color: #A52A2A; font-weight: bold;">"workers"</span>: <span style="color: #F5666D;">1</span>
}
</pre>
</div>

<p>
<code>password</code> 请自行进行修改。
</p>

<p>
pc 上安装并启动 shadowsocks 客户端（ss-local），配置文件 <code>/etc/shadowsocks.json</code> 内容如下
</p>
<div class="org-src-container">
<pre class="src src-json">{
  <span style="color: #A52A2A; font-weight: bold;">"server"</span>:<span style="color: #4E9A06;">"X.X.X.X"</span>,
  <span style="color: #A52A2A; font-weight: bold;">"server_port"</span>:<span style="color: #F5666D;">8989</span>,
  <span style="color: #A52A2A; font-weight: bold;">"local_port"</span>:<span style="color: #F5666D;">7070</span>,
  <span style="color: #A52A2A; font-weight: bold;">"password"</span>:<span style="color: #4E9A06;">"7FdiirqD"</span>,
  <span style="color: #A52A2A; font-weight: bold;">"timeout"</span>:<span style="color: #F5666D;">600</span>,
  <span style="color: #A52A2A; font-weight: bold;">"method"</span>:<span style="color: #4E9A06;">"aes-256-cfb"</span>,
  <span style="color: #A52A2A; font-weight: bold;">"fast_open"</span>: <span style="color: #F5666D;">false</span>,
  <span style="color: #A52A2A; font-weight: bold;">"workers"</span>: <span style="color: #F5666D;">1</span>
}
</pre>
</div>

<p>
<code>server</code> 请自行修改为真正的 shadowsocks 服务器外网 IP。
</p>
</div>
</div>

<div id="outline-container-orge73516d" class="outline-2">
<h2 id="orge73516d">透明代理</h2>
<div class="outline-text-2" id="text-orge73516d">
<p>
firefox 可以配置为通过 socks 代理联网，但绝大多数应用是不支持的，而透明代理（Transparent Proxy）可以使这些应用也使用代理联网。
</p>
</div>

<div id="outline-container-orgbfd69a6" class="outline-3">
<h3 id="orgbfd69a6">ss-redir</h3>
<div class="outline-text-3" id="text-orgbfd69a6">
<p>
shadowsocks 自带的本地透明代理客户端，可以使整个系统都使用代理访问网络。
</p>

<p>
参考 <a href="http://manpages.org/ss-redir">man ss-redir (1): shadowsocks client as transparent proxy, libev port</a>
</p>
</div>
</div>

<div id="outline-container-org6224e24" class="outline-3">
<h3 id="org6224e24">tsocks</h3>
<div class="outline-text-3" id="text-org6224e24">
<ul class="org-ul">
<li><p>
安装
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S tsocks
</pre>
</div></li>

<li><p>
配置
</p>

<p>
<code>/etc/tsocks.conf</code>
</p>
<pre class="example">
# We can access 192.168.0.* directly
local = 192.168.0.0/255.255.255.0
local = 10.0.0.0/255.0.0.0

# Otherwise we use the server
server = 127.0.0.1
server_port = 7070
</pre>

<p>
具体用法 <code>man tsocks.conf</code>
</p></li>

<li><p>
使用
</p>

<p>
让 hg 用上 socks 代理功能
</p>

<div class="org-src-container">
<pre class="src src-sh">tsocks hg push
</pre>
</div>

<p>
tsocks 看起来很通用，应该也可以让 git 等进行 socks 代理访问。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgef88841" class="outline-3">
<h3 id="orgef88841">proxychains</h3>
<div class="outline-text-3" id="text-orgef88841">
<p>
tsocks 不支持代理访问 https
</p>

<pre class="example">
$ tsocks curl https://www.baidu.com
curl: (7) Failed to connect to www.baidu.com port 443: Connection refused
</pre>

<p>
proxychains 支持代理访问 https
</p>

<pre class="example">
$ proxychains curl https://www.baidu.com
[proxychains] config file found: /etc/proxychains.conf
[proxychains] preloading /usr/lib/libproxychains4.so
[proxychains] DLL init: proxychains-ng 4.11
[proxychains] Dynamic chain  ...  127.0.0.1:7070  ...  www.baidu.com:443  ...  OK
&lt;html&gt;
&lt;head&gt;
    &lt;script&gt;
        location.replace(location.href.replace("https://","http://"));
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;noscript&gt;&lt;meta http-equiv="refresh" content="0;url=http://www.baidu.com/"&gt;&lt;/noscript&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>
proxychains 的安装配置请参考：<a href="https://sites.google.com/a/pickdreams.org/snail-library/Home/yong-tsocks-heproxychains-dai-lilinux-xia-suo-you-ruan-jian">用tsocks和proxychains代理Linux下所有软件 - 蜗牛图书馆</a>
</p>
</div>

<div id="outline-container-orgf7cd1f6" class="outline-4">
<h4 id="orgf7cd1f6">将 socks 代理转换为 http 代理</h4>
<div class="outline-text-4" id="text-orgf7cd1f6">
<p>
go get 不支持 proxychains（应该是 go 是静态链接的原因），可以使用 <code>privoxy</code>
将 socks 代理转换为 http 代理。
</p>

<p>
安装 <code>privoxy</code>
</p>
<div class="org-src-container">
<pre class="src src-sh">yaourt -S privoxy
</pre>
</div>

<p>
修改 <code>privoxy</code> 配置文件 <code>/etc/privoxy/config</code> ，添加以下配置行
</p>
<pre class="example">
forward-socks5  / 127.0.0.1:7070 .
# local network do not use proxy
forward         192.168.*.*/     .
forward            10.*.*.*/     .
forward           127.*.*.*/     .
</pre>

<p>
启用 <code>privoxy</code> 服务
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl enable privoxy
sudo systemctl start privoxy
</pre>
</div>

<p>
通过 http 代理使用 <code>go get</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">http_proxy</span>=http://127.0.0.1:8118
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">https_proxy</span>=http://127.0.0.1:8118
go get golang.org/x/net
</pre>
</div>

<p>
参考：<a href="http://blog.btthly.com/go-get-socks-proxy-settings.html">go get socks proxy设置 | 爱吃猫粮的鱼</a>
</p>
</div>
</div>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux下解决更新grub后无法进入gnome3桌面的问题]]></title>
            <link>/article/archlinux-4e0b89e351b366f465b0-grub-540e65e06cd58fdb5165-gnome3-684c9762768495ee9898.html</link>
            <guid>/article/archlinux-4e0b89e351b366f465b0-grub-540e65e06cd58fdb5165-gnome3-684c9762768495ee9898.html</guid>
            <pubDate>Wed, 26 Jun 2013 02:07:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在启动界面上会看到以下错误日志：
</p>
<pre class="example">
kernel: [    8.398186] [drm:radeon_init] *ERROR* No UMS support in radeon module!
</pre>

<p>
这个是由于grub配置文件中指定了内核参数 <code>nomodeset</code> 导致，linux的默认配置是为了运行服务器，以减少启动过程中出错的可能性，使用gnome3桌面时，需去掉内核参数 <code>nomodeset</code> ，以下为<a href="https://wiki.archlinux.org/index.php/ATI#Disable_KMS">原文</a>：
</p>

<pre class="example">
Note: Adding nomodeset to the kernel boot line might prevent GNOME 3's gnome-shell or KDE's desktop effects from running.
</pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux下安装cups打印系统]]></title>
            <link>/article/archlinux-4e0b5b8988c5-cups-625353707cfb7edf.html</link>
            <guid>/article/archlinux-4e0b5b8988c5-cups-625353707cfb7edf.html</guid>
            <pubDate>Wed, 27 Mar 2013 13:56:00 GMT</pubDate>
            <content:encoded><![CDATA[<dl class="org-dl">
<dt>安装</dt><dd></dd>
</dl>
<div class="org-src-container">
<pre class="src src-sh">yaourt -S cups-pdf
</pre>
</div>

<dl class="org-dl">
<dt>启动</dt><dd></dd>
</dl>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl start cups
</pre>
</div>

<dl class="org-dl">
<dt>配置</dt><dd><p>
参考：<a href="https://wiki.archlinux.org/index.php/Cups#PDF_virtual_printer">https://wiki.archlinux.org/index.php/Cups#PDF_virtual_printer</a>
</p>

<p>
登录的用户名要为root，否则后面还是无法添加打印机，web界面没有退出登录的选项，可以试试重启cups服务浏览器清除缓存的数据。</p></dd>
</dl>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下跨进程传递文件描述符]]></title>
            <link>/article/linux-4e0b8de88fdb7a0b4f20901265874ef663cf8ff07b26.html</link>
            <guid>/article/linux-4e0b8de88fdb7a0b4f20901265874ef663cf8ff07b26.html</guid>
            <pubDate>Sat, 09 Mar 2013 07:11:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-orgaa8f586" class="outline-2">
<h2 id="orgaa8f586">问题</h2>
<div class="outline-text-2" id="text-orgaa8f586">
<p>
在web开发中，以典型的php-fpm为例，对于到外部系统的连接（如：mysql、redis）等都提供了持久连接接口（pconnect），但是受限于多进程模型，事实上是每个php-fpm进程都有单独的一个连接池的（参见：《<a href="http:5f53-php-90474e0a-redis.html">当php遇上redis</a>》），大量空闲连接的存在不仅对系统资源造成了浪费（不单指fd空间，像mysql的每连接一线程会附带大量内存空间：sort_buffer、read_buffer等），而且整个系统将无法横向扩展（如：mysql连接数限制）。如果可以在进程间共享文件描述符，将可以大大提升系统性能，促进多进程模型的应用。
</p>
</div>
</div>

<div id="outline-container-org5e9f47d" class="outline-2">
<h2 id="org5e9f47d">方案</h2>
<div class="outline-text-2" id="text-org5e9f47d">
<p>
在linux平台下，sendmsg、recvmsg可以将一个进程的文件描述符传递给另一进程使用，这使得实现系统级的连接池成为可能。
</p>
</div>
</div>

<div id="outline-container-org0773235" class="outline-2">
<h2 id="org0773235">实现</h2>
<div class="outline-text-2" id="text-org0773235">
<p>
《The Linux Programming Interface》61.13.3 Passing File Descriptors
</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux下安装fcitx输入法]]></title>
            <link>/article/archlinux-4e0b5b8988c5-fcitx-8f9351656cd5.html</link>
            <guid>/article/archlinux-4e0b5b8988c5-fcitx-8f9351656cd5.html</guid>
            <pubDate>Sat, 15 Dec 2012 13:56:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org48b5c05" class="outline-2">
<h2 id="org48b5c05">安装</h2>
<div class="outline-text-2" id="text-org48b5c05">
<div class="org-src-container">
<pre class="src src-sh">yaourt -S fcitx-im fcitx-configtool
ln -s /etc/xdg/autostart/fcitx-autostart.desktop  ~/.config/autostart/
</pre>
</div>
</div>
</div>

<div id="outline-container-org72fdc71" class="outline-2">
<h2 id="org72fdc71">配置</h2>
<div class="outline-text-2" id="text-org72fdc71">
<p>
在配置文件~/.xprofile中添加以下内容：
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">GTK_IM_MODULE</span>=fcitx
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">QT_IM_MODULE</span>=fcitx
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">XMODIFIERS</span>=<span style="color: #4E9A06;">"@im=fcitx"</span>
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">LC_CTYPE</span>=<span style="color: #4E9A06;">"zh_CN.UTF-8"</span>
</pre>
</div>

<p>
因为用的是gnome3桌面，需要禁用ibus：
</p>
<pre class="example">
gsettings set org.gnome.settings-daemon.plugins.keyboard active false
</pre>
<p>
还需要在键盘快捷键设置界面中将输入源切换的快捷键清除。
</p>

<p>
打开 fcitx-configtool 在 Input Method 中添加 Keyboard - English(US) 和 WubiPinyin，现在可以 Ctrl + Space 切换输入法，进行中英文输入了。
</p>

<p>
可以取消 fcitx 绑定的全局快捷键，如 emacs 要用 Ctrl+Alt+P，
fcitx-configtool GUI 工具不能将全局快捷键置空，可以直接修改配置文件 ~/.config/fcitx/config 删除快捷键。
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;"># </span><span style="color: #204A87;">Switch Embeded Preedit</span>
<span style="color: #204A87;">#</span><span style="color: #204A87;">SwitchPreedit=CTRL_ALT_P</span>
</pre>
</div>
<p>
改成
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;"># </span><span style="color: #204A87;">Switch Embeded Preedit</span>
<span style="color: #0084C8; font-weight: bold;">SwitchPreedit</span>=
</pre>
</div>
<p>
这是因为 fcitx 的配置如果为默认值，则直接注释掉，重启 fcitx 生效配置。
</p>

<p>
禁用 <code>Clipboard</code> 扩展，已知该插件会导致在 Emacs 中全选以及拷贝大量内容时卡死，见 <a href="https://emacs-china.org/t/topic/4557/66">linux gnome 下 全选整个大于1万行的buffer 卡死 - Emacs-general - Emacs China</a>
</p>
</div>
</div>

<div id="outline-container-org3d37d3a" class="outline-2">
<h2 id="org3d37d3a">重装</h2>
<div class="outline-text-2" id="text-org3d37d3a">
<p>
万一 <code>fcitx</code> 无论如何都用不了，则先卸载 <code>fcitx</code> 并清除配置文件
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt --remove fcitx-configtool fcitx-im
rm -rf ~/.config/fcitx
</pre>
</div>

<p>
然后再安装设置 <code>fcitx</code> 。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[解决Archlinux下ati显卡3D硬件加速失效的问题]]></title>
            <link>/article/89e351b3-archlinux-4e0b-ati-663e5361-3d-786c4ef652a0901f59316548768495ee9898.html</link>
            <guid>/article/89e351b3-archlinux-4e0b-ati-663e5361-3d-786c4ef652a0901f59316548768495ee9898.html</guid>
            <pubDate>Wed, 05 Sep 2012 15:52:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-orgbcb3def" class="outline-2">
<h2 id="orgbcb3def">问题描述</h2>
<div class="outline-text-2" id="text-orgbcb3def">
<ul class="org-ul">
<li><p>
症状
</p>

<p>
进入gnome3桌面环境后很卡，不动还好，一动gnome-shell进程cpu占用就直奔100%。
</p></li>

<li><p>
dmesg异常日志
</p>
<pre class="example">
radeon_cp: Failed to load firmware "radeon/R520_cp.bin"
radeon 0000:01:00.0: failed initializing CP (-2).
radeon 0000:01:00.0: Disabling GPU acceleration
</pre></li>
</ul>
</div>
</div>
<div id="outline-container-org3d7f047" class="outline-2">
<h2 id="org3d7f047">解决办法</h2>
<div class="outline-text-2" id="text-org3d7f047">
<div class="org-src-container">
<pre class="src src-sh">sudo ln -s /usr/lib/firmware /lib/
sudo reboot
</pre>
</div>
</div>
</div>
<div id="outline-container-org963a8a0" class="outline-2">
<h2 id="org963a8a0">经验总结</h2>
<div class="outline-text-2" id="text-org963a8a0">
<p>
出现问题时网上不一定能找到你要的答案，像这个问题，网上的论坛里有无数个建议，一个一个试下去其实很浪费时间，试几次之后还没能解决就应该尝试主动分析解决，像这里稍微留意到括号里的-2，就能发现其实它是个错误码，
perror一下就知道意思是“找不到文件或目录”，联想到最近几次升级archlinux在把/lib里的东西往/usr/lib下移，其中就包括firemware，这样手工在旧的firmware位置建一个软链接就解决了这个问题。
</p>
</div>
</div>

<div id="outline-container-org213eda0" class="outline-2">
<h2 id="org213eda0">备注</h2>
<div class="outline-text-2" id="text-org213eda0">
<p>
这个问题应该是由于之前glibc升级时未全部完成引起的，archlinux现在把/lib改为/usr/lib的软链接了，可以手工进行设置为软链接这一步骤来修复。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[搭建jabber服务器]]></title>
            <link>/article/642d5efa-jabber-670d52a15668.html</link>
            <guid>/article/642d5efa-jabber-670d52a15668.html</guid>
            <pubDate>Tue, 03 May 2011 16:32:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
编译安装
</p>

<p>
<code>下载</code>
</p>
<div class="org-src-container">
<pre class="src src-sh">wget http://download.jabberd.org/jabberd14/jabberd14-1.6.1.1.tar.gz
tar xzvf jabberd14-1.6.1.1.tar.gz
<span style="color: #A020F0;">cd</span> jabberd14-1.6.1.1
</pre>
</div>

<p>
<code>修改代码以解决编译错误</code>
</p>
<div class="org-src-container">
<pre class="src src-sh">diff -r jabberd14-1.6.1.1/jabberd/lib/xmlnode.cc tmp/jabberd14-1.6.1.1/jabberd/l<span style="text-decoration: underline;">ib/xmlnode.cc</span>
882,884c882,884
&lt;     const char *next_step = NULL;
&lt;     const char *start_predicate = NULL;
&lt;     const char *end_predicate = NULL;
---
&gt;     char *next_step = NULL;
&gt;     char *start_predicate = NULL;
&gt;     char *end_predicate = NULL;
1836c1836
&lt;         ((char*)strchr(lang, <span style="color: #4E9A06;">'-'</span>))[0] = 0;
---
&gt;         strchr(lang, <span style="color: #4E9A06;">'-'</span>)[0] = 0;
diff -r jabberd14-1.6.1.1/jabberd/log.cc tmp/jabberd14-1.6.1.1/jabberd/log.cc
89c89
&lt;         pos = (char*)strchr(zone,<span style="color: #4E9A06;">'.'</span>);
---
&gt;     pos = strchr(zone,<span style="color: #4E9A06;">'.'</span>);
diff -r jabberd14-1.6.1.1/jabberd/mio_tls.cc tmp/jabberd14-1.6.1.1/jabberd/mio_t<span style="text-decoration: underline;">ls.cc</span>
615c615
&lt;         ret = gnutls_certificate_set_openpgp_key_file(current_credentials, pub<span style="text-decoration: underline;">file, privfile, GNUTLS_OPENPGP_FMT_BASE64);</span>
---
&gt;         ret = gnutls_certificate_set_openpgp_key_file(current_credentials, pub<span style="text-decoration: underline;">file, privfile);</span>
634c634
&lt;         ret = gnutls_certificate_set_openpgp_keyring_file(current_credentials,<span style="text-decoration: underline;"> file, GNUTLS_OPENPGP_FMT_BASE64);</span>
---
&gt;         ret = gnutls_certificate_set_openpgp_keyring_file(current_credentials,<span style="text-decoration: underline;"> file);</span>
640a641,657
&gt;     }
&gt;
&gt;     // load GnuPG trustdb
&gt;     if (j_strcmp(xmlnode_get_localname(cur), <span style="color: #4E9A06;">"trustdb"</span>) == 0) {
&gt;         char const *const file = xmlnode_get_data(cur);
&gt;
&gt;         if (file == NULL) {
&gt;         log_warn(NULL, <span style="color: #4E9A06;">"Initializing TLS subsystem: &lt;trustdb/&gt; element inside </span><span style="color: #4E9A06; text-decoration: underline;">the TLS configuration, that does not contain a file-name."</span><span style="text-decoration: underline;">);</span>
&gt;         continue;
&gt;         }
&gt;
&gt;         // load the GnuPG trustdb
&gt;         ret = gnutls_certificate_set_openpgp_trustdb(current_credentials, file<span style="text-decoration: underline;">);</span>
&gt;         if (ret &lt; 0) {
&gt;         log_error(NULL, <span style="color: #4E9A06;">"Error loading GnuPG trustdb %s: %s"</span>, file, gnutls_str<span style="text-decoration: underline;">error(ret));</span>
&gt;         continue;
&gt;         }
</pre>
</div>

<p>
<code>编译安装</code>
</p>
<div class="org-src-container">
<pre class="src src-sh">./configure &amp;&amp; make &amp;&amp; sudo make install
</pre>
</div>

<p>
如出错通常是少了相关依赖库，用包管理工具（如：ubuntu下的新立得）安装即可。
</p></li>

<li><p>
配置
</p>

<p>
按照mysql.sql中的注释配置数据库：
</p>

<div class="org-src-container">
<pre class="src src-sh">mysql -uroot -p
mysql&gt; CREATE DATABASE jabber CHARACTER SET utf8;
mysql&gt; use jabber;
mysql&gt; grant all on jabber.* to jabber@localhost identified by <span style="color: #4E9A06;">'secret'</span>;
mysql&gt; <span style="color: #4E9A06;">\.</span> mysql.sql
</pre>
</div></li>

<li><p>
运行
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo jabberd -h localhost -B
</pre>
</div></li>

<li><p>
注册用户1
</p>

<div class="org-src-container">
<pre class="src src-sh">telnet localhost 5222
&lt;stream:stream
  <span style="color: #0084C8; font-weight: bold;">to</span>=<span style="color: #4E9A06;">'localhost'</span>
  <span style="color: #0084C8; font-weight: bold;">xmlns</span>=<span style="color: #4E9A06;">'jabber:client'</span>
  xmlns:<span style="color: #0084C8; font-weight: bold;">stream</span>=<span style="color: #4E9A06;">'http://etherx.jabber.org/streams'</span>&gt;

&lt;iq <span style="color: #0084C8; font-weight: bold;">id</span>=<span style="color: #4E9A06;">'reg1'</span> <span style="color: #0084C8; font-weight: bold;">type</span>=<span style="color: #4E9A06;">'set'</span>&gt;
  &lt;query <span style="color: #0084C8; font-weight: bold;">xmlns</span>=<span style="color: #4E9A06;">'jabber:iq:register'</span>&gt;
    &lt;username&gt;jack&lt;/username&gt;
    &lt;password&gt;jack&lt;/password&gt;
    &lt;name&gt;jack&lt;/name&gt;
    &lt;email&gt;&lt;/email&gt;
  &lt;/query&gt;
&lt;/iq&gt;

&lt;/stream:stream&gt;
</pre>
</div></li>

<li><p>
登录用户1
</p>

<pre class="example">
Empathy菜单-&gt;编辑-&gt;帐户-&gt;添加：
协议: Jabber
登录ID: jack@localhost
记住密码
密码: jack
登录
</pre></li>

<li><p>
注册用户2
</p>

<div class="org-src-container">
<pre class="src src-sh">telnet localhost 5222
&lt;stream:stream
  <span style="color: #0084C8; font-weight: bold;">to</span>=<span style="color: #4E9A06;">'localhost'</span>
  <span style="color: #0084C8; font-weight: bold;">xmlns</span>=<span style="color: #4E9A06;">'jabber:client'</span>
  xmlns:<span style="color: #0084C8; font-weight: bold;">stream</span>=<span style="color: #4E9A06;">'http://etherx.jabber.org/streams'</span>&gt;

&lt;iq <span style="color: #0084C8; font-weight: bold;">id</span>=<span style="color: #4E9A06;">'reg1'</span> <span style="color: #0084C8; font-weight: bold;">type</span>=<span style="color: #4E9A06;">'set'</span>&gt;
  &lt;query <span style="color: #0084C8; font-weight: bold;">xmlns</span>=<span style="color: #4E9A06;">'jabber:iq:register'</span>&gt;
    &lt;username&gt;rose&lt;/username&gt;
    &lt;password&gt;rose&lt;/password&gt;
    &lt;name&gt;rose&lt;/name&gt;
    &lt;email&gt;&lt;/email&gt;
  &lt;/query&gt;
&lt;/iq&gt;

&lt;/stream:stream&gt;
</pre>
</div></li>

<li><p>
用户1加用户2为联系人
</p>

<pre class="example">
Empathy菜单-&gt;聊天-&gt;添加联系人:
帐户：jack@localhost
标识符: rose@localhost
添加
</pre></li>

<li><p>
登录用户2，并发一个消息给用户1
</p>

<div class="org-src-container">
<pre class="src src-sh">telnet localhost 5222
&lt;stream:stream
  <span style="color: #0084C8; font-weight: bold;">to</span>=<span style="color: #4E9A06;">'localhost'</span>
  <span style="color: #0084C8; font-weight: bold;">xmlns</span>=<span style="color: #4E9A06;">'jabber:client'</span>
  xmlns:<span style="color: #0084C8; font-weight: bold;">stream</span>=<span style="color: #4E9A06;">'http://etherx.jabber.org/streams'</span>&gt;

&lt;iq <span style="color: #0084C8; font-weight: bold;">id</span>=<span style="color: #4E9A06;">'auth1'</span> <span style="color: #0084C8; font-weight: bold;">type</span>=<span style="color: #4E9A06;">'set'</span>&gt;
  &lt;query <span style="color: #0084C8; font-weight: bold;">xmlns</span>=<span style="color: #4E9A06;">'jabber:iq:auth'</span>&gt;
    &lt;username&gt;rose&lt;/username&gt;
    &lt;password&gt;rose&lt;/password&gt;
    &lt;resource&gt;test&lt;/resource&gt;
  &lt;/query&gt;
&lt;/iq&gt;

&lt;presence/&gt;

&lt;message <span style="color: #0084C8; font-weight: bold;">to</span>=<span style="color: #4E9A06;">'jack@localhost'</span>&gt;
  &lt;body&gt;hello, jack&lt;/body&gt;
&lt;/message&gt;

&lt;/stream:stream&gt;
</pre>
</div></li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>