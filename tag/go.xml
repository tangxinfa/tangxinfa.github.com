<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>go - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/go.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Sun, 11 Feb 2018 10:19:58 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>go - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/go.xml</link>
        </image>
        <copyright>版权所有 © 2011-2018 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[CentOS 下 Go gRPC 编译环境搭建]]></title>
            <link>/article/centos-4e0b-go-grpc-7f168bd173af5883642d5efa.html</link>
            <guid>/article/centos-4e0b-go-grpc-7f168bd173af5883642d5efa.html</guid>
            <pubDate>Tue, 12 Dec 2017 11:28:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li>安装 <code>protobuf</code>

<div class="org-src-container">

<pre class="src src-sh">git clone https://github.com/google/protobuf.git
<span style="color: #b294bb;">cd</span> protobuf
git checkout v3.4.1 -b v3.4.1
./autogen.sh
./configure
make
make install
</pre>
</div>
</li>

<li>安装 <code>protobuf go 插件</code>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">export</span> <span style="color: #f0c674;">GOPATH</span>=/usr/local/lib/golang
go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
cp $<span style="color: #f0c674;">GOPATH</span>/bin/protoc-gen-go /usr/local/bin/
</pre>
</div>
</li>

<li>参考

<p>
<a href="http://www.jianshu.com/p/e2435b834d68">golang开发环境搭建-安装go 和 grpc - 简书</a></p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[gitlab 针对 go 项目做持续集成]]></title>
            <link>/article/gitlab-94885bf9-go-987976ee505a63017eed96c66210.html</link>
            <guid>/article/gitlab-94885bf9-go-987976ee505a63017eed96c66210.html</guid>
            <pubDate>Wed, 26 Jul 2017 11:05:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<code>gitlab</code> 内置支持持续集成（CI），但是 <code>go</code> 有一点比较特殊，依赖 <code>$GOPATH</code> ，特别是使用了 <code>glide</code> 来管理包依赖后， <code>vendor</code> 目录必须在 <code>$GOPATH</code> 下，这就要求 <code>gitlab</code> 拉取项目源代码的位置符合 <code>$GOPATH</code> 的目录结构。
</p>

<p>
但是 <code>gitlab</code> 拉取代码后的目录结构类似 <code>/home/gitlab-runner/builds/6913a759/0/myproject</code> ，必须将 <code>myproject</code> 置于 <code>src</code> 目录下才符合 <code>$GOPATH</code> 约定。
</p>

<p>
《<a href="https://misfra.me/2016/12/26/gitlab-ci-go/">GitLab CI with Go</a>》给出的方案是将拉取的代码移到 <code>$GOPATH</code> 下的正确位置上，再进行 <code>glide</code> 操作以及跑编译和测试，这篇文章提供了示例配置文件 <code>.gitlab-ci.yml</code> ，但有以下几个问题需要解决：
</p>

<ul class="org-ul">
<li><code>mv</code> 操作默认是不会移动隐藏目录（如： <code>.git</code> ）到目标位置的，这会导致后面的任务拉取代码失败

<p>
可以开启 <code>bash</code> 的选项 <code>dotglob</code> 让 <code>*</code> 匹配隐藏文件
</p>
</li>

<li>文件移动到目标位置后，没有清理机制，会影响下一任务

<p>
将 <code>gitlab</code> 的 <code>GIT_STRATEGY</code> 变量配置为 <code>fetch</code> ，它会在拉取代码后执行 <code>git
    clean</code> 将未知的文件删除，如果我们将移动后的代码放在原来的位置下就可以做到自
动清除没有负作用了。
</p>
</li>

<li>缓存 <code>vendor</code> 目录

<p>
<code>glide update</code> 会更新 Go 项目依赖，比较耗时，构建有 <code>build</code> <code>test</code> <code>deploy</code>
等多个阶段，缓存 <code>vendor</code> 目录能够会快很多。这些阶段会依次执行，同阶段的多个
任务是并行的，可以将 <code>build</code> 阶段的工作目录状态保留到其它阶段，可以用
<code>cache</code> 来实现，也可以将除了 <code>build</code> 阶段以外的其它阶段的 <code>GIT_STRATEGY</code> 置
为 <code>none</code> 来实现。
</p>
</li>

<li>创建 docker 镜像

<p>
安装完 <code>gitlab-runner</code> 后要将 <code>gitlab-runner</code> 用户加入到 <code>docker</code> 用户组，这
样才可调用 <code>docker</code> 工具。
</p>

<div class="org-src-container">

<pre class="src src-sh">usermod gitlab-runner -a -G docker
</pre>
</div>

<p>
不要在 <code>.gitlab-ci.yml</code> 中直接写死 docker 帐号和密码，而是引用环境变量，在
<code>~gitlab-runner/.bashrc</code> 中设置环境变量
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">export</span> <span style="color: #f0c674;">DOCKER_REGISTRY</span>=gitlab.xxxxxx.com
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">DOCKER_USER</span>=xxx@xxxxxx.com
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">DOCKER_PASSWORD</span>=xxxxxxxx
</pre>
</div>

<p>
docker 镜像按照简单的约定：
</p>

<ul class="org-ul">
<li>git 打 tag 时打一个镜像，做为发布镜像

<p>
之前一直想实现仅当 <code>master</code> 分支打 <code>tag</code> 时才创建镜像，但是实现起来会很麻
烦，因为 git 的 tag 只是 commit 的引用，与具体的 branch 无关，tags 和
branchs 是平级的概念。
</p>

<p>
相关讨论 <a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/27818">Update `.gitlab-ci.yml` to support conjunction logic for build conditions (#27818)</a>
</p>
</li>

<li><code>dev</code> 开头的分支进行代码提交时打一个镜像，做为测试镜像
</li>
</ul>
</li>
</ul>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">示例配置：</h2>
<div class="outline-text-2" id="text-1">
<p>
<code>.gitlab-ci.yml</code>
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #f0c674;">variables</span>:
  <span style="color: #f0c674;">REPO_NAME</span>: gitlab.example.com/mygroup/myproject
  <span style="color: #f0c674;">BIN_NAME</span>: mygroup.myproject

<span style="color: #f0c674;">before_script</span>:
  - go version
  - protoc --version
  - echo $CI_BUILD_REF
  - echo $CI_PROJECT_DIR
  - if [ ! -d <span style="color: #8abeb7;">"${CI_PROJECT_DIR}/src/$REPO_NAME"</span> ];
    then
      mkdir -p ${CI_PROJECT_DIR}.src.tmp/$REPO_NAME;
      shopt -s dotglob;
      mv $CI_PROJECT_DIR/* ${CI_PROJECT_DIR}.src.tmp/$REPO_NAME/;
      mv ${CI_PROJECT_DIR}.src.tmp ${CI_PROJECT_DIR}/src;
      echo <span style="color: #8abeb7;">"${CI_PROJECT_DIR}/src/$REPO_NAME created"</span>;
    fi
  - export GOPATH=$CI_PROJECT_DIR
  - cd $GOPATH/src/$REPO_NAME

<span style="color: #f0c674;">build</span>:
  <span style="color: #f0c674;">stage</span>: build
  <span style="color: #f0c674;">variables</span>:
    <span style="color: #f0c674;">GIT_STRATEGY</span>: fetch
  <span style="color: #f0c674;">script</span>:
    - make

<span style="color: #f0c674;">test</span>:
  <span style="color: #f0c674;">stage</span>: test
  <span style="color: #f0c674;">variables</span>:
    <span style="color: #f0c674;">GIT_STRATEGY</span>: none
  <span style="color: #f0c674;">script</span>:
    - go test -v

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Build docker image for development when any branch named begin with "dev"</span>
<span style="color: #f0c674;">deploy-dev</span>:
  <span style="color: #f0c674;">stage</span>: deploy
  <span style="color: #f0c674;">variables</span>:
    <span style="color: #f0c674;">GIT_STRATEGY</span>: none
  <span style="color: #f0c674;">only</span>:
    - /^dev.*/@mygroup/myproject
  <span style="color: #f0c674;">except</span>:
    - tags
  <span style="color: #f0c674;">script</span>:
    - VERSION=${CI_COMMIT_REF_NAME} make
    - docker build ./ -t ${REPO_NAME}/${BIN_NAME}:${CI_COMMIT_REF_NAME}
    - docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker push ${REPO_NAME}/${BIN_NAME}:${CI_COMMIT_REF_NAME}

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Build docker image for production when pushed a tag</span>
<span style="color: #f0c674;">deploy</span>:
  <span style="color: #f0c674;">stage</span>: deploy
  <span style="color: #f0c674;">variables</span>:
    <span style="color: #f0c674;">GIT_STRATEGY</span>: none
  <span style="color: #f0c674;">only</span>:
    - tags@mygroup/myproject
  <span style="color: #f0c674;">script</span>:
    - VERSION=${CI_COMMIT_REF_NAME} make
    - docker build ./ -t ${REPO_NAME}/${BIN_NAME}:${CI_COMMIT_REF_NAME}
    - docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker push ${REPO_NAME}/${BIN_NAME}:${CI_COMMIT_REF_NAME}
</pre>
</div>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[glide get 出错（Failed to checkout packages: Cannot detect VCS）问题排查]]></title>
            <link>/article/glide-get-51fa9519ff08-failed-to-checkout-packages-cannot-detect-vcs-ff0995ee9898639267e5.html</link>
            <guid>/article/glide-get-51fa9519ff08-failed-to-checkout-packages-cannot-detect-vcs-ff0995ee9898639267e5.html</guid>
            <pubDate>Fri, 21 Jul 2017 12:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
突然间使用 <code>glide get</code> 开始出错，错误信息为
</p>

<blockquote>
<p>
Failed to checkout packages: Cannot detect VCS
</p>
</blockquote>

<p>
研究了一下 glide 的源代码，定位到 <code>vcs_remote_lookup.go</code> 中 <code>detectVcsFromRemote</code> 函数，
当我们使用 <code>glide get golang.org/x/net</code> 时，会下载 "<a href="https://golang.org/x/net">https://golang.org/x/net</a>" 页面，并从中解析出代码所在的确切位置，
如果 <code>golang.org</code> 被墙或网络不稳定就会报这个错，可以使用 <code>curl</code> 进行验证。
</p>

<p>
正常情况下：
</p>
<pre class="example">
$ curl https://golang.org/x/net
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
&lt;meta name="go-import" content="golang.org/x/net git https://go.googlesource.com/net"&gt;
&lt;meta name="go-source" content="golang.org/x/net https://github.com/golang/net/ https://github.com/golang/net/tree/master{/dir} https://github.com/golang/net/blob/master{/dir}/{file}#L{line}"&gt;
&lt;meta http-equiv="refresh" content="0; url=https://godoc.org/golang.org/x/net"&gt;
&lt;/head&gt;
&lt;body&gt;
Nothing to see here; &lt;a href=" "&gt;move along&lt;/a &gt;.
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>
网络不稳定时：
</p>
<pre class="example">
$ curl https://golang.org/x/net
curl: (7) Failed to connect to golang.org port 443: Connection timed out
</pre>

<p>
对于这种问题只能是等待网站恢复正常访问，紧急情况下，可以修改 <code>glide.yaml</code> ，
在相应 package 下手工指定 <code>repo</code> 为具体的代码仓库地址，如：
</p>
<pre class="example">
- package: golang.org/x/net
  repo: https://go.googlesource.com/net
  vcs: git
</pre>
]]></content:encoded>
        </item>
    </channel>
</rss>