<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>go - tangxinfa&apos;s blog</title>
        <link>http://tangxinfa.github.io/tag/go.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Fri, 30 Oct 2020 05:13:24 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>go - tangxinfa&apos;s blog</title>
            <url>http://tangxinfa.github.io/static/favicon.ico</url>
            <link>http://tangxinfa.github.io/tag/go.xml</link>
        </image>
        <copyright>版权所有 © 2011-2020 tangxinfa</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[golang gRPC 负载均衡方案]]></title>
            <link>/article/golang-grpc-8d1f8f7d5747886165b96848.html</link>
            <guid>/article/golang-grpc-8d1f8f7d5747886165b96848.html</guid>
            <pubDate>Mon, 14 Sep 2020 08:57:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org205254e" class="outline-2">
<h2 id="org205254e">服务器端负载均衡选项： <code>MaxConnectionAge</code></h2>
<div class="outline-text-2" id="text-org205254e">
<p>
默认情况下，gRPC 客户端与服务器间存在一条 HTTP/2 长连接，当服务器端添加了新结点时，客户端是无感知的，新上线的结点将不会有请求进来。 <code>MaxConnectionAge</code> 指定长连接的存活时间，当客户端检测到 gRPC 长连接断开时，会解析服务器域名，重新建立连接，从而为负载均衡提供了基础。
</p>

<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc/keepalive"</span>
server = grpc.<span style="color: #00578E; font-weight: bold;">NewServer</span>(
    grpc.<span style="color: #00578E; font-weight: bold;">KeepaliveParams</span>(<span style="color: #2F8B58; font-weight: bold;">keepalive.ServerParameters</span>{<span style="color: #F5666D;">MaxConnectionAge</span>: 2 * time.Minute}),
)
</pre>
</div>
</div>
</div>

<div id="outline-container-org932f51d" class="outline-2">
<h2 id="org932f51d">客户端负载均衡器： <code>Pick First</code></h2>
<div class="outline-text-2" id="text-org932f51d">
<p>
适用于终端用户与服务间通信，由于存在大量终端用户，服务器端的负载均衡不成问题。
</p>


<div class="figure">
<p><img src="../static/grpc_lb_pick_first.png" alt="grpc_lb_pick_first.png" />
</p>
</div>

<p>
<code>Pick First</code> 是 golang gRPC 默认的负载均衡器，采用 "一服务一连接" 模型，客户端与服务间只有一条长连接。
</p>

<p>
它从服务器域名解析出 IP 列表后，依次尝试建立一条长连接，直到成功为止，当长连接断开时，重复以上过程。
</p>

<p>
客户端通过 <code>服务器域名</code> 建立 gRPC 连接来启用 <code>Pick First</code> 负载均衡器。
</p>

<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> pb <span style="color: #4E9A06;">"google.golang.org/grpc/examples/helloworld/helloworld"</span>
<span style="color: #0084C8; font-weight: bold;">conn</span>, <span style="color: #0084C8; font-weight: bold;">err</span> := grpc.<span style="color: #00578E; font-weight: bold;">Dial</span>(
    <span style="color: #4E9A06;">"greeter_server"</span>,
    grpc.<span style="color: #00578E; font-weight: bold;">WithInsecure</span>(),
)
<span style="color: #0084C8; font-weight: bold;">c</span> := pb.<span style="color: #00578E; font-weight: bold;">NewGreeterClient</span>(conn)
</pre>
</div>
</div>
</div>

<div id="outline-container-org828c337" class="outline-2">
<h2 id="org828c337">客户端负载均衡器： <code>Round Robin</code></h2>
<div class="outline-text-2" id="text-org828c337">
<p>
适用于内部服务间通信，在 K8S 中配合 <a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services">Headless Services</a> 非常容易部署。
</p>


<div class="figure">
<p><img src="../static/grpc_lb_round_robin.png" alt="grpc_lb_round_robin.png" />
</p>
</div>

<p>
<code>Round Robin</code> 是 golang gRPC 内置支持的负载均衡器，采用 "一服务器 IP 一连接" 模型，客户端与服务器的每一个 IP 间都有一条长连接。
</p>

<p>
它从服务器域名解析出 IP 列表后，对每一个 IP 确保存在一条长连接，当有长连接断开时，重复以上过程。
</p>

<p>
客户端通过 "dns:///服务器域名" 建立 gRPC 连接并指定 "roundrobin" 启用 <code>Round Robin</code> 负载均衡器。
</p>

<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"google.golang.org/grpc/balancer/roundrobin"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> pb <span style="color: #4E9A06;">"google.golang.org/grpc/examples/helloworld/helloworld"</span>
<span style="color: #0084C8; font-weight: bold;">conn</span>, <span style="color: #0084C8; font-weight: bold;">err</span> := grpc.<span style="color: #00578E; font-weight: bold;">Dial</span>(
    <span style="color: #4E9A06;">"dns:///greeter_server"</span>,
    grpc.<span style="color: #00578E; font-weight: bold;">WithInsecure</span>(),
    grpc.<span style="color: #00578E; font-weight: bold;">WithBalancerName</span>(roundrobin.Name),
)
<span style="color: #0084C8; font-weight: bold;">c</span> := pb.<span style="color: #00578E; font-weight: bold;">NewGreeterClient</span>(conn)
</pre>
</div>
</div>
</div>

<div id="outline-container-orga4ea548" class="outline-2">
<h2 id="orga4ea548">客户端负载均衡器： <code>Pool</code></h2>
<div class="outline-text-2" id="text-orga4ea548">
<p>
适用于外部服务间通信，在 K8S 中以 SLB 方式暴露的服务对外表现为一个 IP，此时采用连接池可以确保负载均衡。
</p>


<div class="figure">
<p><img src="../static/grpc_lb_pool.png" alt="grpc_lb_pool.png" />
</p>
</div>

<p>
最新的 go-grpc 库（v1.28+）提供了 <code>ClientConnInterface</code> 接口，通过该接口可以很方便地实现 gRPC 连接池，参考 <a href="https://github.com/googleapis/google-api-go-client/blob/master/transport/grpc/dial.go">googleapis</a> 。
</p>

<p>
采用 "一服务器 IP N 连接" 模型，客户端与服务器的每一个 IP 间都有 N 条长连接，各连接间的负载均衡采用 <code>Round Robin</code> 算法。
</p>

<p>
它从服务器域名解析出 IP 列表后，对每一个 IP 确保存在 N 条长连接，当有长连接断开时，重复以上过程。
</p>

<p>
<code>conn_pool.go</code>
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">package</span> main

<span style="color: #A52A2A; font-weight: bold;">import</span> (
    <span style="color: #4E9A06;">"sync/atomic"</span>

    <span style="color: #4E9A06;">"golang.org/x/net/context"</span>
    <span style="color: #4E9A06;">"google.golang.org/grpc"</span>
    <span style="color: #4E9A06;">"google.golang.org/grpc/balancer/roundrobin"</span>
)

<span style="color: #A52A2A; font-weight: bold;">type</span> <span style="color: #2F8B58; font-weight: bold;">ConnPool</span> <span style="color: #A52A2A; font-weight: bold;">struct</span> {
    conns []*<span style="color: #2F8B58; font-weight: bold;">grpc.ClientConn</span>
    idx   <span style="color: #2F8B58; font-weight: bold;">uint32</span>
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">Num</span>() <span style="color: #2F8B58; font-weight: bold;">int</span> {
    <span style="color: #A52A2A; font-weight: bold;">return</span> <span style="color: #A020F0;">len</span>(p.conns)
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">Conn</span>() *<span style="color: #2F8B58; font-weight: bold;">grpc.ClientConn</span> {
    <span style="color: #0084C8; font-weight: bold;">i</span> := atomic.<span style="color: #00578E; font-weight: bold;">AddUint32</span>(&amp;p.idx, 1)
    <span style="color: #A52A2A; font-weight: bold;">return</span> p.conns[i%<span style="color: #00578E; font-weight: bold;">uint32</span>(<span style="color: #A020F0;">len</span>(p.conns))]
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">Close</span>() <span style="color: #2F8B58; font-weight: bold;">error</span> {
    <span style="color: #A52A2A; font-weight: bold;">var</span> <span style="color: #0084C8; font-weight: bold;">firstError</span> <span style="color: #2F8B58; font-weight: bold;">error</span>
    <span style="color: #A52A2A; font-weight: bold;">for</span> <span style="color: #0084C8; font-weight: bold;">_</span>, <span style="color: #0084C8; font-weight: bold;">conn</span> := <span style="color: #A52A2A; font-weight: bold;">range</span> p.conns {
        <span style="color: #A52A2A; font-weight: bold;">if</span> <span style="color: #0084C8; font-weight: bold;">err</span> := conn.<span style="color: #00578E; font-weight: bold;">Close</span>(); err != <span style="color: #F5666D;">nil</span> {
            <span style="color: #A52A2A; font-weight: bold;">if</span> firstError != <span style="color: #F5666D;">nil</span> {
                firstError = err
            }
        }
    }
    <span style="color: #A52A2A; font-weight: bold;">return</span> firstError
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">Invoke</span>(<span style="color: #0084C8; font-weight: bold;">ctx</span> <span style="color: #2F8B58; font-weight: bold;">context.Context</span>, <span style="color: #0084C8; font-weight: bold;">method</span> <span style="color: #2F8B58; font-weight: bold;">string</span>, <span style="color: #0084C8; font-weight: bold;">args</span> <span style="color: #A52A2A; font-weight: bold;">interface</span>{}, <span style="color: #0084C8; font-weight: bold;">reply</span> <span style="color: #A52A2A; font-weight: bold;">interface</span>{}, <span style="color: #0084C8; font-weight: bold;">opts</span> ...<span style="color: #2F8B58; font-weight: bold;">grpc.CallOption</span>) <span style="color: #2F8B58; font-weight: bold;">error</span> {
    <span style="color: #A52A2A; font-weight: bold;">return</span> p.<span style="color: #00578E; font-weight: bold;">Conn</span>().<span style="color: #00578E; font-weight: bold;">Invoke</span>(ctx, method, args, reply, opts...)
}

<span style="color: #A52A2A; font-weight: bold;">func</span> (<span style="color: #0084C8; font-weight: bold;">p</span> *<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>) <span style="color: #00578E; font-weight: bold;">NewStream</span>(<span style="color: #0084C8; font-weight: bold;">ctx</span> <span style="color: #2F8B58; font-weight: bold;">context.Context</span>, <span style="color: #0084C8; font-weight: bold;">desc</span> *<span style="color: #2F8B58; font-weight: bold;">grpc.StreamDesc</span>, <span style="color: #0084C8; font-weight: bold;">method</span> <span style="color: #2F8B58; font-weight: bold;">string</span>, <span style="color: #0084C8; font-weight: bold;">opts</span> ...<span style="color: #2F8B58; font-weight: bold;">grpc.CallOption</span>) (<span style="color: #2F8B58; font-weight: bold;">grpc.ClientStream</span>, <span style="color: #2F8B58; font-weight: bold;">error</span>) {
    <span style="color: #A52A2A; font-weight: bold;">return</span> p.<span style="color: #00578E; font-weight: bold;">Conn</span>().<span style="color: #00578E; font-weight: bold;">NewStream</span>(ctx, desc, method, opts...)
}

<span style="color: #A52A2A; font-weight: bold;">func</span> <span style="color: #00578E; font-weight: bold;">NewConnPool</span>(<span style="color: #0084C8; font-weight: bold;">ctx</span> <span style="color: #2F8B58; font-weight: bold;">context.Context</span>, <span style="color: #0084C8; font-weight: bold;">address</span> <span style="color: #2F8B58; font-weight: bold;">string</span>, <span style="color: #0084C8; font-weight: bold;">poolSize</span> <span style="color: #2F8B58; font-weight: bold;">int</span>) (*<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>, <span style="color: #2F8B58; font-weight: bold;">error</span>) {
    <span style="color: #0084C8; font-weight: bold;">pool</span> := &amp;<span style="color: #2F8B58; font-weight: bold;">ConnPool</span>{}
    <span style="color: #A52A2A; font-weight: bold;">for</span> <span style="color: #0084C8; font-weight: bold;">i</span> := 0; i &lt; poolSize; i++ {
        <span style="color: #0084C8; font-weight: bold;">conn</span>, <span style="color: #0084C8; font-weight: bold;">err</span> := grpc.<span style="color: #00578E; font-weight: bold;">Dial</span>(
            address,
            grpc.<span style="color: #00578E; font-weight: bold;">WithInsecure</span>(),
            grpc.<span style="color: #00578E; font-weight: bold;">WithBalancerName</span>(roundrobin.Name),
        )
        <span style="color: #A52A2A; font-weight: bold;">if</span> err != <span style="color: #F5666D;">nil</span> {
            <span style="color: #A52A2A; font-weight: bold;">defer</span> pool.<span style="color: #00578E; font-weight: bold;">Close</span>() <span style="color: #204A87;">// </span><span style="color: #d0bf8f;">NOTE</span><span style="color: #204A87;">: error from Close is ignored.</span>
            <span style="color: #A52A2A; font-weight: bold;">return</span> <span style="color: #F5666D;">nil</span>, err
        }
        pool.conns = <span style="color: #A020F0;">append</span>(pool.conns, conn)
    }
    <span style="color: #A52A2A; font-weight: bold;">return</span> pool, <span style="color: #F5666D;">nil</span>
}
</pre>
</div>

<p>
使用连接池
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">import</span> <span style="color: #4E9A06;">"golang.org/x/net/context"</span>
<span style="color: #A52A2A; font-weight: bold;">import</span> pb <span style="color: #4E9A06;">"google.golang.org/grpc/examples/helloworld/helloworld"</span>
<span style="color: #0084C8; font-weight: bold;">conn</span>, <span style="color: #0084C8; font-weight: bold;">err</span> := <span style="color: #00578E; font-weight: bold;">NewConnPool</span>(
    context.<span style="color: #00578E; font-weight: bold;">Background</span>(),
    <span style="color: #4E9A06;">"dns:///greeter_server"</span>,
    10,
)
<span style="color: #0084C8; font-weight: bold;">c</span> := pb.<span style="color: #00578E; font-weight: bold;">NewGreeterClient</span>(conn)
</pre>
</div>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 下 Go gRPC 编译环境搭建]]></title>
            <link>/article/centos-4e0b-go-grpc-7f168bd173af5883642d5efa.html</link>
            <guid>/article/centos-4e0b-go-grpc-7f168bd173af5883642d5efa.html</guid>
            <pubDate>Tue, 12 Dec 2017 11:28:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
安装 <code>protobuf</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">git clone https://github.com/google/protobuf.git
<span style="color: #A020F0;">cd</span> protobuf
git checkout v3.4.1 -b v3.4.1
./autogen.sh
./configure
make
make install
</pre>
</div></li>

<li><p>
安装 <code>protobuf go 插件</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
</pre>
</div>

<p>
在 <code>~/.profile</code> 中将 <code>protoc-gen-go</code> 所在路径加到 <code>PATH</code> 环境变量中
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">PATH</span>=<span style="color: #4E9A06;">"`go env GOPATH`/bin:$PATH"</span>
</pre>
</div>

<p>
最新版本的 <code>protoc-gen-go</code> 默认生成的 protobuf 4.x 的代码，我们的项目目前还是使用 protobuf 3.x，这会导致生成的代码无法通过编译，错误信息
</p>
<pre class="example">
xxx.pb.go:2799:21: c.cc.NewStream undefined (type *grpc.ClientConn has no field or method NewStream)
xxx.pb.go:2831:13: c.cc.Invoke undefined (type *grpc.ClientConn has no field or method Invoke)
</pre>

<p>
需要改回生成 protobuf 3.x 的代码，修改
<code>github.com/golang/protobuf/protoc-gen-go/grpc/grpc.go</code>
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #F5666D;">generatedCodeVersion</span> = 4
</pre>
</div>
<p>
改为 
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #F5666D;">generatedCodeVersion</span> = 3
</pre>
</div>

<p>
重新编译安装 <code>protoc-gen-go</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">cd</span> github.com/golang/protobuf
make install
</pre>
</div></li>

<li><p>
参考
</p>

<p>
<a href="http://www.jianshu.com/p/e2435b834d68">golang开发环境搭建-安装go 和 grpc - 简书</a>
</p>

<p>
<a href="https://github.com/golang/protobuf/issues/264">grpc version conflict · Issue #264 · golang/protobuf</a>
</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[gitlab 针对 go 项目做持续集成]]></title>
            <link>/article/gitlab-94885bf9-go-987976ee505a63017eed96c66210.html</link>
            <guid>/article/gitlab-94885bf9-go-987976ee505a63017eed96c66210.html</guid>
            <pubDate>Wed, 26 Jul 2017 11:05:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<code>gitlab</code> 内置支持持续集成（CI），但是 <code>go</code> 有一点比较特殊，依赖 <code>$GOPATH</code> ，特别是使用了 <code>glide</code> 来管理包依赖后， <code>vendor</code> 目录必须在 <code>$GOPATH</code> 下，这就要求 <code>gitlab</code> 拉取项目源代码的位置符合 <code>$GOPATH</code> 的目录结构。
</p>

<p>
但是 <code>gitlab</code> 拉取代码后的目录结构类似 <code>/home/gitlab-runner/builds/6913a759/0/myproject</code> ，必须将 <code>myproject</code> 置于 <code>src</code> 目录下才符合 <code>$GOPATH</code> 约定。
</p>

<p>
《<a href="https://misfra.me/2016/12/26/gitlab-ci-go/">GitLab CI with Go</a>》给出的方案是将拉取的代码移到 <code>$GOPATH</code> 下的正确位置上，再进行 <code>glide</code> 操作以及跑编译和测试，这篇文章提供了示例配置文件 <code>.gitlab-ci.yml</code> ，但有以下几个问题需要解决：
</p>

<ul class="org-ul">
<li><p>
<code>mv</code> 操作默认是不会移动隐藏目录（如： <code>.git</code> ）到目标位置的，这会导致后面的任务拉取代码失败
</p>

<p>
可以开启 <code>bash</code> 的选项 <code>dotglob</code> 让 <code>*</code> 匹配隐藏文件
</p></li>

<li><p>
文件移动到目标位置后，没有清理机制，会影响下一任务
</p>

<p>
将 <code>gitlab</code> 的 <code>GIT_STRATEGY</code> 变量配置为 <code>fetch</code> ，它会在拉取代码后执行 <code>git
    clean</code> 将未知的文件删除，如果我们将移动后的代码放在原来的位置下就可以做到自动清除没有负作用了。
</p></li>

<li><p>
缓存 <code>vendor</code> 目录
</p>

<p>
<code>glide update</code> 会更新 Go 项目依赖，比较耗时，构建有 <code>build</code> <code>test</code> <code>deploy</code>
等多个阶段，缓存 <code>vendor</code> 目录能够会快很多。这些阶段会依次执行，同阶段的多个任务是并行的，可以将 <code>build</code> 阶段的工作目录状态保留到其它阶段，可以用
<code>cache</code> 来实现，也可以将除了 <code>build</code> 阶段以外的其它阶段的 <code>GIT_STRATEGY</code> 置为 <code>none</code> 来实现。
</p></li>

<li><p>
创建 docker 镜像
</p>

<p>
安装完 <code>gitlab-runner</code> 后要将 <code>gitlab-runner</code> 用户加入到 <code>docker</code> 用户组，这样才可调用 <code>docker</code> 工具。
</p>

<div class="org-src-container">
<pre class="src src-sh">usermod gitlab-runner -a -G docker
</pre>
</div>

<p>
不要在 <code>.gitlab-ci.yml</code> 中直接写死 docker 帐号和密码，而是引用环境变量，在
<code>~gitlab-runner/.bashrc</code> 中设置环境变量
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">DOCKER_REGISTRY</span>=gitlab.xxxxxx.com
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">DOCKER_USER</span>=xxx@xxxxxx.com
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">DOCKER_PASSWORD</span>=xxxxxxxx
</pre>
</div>

<p>
docker 镜像按照简单的约定：
</p>

<ul class="org-ul">
<li><p>
git 打 tag 时打一个镜像，做为发布镜像
</p>

<p>
之前一直想实现仅当 <code>master</code> 分支打 <code>tag</code> 时才创建镜像，但是实现起来会很麻烦，因为 git 的 tag 只是 commit 的引用，与具体的 branch 无关，tags 和
branchs 是平级的概念。
</p>

<p>
相关讨论 <a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/27818">Update `.gitlab-ci.yml` to support conjunction logic for build conditions (#27818)</a>
</p></li>

<li><code>dev</code> 开头的分支进行代码提交时打一个镜像，做为测试镜像</li>
</ul></li>
</ul>

<div id="outline-container-org238254b" class="outline-2">
<h2 id="org238254b">示例配置：</h2>
<div class="outline-text-2" id="text-org238254b">
<p>
<code>.gitlab-ci.yml</code>
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #0084C8; font-weight: bold;">variables</span>:
  <span style="color: #0084C8; font-weight: bold;">REPO_NAME</span>: gitlab.example.com/mygroup/myproject
  <span style="color: #0084C8; font-weight: bold;">BIN_NAME</span>: mygroup.myproject

<span style="color: #0084C8; font-weight: bold;">before_script</span>:
  - go version
  - protoc --version
  - echo $CI_BUILD_REF
  - echo $CI_PROJECT_DIR
  - if [ ! -d <span style="color: #4E9A06;">"${CI_PROJECT_DIR}/src/$REPO_NAME"</span> ];
    then
      mkdir -p ${CI_PROJECT_DIR}.src.tmp/$REPO_NAME;
      shopt -s dotglob;
      mv $CI_PROJECT_DIR/* ${CI_PROJECT_DIR}.src.tmp/$REPO_NAME/;
      mv ${CI_PROJECT_DIR}.src.tmp ${CI_PROJECT_DIR}/src;
      echo <span style="color: #4E9A06;">"${CI_PROJECT_DIR}/src/$REPO_NAME created"</span>;
    fi
  - export GOPATH=$CI_PROJECT_DIR
  - cd $GOPATH/src/$REPO_NAME

<span style="color: #0084C8; font-weight: bold;">build</span>:
  <span style="color: #0084C8; font-weight: bold;">stage</span>: build
  <span style="color: #0084C8; font-weight: bold;">variables</span>:
    <span style="color: #0084C8; font-weight: bold;">GIT_STRATEGY</span>: fetch
  <span style="color: #0084C8; font-weight: bold;">script</span>:
    - make

<span style="color: #0084C8; font-weight: bold;">test</span>:
  <span style="color: #0084C8; font-weight: bold;">stage</span>: test
  <span style="color: #0084C8; font-weight: bold;">variables</span>:
    <span style="color: #0084C8; font-weight: bold;">GIT_STRATEGY</span>: none
  <span style="color: #0084C8; font-weight: bold;">script</span>:
    - go test -v

<span style="color: #204A87;"># </span><span style="color: #204A87;">Build docker image for development when any branch named begin with "dev"</span>
<span style="color: #0084C8; font-weight: bold;">deploy-dev</span>:
  <span style="color: #0084C8; font-weight: bold;">stage</span>: deploy
  <span style="color: #0084C8; font-weight: bold;">variables</span>:
    <span style="color: #0084C8; font-weight: bold;">GIT_STRATEGY</span>: none
  <span style="color: #0084C8; font-weight: bold;">only</span>:
    - /^dev.*/@mygroup/myproject
  <span style="color: #0084C8; font-weight: bold;">except</span>:
    - tags
  <span style="color: #0084C8; font-weight: bold;">script</span>:
    - VERSION=${CI_COMMIT_REF_NAME} make
    - docker build ./ -t ${REPO_NAME}/${BIN_NAME}:${CI_COMMIT_REF_NAME}
    - docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker push ${REPO_NAME}/${BIN_NAME}:${CI_COMMIT_REF_NAME}

<span style="color: #204A87;"># </span><span style="color: #204A87;">Build docker image for production when pushed a tag</span>
<span style="color: #0084C8; font-weight: bold;">deploy</span>:
  <span style="color: #0084C8; font-weight: bold;">stage</span>: deploy
  <span style="color: #0084C8; font-weight: bold;">variables</span>:
    <span style="color: #0084C8; font-weight: bold;">GIT_STRATEGY</span>: none
  <span style="color: #0084C8; font-weight: bold;">only</span>:
    - tags@mygroup/myproject
  <span style="color: #0084C8; font-weight: bold;">script</span>:
    - VERSION=${CI_COMMIT_REF_NAME} make
    - docker build ./ -t ${REPO_NAME}/${BIN_NAME}:${CI_COMMIT_REF_NAME}
    - docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker push ${REPO_NAME}/${BIN_NAME}:${CI_COMMIT_REF_NAME}
</pre>
</div>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[glide get 出错（Failed to checkout packages: Cannot detect VCS）问题排查]]></title>
            <link>/article/glide-get-51fa9519ff08-failed-to-checkout-packages-cannot-detect-vcs-ff0995ee9898639267e5.html</link>
            <guid>/article/glide-get-51fa9519ff08-failed-to-checkout-packages-cannot-detect-vcs-ff0995ee9898639267e5.html</guid>
            <pubDate>Fri, 21 Jul 2017 12:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
突然间使用 <code>glide get</code> 开始出错，错误信息为
</p>

<blockquote>
<p>
Failed to checkout packages: Cannot detect VCS
</p>
</blockquote>

<p>
研究了一下 glide 的源代码，定位到 <code>vcs_remote_lookup.go</code> 中 <code>detectVcsFromRemote</code> 函数，当我们使用 <code>glide get golang.org/x/net</code> 时，会下载 "<a href="https://golang.org/x/net">https://golang.org/x/net</a>" 页面，并从中解析出代码所在的确切位置，如果 <code>golang.org</code> 被墙或网络不稳定就会报这个错，可以使用 <code>curl</code> 进行验证。
</p>

<p>
正常情况下：
</p>
<pre class="example">
$ curl https://golang.org/x/net
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
&lt;meta name="go-import" content="golang.org/x/net git https://go.googlesource.com/net"&gt;
&lt;meta name="go-source" content="golang.org/x/net https://github.com/golang/net/ https://github.com/golang/net/tree/master{/dir} https://github.com/golang/net/blob/master{/dir}/{file}#L{line}"&gt;
&lt;meta http-equiv="refresh" content="0; url=https://godoc.org/golang.org/x/net"&gt;
&lt;/head&gt;
&lt;body&gt;
Nothing to see here; &lt;a href=" "&gt;move along&lt;/a &gt;.
&lt;/body&gt;
&lt;/html&gt;  
</pre>

<p>
网络不稳定时：
</p>
<pre class="example">
$ curl https://golang.org/x/net
curl: (7) Failed to connect to golang.org port 443: Connection timed out
</pre>

<p>
对于这种问题只能是等待网站恢复正常访问，紧急情况下，可以修改 <code>glide.yaml</code> ，在相应 package 下手工指定 <code>repo</code> 为具体的代码仓库地址，如：
</p>
<pre class="example">
- package: golang.org/x/net
  repo: https://go.googlesource.com/net
  vcs: git
</pre>
]]></content:encoded>
        </item>
    </channel>
</rss>