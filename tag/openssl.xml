<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>openssl - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/openssl.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Mon, 14 Sep 2020 09:18:25 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>openssl - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/openssl.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[修复 SSL certificate problem: unable to get local issuer certificate]]></title>
            <link>/article/4fee590d-ssl-certificate-problem-unable-to-get-local-issuer-certificate.html</link>
            <guid>/article/4fee590d-ssl-certificate-problem-unable-to-get-local-issuer-certificate.html</guid>
            <pubDate>Mon, 14 Mar 2016 12:36:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在嵌入式 linux 设备上使用 curl 访问 https 站点会报错：
</p>
<pre class="example">
# curl https://www.google.com
curl: (60) SSL certificate problem: unable to get local issuer certificate
More details here: http://curl.haxx.se/docs/sslcerts.html

curl performs SSL certificate verification by default, using a "bundle"
 of Certificate Authority (CA) public keys (CA certs). If the default
 bundle file isn't adequate, you can specify an alternate file
 using the --cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
 the bundle, the certificate verification probably failed due to a
 problem with the certificate (it might be expired, or the name might
 not match the domain name in the URL).
If you'd like to turn off curl's verification of the certificate, use
 the -k (or --insecure) option.
</pre>

<p>
而 linux 桌面上使用 curl 访问 https 站点则正常：
</p>
<pre class="example">
$ curl https://www.google.com
&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;
&lt;H1&gt;302 Moved&lt;/H1&gt;
The document has moved
&lt;A HREF="https://www.google.com.hk/?gfe_rd=cr&amp;amp;ei=i2DmVtXLDOzN8geg-afACA"&gt;here&lt;/A&gt;.
&lt;/BODY&gt;&lt;/HTML&gt;
</pre>

<p>
嵌入式 linux 设备上缺少了 CA 证书。
</p>

<div id="outline-container-org827fabb" class="outline-2">
<h2 id="org827fabb">什么是 CA 证书</h2>
<div class="outline-text-2" id="text-org827fabb">
<blockquote>
<p>
Certificate Authority (CA) Certificates
</p>

<p>
A certificate authority (CA) is a trusted entity that issues electronic documents that verify a digital entity’s identity on the Internet. The electronic documents, which are called digital certificates, are an essential part of secure communication and play an important part in the public key infrastructure (PKI). Certificates typically include the owner's public key, the expiration date of the certificate, the owner's name and other information about the public key owner.
</p>
</blockquote>
<p>
引用自 <a href="http://searchsecurity.techtarget.com/definition/certificate-authority">What is certificate authority (CA)? - Definition from WhatIs.com</a>
</p>
</div>
</div>

<div id="outline-container-orgd3c0d14" class="outline-2">
<h2 id="orgd3c0d14">获取 CA 证书</h2>
<div class="outline-text-2" id="text-orgd3c0d14">
<p>
比较有名的 CA 证书列表由 mozilla 维护，<a href="https://curl.haxx.se/">curl</a> 提供了命令行工具 <a href="https://github.com/curl/curl/raw/master/lib/mk-ca-bundle.pl">mk-ca-bundle.pl</a> ，用于下载 mozilla 维护的 CA 证书列表，转换成 SSL 应用程序可直接使用的格式。
</p>

<p>
linux 系统的 CA 证书由操作系统发行版负责维护，没有统一的标准规定如何维护和管理 CA 证书。
</p>

<p>
Archlinux 的 CA 证书由 <a href="https://www.archlinux.org/packages/core/any/ca-certificates/">ca-certificates</a> 包维护，CA 证书来自依赖的包 <a href="https://www.archlinux.org/packages/core/i686/ca-certificates-mozilla/">ca-certificates-mozilla</a> 及 <a href="https://www.archlinux.org/packages/core/any/ca-certificates-cacert/">ca-certificates-cacert</a> 。
</p>
<pre class="example">
$ pacman -Qi ca-certificates
Name            : ca-certificates
Version         : 20150402-1
Description     : Common CA certificates (default providers)
Architecture    : any
URL             : http://pkgs.fedoraproject.org/cgit/ca-certificates.git
Licenses        : GPL2
Groups          : None
Provides        : None
Depends On      : ca-certificates-mozilla  ca-certificates-cacert
Optional Deps   : None
Required By     : curl  glib-networking  mono  neon  perl-lwp-protocol-https  qt4
Optional For    : lib32-openssl  openssl  wget
Conflicts With  : None
Replaces        : None
Installed Size  : 1024.00 B
Packager        : Jan Alexander Steffens (heftig) &lt;jan.steffens@gmail.com&gt;
Build Date      : 2015年04月03日 星期五 04时36分52秒
Install Date    : 2015年04月13日 星期一 16时04分37秒
Install Reason  : Installed as a dependency for another package
Install Script  : No
Validated By    : Signature
$ pacman -Ql ca-certificates
$ pacman -Ql ca-certificates-cacert
ca-certificates-cacert /usr/
ca-certificates-cacert /usr/share/
ca-certificates-cacert /usr/share/ca-certificates/
ca-certificates-cacert /usr/share/ca-certificates/trust-source/
ca-certificates-cacert /usr/share/ca-certificates/trust-source/anchors/
ca-certificates-cacert /usr/share/ca-certificates/trust-source/anchors/CAcert.org_class3.crt
ca-certificates-cacert /usr/share/ca-certificates/trust-source/anchors/CAcert.org_root.crt
ca-certificates-cacert /usr/share/licenses/
ca-certificates-cacert /usr/share/licenses/ca-certificates-cacert/
ca-certificates-cacert /usr/share/licenses/ca-certificates-cacert/LICENSE
$ pacman -Ql ca-certificates-mozilla
ca-certificates-mozilla /usr/
ca-certificates-mozilla /usr/share/
ca-certificates-mozilla /usr/share/ca-certificates/
ca-certificates-mozilla /usr/share/ca-certificates/trust-source/
ca-certificates-mozilla /usr/share/ca-certificates/trust-source/mozilla.neutral-trust.crt
ca-certificates-mozilla /usr/share/ca-certificates/trust-source/mozilla.supplement.p11-kit
ca-certificates-mozilla /usr/share/ca-certificates/trust-source/mozilla.trust.crt
</pre>

<p>
拷贝 Archlinux 的 CA 证书文件 /etc/ssl/certs/ca-certificates.crt 到嵌入式 linux 设备，
curl 编译时需要通过 <code>--with-ca-bundle</code> 指定默认的 CA 证书文件，运行时通过 <code>--cacert</code> 选项指定
</p>
<pre class="example">
# curl https://www.google.com --cacert /etc/ssl/certs/ca-certificates.crt
&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;
&lt;H1&gt;302 Moved&lt;/H1&gt;
The document has moved
&lt;A HREF="https://www.google.com.hk/?gfe_rd=cr&amp;amp;ei=LoDmVuXlB9TC8gecrZv4DA"&gt;here&lt;/A&gt;.
&lt;/BODY&gt;&lt;/HTML&gt;
</pre>
</div>
</div>

<div id="outline-container-org15cb70b" class="outline-2">
<h2 id="org15cb70b">更新 CA 证书</h2>
<div class="outline-text-2" id="text-org15cb70b">
</div>
<div id="outline-container-org255cd88" class="outline-3">
<h3 id="org255cd88">使用 openwrt 的嵌入式设备</h3>
<div class="outline-text-3" id="text-org255cd88">
<p>
可以通过 opkg 进行安装和更新 CA 证书文件
</p>

<div class="org-src-container">
<pre class="src src-sh">opkg install ca-certificates
opkg upgrade ca-certificates
</pre>
</div>
</div>
</div>

<div id="outline-container-org105a8fa" class="outline-3">
<h3 id="org105a8fa">使用 linux 的嵌入式设备</h3>
<div class="outline-text-3" id="text-org105a8fa">
<p>
如果没有软件包管理器，可以从 linux 服务器上定时下载最新的 CA 证书文件。
</p>

<p>
linux 服务器上的 CA 证书文件可以通过两种方式更新
</p>

<ul class="org-ul">
<li><p>
更新 ca-certificates 软件包
</p>

<p>
CentOS 6.4
</p>
<div class="org-src-container">
<pre class="src src-sh">yum update ca-certificates
</pre>
</div>

<p>
CentOS 6.4 的 CA 证书文件 /etc/pki/tls/certs/ca-bundle.crt
</p></li>

<li><p>
<a href="https://github.com/curl/curl/raw/master/lib/mk-ca-bundle.pl">mk-ca-bundle.pl</a> 脚本生成最新的 CA 证书文件
</p>

<p>
该脚本生成的 CA 证书文件包含 mozilla 维护的证书
</p>

<div class="org-src-container">
<pre class="src src-sh">mk-ca-bundle.pl -q ca-bundle.crt
</pre>
</div></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-orgee43640" class="outline-2">
<h2 id="orgee43640">参考</h2>
<div class="outline-text-2" id="text-orgee43640">
<ul class="org-ul">
<li><a href="https://en.wikipedia.org/wiki/Root_certificate">Root certificate - Wikipedia, the free encyclopedia</a></li>

<li><a href="https://curl.haxx.se/docs/sslcerts.html">cURL - SSL CA Certificates</a></li>

<li><a href="https://gist.github.com/jjb/996292">How to securely acquire the Mozilla root certificate bundle for use with curl, Net::HTTP, etc.</a></li>

<li><a href="https://curl.haxx.se/docs/mk-ca-bundle.html">mk-ca-bundle</a></li>

<li><a href="https://wiki.openwrt.org/doc/howto/wget-ssl-certs">SSL and Certificates in wget - OpenWrt Wiki</a></li>

<li><a href="https://www.happyassassin.net/2015/01/12/a-note-about-ssltls-trusted-certificate-stores-and-platforms/">A note about SSL/TLS trusted certificate stores, and platforms (OpenSSL and GnuTLS)</a></li>

<li><a href="http://searchsecurity.techtarget.com/definition/certificate-authority">What is certificate authority (CA)? - Definition from WhatIs.com</a></li>

<li><a href="https://projects.archlinux.org/svntogit/packages.git/tree/trunk/PKGBUILD?h=packages/curl">PKGBUILD of curl on Archlinux</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSL_read及SSL_write支持超时]]></title>
            <link>/article/ssl_read-53ca-ssl_write-652f63018d8565f6.html</link>
            <guid>/article/ssl_read-53ca-ssl_write-652f63018d8565f6.html</guid>
            <pubDate>Tue, 27 Jan 2015 06:29:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
原始的socket编程中 <code>read</code> 、 <code>write</code> 支持超时是很容易实现的，如使用 <code>select</code> 或者 <code>setsockopt</code> 设置读写超时并在 <code>read</code> 和 <code>write</code> 出错后根据 <code>errno</code> 判断是否为超时引起。
</p>

<p>
但是在 <code>SSL</code> 编程中对底层socket调用 <code>select</code> 以及使用 <code>errno</code> 行为是未定义的。
</p>

<p>
使用 <code>setsockopt</code> 在底层的socket上设置读写后， <code>SSL_read</code> 、 <code>SSL_write</code> 出错会返回ssl错误码 <code>SSL_ERROR_WANT_READ</code> 或 <code>SSL_ERROR_WANT_WRITE</code> ，但是被信号中断或者底层SSL需要重新握手也会导致 <code>SSL_read</code> 、 <code>SSL_write</code> 返回同样的ssl错误码。
</p>

<p>
如果能够将信号屏蔽掉，并启用SSL自动重新握手，就能够实现 <code>SSL_read</code> 、 <code>SSL_write</code> 超时检测。
</p>

<ul class="org-ul">
<li><p>
屏蔽信号
</p>

<p>
忽略应用产生的信号，如：
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00578E; font-weight: bold;">signal</span>(<span style="color: #2F8B58; font-weight: bold;">SIGPIPE</span>, <span style="color: #2F8B58; font-weight: bold;">SIG_IGN</span>);
<span style="color: #00578E; font-weight: bold;">signal</span>(<span style="color: #2F8B58; font-weight: bold;">SIGCHLD</span>, <span style="color: #2F8B58; font-weight: bold;">SIG_IGN</span>);
</pre>
</div></li>

<li><p>
在底层socket上设置超时
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">timeval</span> <span style="color: #0084C8; font-weight: bold;">tv</span>;
tv.tv_sec  = 10;
tv.tv_usec = 0;
<span style="color: #00578E; font-weight: bold;">setsockopt</span>(<span style="color: #2F8B58; font-weight: bold;">sock</span>, <span style="color: #2F8B58; font-weight: bold;">SOL_SOCKET</span>, <span style="color: #2F8B58; font-weight: bold;">SO_SNDTIMEO</span>, (<span style="color: #2F8B58; font-weight: bold;">char</span>*)&amp;tv, <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(<span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">timeval</span>));
<span style="color: #00578E; font-weight: bold;">setsockopt</span>(<span style="color: #2F8B58; font-weight: bold;">sock</span>, <span style="color: #2F8B58; font-weight: bold;">SOL_SOCKET</span>, <span style="color: #2F8B58; font-weight: bold;">SO_RCVTIMEO</span>, (<span style="color: #2F8B58; font-weight: bold;">char</span>*)&amp;tv, <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(<span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">timeval</span>));
</pre>
</div></li>

<li><p>
启用自动重新握手
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00578E; font-weight: bold;">SSL_CTX_set_mode</span>(<span style="color: #2F8B58; font-weight: bold;">ctx</span>, <span style="color: #2F8B58; font-weight: bold;">SSL_MODE_AUTO_RETRY</span>);
</pre>
</div></li>

<li><p>
<code>SSL_read</code> 和 <code>SSL_write</code> 判断是否超时出错
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">readed</span> = SSL_read(ssl, data, size);
<span style="color: #A52A2A; font-weight: bold;">if</span> (readed &lt;= 0) {
    <span style="color: #A52A2A; font-weight: bold;">if</span> (SSL_get_error(ssl, readed) == SSL_ERROR_WANT_READ) {
        <span style="color: #204A87;">// </span><span style="color: #204A87;">timeout</span>
    } <span style="color: #A52A2A; font-weight: bold;">else</span> {
        <span style="color: #204A87;">// </span><span style="color: #204A87;">error</span>
    }
}

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">writed</span> = SSL_write(ssl, data, size);
<span style="color: #A52A2A; font-weight: bold;">if</span> (writed &lt;= 0) {
    <span style="color: #A52A2A; font-weight: bold;">if</span> (SSL_get_error(ssl, writed) == SSL_ERROR_WANT_WRITE) {
        <span style="color: #204A87;">// </span><span style="color: #204A87;">timeout</span>
    } <span style="color: #A52A2A; font-weight: bold;">else</span> {
        <span style="color: #204A87;">// </span><span style="color: #204A87;">error</span>
    }
}
</pre>
</div></li>
</ul>

<div id="outline-container-orgc13f9fb" class="outline-2">
<h2 id="orgc13f9fb">ssl 客户端示例代码</h2>
<div class="outline-text-2" id="text-orgc13f9fb">
<p>
这个示例包括建立连接、读、写，以及超时设置、服务器证书验证。
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;arpa/inet.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;netinet/in.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;openssl/err.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;openssl/ssl.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;openssl/x509_vfy.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;openssl/x509v3.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;stdbool.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;stdint.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;string.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;strings.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;sys/socket.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;unistd.h&gt;</span>

<span style="color: #A020F0;">#define</span> <span style="color: #0084C8; font-weight: bold;">SSL_CLIENT_CAFILE</span> <span style="color: #4E9A06;">"/etc/ssl/certs/ca-certificates.crt"</span>
<span style="color: #A020F0;">#define</span> <span style="color: #0084C8; font-weight: bold;">SSL_CLIENT_CAPATH</span> <span style="color: #4E9A06;">"/etc/ssl/certs/"</span>

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">ssl_client_connect</span>(<span style="color: #2F8B58; font-weight: bold;">uint32_t</span> <span style="color: #0084C8; font-weight: bold;">ip</span>, <span style="color: #2F8B58; font-weight: bold;">uint16_t</span> <span style="color: #0084C8; font-weight: bold;">port</span>, <span style="color: #2F8B58; font-weight: bold;">SSL</span>** <span style="color: #0084C8; font-weight: bold;">ssl</span>, <span style="color: #2F8B58; font-weight: bold;">SSL_CTX</span>** <span style="color: #0084C8; font-weight: bold;">ctx</span>,
                       <span style="color: #2F8B58; font-weight: bold;">uint32_t</span> <span style="color: #0084C8; font-weight: bold;">timeout</span>, <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">verify_host</span>) {
  <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">sock</span>;
  <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">sockaddr_in</span> <span style="color: #0084C8; font-weight: bold;">dest</span>;

  <span style="color: #A52A2A; font-weight: bold;">if</span> ((sock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
    fprintf(stderr, <span style="color: #4E9A06;">"create remote socket fd failed!"</span>);
    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
  }

  bzero(&amp;dest, <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(dest));
  dest.sin_family = AF_INET;
  dest.sin_port = htons(port);
  dest.sin_addr.s_addr = ip;

  <span style="color: #2F8B58; font-weight: bold;">char</span> <span style="color: #0084C8; font-weight: bold;">ip_string</span>[INET_ADDRSTRLEN] = {<span style="color: #4E9A06;">'\0'</span>};
  inet_ntop(AF_INET, &amp;dest.sin_addr, ip_string, <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(ip_string));

  <span style="color: #A52A2A; font-weight: bold;">if</span> (connect(sock, (<span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">sockaddr</span>*)&amp;dest, <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(dest)) != 0) {
    fprintf(stderr, <span style="color: #4E9A06;">"connect to %s:%d failed: %s"</span>, ip_string, port,
            strerror(errno));
    close(sock);
    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
  }

  fprintf(stderr, <span style="color: #4E9A06;">"tcp connect to %s:%d success"</span>, ip_string, port);

  <span style="color: #204A87;">/* </span><span style="color: #204A87;">&#35774;&#32622;send/recv&#30340;&#36229;&#26102;&#26102;&#38388;</span><span style="color: #204A87;"> */</span>
  <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">timeval</span> <span style="color: #0084C8; font-weight: bold;">tv</span> = {<span style="color: #4E9A06;">'\0'</span>};
  tv.tv_sec = timeout;
  tv.tv_usec = 0;
  <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">succ</span> = setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (<span style="color: #2F8B58; font-weight: bold;">char</span>*)&amp;tv,
                        <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(<span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">timeval</span>));
  <span style="color: #A52A2A; font-weight: bold;">if</span> (succ != 0) {
    fprintf(stderr, <span style="color: #4E9A06;">"set send timeout failed: %s"</span>, strerror(errno));
    close(sock);
    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
  }
  succ = setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (<span style="color: #2F8B58; font-weight: bold;">char</span>*)&amp;tv,
                    <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(<span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">timeval</span>));
  <span style="color: #A52A2A; font-weight: bold;">if</span> (succ != 0) {
    fprintf(stderr, <span style="color: #4E9A06;">"set recv timeout failed: %s"</span>, strerror(errno));
    close(sock);
    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
  }

  <span style="color: #204A87;">/* </span><span style="color: #204A87;">&#22522;&#20110; ctx &#20135;&#29983;&#19968;&#20010;&#26032;&#30340; SSL</span><span style="color: #204A87;"> */</span>
  *ctx = SSL_CTX_new(SSLv23_client_method());
  <span style="color: #A52A2A; font-weight: bold;">if</span> (<span style="color: #F5666D;">NULL</span> == *ctx) {
    fprintf(stderr, <span style="color: #4E9A06;">"new ssl ctx failed"</span>);
    ERR_print_errors_fp(stderr);
    close(sock);
    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
  }

  <span style="color: #204A87;">/* </span><span style="color: #204A87;">&#21551;&#29992;&#33258;&#21160;&#37325;&#26032;&#25569;&#25163;&#65292;&#31105;&#27490;SSL_read&#25110;SSL_write&#22240;SSL&#37325;&#26032;&#25569;&#25163;&#25552;&#21069;&#36820;&#22238;&#65292;&#23548;&#33268;&#26080;&#27861;&#21306;&#20998;&#26159;&#21542;&#20026;recv&#36229;&#26102;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;">*/</span>
  <span style="color: #A52A2A; font-weight: bold;">if</span> (!(SSL_CTX_set_mode(*ctx, SSL_MODE_AUTO_RETRY) &amp; SSL_MODE_AUTO_RETRY)) {
    fprintf(stderr, <span style="color: #4E9A06;">"set ssl auto retry mode failed"</span>);
    ERR_print_errors_fp(stderr);
    close(sock);
    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
  }

  <span style="color: #204A87;">/* </span><span style="color: #204A87;">&#39564;&#35777;&#26381;&#21153;&#22120;&#39564;&#20070;</span><span style="color: #204A87;"> */</span>
  <span style="color: #A52A2A; font-weight: bold;">if</span> (verify_host) {
    <span style="color: #A52A2A; font-weight: bold;">if</span> (!SSL_CTX_load_verify_locations(*ctx, SSL_CLIENT_CAFILE,
                                       SSL_CLIENT_CAPATH)) {
      fprintf(
          stderr,
          <span style="color: #4E9A06;">"failed to load certificate verify locations. CAfile(%s) CApath(%s)"</span>,
          SSL_CLIENT_CAFILE, SSL_CLIENT_CAPATH);
      ERR_print_errors_fp(stderr);
      close(sock);
      <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
    }

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">&#39564;&#35777;&#26381;&#21153;&#22120;&#20027;&#26426;&#21517;&#31216;&#65292;&#21442;&#32771;&#65306;https://wiki.openssl.org/index.php/Hostname_validation</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;">*/</span>
    <span style="color: #2F8B58; font-weight: bold;">X509_VERIFY_PARAM</span>* <span style="color: #0084C8; font-weight: bold;">param</span> = SSL_CTX_get0_param(*ctx);
    <span style="color: #204A87;">/*</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS &#36873;&#39033;&#20250;&#23548;&#33268; Hostname mismatch</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> &#38169;&#35823;&#65292;&#27880;&#25481;&#20808; X509_VERIFY_PARAM_set_hostflags(param,</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> </span><span style="color: #204A87;"> */</span>
    X509_VERIFY_PARAM_set1_host(param, verify_host, 0);

    SSL_CTX_set_verify(*ctx, SSL_VERIFY_PEER, <span style="color: #F5666D;">NULL</span>);
  }

  *ssl = SSL_new(*ctx);
  <span style="color: #A52A2A; font-weight: bold;">if</span> (<span style="color: #F5666D;">NULL</span> == *ssl) {
    fprintf(stderr, <span style="color: #4E9A06;">"new ssl failed"</span>);
    ERR_print_errors_fp(stderr);
    SSL_CTX_free(*ctx);
    *ctx = <span style="color: #F5666D;">NULL</span>;
    close(sock);
    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
  }

  <span style="color: #A52A2A; font-weight: bold;">if</span> (1 != SSL_set_fd(*ssl, sock)) {
    fprintf(stderr, <span style="color: #4E9A06;">"set ssl fd failed"</span>);
    ERR_print_errors_fp(stderr);
    SSL_free(*ssl);
    *ssl = <span style="color: #F5666D;">NULL</span>;
    SSL_CTX_free(*ctx);
    *ctx = <span style="color: #F5666D;">NULL</span>;
    close(sock);
    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
  }

  <span style="color: #204A87;">/* </span><span style="color: #204A87;">&#24314;&#31435; SSL &#36830;&#25509;</span><span style="color: #204A87;"> */</span>
  <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">ret</span> = SSL_connect(*ssl);
  <span style="color: #A52A2A; font-weight: bold;">if</span> (ret &lt;= 0) {
    <span style="color: #2F8B58; font-weight: bold;">char</span> <span style="color: #0084C8; font-weight: bold;">error</span>[128] = {<span style="color: #4E9A06;">'\0'</span>};
    ERR_error_string_n(ERR_get_error(), error, <span style="color: #A52A2A; font-weight: bold;">sizeof</span>(error));
    fprintf(stderr, <span style="color: #4E9A06;">"ssl connect to %s:%d failed(%d) error(%s) errno(%d)"</span>,
            ip_string, port, SSL_get_error(*ssl, ret), error, errno);
    <span style="color: #A52A2A; font-weight: bold;">if</span> (verify_host) {
      <span style="color: #2F8B58; font-weight: bold;">long</span> <span style="color: #0084C8; font-weight: bold;">verify_result</span> = SSL_get_verify_result(*ssl);
      <span style="color: #A52A2A; font-weight: bold;">if</span> (verify_result != X509_V_OK) {
        fprintf(stderr, <span style="color: #4E9A06;">"ssl certificate error(%s)"</span>,
                X509_verify_cert_error_string(verify_result));
      }
    }
    SSL_free(*ssl);
    *ssl = <span style="color: #F5666D;">NULL</span>;
    SSL_CTX_free(*ctx);
    *ctx = <span style="color: #F5666D;">NULL</span>;
    close(sock);
    <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
  }

  fprintf(stderr, <span style="color: #4E9A06;">"ssl connect to %s:%d success"</span>, ip_string, port);

  <span style="color: #A52A2A; font-weight: bold;">return</span> sock;
}

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">ssl_client_read</span>(<span style="color: #2F8B58; font-weight: bold;">SSL</span>* <span style="color: #0084C8; font-weight: bold;">ssl</span>, <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">data</span>, <span style="color: #2F8B58; font-weight: bold;">uint32_t</span> <span style="color: #0084C8; font-weight: bold;">nbytes</span>, <span style="color: #2F8B58; font-weight: bold;">uint32_t</span> <span style="color: #0084C8; font-weight: bold;">timeout</span>) {
  <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">readed</span>;
  <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">remaining</span> = nbytes;

  <span style="color: #A52A2A; font-weight: bold;">while</span> (remaining) {
    readed = SSL_read(ssl, data + (nbytes - remaining), remaining);
    <span style="color: #A52A2A; font-weight: bold;">if</span> (readed &lt;= 0) {
      fprintf(stderr, <span style="color: #4E9A06;">"ssl read error(%d) readed(%d) errno(%d)"</span>,
              SSL_get_error(ssl, readed), readed, errno);
      <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
    }
    remaining -= readed;
  }

  <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">ssl_client_write</span>(<span style="color: #2F8B58; font-weight: bold;">SSL</span>* <span style="color: #0084C8; font-weight: bold;">ssl</span>, <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">data</span>, <span style="color: #2F8B58; font-weight: bold;">uint32_t</span> <span style="color: #0084C8; font-weight: bold;">nbytes</span>, <span style="color: #2F8B58; font-weight: bold;">uint32_t</span> <span style="color: #0084C8; font-weight: bold;">timeout</span>) {
  <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">writed</span>;
  <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">remaining</span> = nbytes;

  <span style="color: #A52A2A; font-weight: bold;">while</span> (remaining) {
    writed = SSL_write(ssl, data + (nbytes - remaining), remaining);
    <span style="color: #A52A2A; font-weight: bold;">if</span> (writed &lt;= 0) {
      fprintf(stderr, <span style="color: #4E9A06;">"ssl write error(%d) writed(%d) errno(%d)"</span>,
              SSL_get_error(ssl, writed), writed, errno);
      <span style="color: #A52A2A; font-weight: bold;">return</span> -1;
    }
    remaining -= writed;
  }

  <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}
</pre>
</div>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSL双方系统时间不一致导致的SSL连接失败及其解决方案]]></title>
            <link>/article/ssl-53cc65b97cfb7edf65f695f44e0d4e0081f45bfc81f47684-ssl-8fde63a559318d2553ca517689e351b365b96848.html</link>
            <guid>/article/ssl-53cc65b97cfb7edf65f695f44e0d4e0081f45bfc81f47684-ssl-8fde63a559318d2553ca517689e351b365b96848.html</guid>
            <pubDate>Fri, 25 Jul 2008 09:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在产品使用中，实施人员常常报告服务器与客户端无法连接，最终查明原因是双方的时间设置不一致。OpenSSL证书有一个有效时间段，当客户端或服务器的系统时间不在这个时间段内时SSL会因证书验证失败而无法连接。在实施中系统时间错误是很常见的，因不能上网而未开时间自动同步、bios没电了、客户疏忽等原因都会导致系统时间设置错误。如果连接失败后再查看系统时间设置进行故障排查终归是一件麻烦的事情。
</p>

<p>
解决这个问题有以下几个办法：
</p>

<ul class="org-ul">
<li><p>
将证书的有效期设置得够大（如：1970-2099）
</p>

<p>
这样估计可以在一定程度上解决这个问题，不过这也是个馊主意，一般申请的证书总会有一个合理的有效期。
</p></li>

<li><p>
检测及必要时自动同步客户端与服务器的时间
</p>

<p>
通过用wireshake抓包分析SSL建立连接的过程，发现在SSL握手过程中，会向对方传送本机的系统时间。因此一个显而易见的办法就是，当连接过程中检测到证书过期，将客户端的时间同步为服务器端的时间，再重连即可。
</p>

<p>
下面是具体的示例代码：
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;openssl/ssl.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;openssl/bio.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;openssl/err.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;winsock2.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;stdio.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;string.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;time.h&gt;</span>

<span style="color: #A52A2A; font-weight: bold;">typedef</span> <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">_TimeInfo</span>
{
    <span style="color: #2F8B58; font-weight: bold;">time_t</span> <span style="color: #0084C8; font-weight: bold;">client</span>;  <span style="color: #204A87;">/*</span><span style="color: #204A87;">&#23458;&#25143;&#31471;&#30340;&#26102;&#38388;</span><span style="color: #204A87;">*/</span>
    <span style="color: #2F8B58; font-weight: bold;">time_t</span> <span style="color: #0084C8; font-weight: bold;">server</span>;  <span style="color: #204A87;">/*</span><span style="color: #204A87;">&#26381;&#21153;&#22120;&#30340;&#26102;&#38388;</span><span style="color: #204A87;">*/</span>
} <span style="color: #2F8B58; font-weight: bold;">TimeInfo</span>;

<span style="color: #204A87;">/**</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* &#21516;&#27493;&#31995;&#32479;&#26102;&#38388;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">*/</span>
<span style="color: #2F8B58; font-weight: bold;">BOOL</span> <span style="color: #00578E; font-weight: bold;">syncSystemTime</span>(<span style="color: #2F8B58; font-weight: bold;">time_t</span> <span style="color: #0084C8; font-weight: bold;">t</span>)
{
    <span style="color: #2F8B58; font-weight: bold;">SYSTEMTIME</span> <span style="color: #0084C8; font-weight: bold;">st</span>;
    <span style="color: #2F8B58; font-weight: bold;">FILETIME</span>   <span style="color: #0084C8; font-weight: bold;">ft</span>;<span style="text-decoration: underline;">  </span>
    <span style="color: #2F8B58; font-weight: bold;">LONGLONG</span>   <span style="color: #0084C8; font-weight: bold;">ll</span>;<span style="text-decoration: underline;">  </span>

    ll = Int32x32To64(t, 10000000) + 116444736000000000; <span style="color: #204A87;">//</span><span style="color: #204A87;">1970.01.01</span><span style="text-decoration: underline;">  </span>

    ft.dwLowDateTime  = (<span style="color: #2F8B58; font-weight: bold;">DWORD</span>)ll;<span style="text-decoration: underline;">  </span>
    ft.dwHighDateTime = (<span style="color: #2F8B58; font-weight: bold;">DWORD</span>)(ll &gt;&gt; 32);<span style="text-decoration: underline;">  </span>

    <span style="color: #A52A2A; font-weight: bold;">return</span> FileTimeToSystemTime(&amp;ft, &amp;st) &amp;&amp; SetSystemTime(&amp;st);
}

<span style="color: #204A87;">/**</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">* &#33719;&#21462;SSL&#25569;&#25163;&#36807;&#31243;&#20013;&#26381;&#21153;&#22120;&#19982;&#23458;&#25143;&#31471;&#21452;&#26041;&#30340;&#31995;&#32479;&#26102;&#38388;.</span>
<span style="color: #204A87;"> </span><span style="color: #204A87;">*/</span>
<span style="color: #2F8B58; font-weight: bold;">void</span> <span style="color: #00578E; font-weight: bold;">getSSLHandleShakeTimeInfo</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">write_p</span>,
                               <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">version</span>,
                               <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">content_type</span>,
                               <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">unsigned</span> <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">buf</span>,
                               <span style="color: #2F8B58; font-weight: bold;">size_t</span> <span style="color: #0084C8; font-weight: bold;">len</span>,
                               <span style="color: #2F8B58; font-weight: bold;">SSL</span> *<span style="color: #0084C8; font-weight: bold;">ssl</span>,
                               <span style="color: #2F8B58; font-weight: bold;">TimeInfo</span> *<span style="color: #0084C8; font-weight: bold;">ti</span>)
{
    <span style="color: #A52A2A; font-weight: bold;">if</span>(content_type != 22)   <span style="color: #204A87;">//</span><span style="color: #204A87;">require handshake message</span>
        <span style="color: #A52A2A; font-weight: bold;">return</span>;
    <span style="color: #A52A2A; font-weight: bold;">if</span>(len &lt; 42)
        <span style="color: #A52A2A; font-weight: bold;">return</span>;
    <span style="color: #A52A2A; font-weight: bold;">if</span>(buf[0] == 1)          <span style="color: #204A87;">//</span><span style="color: #204A87;">ClientHello Message send from client to server</span>
        ti-&gt;client = htonl(*((u_long*)(buf + 6)));
    <span style="color: #A52A2A; font-weight: bold;">else</span> <span style="color: #A52A2A; font-weight: bold;">if</span>(buf[0] == 2)     <span style="color: #204A87;">//</span><span style="color: #204A87;">ServerHello Message send from server to client</span>
        ti-&gt;server = htonl(*((u_long*)(buf + 6)));
    <span style="color: #A52A2A; font-weight: bold;">else</span>
        <span style="color: #A52A2A; font-weight: bold;">return</span>;
}

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>()
{
    <span style="color: #2F8B58; font-weight: bold;">BIO</span> * <span style="color: #0084C8; font-weight: bold;">bio</span>;
    <span style="color: #2F8B58; font-weight: bold;">SSL</span> * <span style="color: #0084C8; font-weight: bold;">ssl</span>;
    <span style="color: #2F8B58; font-weight: bold;">SSL_CTX</span> * <span style="color: #0084C8; font-weight: bold;">ctx</span>;
    <span style="color: #2F8B58; font-weight: bold;">TimeInfo</span> <span style="color: #0084C8; font-weight: bold;">timeInfo</span> = {-1, -1};
    <span style="color: #2F8B58; font-weight: bold;">BOOL</span> <span style="color: #0084C8; font-weight: bold;">timeSynced</span> = FALSE;
    <span style="color: #2F8B58; font-weight: bold;">long</span> <span style="color: #0084C8; font-weight: bold;">result</span>;

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">Set up the library</span><span style="color: #204A87;"> */</span>
    SSL_library_init();
    ERR_load_BIO_strings();
    SSL_load_error_strings();

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">Set up the SSL context</span><span style="color: #204A87;"> */</span>
    ctx = SSL_CTX_new(SSLv3_client_method());
    <span style="color: #A52A2A; font-weight: bold;">if</span>(ctx == <span style="color: #F5666D;">NULL</span>)
    {
        fprintf(stderr, <span style="color: #4E9A06;">"Error new SSL_CTX\n"</span>);
        ERR_print_errors_fp(stderr);
        SSL_CTX_free(ctx);
        <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
    }

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">Get Server and Client system time via SSL Handshake</span><span style="color: #204A87;"> */</span>
    SSL_CTX_set_msg_callback(ctx, getSSLHandleShakeTimeInfo);
    SSL_CTX_set_msg_callback_arg(ctx, &amp;timeInfo);

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">Load the trust store</span><span style="color: #204A87;"> */</span>
    <span style="color: #A52A2A; font-weight: bold;">if</span>(! SSL_CTX_load_verify_locations(ctx, <span style="color: #4E9A06;">".\\certs\\cacert.pem"</span>, <span style="color: #F5666D;">NULL</span>))
    {
        fprintf(stderr, <span style="color: #4E9A06;">"Error loading trust store\n"</span>);
        ERR_print_errors_fp(stderr);
        SSL_CTX_free(ctx);
        <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
    }

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">Setup the connection</span><span style="color: #204A87;"> */</span>
    bio = BIO_new_ssl_connect(ctx);

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">Set the SSL_MODE_AUTO_RETRY flag</span><span style="color: #204A87;"> */</span>
    BIO_get_ssl(bio, &amp; ssl);
    SSL_set_mode(ssl, SSL_MODE_AUTO_RETRY);

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">Create and setup the connection</span><span style="color: #204A87;"> */</span>
    BIO_set_conn_hostname(bio, <span style="color: #4E9A06;">"192.168.1.5:5555"</span>);
    <span style="color: #A52A2A; font-weight: bold;">if</span>(BIO_do_connect(bio) &lt;= 0)
    {
        fprintf(stderr, <span style="color: #4E9A06;">"Error attempting to connect\n"</span>);
        ERR_print_errors_fp(stderr);
        BIO_free_all(bio);
        SSL_CTX_free(ctx);
        <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
    }

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">Check the certificate</span><span style="color: #204A87;"> */</span>
    <span style="color: #A52A2A; font-weight: bold;">switch</span>(SSL_get_verify_result(ssl))
    {
    <span style="color: #A52A2A; font-weight: bold;">case</span> X509_V_OK:
        <span style="color: #A52A2A; font-weight: bold;">break</span>;
    <span style="color: #A52A2A; font-weight: bold;">case</span> X509_V_ERR_CERT_NOT_YET_VALID:
    <span style="color: #A52A2A; font-weight: bold;">case</span> X509_V_ERR_CERT_HAS_EXPIRED:
        <span style="color: #A52A2A; font-weight: bold;">if</span>(timeInfo.server != -1 &amp;&amp; timeInfo.client != -1)
        {
            printf(<span style="color: #4E9A06;">"&#24403;&#21069;&#23458;&#25143;&#31471;&#26102;&#38388;: %s"</span>, ctime(&amp;timeInfo.client));
            printf(<span style="color: #4E9A06;">"&#24403;&#21069;&#26381;&#21153;&#22120;&#26102;&#38388;: %s"</span>, ctime(&amp;timeInfo.server));
            printf(<span style="color: #4E9A06;">"&#23581;&#35797;&#19982;&#26381;&#21153;&#22120;&#26102;&#38388;&#21516;&#27493;"</span>);

            <span style="color: #A52A2A; font-weight: bold;">if</span>(syncSystemTime(timeInfo.server))
                printf(<span style="color: #4E9A06;">"&#25104;&#21151;\n"</span>);
            <span style="color: #A52A2A; font-weight: bold;">else</span>
                printf(<span style="color: #4E9A06;">"&#22833;&#36133;\n"</span>);
            printf(<span style="color: #4E9A06;">"&#35831;&#37325;&#35797;&#36830;&#25509;&#26381;&#21153;&#22120;&#65281;\n"</span>);
        }
    <span style="color: #A52A2A; font-weight: bold;">default</span>:
        fprintf(stderr, <span style="color: #4E9A06;">"Certificate verification error: %i\n"</span>, SSL_get_verify_r<span style="text-decoration: underline;">esult(ssl));</span>
        BIO_free_all(bio);
        SSL_CTX_free(ctx);
        <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
    }

    <span style="color: #204A87;">/* </span><span style="color: #204A87;">Close the connection and free the context</span><span style="color: #204A87;"> */</span>
    BIO_free_all(bio);
    SSL_CTX_free(ctx);
    <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}
</pre>
</div></li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>