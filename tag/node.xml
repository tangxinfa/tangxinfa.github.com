<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>node - 看看俺 – KanKanAn.com</title>
        <description>记我所思，忆我所为。</description>
        <link>http://blog.kankanan.com/tag/node.xml</link>
        <lastBuildDate>Tue, 11 Oct 2016 12:30:50 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <image>
            <title>node - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/node.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <generator>Feed for Node.js</generator>
        <category>技术</category>
        <item>
            <title><![CDATA[解决 DNS 服务器不稳定引起的服务超时问题]]></title>
            <link>/article/89e351b3-dns-670d52a156684e0d7a335b9a5f158d777684670d52a18d8565f695ee9898.html</link>
            <guid>/article/89e351b3-dns-670d52a156684e0d7a335b9a5f158d777684670d52a18d8565f695ee9898.html</guid>
            <pubDate>Tue, 11 Oct 2016 12:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
微服务架构下，服务间常常会互相调用，调用前要先解析域名，如果 DNS 服务器不稳定则会导致服务响应超时。
</p>

<p>
DNS 服务器一般由运维人员或者数据中心指定，属于不可控的因素，可以在程序内做 DNS 缓存缓解问题。
</p>

<p>
通过 <a href="https://github.com/yahoo/dnscache">dnscache</a> 模块可以为 node.js 应用全局启用 DNS 缓存。
</p>

<ul class="org-ul">
<li>安装

<div class="org-src-container">

<pre class="src src-sh">npm install dnscache
</pre>
</div>
</li>
</ul>


<ul class="org-ul">
<li>启用 DNS 缓存

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">dnscache</span> = require(<span style="color: #8abeb7;">'dnscache'</span>)({
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"enable"</span> : <span style="color: #81a2be;">true</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"ttl"</span> : 300,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"cachesize"</span> : 1000
});
</pre>
</div>
</li>
</ul>


<p>
启用 DNS 缓存后，只会在缓存过期后才会重新解析域名，DNS 服务器不稳定造成的影响相应减少。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ioredis Sentinel 实现就近访问]]></title>
            <link>/article/ioredis-sentinel-5b9e73b05c318fd18bbf95ee.html</link>
            <guid>/article/ioredis-sentinel-5b9e73b05c318fd18bbf95ee.html</guid>
            <pubDate>Sat, 10 Sep 2016 10:12:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="https://github.com/luin/ioredis/">ioredis</a> 支持按角色（Role）进行连接</h2>
<div class="outline-text-2" id="text-1">
<p>
引用自 <a href="https://github.com/luin/ioredis/">ioredis</a>
</p>
<blockquote>
<p>
ioredis 保证即使故障转移（failover）后你连接的结点依然是 master 。当故障转移发生，ioredis 会向 sentinels 询问新的 master 结点并连接，而不是尝试重连失效的结点（恢复可用后它会降级为 slave）。故障转移期间发送的所有命令将放入队列，当新连接建立后再执行，不会丢失命令。
</p>

<p>
可以指定 role 选项为 slave 以连接 slave 结点，ioredis 将尝试连接指定 master 的一个随机 slave 结点，并且保证连接的结点总是 slave 角色。当连接的结点因为故障转移而提升为 master，ioredis 将从该结点断开连接并询问 sentinels 获取另一个 slave 结点进行连接。
</p>

<p>
ioredis guarantees that the node you connected to is always a master even after a failover. When a failover happens, instead of trying to reconnect to the failed node (which will be demoted to slave when it's available again), ioredis will ask sentinels for the new master node and connect to it. All commands sent during the failover are queued and will be executed when the new connection is established so that none of the commands will be lost.
</p>

<p>
It's possible to connect to a slave instead of a master by specifying the option role with the value of slave, and ioredis will try to connect to a random slave of the specified master, with the guarantee that the connected node is always a slave. If the current node is promoted to master due to a failover, ioredis will disconnect from it and ask the sentinels for another slave node to connect to.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a href="https://github.com/luin/ioredis/">ioredis</a> 会随机选择一个 Slave</h2>
<div class="outline-text-2" id="text-2">
<p>
引用自 ioredis/lib/connectors/sentinel_connector.js
</p>
<div class="org-src-container">

<pre class="src src-js">SentinelConnector.<span style="color: #81a2be;">prototype</span>.resolveSlave = <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">client</span>, <span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span> client.sentinel(<span style="color: #8abeb7;">'slaves'</span>, <span style="color: #81a2be;">this</span>.options.name, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">result</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.disconnect();
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span> <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">selectedSlave</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (Array.isArray(result)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span> <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">availableSlaves</span> = [];
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span> <span style="color: #b5bd68;">for</span> (<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">i</span> = 0; i &lt; result.length; ++i) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">slave</span> = utils.packObject(result[i]);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (slave.flags &amp;&amp; !slave.flags.match(<span style="color: #8abeb7;">/(disconnected|s_down|o_down)/</span>)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span> availableSlaves.push(slave);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span> }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span> selectedSlave = _.sample(availableSlaves);
<span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   callback(<span style="color: #81a2be;">null</span>, selectedSlave ? { host: selectedSlave.ip, port: selectedSlave<span style="text-decoration: underline;">.port } : </span><span style="color: #81a2be; text-decoration: underline;">null</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span> });
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">优先选择本地 Slave （不使用 preferredSlaves 选项）</h2>
<div class="outline-text-2" id="text-3">
<p>
相关讨论
</p>

<p>
<a href="https://github.com/luin/ioredis/issues/38">rfc - a preferred slave list in a sentinel setup · Issue #38 · luin/ioredis</a>
</p>

<p>
preferredSlaves 选项已经在 2.4.0 版实现，下面的代码依赖之前的 ioredis 版本代码，仅供参考，不建议使用。
</p>


<p>
尝试自已实现优先选择本地 Slave 算法：按 IP 地址进行推断，前三段一样则认为是本地。
</p>

<p>
假设本机 IP 为 11.22.33.1，则 Slave 11.22.33.123 由于前三段（11.22.33）与本机相同被认定为是本地 Slave，而 Slave 11.22.99.1 由于前三段（11.22.99）与本机不同被认定为是异地 Slave。
</p>

<p>
实现如下
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">Redis</span>     = require(<span style="color: #8abeb7;">'ioredis'</span>),
<span style="color: #969896; background-color: #1d1f21;"> </span>   utils     = require(<span style="color: #8abeb7;">'ioredis/lib/utils'</span>),
<span style="color: #969896; background-color: #1d1f21;"> </span>   _         = require(<span style="color: #8abeb7;">'lodash'</span>),
<span style="color: #969896; background-color: #1d1f21;"> </span>   net       = require(<span style="color: #8abeb7;">'net'</span>),
<span style="color: #969896; background-color: #1d1f21;"> </span>   assert    = require(<span style="color: #8abeb7;">'assert'</span>);


<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* A SentinelConnector.prototype.resolveSlave replacement, prefer local slave.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">client</span><span style="color: #969896; font-style: italic;"> redis client.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">callback</span><span style="color: #969896; font-style: italic;"> function (err, slave) called when done.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*                 slave with a extra boolean field "local_node" to indicate sla</span><span style="color: #969896; font-style: italic; text-decoration: underline;">ve is in local network.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">resolveSlavePreferLocal</span> (<span style="color: #f0c674;">client</span>, <span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.sentinel(<span style="color: #8abeb7;">'slaves'</span>, <span style="color: #81a2be;">this</span>.options.name, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">result</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.disconnect();
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localIP</span> = client.stream.localAddress;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.disconnect();

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localIPSegments</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Array</span>(4);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (net.isIPv4(localIP)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   localIPSegments = localIP.split(<span style="color: #8abeb7;">'.'</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">selectedSlave</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">local_node</span> = <span style="color: #81a2be;">false</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (Array.isArray(result)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localSlaves</span> = [];
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">remoteSlaves</span> = [];
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">for</span> (<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">i</span> = 0; i &lt; result.length; ++i) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">slave</span> = utils.packObject(result[i]);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (slave.flags &amp;&amp; !slave.flags.match(<span style="color: #8abeb7;">/(disconnected|s_down|o_do</span><span style="color: #8abeb7; text-decoration: underline;">wn)/</span><span style="text-decoration: underline;">)) {</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (net.isIPv4(slave.ip)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">slaveIpSegments</span> = slave.ip.split(<span style="color: #8abeb7;">'.'</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (localIPSegments[0] === slaveIpSegments[0] &amp;&amp;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   localIPSegments[1] === slaveIpSegments[1] &amp;&amp;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   localIPSegments[2] === slaveIpSegments[2]) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   localSlaves.push(slave);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">continue</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   remoteSlaves.push(slave);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   selectedSlave = _.sample(localSlaves.length ? localSlaves : remoteSl<span style="text-decoration: underline;">aves);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   local_node = Boolean(localSlaves.length);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">'redis('</span> + JSON.stringify({name: self.options.name, db: sel<span style="text-decoration: underline;">f.options.db, sentinels: self.options.sentinels}) + </span><span style="color: #8abeb7; text-decoration: underline;">') resolve slave to'</span><span style="text-decoration: underline;"> + (local_node ? </span><span style="color: #8abeb7; text-decoration: underline;">' local'</span><span style="text-decoration: underline;"> : </span><span style="color: #8abeb7; text-decoration: underline;">''</span><span style="text-decoration: underline;">) + </span><span style="color: #8abeb7; text-decoration: underline;">': '</span><span style="text-decoration: underline;"> + selectedSlave.ip + </span><span style="color: #8abeb7; text-decoration: underline;">':'</span><span style="text-decoration: underline;"> + selectedSlave.port);</span>

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   callback(<span style="color: #81a2be;">null</span>, selectedSlave ? { host: selectedSlave.ip, port: selectedS<span style="text-decoration: underline;">lave.port, local_node: local_node } : </span><span style="color: #81a2be; text-decoration: underline;">null</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
};

<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* Prefer connect to local slave.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">client</span><span style="color: #969896; font-style: italic;"> redis client.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@return</span><span style="color: #969896; font-style: italic;"> is this change successful.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">preferLocalSlave</span>(<span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (client.options.role === <span style="color: #8abeb7;">'slave'</span> &amp;&amp; client.connector.resolveSlave) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (client.options.lazyConnect &amp;&amp; client.status == <span style="color: #8abeb7;">'wait'</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.connector.resolveSlave = resolveSlavePreferLocal;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">true</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">'redis client('</span> + JSON.stringify({name: client.options.name<span style="text-decoration: underline;">, db: client.options.db, sentinels: client.options.sentinels}) + </span><span style="color: #8abeb7; text-decoration: underline;">') status unexpected'</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">false</span>;
}
</pre>
</div>

<p>
用法如下
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">options</span> = {name: <span style="color: #8abeb7;">"data"</span>, sentinels: sentinels, db: 0, role: <span style="color: #8abeb7;">"slave"</span>, lazyCon<span style="text-decoration: underline;">nect: </span><span style="color: #81a2be; text-decoration: underline;">true</span><span style="text-decoration: underline;">}</span>
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>(options);
<span style="color: #b5bd68;">if</span> (preferLocalSlave(client)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">"prefer local slave on redis sentinel("</span> + JSON.stringify(option<span style="text-decoration: underline;">s) + </span><span style="color: #8abeb7; text-decoration: underline;">")"</span><span style="text-decoration: underline;">);</span>
}
</pre>
</div>

<p>
值得注意的是必须指定 <code>lazyConnect: true</code> ，这样才能通过替换 client 中的方法实现功能。 
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">优先选择本地结点 （不使用 preferredSlaves 选项）</h2>
<div class="outline-text-2" id="text-4">
<p>
preferredSlaves 选项已经在 2.4.0 版实现，下面的代码依赖之前的 ioredis 版本代码，仅供参考，不建议使用。
</p>

<p>
假设 redis 是以 1 Master + 1 Slave 方式进行跨机房部署，那么我们希望实现优先连接本地结点（忽略其角色），
连接成功后该连接可能是 Master 也可能是 Slave，我们把它当 Slave 用准没错。
</p>

<p>
在上一节的基础上，实现如下
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* A SentinelConnector.prototype.resolveMaster replacement, indicate the resolve</span><span style="color: #969896; font-style: italic; text-decoration: underline;">d node is local node.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">client</span><span style="color: #969896; font-style: italic;"> redis client.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">callback</span><span style="color: #969896; font-style: italic;"> function (err, master) called when done.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*                 master with a extra boolean field "local_node" to indicate ma</span><span style="color: #969896; font-style: italic; text-decoration: underline;">ster is in local network.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">resolveMasterPreferLocal</span> (<span style="color: #f0c674;">client</span>, <span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.sentinel(<span style="color: #8abeb7;">'get-master-addr-by-name'</span>, <span style="color: #81a2be;">this</span>.options.name, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>,<span style="text-decoration: underline;"> </span><span style="color: #f0c674; text-decoration: underline;">result</span><span style="text-decoration: underline;">) {</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.disconnect();
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localIP</span> = client.stream.localAddress;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.disconnect();

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localIPSegments</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Array</span>(4);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (net.isIPv4(localIP)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   localIPSegments = localIP.split(<span style="color: #8abeb7;">'.'</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">local_node</span> = <span style="color: #81a2be;">false</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (Array.isArray(result)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">ip</span> = result[0];
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (net.isIPv4(ip)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">ipSegments</span> = ip.split(<span style="color: #8abeb7;">'.'</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (localIPSegments[0] === ipSegments[0] &amp;&amp;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   localIPSegments[1] === ipSegments[1] &amp;&amp;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   localIPSegments[2] === ipSegments[2]) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   local_node = <span style="color: #81a2be;">true</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   callback(<span style="color: #81a2be;">null</span>, Array.isArray(result) ? { host: result[0], port: result[1<span style="text-decoration: underline;">], local_node: local_node } : </span><span style="color: #81a2be; text-decoration: underline;">null</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
};

<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* A SentinelConnector.prototype.resolve replacement, prefer resolve to local no</span><span style="color: #969896; font-style: italic; text-decoration: underline;">de.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">endpoint</span><span style="color: #969896; font-style: italic;"> sentinel endpoint to connect.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">callback</span><span style="color: #969896; font-style: italic;"> function (err, node) called when done.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*                 node with a extra boolean field "local_node" to indicate node</span><span style="color: #969896; font-style: italic; text-decoration: underline;"> is in local network.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">resolvePreferLocal</span>(<span style="color: #f0c674;">endpoint</span>, <span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   assert(<span style="color: #81a2be;">this</span>.options.role === <span style="color: #8abeb7;">'slave'</span>);

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>({
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   port: endpoint.port,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   host: endpoint.host,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   retryStrategy: <span style="color: #81a2be;">null</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   enableReadyCheck: <span style="color: #81a2be;">false</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   connectTimeout: <span style="color: #81a2be;">this</span>.options.connectTimeout
<span style="color: #969896; background-color: #1d1f21;"> </span>   });

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #81a2be;">this</span>.resolveSlave(client, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">slave_err</span>, <span style="color: #f0c674;">slave</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (slave_err || !slave ||!slave.local_node) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (slave_err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.error(<span style="color: #8abeb7;">'redis('</span> + JSON.stringify({name: self.options.name<span style="text-decoration: underline;">, db: self.options.db, sentinels: self.options.sentinels}) + </span><span style="color: #8abeb7; text-decoration: underline;">') resolve slave error('</span><span style="text-decoration: underline;"> + slave_err.toString() + </span><span style="color: #8abeb7; text-decoration: underline;">')'</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>({
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   port: endpoint.port,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   host: endpoint.host,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   retryStrategy: <span style="color: #81a2be;">null</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   enableReadyCheck: <span style="color: #81a2be;">false</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   connectTimeout: self.options.connectTimeout
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   });
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> self.resolveMaster(client, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">master_err</span>, <span style="color: #f0c674;">master</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (master_err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.error(<span style="color: #8abeb7;">'redis('</span> + JSON.stringify({name: self.options.<span style="text-decoration: underline;">name, db: self.options.db, sentinels: self.options.sentinels}) + </span><span style="color: #8abeb7; text-decoration: underline;">') resolve master error('</span><span style="text-decoration: underline;"> + master_err.toString() + </span><span style="color: #8abeb7; text-decoration: underline;">')'</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (!master_err &amp;&amp; master &amp;&amp; master.local_node) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">'redis('</span> + JSON.stringify({name: self.options.n<span style="text-decoration: underline;">ame, db: self.options.db, sentinels: self.options.sentinels}) + </span><span style="color: #8abeb7; text-decoration: underline;">') resolve slave to local master: '</span><span style="text-decoration: underline;"> + master.host + </span><span style="color: #8abeb7; text-decoration: underline;">':'</span><span style="text-decoration: underline;"> + master.port);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, master);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   } <span style="color: #b5bd68;">else</span> <span style="color: #b5bd68;">if</span> (slave || master) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, slave || master);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(slave_err || master_err, <span style="color: #81a2be;">null</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   });
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   } <span style="color: #b5bd68;">else</span> {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, slave);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
}

<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* A SentinelConnector.prototype.check replacement, enable connect local master </span><span style="color: #969896; font-style: italic; text-decoration: underline;">when connect to slave.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">checkPreferLocal</span>(<span style="color: #f0c674;">info</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">true</span>;
}

<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* Prefer connect to local redis node, slave first.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">client</span><span style="color: #969896; font-style: italic;"> redis client.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@return</span><span style="color: #969896; font-style: italic;"> is this change successful.</span>
<span style="color: #969896; background-color: #1d1f21; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">preferLocal</span>(<span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (client.options.role === <span style="color: #8abeb7;">'slave'</span> &amp;&amp; client.connector.resolveSlave) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (client.options.lazyConnect &amp;&amp; client.status == <span style="color: #8abeb7;">'wait'</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (client.connector.resolveSlave != resolveSlavePreferLocal) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   preferLocalSlave(client);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.connector.resolveMaster = resolveMasterPreferLocal;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.connector.resolve = resolvePreferLocal;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.connector.check = checkPreferLocal;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">true</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">'redis client('</span> + JSON.stringify({name: client.options.name<span style="text-decoration: underline;">, db: client.options.db, sentinels: client.options.sentinels}) + </span><span style="color: #8abeb7; text-decoration: underline;">') status unexpected'</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">false</span>;
}
</pre>
</div>

<p>
用法如下
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">options</span> = {name: <span style="color: #8abeb7;">"data"</span>, sentinels: sentinels, db: 0, role: <span style="color: #8abeb7;">"slave"</span>, lazyCon<span style="text-decoration: underline;">nect: </span><span style="color: #81a2be; text-decoration: underline;">true</span><span style="text-decoration: underline;">}</span>
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>(options);
<span style="color: #b5bd68;">if</span> (preferLocal(client)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">"prefer local on redis sentinel("</span> + JSON.stringify(options) + <span style="color: #8abeb7;">"</span><span style="color: #8abeb7; text-decoration: underline;">)"</span><span style="text-decoration: underline;">);</span>
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">优先选择本地结点（使用 preferredSlaves 选项）</h2>
<div class="outline-text-2" id="text-5">
<p>
具体实现以及用法请参考 gist <a href="https://gist.github.com/tangxinfa/3361a11acf2270e8388b43bfcb25ce0e">Connect redis with Minimum Distance First(MDF) algorithm</a> ，使用 preferredSlaves 选项实现，要求 ioredis 版本至少为 2.4.0 。
</p>

<p>
与前面的实现有一点不同之处：当本地无 slave 而连上本地 master 后，下次重连时即使本地有 slave 了，也还是会继续重连 master。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 pm2 启动 bash 后台脚本]]></title>
            <link>/article/4f7f7528-pm2-542f52a8-bash-540e53f0811a672c.html</link>
            <guid>/article/4f7f7528-pm2-542f52a8-bash-540e53f0811a672c.html</guid>
            <pubDate>Fri, 02 Sep 2016 02:28:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
我们常常会使用 bash 写一些后台运行的守护进程，然后使用 crontab 实现开机启动并监控，
也可以改为使用 pm2 来运行，功能更强大，更简单规范。
</p>

<p>
使用 pm2 来管理后台进程仍然可以获得其大部分功能，如：
</p>

<ul class="org-ul">
<li>日志管理
</li>
</ul>


<ul class="org-ul">
<li>监控
</li>
</ul>


<ul class="org-ul">
<li>进程管理
</li>
</ul>


<ul class="org-ul">
<li>开机启动
</li>
</ul>


<ul class="org-ul">
<li>崩溃重启
</li>
</ul>


<p>
如下定义 process.json
</p>

<div class="org-src-container">

<pre class="src src-json">{
<span style="color: #969896; background-color: #1d1f21;"> </span> apps : [{
<span style="color: #969896; background-color: #1d1f21;"> </span>   name      : <span style="color: #8abeb7;">"run-log-analyze"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   script    : <span style="color: #8abeb7;">"./tools/run-log-analyze.sh"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   env: {
<span style="color: #969896; background-color: #1d1f21;"> </span>   },
<span style="color: #969896; background-color: #1d1f21;"> </span>   merge_logs: <span style="color: #81a2be;">true</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   error_file: <span style="color: #8abeb7;">"tools/run-log-analyze.log"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   out_file: <span style="color: #8abeb7;">"tools/run-log-analyze.log"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   exec_mode: <span style="color: #8abeb7;">"fork"</span>
<span style="color: #969896; background-color: #1d1f21;"> </span> }]
}
</pre>
</div>

<p>
run-log-analyze.sh 用于实时分析应用的日志
</p>

<div class="org-src-container">

<pre class="src src-sh">tail -f ./run.log | bunyan --strict -c <span style="color: #8abeb7;">'this.msg == "file uploaded"'</span> -0 | json -<span style="text-decoration: underline;">ga file | ./tools/file-scan -o ./tools/file-scan-successed.log -e ./tools/file-scan-failed.log</span>
</pre>
</div>

<p>
上面的脚本不断读取 run.log，将上传的文件路径名提取出来，然后传给文件扫描程序（./tools/file-scan），扫描成功日志文件为 ./tools/file-scan-successed.log，扫描失败日志文件为 ./tools/file-scan-failed.log。
</p>

<p>
现在在尝试启动进程
</p>

<div class="org-src-container">

<pre class="src src-sh">pm2 start process.json
</pre>
</div>

<p>
查看进程运行状态
</p>

<div class="org-src-container">

<pre class="src src-sh">pm2 list
</pre>
</div>

<p>
然后尝试重启
</p>

<div class="org-src-container">

<pre class="src src-sh">pm2 restart process.json
</pre>
</div>

<p>
发现后台有两个 <code>file-scan</code> 及 <code>tail -f ./run.log</code> 进程，restart 没有将子进程杀死，不过父进程 /bin/bash 进程倒是杀死了。
</p>

<p>
估计是 bash 使用 pm2 fork-mode 运行后，其终端被 detach 了，相当于是后台 daemon 进程，bash 进程死掉后， <code>tail -f ./run.log</code> 进程收不到 SIGHUP 信号也就没有跟着退出。
</p>

<p>
可以利用 tail 命令的参数 <code>-pid</code> ，指定 bash 结束时中断 <code>tail -f</code> 命令
</p>

<p>
<code>man tail</code>
</p>
<blockquote>
<p>
&#x2013;pid=PID
       with -f, terminate after process ID, PID dies  
</p>
</blockquote>

<p>
将 run-log-analyze.sh 改写如下
</p>

<div class="org-src-container">

<pre class="src src-sh">tail -f --pid=$<span style="color: #f0c674;">$</span> ./run.log | bunyan --strict -c <span style="color: #8abeb7;">'this.msg == "file uploaded"'</span> -0<span style="text-decoration: underline;"> | json -ga file | ./tools/file-scan -o ./tools/file-scan-successed.log -e ./tools/file-scan-failed.log</span>
</pre>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[关于 stream.pipe 你需要知道更多]]></title>
            <link>/article/51734e8e-stream.pipe-4f609700898177e5905366f4591a.html</link>
            <guid>/article/51734e8e-stream.pipe-4f609700898177e5905366f4591a.html</guid>
            <pubDate>Sat, 21 May 2016 17:58:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">关于 stream 用法的一个经典例子</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">http</span> = require(<span style="color: #8abeb7;">'http'</span>);
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">fs</span> = require(<span style="color: #8abeb7;">'fs'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">server</span> = http.createServer(<span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">req</span>, <span style="color: #f0c674;">res</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">stream</span> = fs.createReadStream(__dirname + <span style="color: #8abeb7;">'/data.txt'</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   stream.pipe(res);
});
server.listen(8000);
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">经典例子的致命问题</h2>
<div class="outline-text-2" id="text-2">
<p>
如果用户中断下载，文件不会关闭，导致文件句柄（fd）泄露，参见相关讨论：
</p>

<p>
<a href="http://stackoverflow.com/questions/37317676/deleting-file-in-node-js-not-working">express - Deleting file in node.js not working - Stack Overflow</a>
</p>

<p>
修复如下
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">http</span> = require(<span style="color: #8abeb7;">'http'</span>);
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">fs</span> = require(<span style="color: #8abeb7;">'fs'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">server</span> = http.createServer(<span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">req</span>, <span style="color: #f0c674;">res</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">stream</span> = fs.createReadStream(__dirname + <span style="color: #8abeb7;">'/data.txt'</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   stream.pipe(res).once(<span style="color: #8abeb7;">'close'</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   stream.destroy();
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
});
server.listen(8000);
</pre>
</div>
<p>
stream.destroy（同 stream.close） 是一个未文档化的 API，来自 fs.ReadStream ，
如此重要的一个函数竟然未文档化（至少现在还是未文档化状态，当前 node.js 版本为 v6.2.0）。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">关键 API 文档</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options">stream.pipe</a> 文档
</p>
<blockquote>
<p>
readable.pipe(destination[, options])#
</p>

<ul class="org-ul">
<li>destination Writable Stream The destination for writing data
</li>
<li>options Object Pipe options
<ul class="org-ul">
<li>end Boolean End the writer when the reader ends. Default = true
</li>
</ul>
</li>
</ul>

<p>
This method pulls all the data out of a readable stream, and writes it to the supplied
destination, automatically managing the flow so that the destination is not overwhelmed
by a fast readable stream.
</p>
</blockquote>

<p>
<a href="https://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options">fs.createReadStream</a> 文档
</p>
<blockquote>
<p>
fs.createReadStream(path[, options])#
</p>

<p>
Returns a new ReadStream object (See Readable Stream).
</p>

<p>
Be aware that, unlike the default value set for highWaterMark on a readable stream (16
kb), the stream returned by this method has a default value of 64 kb for the same
parameter.
</p>

<p>
options is an object or string with the following defaults:
</p>

<p>
{ flags: 'r',
  encoding: null,
  fd: null,
  mode: 0o666,
  autoClose: true
}
</p>

<p>
options can include start and end values to read a range of bytes from the file instead
of the entire file. Both start and end are inclusive and start at 0. The encoding can be
'utf8', 'ascii', or 'base64'.
</p>

<p>
If fd is specified, ReadStream will ignore the path argument and will use the specified
file descriptor. This means that no open event will be emitted.
</p>

<p>
If autoClose is false, then the file descriptor won't be closed, even if there's an
error. It is your responsibility to close it and make sure there's no file descriptor
leak. If autoClose is set to true (default behavior), on error or end the file descriptor
will be closed automatically.
</p>

<p>
mode sets the file mode (permission and sticky bits), but only if the file was created.
</p>

<p>
An example to read the last 10 bytes of a file which is 100 bytes long:
</p>

<p>
fs.createReadStream('sample.txt', {start: 90, end: 99});
</p>

<p>
If options is a string, then it specifies the encoding.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">stream.pipe 的工作原理</h2>
<div class="outline-text-2" id="text-4">
<p>
stream.pipe 将可读流（Readable Stream）连接到可写流（Writable Stream），
数据会从可读流传输到可写流，支持自动流量控制。
</p>

<p>
上面的 stream.pipe 其实是调用的 Readable.pipe，其流程简述如下：
</p>

<ul class="org-ul">
<li>监听可读流的 data 事件：将读取到的数据写入可写流，如果可写流缓冲区满，则暂停可读流。
</li>
</ul>


<ul class="org-ul">
<li>监听可写流的 drain 事件：实现自动流量控制。
</li>
</ul>


<ul class="org-ul">
<li>监听可写流的 unpipe 事件：取消所有事件监听。
</li>
</ul>


<ul class="org-ul">
<li>监听可写流的 close、finish 事件：调用可读流的 unpipe()，触发可写流的 unpipe 事件。
</li>
</ul>


<ul class="org-ul">
<li>监听可读流的 end 事件：调用可写流的 Writable.end()，触发可写流的 finish 事件。
</li>
</ul>


<ul class="org-ul">
<li>监听可写流的 error 事件：调用可读流的 unpipe()，触发可写流的 unpipe 事件，如果 error 事件没有其它人监听，则抛出为异常。
</li>
</ul>


<ul class="org-ul">
<li>在可写流上发出 pipe 事件。
</li>
</ul>


<p>
以上流程请自行阅读代码映证：<a href="https://github.com/nodejs/node/blob/v4.4.4/lib/_stream_readable.js#L460">node/_stream_readable.js at v4.4.4 · nodejs/node</a>
</p>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">stream.pipe 的问题</h2>
<div class="outline-text-2" id="text-5">
<p>
结合以上描述有以下疑问
</p>

<ul class="org-ul">
<li>可读流出错会怎么样

<p>
可读流发出 error、close 事件，但因为错误没有发出 end 事件。
</p>

<p>
可读流可能被关闭，可写流不会被关闭，pipe 状态保持不变，数据流动停顿了。
</p>

<p>
在现实情况中，或早或晚，可写流可能因为超时时间到等原因最终被关闭，从而转化为下面的情况。
</p>
</li>
</ul>


<ul class="org-ul">
<li>可写流出错会怎么样

<p>
可写流发出 error、close 事件，没有 finish 事件。
</p>

<p>
可读流会与可写流断开 pipe，可读流不会被关闭。
</p>

<p>
可读流以 fs.ReadStream 为例，当它被读完时（EOF，发出 end 事件），根据 autoClose 标志（默认为 true），决定是否关闭流（释放文件句柄），没有读完就不会被关闭。
</p>

<p>
以上逻辑是合理的，一个可读流可以与多个可写流通过 pipe 连在一起，没有理由因为一个可写流的问题影响到可读流的状态。
</p>

<p>
做为开发人员，切莫幻想 node.js 的垃圾收集（ GC）会在可读流没有被引用时自动关闭文件句柄。
</p>

<p>
当 node.js 将文件句柄以整数（Integer）方式表示时，就不可能实现垃圾收集时自动关闭文件句柄了。
</p>
</li>
</ul>


<p>
stream.pipe 没有魔法，它提供了一种传输数据的优美方式，但是它并不完美，在错误处理方面留下了很多空白，有待开发人员自行解决。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[诊断 node.js 应用 CPU 占用过高的问题]]></title>
            <link>/article/8bca65ad-node.js-5e947528-cpu-536075288fc79ad8768495ee9898.html</link>
            <guid>/article/8bca65ad-node.js-5e947528-cpu-536075288fc79ad8768495ee9898.html</guid>
            <pubDate>Thu, 12 May 2016 09:25:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
node.js 应用使用 pm2 进行管理，采用 cluster 模式，每台服务器运行 16 个 node.js 实例。
</p>

<p>
应用的开销主要在网络上：
</p>

<p>
平均每个 node.js 实例要维持来自嵌入式设备的约 3K TLS 长连接，平均每秒会有 30 个来自客户端的 HTTP 短连接。
</p>

<p>
TLS 长连接上最多 45 秒会有一次心跳（发送 80 多字节，接收 400 多字节）。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">系统信息</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><code>CPU</code></h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>逻辑 CPU 数：24 

<pre class="example">
# cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 
     24  Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz
</pre>
</li>

<li>物理 CPU 数：2

<pre class="example">
# cat /proc/cpuinfo | grep 'physical id' | sort | uniq -c
     12 physical id : 0
     12 physical id : 1
</pre>
</li>

<li>每个物理 CPU 的核数：6

<pre class="example">
# cat /proc/cpuinfo | grep "cpu cores" | uniq | awk -F: '{print $2}'
 6
</pre>
</li>

<li>每个核超线程数：2

<p>
两个逻辑 CPU 具有相同的 <code>core id</code> 则超线程是打开的。
</p>

<pre class="example">
# cat /proc/cpuinfo | grep -E "physical id|core id" | sed -e ':a;N;$!ba;s/\ncore id\s*/       core id /g' | sort | uniq -c
      2 physical id : 0       core id : 0
      2 physical id : 0       core id : 1
      2 physical id : 0       core id : 2
      2 physical id : 0       core id : 3
      2 physical id : 0       core id : 4
      2 physical id : 0       core id : 5
      2 physical id : 1       core id : 0
      2 physical id : 1       core id : 1
      2 physical id : 1       core id : 2
      2 physical id : 1       core id : 3
      2 physical id : 1       core id : 4
      2 physical id : 1       core id : 5
</pre>
</li>
</ul>

<p>
参考：<a href="http://blog.sina.com.cn/s/blog_4a6151550100iowl.html">Linux CPU数量判断，通过/proc/cpuinfo._一沙一花_新浪博客</a>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><code>内存</code></h3>
<div class="outline-text-3" id="text-1-2">
<p>
<code>64G</code> 内存， <code>37.8G</code> 空闲内存
</p>

<pre class="example">
# cat /proc/meminfo
MemTotal:       65916740 kB
MemFree:        39663756 kB
Buffers:          595424 kB
Cached:          7627876 kB
SwapCached:            0 kB
Active:         17368112 kB
Inactive:        6936088 kB
Active(anon):   16002524 kB
Inactive(anon):    80820 kB
Active(file):    1365588 kB
Inactive(file):  6855268 kB
Unevictable:          32 kB
Mlocked:              32 kB
SwapTotal:      20971512 kB
SwapFree:       20971512 kB
Dirty:              1896 kB
Writeback:             0 kB
AnonPages:      16081968 kB
Mapped:            19596 kB
Shmem:              1624 kB
Slab:            1087320 kB
SReclaimable:     756368 kB
SUnreclaim:       330952 kB
KernelStack:        5272 kB
PageTables:        64280 kB
NFS_Unstable:          0 kB
Bounce:                0 kB
WritebackTmp:          0 kB
CommitLimit:    53929880 kB
Committed_AS:   17348828 kB
VmallocTotal:   34359738367 kB
VmallocUsed:      436016 kB
VmallocChunk:   34324325464 kB
HardwareCorrupted:     0 kB
AnonHugePages:   2525184 kB
HugePages_Total:       0
HugePages_Free:        0
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
DirectMap4k:        4096 kB
DirectMap2M:     2076672 kB
DirectMap1G:    65011712 kB
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">系统状态</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>top</code>
</p>
<pre class="example">
# top -n 1
top - 13:05:48 up 144 days, 20:52,  2 users,  load average: 2.86, 2.46, 2.78
Tasks: 476 total,  19 running, 457 sleeping,   0 stopped,   0 zombie
Cpu(s): 22.7%us,  1.2%sy,  0.0%ni, 75.0%id,  0.0%wa,  0.0%hi,  1.1%si,  0.0%st
Mem:  65916740k total, 26237540k used, 39679200k free,   595424k buffers
Swap: 20971512k total,        0k used, 20971512k free,  7614508k cached

   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND          
191463 nobody    20   0 1884m 981m 9.8m R 83.3  1.5  12337:09 node /usr/local  
192063 nobody    20   0 1905m 1.0g 9.8m R 73.6  1.6  12320:35 node /usr/local  
194450 nobody    20   0 1842m 937m 9.8m R 62.0  1.5  12060:56 node /usr/local  
191515 nobody    20   0 1911m 1.0g 9.8m R 60.1  1.6  12308:13 node /usr/local  
190881 nobody    20   0 1862m 957m 9.8m R 52.3  1.5  12257:46 node /usr/local  
195178 nobody    20   0 1795m 891m 9.8m R 52.3  1.4  11647:01 node /usr/local  
193068 nobody    20   0 1873m 970m 9.8m R 50.4  1.5  12144:28 node /usr/local  
194523 nobody    20   0 1805m 902m 9.8m R 50.4  1.4  11948:57 node /usr/local  
190790 nobody    20   0 1857m 951m 9.8m R 48.4  1.5  12174:59 node /usr/local  
191609 nobody    20   0 1847m 945m 9.8m R 48.4  1.5  12203:47 node /usr/local  
192946 nobody    20   0 1898m 993m 9.8m R 48.4  1.5  12224:41 node /usr/local  
193029 nobody    20   0 1827m 924m 9.8m R 48.4  1.4  12291:51 node /usr/local  
195276 nobody    20   0 1786m 883m 9.8m R 48.4  1.4  11659:07 node /usr/local  
196001 nobody    20   0 1885m 981m 9.8m R 48.4  1.5  11428:22 node /usr/local  
193725 nobody    20   0 1884m 978m 9.8m R 46.5  1.5  12336:34 node /usr/local  
 80300 root      20   0  611m 454m 1152 R 44.6  0.7  26523:40 redis-server     
195944 nobody    20   0 1815m 912m 9.8m R 44.6  1.4  11353:21 node /usr/local
</pre>

<p>
<code>vmstat</code>
</p>
<pre class="example">
# vmstat 1
|----+---+------+----------+--------+---------+----+----+----+-------+--------+-------+----+----+----+----+----|
|  r | b | swpd |     free |   buff |   cache | si | so | bi |    bo |     in |    cs | us | sy | id | wa | st |
|----+---+------+----------+--------+---------+----+----+----+-------+--------+-------+----+----+----+----+----|
| 17 | 0 |    0 | 39769884 | 595424 | 7523076 |  0 |  0 |  0 |    71 |      0 |     0 | 23 |  2 | 75 |  0 |  0 |
|  9 | 0 |    0 | 39763800 | 595424 | 7528200 |  0 |  0 |  0 |  5188 | 108347 | 21186 | 53 |  5 | 41 |  0 |  0 |
| 17 | 0 |    0 | 39758360 | 595424 | 7534084 |  0 |  0 |  0 |  5272 | 106375 | 24054 | 49 |  5 | 45 |  0 |  0 |
| 15 | 0 |    0 | 39753912 | 595424 | 7538236 |  0 |  0 |  0 |  5252 | 107669 | 23522 | 50 |  5 | 44 |  0 |  0 |
| 12 | 0 |    0 | 39747588 | 595424 | 7544612 |  0 |  0 |  0 |  5304 | 108452 | 24290 | 49 |  5 | 46 |  0 |  0 |
| 15 | 0 |    0 | 39742744 | 595424 | 7548076 |  0 |  0 |  0 |  5200 | 106615 | 25614 | 47 |  5 | 48 |  0 |  0 |
| 13 | 0 |    0 | 39738224 | 595424 | 7552712 |  0 |  0 |  0 |  5092 | 101642 | 25482 | 44 |  5 | 51 |  0 |  0 |
|  9 | 0 |    0 | 39734116 | 595424 | 7559024 |  0 |  0 |  0 |  5156 |  98440 | 25393 | 42 |  5 | 53 |  0 |  0 |
| 16 | 0 |    0 | 39729280 | 595424 | 7564076 |  0 |  0 |  0 |  5204 | 108933 | 23535 | 49 |  5 | 45 |  0 |  0 |
| 18 | 0 |    0 | 39722832 | 595424 | 7568280 |  0 |  0 |  0 |  5276 | 111563 | 23965 | 51 |  5 | 44 |  0 |  0 |
|----+---+------+----------+--------+---------+----+----+----+-------+--------+-------+----+----+----+----+----|
</pre>

<p>
<code>sar</code>
</p>
<pre class="example">
# sar -n TCP 1
01:58:46 PM  active/s passive/s    iseg/s    oseg/s
01:58:47 PM      3.09    875.26  32375.26  33619.59
01:58:48 PM      0.00    575.25  27972.28  28961.39
01:58:49 PM      0.00    879.59  31104.08  31933.67
01:58:50 PM      1.02    743.88  30183.67  31516.33
01:58:51 PM      0.00    793.94  31734.34  32761.62
01:58:52 PM      0.00    571.88  28690.62  29415.62
01:58:53 PM      1.02   1004.08  33157.14  33673.47
01:58:54 PM      0.99    954.46  33315.84  34532.67
01:58:55 PM      1.00    910.00  33562.00  34338.00
01:58:56 PM      1.02    783.67  31754.08  32412.24
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">应用状态</h2>
<div class="outline-text-2" id="text-3">
<p>
<code>ps</code>
</p>
<pre class="example">
# ps waux | grep node
nobody   190790 61.0  1.4 1902228 974408 ?      Rl   Apr20 12154:57 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   190881 61.4  1.4 1907188 980800 ?      Rl   Apr20 12237:31 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   191463 61.8  1.5 1929392 1005164 ?     Sl   Apr20 12317:05 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   191515 61.7  1.5 1957252 1030472 ?     Rl   Apr20 12287:48 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   191609 61.1  1.4 1891508 967896 ?      Rl   Apr20 12183:27 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   192063 61.7  1.5 1951056 1025216 ?     Rl   Apr20 12300:27 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   192946 61.3  1.5 1943880 1017796 ?     Rl   Apr20 12204:24 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   193029 61.6  1.4 1871180 946732 ?      Rl   Apr20 12271:35 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   193068 60.9  1.5 1918404 993536 ?      Rl   Apr20 12124:33 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   193725 61.8  1.5 1929488 1001552 ?     Rl   Apr20 12316:31 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   194450 60.5  1.4 1887224 960012 ?      Sl   Apr20 12040:16 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   194523 59.9  1.4 1848960 924596 ?      Rl   Apr20 11928:46 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   195178 58.4  1.3 1838980 913052 ?      Rl   Apr20 11627:32 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   195276 58.5  1.3 1829848 905212 ?      Rl   Apr20 11639:08 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   195944 56.9  1.4 1859316 933892 ?      Rl   Apr20 11333:25 node /usr/local/xxx.xxxxxxxx.com/src/index.js
nobody   196001 57.3  1.5 1930348 1004912 ?     Rl   Apr20 11408:17 node /usr/local/xxx.xxxxxxxx.com/src/index.js
</pre>

<p>
<code>pm2</code>
</p>
<pre class="example">
# pm2 desc xxx.xxxxxxxx.com | grep 'Loop delay'
│ Loop delay │ 1.96ms │
│ Loop delay │ 2.01ms │
│ Loop delay │ 2.04ms │
│ Loop delay │ 2.3ms  │
│ Loop delay │ 1.76ms │
│ Loop delay │ 1.97ms │
│ Loop delay │ 2.12ms │
│ Loop delay │ 1.98ms │
│ Loop delay │ 2.16ms │
│ Loop delay │ 1.98ms │
│ Loop delay │ 2.07ms │
│ Loop delay │ 1.88ms │
│ Loop delay │ 2.61ms │
│ Loop delay │ 1.84ms │
│ Loop delay │ 1.84ms │
│ Loop delay │ 1.88ms │
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">分析</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">系统负荷正常</h3>
<div class="outline-text-3" id="text-4-1">
<p>
<code>top</code> 的 <code>load average</code> 值远小于 CPU 核数，系统的 CPU 使用率为 25%，还有足够的空闲 CPU 资源。
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">node.js 的 CPU 占用过高</h3>
<div class="outline-text-3" id="text-4-2">
<ul class="org-ul">
<li>运行和等待 CPU 时间片的进程数偏高

<p>
参见 <code>vmstat</code> 的 <code>r</code> 列
</p>
</li>
</ul>


<ul class="org-ul">
<li>中断数偏多

<p>
参见 <code>vmstat</code> 的 <code>in</code> 列
</p>

<p>
有可能是网络 I/O 数过多引起，参见 <code>sar</code> 的 <code>iseg/s</code> <code>oseg/s</code> 列。
</p>

<p>
中断数虽多，但并非瓶颈，参见 <code>top</code> 的 <code>%hi</code> 和 <code>%si</code> 值。
</p>
</li>
</ul>


<ul class="org-ul">
<li>上下文切换较多

<p>
参见 <code>vmstat</code> 的 <code>cs</code> 列
</p>

<p>
上下文切换数远小于中断数，正常。
</p>
</li>
</ul>


<ul class="org-ul">
<li>用户模式下 CPU 占用过高

<p>
超过 50%
</p>

<p>
参见 <code>vmstat</code> 的 <code>us</code> 列
</p>
</li>

<li>node.js 进程事件循环迟延小于 3ms

<p>
正常。应用目前还能够提供快速响应。
</p>
</li>

<li>node.js 进程 CPU 占用过高

<p>
统计了一天平均占用 65%，高峰占用 85% 以上。
</p>

<p>
参见 <code>ps</code> 输出
</p>

<p>
应用本身是网络密集型，每 node.js 进程每秒钟处理 250 个请求，不存在 CPU 密集操作，这样高的 CPU 占用是不可接受的。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3">网络带宽占用正常</h3>
<div class="outline-text-3" id="text-4-3">
<ul class="org-ul">
<li>对外的网卡

<p>
上行 27Mbps，下行 66Mbps
</p>

<p>
主要是来自设备和客户端的流量。
</p>
</li>

<li>对内的网卡

<p>
上行 18.7Mbps，下行 21.7Mbps
</p>

<p>
主要是内部通信流量（redis）。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4">磁盘访问较少</h3>
<div class="outline-text-3" id="text-4-4">
<p>
应用除了写少量日志外不访问磁盘。
</p>
</div>
</div>

<div id="outline-container-sec-4-5" class="outline-3">
<h3 id="sec-4-5">结论</h3>
<div class="outline-text-3" id="text-4-5">
<ul class="org-ul">
<li>系统资源不存在瓶颈
</li>

<li>系统当前的运行状况良好
</li>

<li>node.js 应用的 CPU 占用偏高

<p>
需要对 node.js 应用进行性能分析及优化
</p>
</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">node.js 应用性能分析</h2>
<div class="outline-text-2" id="text-5">
<p>
node.js 从 4.4.0 版本开始内置了 profiler， <code>--prof</code> 命令选项运行应用会在当前目录生成性能日志文件。
</p>

<p>
解读性能日志文件
</p>
<pre class="example">
# node --prof-process isolate-0x1d1e1b0-v8-10041.log
...
[Summary]:
   ticks  total  nonlib   name
    348    7.3%    7.6%  JavaScript
   4243   88.8%   92.4%  C++
     63    1.3%    1.4%  GC
    184    3.9%          Shared libraries
      2    0.0%          Unaccounted
...
 [C++ entry points]:
   ticks    cpp   total   name
    494   19.4%   10.3%  v8::internal::Runtime_DateCurrentTime(int, v8::internal::Object**, v8::internal::Isolate*)
...
   ticks parent  name
   1739   36.4%  syscall

    586   12.3%  __lll_lock_wait
    413   70.5%    v8::internal::Runtime_DateCurrentTime(int, v8::internal::Object**, v8::internal::Isolate*)
    398   96.4%      LazyCompile: *now native date.js:197:17
    305   76.6%        LazyCompile: *&lt;anonymous&gt; /usr/local/xxxxx.xxxxxxxx.com/src/models.js:43:30
...
</pre>

<p>
最大头的时间花在系统调用上，通过 strace 工具统计 node.js 进程 10 秒钟的系统调用计数
</p>
<pre class="example">
12259 write
10501 read
 9261 epoll_ctl
 1564 epoll_wait
  503 close
  502 recvmsg
  502 getsockopt
  502 getsockname
  103 futex
   23 stat
    6 writev
    1 getpeername
</pre>

<p>
系统调用主要进行网络 I/O ，如：与设备通信（TLS 长连接）、与客户端通信（HTTP 短连接）、与Redis通信（TCP 长连接）。
</p>

<p>
其它调用出现次数最多的是获取当前时间戳的函数 models.js:43：
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">function</span> <span style="color: #de935f;">getTimestamp</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> Math.floor(Date.now() / 1000);
}
</pre>
</div>

<p>
它会在很多地方被用到，如：当从 redis 收到一条订阅的消息时，会在消息中添加当前时间戳，方便后面处理。
</p>

<p>
可以通过缓存减少这部分开销：
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">function</span> <span style="color: #de935f;">getTimestamp</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (! getTimestamp._timestamp) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   getTimestamp._timestamp = Math.floor(Date.now() / 1000);

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   setInterval(<span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   getTimestamp._timestamp = Math.floor(Date.now() / 1000);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }, 1000).unref();
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> getTimestamp._timestamp;
}
getTimestamp._timestamp = 0;
</pre>
</div>

<p>
上面的代码，虽然调用次数相对较多，但并不耗 CPU，经过上面的优化后，总系统 CPU 占用只是略有减少。
</p>

<p>
关键的系统调用消耗难以再优化，在我们的应用中，node.js 单实例处理能力的上限：4K TLS 长连接（平均 CPU 占用 85%）。
</p>

<p>
最终决定，增加服务器上 node.js 进程的数量，node.js 最大连接数限制（ <a href="https://nodejs.org/api/net.html#net_server_maxconnections">net.maxConnections</a> ）进一步减少。
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">参考</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html">理解Linux系统负荷 - 阮一峰的网络日志</a>
</p>

<p>
<a href="http://www.blogjava.net/sliverfancy/archive/2013/04/17/397947.html">Linux-Load Average解析(转) - java技术研究 - BlogJava</a>   
</p>

<p>
<a href="http://www.trueeyu.com/?p=1749">linux系统性能监控与优化（2）–cpu | 小鳄的笔记本</a>
</p>

<p>
<a href="https://nodejs.org/en/docs/guides/simple-profiling/">Easy profiling for Node.js Applications | Node.js</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 collectd 监控 pm2 应用性能]]></title>
            <link>/article/4f7f7528-collectd-76d163a7-pm2-5e947528602780fd.html</link>
            <guid>/article/4f7f7528-collectd-76d163a7-pm2-5e947528602780fd.html</guid>
            <pubDate>Thu, 05 May 2016 08:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://github.com/Unitech/pm2">pm2</a> 是 node.js 应用的产品级进程管理器。
</p>

<blockquote>
<p>
PM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.
</p>
</blockquote>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">关键性能指标</h2>
<div class="outline-text-2" id="text-1">
<p>
通过 <a href="https://github.com/Unitech/pm2">pm2</a> 可以获取到 node.js 应用的几个关键性能指标：
</p>

<ul class="org-ul">
<li>Memory used

<p>
node.js 应用的内存占用。
</p>

<p>
node.js（v8） 通过垃圾收集（GC）技术进行自动内存管理，这里测量到的内存占用还包含一部分未回收的垃圾。
</p>
</li>

<li>CPU used

<p>
node.js 应用的 CPU 占用。
</p>

<p>
node.js 是单线程模型，虽然所有 I/O 操作是异步的，但是代码指令执行是同步的，过多的请求处理或消耗 CPU 的操作会导致应用响应速度变慢，可能无法提供正常的服务。
</p>
</li>

<li>Loop delay

<p>
node.js 应用事件循环的延迟。
</p>

<p>
pm2 测量 node.js 应用 Loop delay 的逻辑如下：
</p>

<blockquote>
<p>
记下开始时间（ process.hrtime ）
</p>

<p>
设置 1 秒钟的定时器（setInterval）
</p>

<p>
定时器触发时获取结束时间（ process.hrtime ）
</p>

<p>
结束时间与开始时间的时间差减去 1 秒钟就是 Loop delay
</p>
</blockquote>
<p>
具体实现请查阅 pm2 源代码：node_modules/pm2/node_modules/pmx/lib/probes/pacemaker.js
</p>
</li>
</ul>


<p>
一般来说 <code>Loop delay</code> 与 <code>CPU used</code> 指标是正相关的，但是如果 node.js 应用不小心调用了一些同步 I/O 操作或 I/O 出现瓶颈，则会出现 <code>CPU used</code> 低但是 <code>Loop delay</code> 高的情况。
</p>

<ul class="org-ul">
<li>restart_time 及 unstable_restarts

<p>
node.js（javascript）是一门动态语言，很少运行到的代码分支里一个错误的变量引用就可能导致整个应用异常退出，pm2 会在 node.js 应用退出时自动重新拉起应用，
但这可能会掩盖潜藏的问题（BUG），监控 node.js 应用的重启次数可以及时发现这种问题（BUG）。
</p>
</li>
</ul>

<p>
上线新代码后，通过观测这几个关键性能指标，以及与历史记录进行对比，可以用来评估新代码的运行效率与质量。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">收集性能指标</h2>
<div class="outline-text-2" id="text-2">
<p>
通过 pm2 收集 node.js 应用性能指标的脚本 <code>/usr/local/bin/collectd-pm2.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">os</span> = require(<span style="color: #8abeb7;">'os'</span>);
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">exec</span> = require(<span style="color: #8abeb7;">'child_process'</span>).exec;


<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">hostname</span> = process.env.COLLECTD_HOSTNAME || os.hostname();
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">interval</span> = parseInt(process.env.COLLECTD_INTERVAL, 10) || 1;

<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">collect</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   exec(<span style="color: #8abeb7;">'pm2 jlist'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">error</span>, <span style="color: #f0c674;">stdout</span>, <span style="color: #f0c674;">stderr</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (error) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stderr.write(error.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.exit(1);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (stderr) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stderr.write(stderr.toString() + <span style="color: #8abeb7;">"\n"</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">timestamp</span> = Math.floor(Date.now() / 1000);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">list</span> = JSON.parse(stdout);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   list.forEach(<span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">item</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">name</span> = <span style="color: #8abeb7;">''</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">for</span>(<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">i</span> = 0, <span style="color: #f0c674;">n</span> = item.name.length; i &lt; n; ++i) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   name += item.name[i].match(<span style="color: #8abeb7;">/^[0-9a-zA-Z]+$/</span>) ? item.name[i] : <span style="color: #8abeb7;">'_</span><span style="color: #8abeb7; text-decoration: underline;">'</span><span style="text-decoration: underline;">;</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stdout.write(<span style="color: #8abeb7;">"PUTVAL \""</span> + hostname + <span style="color: #8abeb7;">"/"</span> + name + <span style="color: #8abeb7;">"-loop_de</span><span style="color: #8abeb7; text-decoration: underline;">lay"</span><span style="text-decoration: underline;"> + </span><span style="color: #8abeb7; text-decoration: underline;">"/delay-"</span><span style="text-decoration: underline;"> + item.pm_id + </span><span style="color: #8abeb7; text-decoration: underline;">"\" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #8abeb7; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #8abeb7; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.pm2_env.axm_monitor[</span><span style="color: #8abeb7; text-decoration: underline;">"Loop delay"</span><span style="text-decoration: underline;">].value.replace(</span><span style="color: #8abeb7; text-decoration: underline;">'ms'</span><span style="text-decoration: underline;">, </span><span style="color: #8abeb7; text-decoration: underline;">''</span><span style="text-decoration: underline;">) + </span><span style="color: #8abeb7; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stdout.write(<span style="color: #8abeb7;">"PUTVAL \""</span> + hostname + <span style="color: #8abeb7;">"/"</span> + name + <span style="color: #8abeb7;">"-memory_</span><span style="color: #8abeb7; text-decoration: underline;">used"</span><span style="text-decoration: underline;"> + </span><span style="color: #8abeb7; text-decoration: underline;">"/gauge-"</span><span style="text-decoration: underline;"> + item.pm_id + </span><span style="color: #8abeb7; text-decoration: underline;">"\" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #8abeb7; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #8abeb7; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.monit.memory + </span><span style="color: #8abeb7; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stdout.write(<span style="color: #8abeb7;">"PUTVAL \""</span> + hostname + <span style="color: #8abeb7;">"/"</span> + name + <span style="color: #8abeb7;">"-cpu_use</span><span style="color: #8abeb7; text-decoration: underline;">d"</span><span style="text-decoration: underline;"> + </span><span style="color: #8abeb7; text-decoration: underline;">"/gauge-"</span><span style="text-decoration: underline;"> + item.pm_id + </span><span style="color: #8abeb7; text-decoration: underline;">"\" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #8abeb7; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #8abeb7; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.monit.cpu + </span><span style="color: #8abeb7; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stdout.write(<span style="color: #8abeb7;">"PUTVAL \""</span> + hostname + <span style="color: #8abeb7;">"/"</span> + name + <span style="color: #8abeb7;">"-restart</span><span style="color: #8abeb7; text-decoration: underline;">_time"</span><span style="text-decoration: underline;"> + </span><span style="color: #8abeb7; text-decoration: underline;">"/gauge-"</span><span style="text-decoration: underline;"> + item.pm_id + </span><span style="color: #8abeb7; text-decoration: underline;">"\" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #8abeb7; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #8abeb7; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.pm2_env.restart_time + </span><span style="color: #8abeb7; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stdout.write(<span style="color: #8abeb7;">"PUTVAL \""</span> + hostname + <span style="color: #8abeb7;">"/"</span> + name + <span style="color: #8abeb7;">"-unstabl</span><span style="color: #8abeb7; text-decoration: underline;">e_restarts"</span><span style="text-decoration: underline;"> + </span><span style="color: #8abeb7; text-decoration: underline;">"/gauge-"</span><span style="text-decoration: underline;"> + item.pm_id + </span><span style="color: #8abeb7; text-decoration: underline;">"\" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #8abeb7; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #8abeb7; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.pm2_env.unstable_restarts + </span><span style="color: #8abeb7; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   });

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   setTimeout(collect, interval*1000);
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
}

collect();
</pre>
</div>

<p>
pm2 是使用 root 帐号运行的，collectd exec 插件不允许以 root 权限运行收集统计的程序（collectd-pm2.js），一个简单的方法是用 c 写一个包裹程序，使用 <code>setuid</code> 切换到 root 帐号。
</p>

<p>
<code>collectd-pm2-root.c</code>
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;stdio.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;sys/types.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;sys/stat.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;sys/wait.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;unistd.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;stdlib.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;signal.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;string.h&gt;</span>


<span style="color: #81a2be;">int</span> <span style="color: #de935f;">main</span>(<span style="color: #81a2be;">int</span> <span style="color: #f0c674;">argc</span>, <span style="color: #81a2be;">char</span>* <span style="color: #f0c674;">argv</span>[]) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (setuid(0) == -1 || setgid(0) == -1) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   perror(<span style="color: #8abeb7;">"setuid or setgid to root user error"</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   fprintf(stderr, <span style="color: #8abeb7;">"\npermit setuid and setgid to root user: \n\tchown root</span><span style="color: #8abeb7; text-decoration: underline;">:root %s\n\tchmod 4755 %s\n"</span><span style="text-decoration: underline;">, argv[0], argv[0]);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> EXIT_FAILURE;
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> system(<span style="color: #8abeb7;">"/bin/bash -c 'export PM2_HOME=${PM2_HOME:-~root/.pm2}; node /</span><span style="color: #8abeb7; text-decoration: underline;">usr/local/bin/collectd-pm2.js'"</span><span style="text-decoration: underline;">);</span>
}
</pre>
</div>

<p>
编译安装
</p>
<div class="org-src-container">

<pre class="src src-sh">gcc -O2 collectd-pm2-root.c -o collectd-pm2-root
cp collectd-pm2-root /usr/local/bin
chown root:root /usr/local/bin/collectd-pm2-root
chmod 4755 /usr/local/bin/collectd-pm2-root
</pre>
</div>

<p>
配置 collectd，修改 <code>collectd.conf</code>
</p>
<pre class="example">
LoadPlugin exec

&lt;Plugin exec&gt;
    Exec "nobody:nobody" "/usr/local/bin/collectd-pm2-root"
&lt;/Plugin&gt;
</pre>

<p>
测试运行统计收集脚本
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo -u nobody -g nobody /usr/local/bin/collectd-pm2-root
</pre>
</div>

<p>
重启 collectd 生效即可。
</p>

<p>
以上代码已在 github 开源：<a href="https://github.com/tangxinfa/collectd-pm2">https://github.com/tangxinfa/collectd-pm2</a> 。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Module version mismatch 错误排查]]></title>
            <link>/article/module-version-mismatch-95198bef639267e5.html</link>
            <guid>/article/module-version-mismatch-95198bef639267e5.html</guid>
            <pubDate>Wed, 02 Mar 2016 07:41:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
node.js 应用启动时出现以下错误：
</p>
<pre class="example">
Error: Cannot find module '../build/Debug/addon'
    at Function.Module._resolveFilename (module.js:339:15)
    at Function.Module._load (module.js:290:25)
    at Function._load (/usr/lib/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
    at Module.require (module.js:367:17)
    at require (internal/module.js:16:19)
    at Object.&lt;anonymous&gt; (node_modules/heapdump/lib/main.js:18:15)
    at Module._compile (module.js:413:34)
    at Object.Module._extensions..js (module.js:422:10)
    at Module.load (module.js:357:32)
    at Function.Module._load (module.js:314:12)
</pre>

<p>
改了一下 heapdump/lib/main.js:18:15 附近的代码，输出了真正的错误信息：
</p>
<pre class="example">
Error: Module version mismatch. Expected 47, got 46.
</pre>

<p>
根据 node_version.h 中 NODE_MODULE_VERSION 的定义，46 对应 Node.js v4.0.0，47 对应 Node.js v5.0.0。
应该是编译 heapdump 模块使用的 Node.js 版本和运行时 Node.js 版本不一致，编译时我通过 $PATH 环境变量，将 Node.js v4.2.3 置为默认的 Node.js 版本了。
</p>
<pre class="example">
$ /usr/bin/node --version 
v5.7.0
$ node --version
v4.2.3
</pre>

<p>
我使用的是 pm2 做为进程管理器，cluster 模式运行 node.js 应用，pm2 后台进程使用的是默认版本的 Node.js 版本（v5.7.0）启动，应该是 pm2 也使用同样的 Node.js 版本（v5.7.0）来运行应用，执行 pm2 save 后，~/.pm2/dump.pm2 中我的应用的 $PATH 是正确的，已经将 Node.js v4.2.3 置为默认的 Node.js 版本，不知为何 pm2 并未采用。
</p>

<p>
pm2 分为前端命令和后端 daemon 两部分，真正的操作都是由 daemon 来施行，当我们使用 pm2 start 来启动 app 时，只是把命令通过 unix socket 传递给了 daemon，一个合理的猜想是 pm2 命令并没有把当前 shell 的 $PATH 传递给 daemon，或者是 daemon 创建 app 进程时传递过来的 $PATH 设置未生效。
</p>

<p>
查看当前的 pm2 版本：
</p>
<pre class="example">
$ ps aux | grep PM2 | grep -v grep 
tangxin+ 17538  0.1  0.4 1185564 32020 ?       Ssl  2月25   9:29 PM2 v0.14.5: God Daemon
</pre>

<p>
通过 &#x2013;interpreter 选项启动应用时指定 Node.js v4.2.3： &#x2013;interpreter=/usr/local/node-v4.2.3/bin/node
</p>

<p>
通过 pm2 delete 删除应用后再 start 应用，结果还是一样的错误，查看应用实际使用的 node 版本：
</p>
<pre class="example">
$ ls -la /proc/22387/exe
lrwxrwxrwx 1 tangxinfa tangxinfa 0 3月   2 14:00 /proc/22387/exe -&gt; /usr/bin/node
</pre>
<p>
使用的还是系统默认的 Node.js 版本 v5.7.0。
</p>

<p>
经过测试，可以确认：
</p>
<blockquote>
<p>
通过 &#x2013;interpreter 指定其它 node 版本，在 cluster 模式下无效，fork 模式下有效。
</p>
</blockquote>

<p>
参见相关 Issues：
</p>

<ul class="org-ul">
<li><a href="https://github.com/Unitech/PM2/issues/1575">interpreter ignored when using cluster mode · Issue #1575 · Unitech/pm2</a>
</li>

<li><a href="https://github.com/Unitech/PM2/issues/1034">Using different versions of node via nvm for each app · Issue #1034 · Unitech/pm2</a>
</li>

<li><a href="https://github.com/Unitech/PM2/issues/1224#issuecomment-99931316">&#x2013;interpreter not applied? · Issue #1224 · Unitech/pm2</a>
</li>
</ul>


<p>
查看 pm2 与 node.js 的源代码进一步确认该问题：
</p>

<ul class="org-ul">
<li>pm2 调用 cluster.fork 创建工作进程

<p>
引用自 pm2/lib/God/ClusterMode.js
</p>
<div class="org-src-container">

<pre class="src src-js">cluster.fork({pm2_env: JSON.stringify(env_copy)})
</pre>
</div>
</li>

<li>cluster.fork 调用 child_process.fork 创建工作进程

<p>
引用自 node/lib/cluster.js
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">return</span> fork(cluster.settings.exec, cluster.settings.args, {
<span style="color: #969896; background-color: #1d1f21;"> </span> env: workerEnv,
<span style="color: #969896; background-color: #1d1f21;"> </span> silent: cluster.settings.silent,
<span style="color: #969896; background-color: #1d1f21;"> </span> execArgv: execArgv,
<span style="color: #969896; background-color: #1d1f21;"> </span> gid: cluster.settings.gid,
<span style="color: #969896; background-color: #1d1f21;"> </span> uid: cluster.settings.uid
});
</pre>
</div>

<p>
根据 child_process.fork 的实现（见 node/lib/child_process.js），由于未传入 <code>execPath</code> 选项，会使用 <code>process.execPath</code> 的值，也就是会使用 pm2 后台进程的 node 可执行程序路径来创建工作进程。
</p>
</li>
</ul>

<p>
应该可以通过指定不同的 $PM2_HOME 环境变量，跑多套 pm2，各个 pm2 使用不同版本的 Node.js，多个 cluster 模式的 pm2 应用也就会使用不同版本 Node.js。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS 6.4 生产环境上安装 pm2]]></title>
            <link>/article/centos-6.4-751f4ea773af58834e0a5b8988c5-pm2.html</link>
            <guid>/article/centos-6.4-751f4ea773af58834e0a5b8988c5-pm2.html</guid>
            <pubDate>Thu, 25 Feb 2016 09:27:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
确保系统要干净（尚未安装 node.js），使用 root 帐号登录。
</p>

<ul class="org-ul">
<li>安装 LTS 版的 node.js

<p>
当前 <a href="https://nodejs.org/en/">官方</a> 推荐的 LTS 版本为 v4.3.1，通过淘宝镜像下载速度快一些，直接安装在系统目录中 /usr 下，便于使用。
</p>

<div class="org-src-container">

<pre class="src src-sh">wget http://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.3.1-linux-x64.tar.xz<span style="text-decoration: underline;"> -O node-v4.3.1-linux-x64.tar.xz</span>
tar xJvf node-v4.3.1-linux-x64.tar.xz --no-same-owner --exclude CHANGELOG.md --e<span style="text-decoration: underline;">xclude LICENSE --exclude README.md --strip-components 1 -C /usr</span>
</pre>
</div>

<p>
参考：<a href="https://gist.github.com/TooTallNate/2477f53a23a51537332e">Install Node.js one-liner</a>
</p>
</li>

<li>安装稳定版 pm2

<p>
从 <a href="https://github.com/Unitech/pm2/blob/master/CHANGELOG.md">CHANGELOG.md</a> 查到的当前的稳定版本为 v0.14.3，pm2 发布很频繁,不宜追新。
</p>

<div class="org-src-container">

<pre class="src src-sh">npm install pm2@0.14.3 -g
</pre>
</div>
</li>

<li>设置 pm2 为开机启动

<div class="org-src-container">

<pre class="src src-sh">pm2 startup centos
</pre>
</div>
</li>

<li>定期清理日志

<p>
按《 <a href="http://blog.kankanan.com/article/pm2-768465e55fd77ba17406.html#sec-6">pm2的日志管理</a> 》中的“定期清理日志”一节所述使用 logrotate 服务定期清理日志。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 pm2 管理应用]]></title>
            <link>/article/4f7f7528-pm2-7ba174065e947528.html</link>
            <guid>/article/4f7f7528-pm2-7ba174065e947528.html</guid>
            <pubDate>Thu, 25 Feb 2016 07:18:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
pm2 是使用 node.js 开发的进程管理器，实现统一方式管理进程，如：崩溃后拉起、启动/停止、监控、日志管理等。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">安装</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-sh">npm install pm2@latest -g
</pre>
</div>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">为什么要全局（global）方式安装 pm2？</h3>
<div class="outline-text-3" id="text-1-1">
<p>
pm2 被设计成管理用户的全部应用，pm2 的数据保存在 ~/.pm2 目录下，同一用户只能启动一个 pm2 后台进程（PM2 daemon），不同用户的 pm2 互不影响。
不安装为全局的情况下，如果安装多个版本的 pm2，不同版本的 pm2 前端工具程序与 pm2 后台进程（PM2 daemon）交互是有风险的。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">应用管理</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>启动应用

<div class="org-src-container">

<pre class="src src-sh">pm2 start -n app1 app1.js
pm2 start -n app2 app2.js
</pre>
</div>
</li>

<li>列出应用

<div class="org-src-container">

<pre class="src src-sh">pm2 list
</pre>
</div>
</li>

<li>应用详情

<div class="org-src-container">

<pre class="src src-sh">pm2 describe app1
</pre>
</div>
</li>

<li>停止应用

<div class="org-src-container">

<pre class="src src-sh">pm2 stop app1
pm2 stop app2
</pre>
</div>
</li>

<li>删除应用

<div class="org-src-container">

<pre class="src src-sh">pm2 delete app1
pm2 delete app2
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">开机启动</h2>
<div class="outline-text-2" id="text-3">
<p>
应用启动后需要保存，应用才会在开机后由 pm2 服务启动。
</p>

<div class="org-src-container">

<pre class="src src-sh">pm2 save
</pre>
</div>

<p>
创建 pm2 系统服务，开机启动 pm2
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo pm2 startup systemd -u app
</pre>
</div>

<p>
不重启试运行一下，看是否正常
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#28165;&#31354;&#36827;&#31243;&#24182;&#36864;&#20986; pm2&#65292;&#22238;&#21040;&#24178;&#20928;&#30340;&#31995;&#32479;&#29366;&#24577;</span>
sudo systemctl stop pm2
ps aux | grep node

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#21551;&#21160; pm2 &#26381;&#21153;&#65292;&#39564;&#35777;&#19968;&#19979;&#24212;&#29992;&#26159;&#21542;&#27491;&#24120;&#21551;&#21160;</span>
sudo systemctl start pm2
pm2 list
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">日志管理</h2>
<div class="outline-text-2" id="text-4">
<p>
《 <a href="http://blog.kankanan.com/article/pm2-768465e55fd77ba17406.html">pm2的日志管理</a> 》有详细描述。
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">多 node.js 版本共存</h2>
<div class="outline-text-2" id="text-5">
<p>
pm2 本身就是 node.js 开发的程序，依赖 node.js，pm2 应用可以使用不同版本的 node.js。
</p>

<p>
pm2 命令行工具会通过“#!/usr/bin/env node”方式引用 node，如果应用也以同样的方式引用 node.js，就要随时注意切换 node.js 版本，一不小心 pm2 命令行工具和 pm2 应用使用的 node.js 版本会错乱，有一定风险性。一个 node.js 版本安装的模块不能保证与另一个 node.js 版本兼容，特别是一些 c++ 扩展模块。
</p>

<p>
我以前的实践中，应用会提供一个环境脚本 .bashrc ，在操作某个应用时，总是会通过 <code>source .bashrc</code> 先设置应用的 shell 环境变量，通过 $PATH 环境变量指定 node 命令为应用所需的 node.js 版本不是一个好主意，当操作 pm2 时，pm2 也会使用这个应用的 node.js 版本。
</p>

<p>
从这一点上看，不应该使用 node.js 、php、python、ruby 之类的脚本语言来开发进程管理器，它本身的依赖管理就是个大麻烦，使用 go、c 或 c++ 来开发会好得多。
</p>

<p>
理想情况下，pm2 和 应用（app）总是使用正确的 node.js 版本，可以归为以下三种情形。新应用应该总是假设布署环境为情形 1，不要过多考虑系统运行的 node.js 版本，这也就要求应用能够兼容各种 node.js 版本，但是现实情况是，node.js 以及 javascript 发展得太快了，应用依赖的各种 node.js 模块也往往做不到兼容各种 node.js 版本，很多模块基于实现的简洁性考虑，提供多个版本分别对应不同的 node.js 版本，导致应用也必须从一开始就选择特定的 node.js 版本，不同团队、人员及项目跟进新技术步调不一致时，情形 2 及情形 3 是现实的选择。
</p>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">情形 1：系统中只有一个 node.js 版本，并且是全局安装</h3>
<div class="outline-text-3" id="text-5-1">
<p>
在专机专用的生产环境下，这种情形会很常见，特别是 docker 容器环境下。
</p>

<p>
这是最简单的一种情况，不需要为 node.js 版本操心，整个开发组织在 node.js 版本选择上共进退，保持一致。
</p>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">情形 2：系统中有一个全局 node.js 版本，应用有自已的 node.js 版本</h3>
<div class="outline-text-3" id="text-5-2">
<p>
开发环境下，或者同一机器部署大量微服务的情况下，一般就是这种情形。
</p>

<p>
这是最复杂的一种情况，在运行应用代码的时候，要确保切到应用所需的 node.js 版本，在执行 pm2 操作的时候，要确保切到 pm2 所需的 node.js 版本，有如履薄冰的感觉。
</p>

<p>
node.js 版本需要在以下方面正确匹配：
</p>

<ul class="org-ul">
<li>pm2 的 node.js 版本

<p>
pm2 本身就是一套用户全局的进程管理工具，使用全局的 node.js 版本是自然而然的选择。
</p>

<p>
否则就一定要记得使用正确的 node.js 版本运行 pm2：/usr/local/node-v5.0.0/bin/node pm2 list，很是不便。
</p>
</li>

<li>应用的 node.js 版本

<p>
建议使用 <code>--interpreter</code> 选项指定 node.js 版本，参见讨论：<a href="https://github.com/Unitech/PM2/issues/1034">Using different versions of node via nvm for each app · Issue #1034 · Unitech/pm2</a> 。
</p>

<p>
警告：pm2 在 <code>cluster</code> 模式下， <code>--interpreter</code> 选项被忽略，详见：<a href="http://blog.kankanan.com/article/module-version-mismatch-95198bef639267e5.html">Module version mismatch 错误排查 | 看看俺 – KanKanAn.com</a> 。
</p>

<p>
这是最关键的一点，应用的 node.js 版本不对，可能导致应用启动失败，中断服务。
</p>
</li>

<li>应用的辅助脚本的 node.js 版本

<p>
使用 node.js 开发的应用附带命令行工具运行时如果 node.js 版本不对，通常不会对运行中的服务造成影响。
</p>

<p>
可以简单地写一些 shell 脚本封装，在 shell 脚本中指定正确的 node.js 版本，如：
</p>

<p>
<code>dump.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

/usr/local/node-v5.0.0/bin/node ./dump.js
</pre>
</div>

<p>
也可以直接在 node.js 脚本中引用正确的 node.js 版本，如：
</p>

<p>
<code>dump.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js">#!/usr/local/node-v5.0.0/bin/node

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">fs</span> = require(<span style="color: #8abeb7;">'fs'</span>);
...
</pre>
</div>

<div class="org-src-container">

<pre class="src src-sh">chmod a+x dump.js
./dump.js
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3">情形 3：系统没有全局 node.js 版本，应用各自维护 node.js 版本</h3>
<div class="outline-text-3" id="text-5-3">
<p>
这是上面情况的简化版，考验开发、运维团队的纪律性。
</p>

<p>
由于 $PATH 中没有 node.js，不会由于没有指定 node.js 绝对路径无意间引用错误的 node.js 版本。
</p>

<p>
可以把 node.js 安装在应用根目录下，如下目录结构所示：
</p>

<pre class="example">
Applications
|
|
|--- Application 1
|         |
|         |--------- node
|         |
|         |--------- package.json
|         |
|         |--------- ...
|
|    
|--- Application 2
|         |
|         |--------- node
|         |
|         |--------- package.json
|         |
|         |--------- ...
|
|
|--- Application 3
|         |
|         |--------- node
|         |
|         |--------- package.json
|         |
|         |--------- ...
|
</pre>

<p>
甚至 pm2 也通过以上方式安装自已的 node.js 版本。
</p>

<p>
通过 ./node/bin/node 引用 node.js 可执行程序，不要试图通过将 ./node/bin 目录加到 $PATH 中以简化使用，否则操作不同应用或 pm2 时，又会一不小心引用到错误的 node.js 版本。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">参考</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/">PM2 - One page documentation</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[node.js下进行mqtt实践]]></title>
            <link>/article/node.js-4e0b8fdb884c-mqtt-5b9e8df5.html</link>
            <guid>/article/node.js-4e0b8fdb884c-mqtt-5b9e8df5.html</guid>
            <pubDate>Sun, 21 Feb 2016 05:13:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
通过 mqtt 可以将设备连接在一起，能够实现将消息（可能来自服务器也可能来自其它设备）推送到设备，如果设备离线，
服务器可以暂存消息，在设备上线时再推送，有一些特性很关键：
</p>

<ul class="org-ul">
<li>offline

<p>
允许设备暂时离线。
</p>

<p>
即使是使用固定宽带，有些用户也会因为各种原因无法保持稳定的长连接，可能是上级路由设备有限制，或者是带宽被其它应用抢占而导致长连接不稳定。
将设备的在线状态与 TCP 长连接状态耦合在一起是不明智的。
</p>
</li>

<li>bridge

<p>
设备连接在不同的 broker 上，通过 bridge 实现互通。
</p>

<p>
支持几万台设备在线，估计一台 broker 就够了，但是一旦达到数十万、百万甚至上亿，肯定需要搭建 broker 集群，参见 <a href="http://www.kegel.com/c10k.html">The C10K problem</a>。
</p>
</li>
</ul>

<p>
简单起见， node.js 服务器端使用 <a href="https://github.com/mcollina/mosca">mosca</a>， 客户端使用 <a href="https://github.com/mqttjs/MQTT.js">MQTT.js</a> ，由于 <a href="https://github.com/mcollina/mosca">mosca</a> 不支持 bridge，本文不涉及 bridge 特性。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">客户端与服务器通信</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>客户端通过服务器给自已发个消息

<p>
<code>server.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">mosca</span> = require(<span style="color: #8abeb7;">'mosca'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">settings</span> = {
<span style="color: #969896; background-color: #1d1f21;"> </span>   port: 1883
};

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">server</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">mosca.Server</span>(settings);
server.on(<span style="color: #8abeb7;">'ready'</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'mosca server running'</span>);
}).on(<span style="color: #8abeb7;">'clientConnected'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'client('</span> + client.id + <span style="color: #8abeb7;">') connected'</span>);
}).on(<span style="color: #8abeb7;">'published'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">packet</span>, <span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'client('</span> + (client ? client.id : <span style="color: #8abeb7;">'internal'</span>) + <span style="color: #8abeb7;">') published top</span><span style="color: #8abeb7; text-decoration: underline;">ic('</span><span style="text-decoration: underline;"> + packet.topic + </span><span style="color: #8abeb7; text-decoration: underline;">'): '</span><span style="text-decoration: underline;"> + packet.payload);</span>
}).on(<span style="color: #8abeb7;">'subscribed'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">topic</span>, <span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'client('</span> + client.id + <span style="color: #8abeb7;">') subscribed topic('</span> + topic + <span style="color: #8abeb7;">')'</span>);
}).on(<span style="color: #8abeb7;">'unsubscribed'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">topic</span>, <span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'client('</span> + client.id + <span style="color: #8abeb7;">') unsubscribed topic('</span> + topic + <span style="color: #8abeb7;">')'</span>);
}).on(<span style="color: #8abeb7;">'clientDisconnecting'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'client('</span> + client.id + <span style="color: #8abeb7;">') disconnecting'</span>);
}).on(<span style="color: #8abeb7;">'clientDisconnected'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'client('</span> + client.id + <span style="color: #8abeb7;">') disconnected'</span>);
});
</pre>
</div>

<p>
<code>client.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">mqtt</span> = require(<span style="color: #8abeb7;">'mqtt'</span>);


<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = mqtt.connect(<span style="color: #8abeb7;">'mqtt://127.0.0.1:1883'</span>);
client.on(<span style="color: #8abeb7;">'connect'</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.subscribe(<span style="color: #8abeb7;">'presence'</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.publish(<span style="color: #8abeb7;">'presence'</span>, <span style="color: #8abeb7;">'a message from myself'</span>);
}).on(<span style="color: #8abeb7;">'message'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">topic</span>, <span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(topic + <span style="color: #8abeb7;">': '</span> + message.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.end();
});
</pre>
</div>

<p>
运行 <code>server.js</code>
</p>
<pre class="example">
$ node server.js
mosca server running
client(mqttjs_a423c0af) connected
client(internal) published topic($SYS/41TXEHPDe/new/clients): mqttjs_a423c0af
client(mqttjs_a423c0af) subscribed topic(presence)
client(internal) published topic($SYS/41TXEHPDe/new/subscribes): {"clientId":"mqttjs_a423c0af","topic":"presence"}
client(mqttjs_a423c0af) published topic(presence): a message from myself
client(mqttjs_a423c0af) unsubscribed topic(presence)
client(mqttjs_a423c0af) disconnected
client(internal) published topic($SYS/41TXEHPDe/new/unsubscribes): {"clientId":"mqttjs_a423c0af","topic":"presence"}
client(internal) published topic($SYS/41TXEHPDe/disconnect/clients): mqttjs_a423c0af
</pre>

<p>
运行 <code>client.js</code>
</p>
<pre class="example">
$ node client.js
presence: a message from myself
$
</pre>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">客户端与客户端通信</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>客户端发送消息给另一个客户端

<p>
下面的例子演示了客户端通过约定的 <code>topic</code> 互相通信。
</p>

<p>
<code>client_sub.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">mqtt</span> = require(<span style="color: #8abeb7;">'mqtt'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = mqtt.connect(<span style="color: #8abeb7;">'mqtt://127.0.0.1:1883'</span>);
client.on(<span style="color: #8abeb7;">'connect'</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.publish(<span style="color: #8abeb7;">'sub'</span>, <span style="color: #8abeb7;">'message from pub'</span>);
}).on(<span style="color: #8abeb7;">'message'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">topic</span>, <span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(topic + <span style="color: #8abeb7;">': '</span> + message.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.end();
});
</pre>
</div>

<p>
<code>client_pub.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">mqtt</span> = require(<span style="color: #8abeb7;">'mqtt'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = mqtt.connect(<span style="color: #8abeb7;">'mqtt://127.0.0.1:1883'</span>);
client.on(<span style="color: #8abeb7;">'connect'</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.publish(<span style="color: #8abeb7;">'sub'</span>, <span style="color: #8abeb7;">'message from pub'</span>);
}).on(<span style="color: #8abeb7;">'message'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">topic</span>, <span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(topic + <span style="color: #8abeb7;">': '</span> + message.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.end();
});
</pre>
</div>

<p>
运行 <code>server.js</code>
</p>
<pre class="example">
$ node server.js
mosca server running
client(mqttjs_ebdc9fd4) connected
client(internal) published topic($SYS/4Jk9PBwDe/new/clients): mqttjs_ebdc9fd4
client(mqttjs_ebdc9fd4) subscribed topic(sub)
client(internal) published topic($SYS/4Jk9PBwDe/new/subscribes): {"clientId":"mqttjs_ebdc9fd4","topic":"sub"}
client(mqttjs_ff000868) connected
client(internal) published topic($SYS/4Jk9PBwDe/new/clients): mqttjs_ff000868
client(mqttjs_ff000868) published topic(sub): message from pub
client(mqttjs_ebdc9fd4) unsubscribed topic(sub)
client(mqttjs_ebdc9fd4) disconnected
client(internal) published topic($SYS/4Jk9PBwDe/new/unsubscribes): {"clientId":"mqttjs_ebdc9fd4","topic":"sub"}
client(internal) published topic($SYS/4Jk9PBwDe/disconnect/clients): mqttjs_ebdc9fd4
</pre>

<p>
运行 <code>client_sub.js</code>
</p>
<pre class="example">
$ node client_sub.js
sub: message from pub
$
</pre>

<p>
运行 <code>client_pub.js</code>
</p>
<pre class="example">
$ node client_pub.js
</pre>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">客户端与客户端离线通信</h2>
<div class="outline-text-2" id="text-3">
<p>
离线通信需要同时满足以下条件
</p>

<ul class="org-ul">
<li>服务器配置持久存储
</li>

<li>订阅方启用会话状态

<p>
连接服务器时使用同样的 clientId 并指定 <code>clean</code> 为 <code>false</code>
</p>
</li>

<li>发布方发布持久消息

<p>
发布消息时指定 <code>qos</code> 大于 <code>0</code> 以及 <code>retain</code> 为 <code>true</code>
</p>
</li>
</ul>

<p>
下面的例子演示了客户端接收离线消息
</p>

<p>
<code>client_sub.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">mqtt</span> = require(<span style="color: #8abeb7;">'mqtt'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = mqtt.connect(<span style="color: #8abeb7;">'mqtt://127.0.0.1:1883'</span>, {clientId: <span style="color: #8abeb7;">'sub'</span>, clean: <span style="color: #81a2be;">fals</span><span style="color: #81a2be; text-decoration: underline;">e</span><span style="text-decoration: underline;">});</span>
client.on(<span style="color: #8abeb7;">'connect'</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.subscribe(<span style="color: #8abeb7;">'sub'</span>);
}).on(<span style="color: #8abeb7;">'message'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">topic</span>, <span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(topic + <span style="color: #8abeb7;">': '</span> + message.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.end();
});
</pre>
</div>

<p>
<code>client_pub.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">mqtt</span> = require(<span style="color: #8abeb7;">'mqtt'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = mqtt.connect(<span style="color: #8abeb7;">'mqtt://127.0.0.1:1883'</span>, {clientId: <span style="color: #8abeb7;">'pub'</span>});
client.on(<span style="color: #8abeb7;">'connect'</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.publish(<span style="color: #8abeb7;">'sub'</span>, <span style="color: #8abeb7;">'message from pub'</span>, {qos: 1, retain: <span style="color: #81a2be;">true</span>});
}).on(<span style="color: #8abeb7;">'message'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">topic</span>, <span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(topic + <span style="color: #8abeb7;">': '</span> + message.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.end();
});
</pre>
</div>

<p>
运行 <code>srever.js</code>
</p>
<pre class="example">
$ node mqtt_server.js
mosca server running
client(sub) connected
client(internal) published topic($SYS/V19OSVfix/new/clients): sub
client(sub) subscribed topic(sub)
client(internal) published topic($SYS/V19OSVfix/new/subscribes): {"clientId":"sub","topic":"sub"}
client(sub) disconnected
client(internal) published topic($SYS/V19OSVfix/disconnect/clients): sub
client(pub) connected
client(internal) published topic($SYS/V19OSVfix/new/clients): pub
client(pub) published topic(sub): message from pub
client(sub) connected
client(internal) published topic($SYS/V19OSVfix/new/clients): sub
client(sub) subscribed topic(sub)
client(internal) published topic($SYS/V19OSVfix/new/subscribes): {"clientId":"sub","topic":"sub"}
client(sub) disconnected
client(internal) published topic($SYS/V19OSVfix/disconnect/clients): sub
</pre>

<p>
运行 <code>client_sub.js</code> 订阅消息后退出
</p>
<pre class="example">
$ node client_sub.js 
sub: message from pub
$
</pre>

<p>
运行 <code>client_pub.js</code> 发布消息
</p>
<pre class="example">
$ node mqtt_client_pub.js
</pre>

<p>
运行 <code>client_sub.js</code> 接收离线消息后退出
</p>
<pre class="example">
$ node client_sub.js 
sub: message from pub
$
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">参考</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">MQTT Version 3.1.1</a>
</p>

<p>
<a href="https://www.youtube.com/watch?v=WE7GVIFRV7Q">Matteo Collina: "MQTT" and "Node.js"- Messaging the Internet of Things </a>
</p>

<p>
<a href="http://thejackalofjavascript.com/getting-started-mqtt/">Getting started with MQTT | The Jackal of Javascript</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[pm2的日志管理]]></title>
            <link>/article/pm2-768465e55fd77ba17406.html</link>
            <guid>/article/pm2-768465e55fd77ba17406.html</guid>
            <pubDate>Wed, 17 Feb 2016 06:16:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://github.com/Unitech/pm2">pm2</a> 自身的日志文件 ~/.pm2/pm2.log，下面讲的是 <a href="https://github.com/Unitech/pm2">pm2</a> app（应用）的日志文件。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">默认日志</h2>
<div class="outline-text-2" id="text-1">
<p>
每个 app（应用） 会生成 instances*2 （实例数×2）个日志文件。
</p>

<dl class="org-dl">
<dt> app 的标准输出日志文件 </dt><dd>~/.pm2/logs/&lt;app name&gt;-out-&lt;instance id&gt;.log
</dd>

<dt> app 的错误输出日志文件 </dt><dd>~/.pm2/logs/&lt;app name&gt;-error-&lt;instance id&gt;.log
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">合并输出类型日志（-l）</h2>
<div class="outline-text-2" id="text-2">
<p>
每个 app（应用） 会生成 instances+1 （实例数+1）个日志文件。
</p>

<dl class="org-dl">
<dt> app 的日志文件 </dt><dd>~/.pm2/logs/&lt;app name&gt;-&lt;instance id&gt;.log
</dd>
</dl>

<p>
不影响默认日志。
</p>

<ul class="org-ul">
<li>可以指定合并输出类型的日志文件名（-l app.log）

<p>
输出日志文件名为 app-&lt;instance id&gt;.log
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">合并实例日志（&#x2013;merge-logs）</h2>
<div class="outline-text-2" id="text-3">
<p>
同一 app（应用）的所有 instances（实例）日志文件放在一起。
</p>

<dl class="org-dl">
<dt> app 的默认标准输出日志文件 </dt><dd>~/.pm2/logs/&lt;app name&gt;-out.log
</dd>

<dt> app 的默认错误输出日志文件 </dt><dd>~/.pm2/logs/&lt;app name&gt;-error.log
</dd>

<dt> app 的合并输出类型日志文件 </dt><dd>~/.pm2/logs/&lt;app name&gt;.log
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">禁止默认日志</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>禁止默认的标准输出日志文件（-o /dev/null）
</li>

<li>禁止默认的错误输出日志文件（-e /dev/null）
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">示例：app 生成一个日志文件简化日志管理</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-sh">pm2 -n app -i 0 -l app.log -o /dev/null -e /dev/null --merge-logs start app.js
</pre>
</div>

<p>
这样只会生成一个日志文件 app.log。
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">定期清理日志</h2>
<div class="outline-text-2" id="text-6">
<p>
不建议使用 <a href="https://www.npmjs.com/package/pm2-logrotate">pm2-logrotate</a> ，太多问题了（详见： <a href="http://blog.kankanan.com/article/63a75236-pm2-768465e55fd765874ef659275c0f.html#sec-1">控制pm2的日志文件大小</a> ）。
</p>

<p>
还是使用 logrotate 服务靠谱（参考 <a href="http://pm2.keymetrics.io/docs/usage/log-management/#setting-up-a-native-logrotate">Setting up a native logrotate</a> <a href="http://huoding.com/2013/04/21/246">被遗忘的Logrotate | 火丁笔记</a>）：
</p>

<p>
<code>/etc/logrotate.d/pm2-root</code>
</p>
<pre class="example">
/root/.pm2/pm2.log /root/.pm2/logs/*.log {
    daily
    size 1M
    rotate 10
    create 600 nobody nobody
    missingok
    notifempty
    compress
    sharedscripts
    copytruncate
}
</pre>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[修复文件目录权限引起的错误：Cannot find module]]></title>
            <link>/article/4fee590d65874ef676ee5f55674396505f158d77768495198befff1a-cannot-find-module.html</link>
            <guid>/article/4fee590d65874ef676ee5f55674396505f158d77768495198befff1a-cannot-find-module.html</guid>
            <pubDate>Mon, 28 Dec 2015 07:28:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<code>node.js</code> 应用部署后多次遇到这种错误：
</p>

<pre class="example">
Error: Cannot find module '../encodings'
      at Function.Module._resolveFilename (module.js:338:15)
      at Function.Module._load (module.js:289:25)
      at Function._load (/usr/local/www.xxxxxxxx.com/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
      at Module.require (module.js:366:17)
      at require (module.js:385:17)
      at Object.getCodec (/usr/local/www.xxxxxxxx.com/node_modules/koa-body/node_modules/co-body/node_modules/raw-body/node_modules/iconv-lite/lib/index.js:61:27)
      at Object.getDecoder (/usr/local/www.xxxxxxxx.com/node_modules/koa-body/node_modules/co-body/node_modules/raw-body/node_modules/iconv-lite/lib/index.js:118:23)
      at getDecoder (/usr/local/www.xxxxxxxx.com/node_modules/koa-body/node_modules/co-body/node_modules/raw-body/index.js:44:18)
      at readStream (/usr/local/www.xxxxxxxx.com/node_modules/koa-body/node_modules/co-body/node_modules/raw-body/index.js:218:15)
      at executor (/usr/local/www.xxxxxxxx.com/node_modules/koa-body/node_modules/co-body/node_modules/raw-body/index.js:110:5)
</pre>

<p>
下意识地以为是 <code>node.js</code> 版本用错了（ <code>npm install</code> 和运行时的 <code>node.js</code> 版本不一致），删除 <code>node_modules</code> 重新 <code>npm install</code> 后还是一样的问题。
</p>

<p>
查了一下源代码，找到了出错位置 <code>node_modules/koa-body/node_modules/co-body/node_modules/raw-body/node_modules/iconv-lite/lib/index.js:61</code> ：
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">if</span> (!iconv.encodings)
<span style="color: #969896; background-color: #1d1f21;"> </span>   iconv.encodings = require(<span style="color: #8abeb7;">"../encodings"</span>); <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">Lazy load all encoding definit</span><span style="color: #969896; font-style: italic; text-decoration: underline;">ions.</span>
</pre>
</div>

<p>
这是延迟加载模块，代码本身没有错， <code>../encodings</code> 模块是存在的，以前也有遇到类似问题，不过是在 <code>node.js</code> 一启动就报错，因为系统默认的权限太严格了（如： <code>umask</code> 为 <code>0022</code> ），
<code>npm install</code> 安装的 <code>node_modules</code> 其它用户（如： <code>nobody</code> ）没有访问权限。这次是在处理用户请求过程中报错，考虑到上面的模块是延迟加载，
在初始化完成与监听端口处理用户请求的代码之间，我的代码有 <code>setuid</code> 到 <code>nobody</code> 的逻辑，应该还是文件目录权限引起。
</p>

<p>
最终发现是 <code>/usr/local/www.xxxxxxxx.com</code> 在创建时因为系统默认的权限设置太严格（ <code>umask</code> 为 <code>0022</code> ），导致 <code>nobody</code> 用户无法访问，改一下目录权限后问题修复。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[node.js连接redis高可用性方案：Sentinel]]></title>
            <link>/article/node.js-8fde63a5-redis-9ad853ef7528602765b96848ff1a-sentinel.html</link>
            <guid>/article/node.js-8fde63a5-redis-9ad853ef7528602765b96848ff1a-sentinel.html</guid>
            <pubDate>Sun, 27 Dec 2015 06:27:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
node.js后台应用在开始时往往不会搞得太复杂，使用单实例的redis，一般都会使用官方推荐的模块 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">访问单实例node.js</h2>
<div class="outline-text-2" id="text-1">
<p>
在 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 的基础上稍作封装，主要是避免并行访问时意外创建多个redis连接。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">database.js</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">redis</span> = require(<span style="color: #8abeb7;">'redis'</span>);

<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">Database</span>() {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;

<span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis_host = <span style="color: #8abeb7;">'127.0.0.1'</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis_port = 6379;
<span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis_db = 2;

<span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis = <span style="color: #81a2be;">null</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis_selected = <span style="color: #81a2be;">false</span>;
}

Database.<span style="color: #81a2be;">prototype</span>.redis = <span style="color: #b5bd68;">function</span>(<span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (self._redis &amp;&amp; self._redis_selected) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, self._redis);
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (! self._redis) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis = redis.createClient(self._redis_port, self._redis_host);
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis.select(self._redis_db, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis_selected = <span style="color: #81a2be;">true</span>;

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, self._redis);
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
};


module.exports = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Database</span>();
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">client.js</h3>
<div class="outline-text-3" id="text-1-2">
<p>
使用 <code>database.js</code>
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">db</span> = require(<span style="color: #8abeb7;">'./database'</span>);

db.redis(<span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span>(err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.error(err.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> process.exit(1);
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   client.set(<span style="color: #8abeb7;">'hello'</span>, <span style="color: #8abeb7;">'world'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span>(err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.error(err.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> process.exit(1);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   setTimeout(<span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.get(<span style="color: #8abeb7;">'hello'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">value</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span>(err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.error(err.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> process.exit(1);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'hello: '</span> + value);

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.exit(0);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   });
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }, 20*1000);
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
});
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">访问主备Redis</h2>
<div class="outline-text-2" id="text-2">
<p>
但是随着服务的成功，用户量开始增加，另外对稳定性、可靠性有了一定要求，确保数据的安全性成了重中之重，redis由单机转向主/备（Replication）甚至集群（Cluster），
本文只关注使用 <code>Sentinel</code> 管理的主/备（Replication）Redis。
</p>

<p>
这就意味着Redis客户端应用不能直接连接Redis实例，而是需要先连接 <code>Sentinel</code> ，根据 <code>Sentinel</code> 提供的 <code>Master</code> 或 <code>Slave</code> 地址连接Redis实例，
还要接收 <code>Sentinel</code> 的 <code>Master</code> <code>Slave</code> 变动通知，重连Redis实例。
</p>

<p>
不幸的是，<a href="https://github.com/NodeRedis/node_redis">node_redis</a> 模块只支持单实例redis，基于 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 实现与 <code>Sentinel</code> 的交互工作量比较大。
</p>

<p>
所幸的是 <a href="http://github.com/luin/ioredis/">ioredis</a> （现已成为redis官方推荐模块）出现了，它支持 <code>Sentinel</code> ，而且大部分API跟 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 是兼容的:
</p>

<blockquote>
<p>
ioredis is a robust, full-featured Redis client that is used in the world's biggest online commerce company Alibaba and many other awesome companies.
</p>

<ol class="org-ol">
<li>Full-featured. It supports Cluster, Sentinel, Pipelining and of course Lua scripting &amp; Pub/Sub (with the support of binary messages).
</li>
<li>High performance.
</li>
<li>Delightful API. It works with Node callbacks and Bluebird promises.
</li>
<li>Transformation of command arguments and replies.
</li>
<li>Transparent key prefixing.
</li>
<li>Abstraction for Lua scripting, allowing you to define custom commands.
</li>
<li>Support for binary data.
</li>
<li>Support for TLS.
</li>
<li>Support for offline queue and ready checking.
</li>
<li>Support for ES6 types, such as Map and Set.
</li>
<li>Support for GEO commands (Redis 3.2 Unstable).
</li>
<li>Sophisticated error handling strategy.
</li>
</ol>
</blockquote>

<p>
<a href="http://github.com/luin/ioredis/">ioredis</a> 提供了从 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 进行迁移的文档 <a href="https://github.com/luin/ioredis/wiki/Migrating-from-node_redis">Migrating from node_redis</a> 。
</p>

<p>
但也要注意 <a href="http://github.com/luin/ioredis/">ioredis</a> 的不同之处，如连接 <code>Redis</code> 失败时， <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 默认是不重连，而 <a href="http://github.com/luin/ioredis/">ioredis</a> 会重连，在 <code>redis</code> 故障时可能导致 <code>node.js</code> 积压大量请求耗尽内存。
</p>

<p>
参考文档 <a href="https://github.com/luin/ioredis/blob/master/README.md#sentinel">ioredis Sentinel</a> ，将上一节 <code>访问单实例node.js</code> 中redis封装代码改成支持 <code>Sentinel</code>
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">database.js</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">Redis</span> = require(<span style="color: #8abeb7;">'ioredis'</span>);

<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">Database</span>() {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;

<span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis_options = {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   name: <span style="color: #8abeb7;">'mymaster'</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   sentinels: [{
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   host: <span style="color: #8abeb7;">'127.0.0.1'</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   port: 5000
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }, {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   host: <span style="color: #8abeb7;">'127.0.0.1'</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   port: 5001
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }],
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   db: 2
<span style="color: #969896; background-color: #1d1f21;"> </span>   };

<span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis = <span style="color: #81a2be;">null</span>;
}

Database.<span style="color: #81a2be;">prototype</span>.redis = <span style="color: #b5bd68;">function</span>(<span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span><span style="color: #b5bd68;">if</span> (! self._redis) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   self._redis = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>(self._redis_options);
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, self._redis);
};

module.exports = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Database</span>();
</pre>
</div>

<p>
和使用 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 的 <code>database.js</code> 对照一下，可以发现 <a href="http://github.com/luin/ioredis/">ioredis</a> 连接 <code>redis</code> 时，支持 <code>db</code> 选项，可以省去调用 <code>select</code> 。
</p>

<p>
值得注意的是 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 最近开始支持连接 <code>redis</code> 时指定 <code>db</code> 选项，见 <a href="https://github.com/NodeRedis/node_redis/commit/a4285c156c5b8964d92a36bd7f361a6f40e2449a">Parse redis url just like IANA · NodeRedis/node_redis@a4285c1</a> ，
使用该特性时请安装最新版的 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 。
</p>

<blockquote>
<p>
db: null; If set, client will run redis select command on connect. This is not recommended.
</p>
</blockquote>
<p>
引用自 <a href="https://github.com/NodeRedis/node_redis#rediscreateclient">redis.createClient()文档</a>
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">启动 Redis 及 Sentinel</h3>
<div class="outline-text-3" id="text-2-2">
<p>
启动上一篇文章《 <a href="http://blog.kankanan.com/article/redis-9ad853ef7528602765b96848ff1a-sentinel.html">redis高可用性方案：Sentinel</a> 》配置好的 <code>Sentinel</code>
</p>

<ul class="org-ul">
<li><code>Master</code> <code>redis-server ./redis-master.conf</code> 
</li>

<li><code>Slave</code> <code>redis-server ./redis-slave.conf</code>
</li>

<li><code>Sentinel a</code> <code>redis-sentinel ./redis-sentinel-a.conf</code>
</li>

<li><code>Sentinel b</code> <code>redis-sentinel ./redis-sentinel-b.conf</code>
</li>

<li><code>Sentinel c</code> <code>redis-sentinel ./redis-sentinel-c.conf</code>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">演示运行</h3>
<div class="outline-text-3" id="text-2-3">
<p>
运行演示脚本
</p>

<div class="org-src-container">

<pre class="src src-sh"><span id="coderef-master_write" class="coderef-off"><span class="linenr">1: </span>node client.js &amp;</span>
<span id="coderef-wait_sync" class="coderef-off"><span class="linenr">2: </span>sleep 1</span>
<span id="coderef-slave_read" class="coderef-off"><span class="linenr">3: </span>redis-cli -p 6380 -n 2 get hello</span>
<span id="coderef-failover" class="coderef-off"><span class="linenr">4: </span>redis-cli -p 6379 debug sleep 30 &amp;</span>
</pre>
</div>

<dl class="org-dl">
<dt> 行 <a href="#coderef-master_write"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-master_write');" onmouseout="CodeHighlightOff(this, 'coderef-master_write');">1</a> </dt><dd>运行 <code>client.js</code> 在 <code>Master</code> 写入键值
</dd>

<dt> 行 <a href="#coderef-wait_sync"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-wait_sync');" onmouseout="CodeHighlightOff(this, 'coderef-wait_sync');">2</a> </dt><dd>等待 <code>Master</code> 同步数据到 <code>Slave</code>
</dd>

<dt> 行 <a href="#coderef-slave_read"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read');">3</a> </dt><dd>从 <code>Slave</code> 读取键值
</dd>

<dt> 行 <a href="#coderef-failover"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-failover');" onmouseout="CodeHighlightOff(this, 'coderef-failover');">4</a> </dt><dd>触发故障切换
</dd>
</dl>

<p>
演示脚本运行结果
</p>

<pre class="example">
<span id="coderef-slave_read_result" class="coderef-off"><span class="linenr">5: </span>"world"</span>
<span id="coderef-slave_read_status" class="coderef-off"><span class="linenr">6: </span>OK</span>
<span id="coderef-master_read" class="coderef-off"><span class="linenr">7: </span>hello: world</span>
</pre>

<dl class="org-dl">
<dt> 行 <a href="#coderef-slave_read_result"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read_result');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read_result');">5</a> </dt><dd>演示脚本行 <a href="#coderef-slave_read"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read');">3</a> 的redis命令执行结果
</dd>

<dt> 行 <a href="#coderef-slave_read_status"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read_status');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read_status');">6</a> </dt><dd>演示脚本行 <a href="#coderef-slave_read"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read');">3</a> 的redis命令执行状态
</dd>

<dt> 行 <a href="#coderef-master_read"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-master_read');" onmouseout="CodeHighlightOff(this, 'coderef-master_read');">7</a> </dt><dd>演示脚本行 <a href="#coderef-master_write"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-master_write');" onmouseout="CodeHighlightOff(this, 'coderef-master_write');">1</a> 后台运行结束时输出的键值，此时由于主备已切换，是从新的 <code>Master</code> （原 <code>Slave</code> ）上获取的
</dd>
</dl>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">参考</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://github.com/luin/ioredis/blob/master/README.md#sentinel">ioredis Sentinel</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[控制pm2的日志文件大小]]></title>
            <link>/article/63a75236-pm2-768465e55fd765874ef659275c0f.html</link>
            <guid>/article/63a75236-pm2-768465e55fd765874ef659275c0f.html</guid>
            <pubDate>Fri, 25 Dec 2015 10:41:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
下班前发现线上服务器的 <code>100G</code> 磁盘只有 <code>10%</code> 空闲空间了，检查了一下是 <code>pm2</code> 的日志文件（在 <code>~/.pm2/logs</code> 目录下）占用的。
</p>

<p>
参考帖子 <a href="https://github.com/Unitech/pm2/issues/535">Limit logs size? · Issue #535 · Unitech/pm2</a> 安装 <a href="https://www.npmjs.com/package/pm2-logrotate">pm2-logrotate</a> <code>pm2 install pm2-logrotate</code> ，
</p>

<p>
安装完成后，观察到正在按时间切分成多个日志文件，但空闲空间在迅速减少，眼看就要低于 <code>5%</code> 了，要是磁盘满了会影响关键的 <code>redis</code> 数据库，
</p>

<p>
立即手工将日志文件全部删除，但是磁盘空闲空间在继续减少，明白是 <code>pm2</code> 或者 <code>pm2-logrotate</code> 打开了日志文件导致空间无法释放，
</p>

<p>
立即执行 <code>pm2 kill</code> ， 等 <code>crontab</code> 将服务重新拉起，一分钟后确认危机解决。好在这台服务器上的 <code>node.js</code> 服务都不是很关键，
</p>

<p>
没有造成太大影响，圣诞节快乐:)
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">今天（2016-02-16）运维人员发现pm2的日志快占满磁盘</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://www.npmjs.com/package/pm2-logrotate">pm2-logrotate</a> （当前版本为1.3.1） 默认情况下，并未限制日志文件数，旧的日志文件未自动删除释放空间，需要设置 retain 配置项：
</p>

<div class="org-src-container">

<pre class="src src-js">pm2 set pm2-logrotate:retain 100
</pre>
</div>

<p>
这样最多会保留 100 个日志文件。
</p>

<p>
max_size 配置项默认是 10MB，并不意味着切割出来的日志文件大小一定就是 10MB，而是检查时发现日志文件大小达到 max_size，则触发日志切割。
</p>

<p>
interval 和 interval_unit 配置项指定了按时间维度进行日志切割。
</p>

<p>
切割是指将日志文件内容移到名称为 &lt;project name&gt;-out__YYYY-MM-DD-HH-mm.log 的日志文件中，所以日志文件大小往往是超过 max_size 的。
</p>

<p>
由于默认配置 interval 为 1， interval_unit 为 DD，所以每天至少会切割一次日志，每分钟当发现日志大小超过 10MB，也会触发一次日志切割。
</p>

<p>
pm2-logrotate 现阶段小问题还是比较多的（详见项目的 <a href="https://github.com/pm2-hive/pm2-logrotate/issues">issues</a> ），如：
</p>

<ul class="org-ul">
<li>日志文件日期始终是前一天，日志文件大小超过 max_size 触发日志切割时，文件名中的日期也为前一天不合理了。

<p>
详见 <a href="https://github.com/pm2-hive/pm2-logrotate/issues/18">Fast growing log files may be overwritten #18</a>
</p>
</li>

<li>如果日志文件写得很快，切割时有可能因为日志文件名冲突，导致同名的旧日志文件被覆盖。

<p>
详见 <a href="https://github.com/pm2-hive/pm2-logrotate/issues/17">Rotated files date #17</a>
</p>
</li>

<li>pm2 开启 merge_logs 时，日志会重复

<p>
详见 <a href="https://github.com/pm2-hive/pm2-logrotate/issues/14">logrotate rotate the log multiple times if merge_logs is true #14</a>
</p>
</li>

<li>无法精确限制日志占用空间。

<p>
不过 logrotate 工具也不能，所以也不算是个严重的问题。
</p>
</li>
</ul>

<p>
更好的方式可能是使用操作系统的 logrotate 服务。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[tls连接内存占用]]></title>
            <link>/article/tls-8fde63a551855b5853607528.html</link>
            <guid>/article/tls-8fde63a551855b5853607528.html</guid>
            <pubDate>Sun, 20 Dec 2015 16:17:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
我们有一个 <code>node.js</code> 服务，有大量 <code>tls</code> 长连接，跑了一段时间后发现内存消耗比较大，每个 <code>node.js</code> 实例维持 <code>3000</code> 个连接需要消耗 <code>1G</code> 略多的内存，但是也不能确定有内存泄露，毕竟内存没有再往上涨导致服务中断，所以觉得有必要测试一下 <code>tls</code> 连接的内存消耗情况。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">tls服务器</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">tls</span>         = require(<span style="color: #8abeb7;">'tls'</span>),
<span style="color: #969896; background-color: #1d1f21;"> </span>   fs          = require(<span style="color: #8abeb7;">'fs'</span>);


<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">options</span> = {
<span style="color: #969896; background-color: #1d1f21;"> </span>   key: fs.readFileSync(<span style="color: #8abeb7;">'server.key'</span>),
<span style="color: #969896; background-color: #1d1f21;"> </span>   cert: fs.readFileSync(<span style="color: #8abeb7;">'server.cert'</span>),
<span style="color: #969896; background-color: #1d1f21;"> </span>   handshakeTimeout: 10*1000,
<span style="color: #969896; background-color: #1d1f21;"> </span>   plain: <span style="color: #81a2be;">true</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   ssl: <span style="color: #81a2be;">true</span>
};

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">port</span> = 1234;
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">tlsServer</span> = tls.createServer(options, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">socket</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   socket.on(<span style="color: #8abeb7;">"close"</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">'tls client('</span> + socket.remoteAddress + <span style="color: #8abeb7;">':'</span> + socket.remoteP<span style="text-decoration: underline;">ort +</span><span style="color: #8abeb7; text-decoration: underline;">') closed'</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
}).listen(port, <span style="color: #8abeb7;">"0.0.0.0"</span>, <span style="color: #b5bd68;">function</span>(){
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'tls server listening on port('</span> + port + <span style="color: #8abeb7;">')'</span>);
});
tlsServer.maxConnections = 10000;
tlsServer.on(<span style="color: #8abeb7;">'clientError'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">exception</span>, <span style="color: #f0c674;">socket</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">'tls client('</span> + socket.remoteAddress + <span style="color: #8abeb7;">':'</span> + socket.remotePort <span style="text-decoration: underline;">+</span><span style="color: #8abeb7; text-decoration: underline;">') error('</span><span style="text-decoration: underline;"> + exception + </span><span style="color: #8abeb7; text-decoration: underline;">')'</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   socket.destroy();
});

<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">memoryUsage</span>() {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">mem</span> = process.memoryUsage();
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">format</span> = <span style="color: #b5bd68;">function</span>(<span style="color: #f0c674;">bytes</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> (bytes/1024/1024).toFixed(2)+<span style="color: #8abeb7;">'MB'</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   };
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'Process: heapTotal '</span>+format(mem.heapTotal) + <span style="color: #8abeb7;">' heapUsed '</span> + for<span style="text-decoration: underline;">mat(mem.heapUsed) + </span><span style="color: #8abeb7; text-decoration: underline;">' rss '</span><span style="text-decoration: underline;"> + format(mem.rss));</span>
}

setInterval(<span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   tlsServer.getConnections(<span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">tlsCount</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.error(<span style="color: #8abeb7;">"get tls connections count error("</span> + err.toString() + <span style="color: #8abeb7; text-decoration: underline;">")"</span><span style="text-decoration: underline;">);</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">"server: tls connections("</span> + tlsCount + <span style="color: #8abeb7;">")"</span>);

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   memoryUsage();
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
}, 1*1000);
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">tls客户端</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">tls</span> = require(<span style="color: #8abeb7;">'tls'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">tlsCount</span> = 0;

<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">connect</span>() {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">socket</span> = tls.connect(1234, {rejectUnauthorized: <span style="color: #81a2be;">false</span>}, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   tlsCount += 1;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   socket.setEncoding(<span style="color: #8abeb7;">'utf8'</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   socket.on(<span style="color: #8abeb7;">'data'</span>, <span style="color: #b5bd68;">function</span>(<span style="color: #f0c674;">data</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   });
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   socket.on(<span style="color: #8abeb7;">'close'</span>, <span style="color: #b5bd68;">function</span>() {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   tlsCount -= 1;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   });
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
}

<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">memoryUsage</span>() {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">mem</span> = process.memoryUsage();
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">format</span> = <span style="color: #b5bd68;">function</span>(<span style="color: #f0c674;">bytes</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> (bytes/1024/1024).toFixed(2)+<span style="color: #8abeb7;">'MB'</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   };
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">'Process: heapTotal '</span>+format(mem.heapTotal) + <span style="color: #8abeb7;">' heapUsed '</span> + for<span style="text-decoration: underline;">mat(mem.heapUsed) + </span><span style="color: #8abeb7; text-decoration: underline;">' rss '</span><span style="text-decoration: underline;"> + format(mem.rss));</span>
}

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">round</span> = 0;
setInterval(<span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (round &lt; 10) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">for</span>(<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">i</span> = 0; i &lt; 100; ++i) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   connect();
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   round += 1;
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">"client: tls connections("</span> + tlsCount + <span style="color: #8abeb7;">")"</span>);

<span style="color: #969896; background-color: #1d1f21;"> </span>   memoryUsage();
}, 1000);
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">tls服务器日志</h2>
<div class="outline-text-2" id="text-3">
<p>
连接从 <code>0</code> 到 <code>1000</code> 内存增长
</p>

<pre class="example">
server: tls connections(0)
Process: heapTotal 9.14MB heapUsed 4.80MB rss 23.69MB
server: tls connections(100)
Process: heapTotal 10.13MB heapUsed 5.59MB rss 29.53MB
server: tls connections(200)
Process: heapTotal 10.13MB heapUsed 6.75MB rss 32.32MB
server: tls connections(300)
Process: heapTotal 9.18MB heapUsed 7.32MB rss 34.37MB
server: tls connections(400)
Process: heapTotal 10.16MB heapUsed 8.11MB rss 37.05MB
server: tls connections(500)
Process: heapTotal 11.14MB heapUsed 8.66MB rss 38.18MB
server: tls connections(600)
Process: heapTotal 11.14MB heapUsed 9.48MB rss 39.73MB
server: tls connections(600)
Process: heapTotal 12.12MB heapUsed 9.62MB rss 40.50MB
server: tls connections(700)
Process: heapTotal 15.04MB heapUsed 10.16MB rss 42.69MB
server: tls connections(800)
Process: heapTotal 18.97MB heapUsed 10.72MB rss 44.50MB
server: tls connections(900)
Process: heapTotal 18.97MB heapUsed 11.68MB rss 46.30MB
server: tls connections(1000)
Process: heapTotal 18.97MB heapUsed 12.63MB rss 47.32MB
</pre>

<p>
tls客户端结束后连接数从 <code>1000</code> 降到 <code>0</code> 约 <code>30</code> 秒后
</p>

<pre class="example">
server: tls connections(0)
Process: heapTotal 22.91MB heapUsed 13.63MB rss 48.44MB
</pre>

<p>
从上面的日志可以计算出：
</p>

<ul class="org-ul">
<li>每 <code>tls</code> 连接 <code>rss</code> 要消耗 <code>24.2KB</code>  <code>heap</code> 要消耗 <code>8KB</code>
</li>

<li>连接关闭后内存没有释放

<p>
还略有增加，要么就是 <code>node.js</code> 没有释放 <code>tls</code> 连接的内存（应该不太可能），要么就是我的代码有问题，没有释放资源
</p>
</li>
</ul>

<p>
使用 <code>heapdump</code> 导出堆数据后通过 <code>Chromium</code> 的开发工具进行分析，发现事情没这么简单，占用的内存绝大部分是代码，
<code>tls</code> 服务器不退出，使用 <code>tls</code> 客户端测试多轮后可以发现 <code>rss</code> 内存占用不会增加， <code>tls</code> 客户端退出关闭所有连接后，
<code>rss</code> 内存占用总是会恢复到同一水平，这就说明代码是没有问题的，应该不存在内存泄露。
</p>

<p>
多轮测试后重新取样：
</p>

<pre class="example">
server: tls connections(0)
Process: heapTotal 21.93MB heapUsed 13.22MB rss 54.06MB
server: tls connections(100)
Process: heapTotal 21.93MB heapUsed 14.16MB rss 54.06MB
server: tls connections(200)
Process: heapTotal 25.86MB heapUsed 14.79MB rss 58.57MB
server: tls connections(300)
Process: heapTotal 25.86MB heapUsed 15.76MB rss 59.08MB
server: tls connections(400)
Process: heapTotal 25.86MB heapUsed 16.69MB rss 59.08MB
server: tls connections(500)
Process: heapTotal 27.83MB heapUsed 16.72MB rss 60.37MB
server: tls connections(600)
Process: heapTotal 27.83MB heapUsed 17.65MB rss 60.37MB
server: tls connections(700)
Process: heapTotal 33.74MB heapUsed 15.76MB rss 59.32MB
server: tls connections(800)
Process: heapTotal 33.74MB heapUsed 16.71MB rss 59.32MB
server: tls connections(800)
Process: heapTotal 33.74MB heapUsed 16.83MB rss 59.32MB
server: tls connections(900)
Process: heapTotal 33.74MB heapUsed 18.31MB rss 59.38MB
server: tls connections(1000)
Process: heapTotal 33.74MB heapUsed 19.24MB rss 59.38MB
</pre>

<p>
从上面的日志可以计算出：
</p>

<ul class="org-ul">
<li>每 <code>tls</code> 连接 <code>rss</code> 要消耗 <code>5.45KB</code> ， <code>heap</code> 要消耗 <code>6.16KB</code>
</li>
</ul>

<p>
也就是说正常情况下， <code>3000</code> 个 <code>tls</code> 连接， <code>rss</code> 会消耗 <code>16MB</code> ， <code>heap</code> 会消耗 <code>18MB</code> ，占用 <code>1G</code> 的问题肯定出在其它地方。
</p>

<p>
另外注意到调用 <code>heapdump.writeSnapshot</code> 后内存占用大幅下降，应该是 <code>heapdump</code> 触发了 <code>v8</code> 的垃圾回收， <code>v8</code> 的垃圾回收应该不是实时精确的，要精确测量内存占用，估计也要像 <code>heapdump</code> 一样让 <code>v8</code> 将全部垃圾回收后再测量。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">不同版本的node.js结果会有差异</h2>
<div class="outline-text-2" id="text-4">
<p>
为了完全模拟真实环境，针对每一个接收的 <code>tls</code> 连接，除了 <code>close</code> ，还监听了 <code>data</code> 、 <code>error</code> 、 <code>timeout</code> 事件：
</p>

<div class="org-src-container">

<pre class="src src-js">socket.on(<span style="color: #8abeb7;">"data"</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">data</span>) {

});
socket.on(<span style="color: #8abeb7;">"error"</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">'tls client('</span> + socket.remoteAddress + <span style="color: #8abeb7;">':'</span> + socket.remotePort <span style="text-decoration: underline;">+</span><span style="color: #8abeb7; text-decoration: underline;">') error('</span><span style="text-decoration: underline;"> + err.toString() + </span><span style="color: #8abeb7; text-decoration: underline;">')'</span><span style="text-decoration: underline;">);</span>
});
socket.on(<span style="color: #8abeb7;">"close"</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.warn(<span style="color: #8abeb7;">'tls client('</span> + socket.remoteAddress + <span style="color: #8abeb7;">':'</span> + socket.remotePort <span style="text-decoration: underline;">+</span><span style="color: #8abeb7; text-decoration: underline;">') closed'</span><span style="text-decoration: underline;">);</span>
});
socket.on(<span style="color: #8abeb7;">"timeout"</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   socket.destroy();
});
</pre>
</div>

<p>
前面的测试我使用的是 <code>node-v5.3.0</code> ，我使用 <code>node-v0.12.7</code> 重新测了几轮，最终 <code>rss</code> 内存占用停在 <code>145.5MB</code> ，这还只是 <code>1000</code> 个 <code>tls</code> 连接，使用 <code>3000</code> 个 <code>tls</code> 连接进行测试， <code>rss</code> 内存占用停在 <code>303MB</code> 。再次使用 <code>node-v5.3.0</code> 测试 <code>3000</code> 个 <code>tls</code> 连接， <code>rss</code> 内存占用停在 <code>115MB - 130MB</code> 之间，随着连接的增减有一定的波动。
</p>

<p>
由此看来 <code>tls</code> 连接是要占用一定内存量的，高版本的 <code>node</code> 改进很大，可以考虑升级一下 <code>node</code> 。
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">最后附上 node.js 各个版本的测试结果</h2>
<div class="outline-text-2" id="text-5">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> 10000 tls connections</caption>

<colgroup>
<col  class="left" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">node.js</th>
<th scope="col" class="right">heapTotal(MB)</th>
<th scope="col" class="right">heapUsed(MB)</th>
<th scope="col" class="right">rss(MB)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">node-v0.12.7</td>
<td class="right">158.34</td>
<td class="right">98.62</td>
<td class="right">728.26</td>
</tr>

<tr>
<td class="left">node-v0.12.9</td>
<td class="right">239.04</td>
<td class="right">209.53</td>
<td class="right">838.40</td>
</tr>

<tr>
<td class="left">node-v4.2.3</td>
<td class="right">86.58</td>
<td class="right">81.47</td>
<td class="right">222.97</td>
</tr>

<tr>
<td class="left">node-v5.3.0</td>
<td class="right">96.73</td>
<td class="right">75.23</td>
<td class="right">235.11</td>
</tr>
</tbody>
</table>

<ul class="org-ul">
<li>测试脚本

<p>
<a href="../static/test_tls_server.js">test_tls_server.js</a>
</p>

<p>
<a href="../static/test_tls_client.js">test_tls_client.js</a>
</p>
</li>

<li>测试命令

<p>
终端 <code>1</code> ( <code>tls</code> 服务器)
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo bash -c <span style="color: #8abeb7;">"(ulimit -n 10240; node ./test_tls_server.js)"</span>
</pre>
</div>

<p>
终端 <code>2</code> ( <code>tls</code> 客户端)
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo bash -c <span style="color: #8abeb7;">"(ulimit -n 10240; for (( i = 0; i &lt; 100; i++)); do echo round \$i;</span><span style="color: #8abeb7; text-decoration: underline;"> node ./test_tls_client.js; done;)"</span>
</pre>
</div>

<p>
内存占用取的是 <code>tls</code> 测试客户端退出后，服务器端最后建立了 <code>10000</code> 个 <code>tls</code> 连接时的内存占用。</p>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[node.js服务迁移到docker容器]]></title>
            <link>/article/node.js-670d52a18fc179fb5230-docker-5bb95668.html</link>
            <guid>/article/node.js-670d52a18fc179fb5230-docker-5bb95668.html</guid>
            <pubDate>Thu, 17 Dec 2015 08:54:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
这是一篇 <code>docker</code> 实践教程，将 <a href="https://github.com/tangxinfa/upload-fiddle">tangxinfa/upload-fiddle</a> 这个 <code>node.js</code> 服务封装成 <code>docker</code> 容器。
相关代码已提交到 <a href="https://github.com/tangxinfa/upload-fiddle">tangxinfa/upload-fiddle</a> 项目。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">编写 <code>Dockerfile</code></h2>
<div class="outline-text-2" id="text-1">
<pre class="example">
<span id="coderef-dockerpool" class="coderef-off"><span class="linenr"> 1: </span>FROM dl.dockerpool.com:5000/ubuntu:14.04</span>
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span>MAINTAINER tangxinfa &lt;tangxinfa@gmail.com&gt;
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span># Change apt sources
<span id="coderef-163-ubuntu" class="coderef-off"><span class="linenr"> 6: </span>ADD .docker/sources.list /etc/apt/sources.list</span>
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span># Install python
<span class="linenr"> 9: </span>RUN \
<span class="linenr">10: </span>    apt-get update &amp;&amp; apt-get -y -qq install python wget
<span class="linenr">11: </span>
<span class="linenr">12: </span># Install node
<span class="linenr">13: </span>RUN \
<span class="linenr">14: </span>    wget http://npm.taobao.org/mirrors/node/v0.12.9/node-v0.12.9-linux-x64.tar.gz &amp;&amp;\
<span class="linenr">15: </span>    tar xzf node-v0.12.9-linux-x64.tar.gz -C /usr/local
<span class="linenr">16: </span>
<span class="linenr">17: </span>WORKDIR /usr/local/upload-fiddle/
<span class="linenr">18: </span>
<span class="linenr">19: </span># Install node modules
<span class="linenr">20: </span>ADD package.json ./
<span class="linenr">21: </span>ADD *.bashrc ./
<span class="linenr">22: </span>RUN \
<span class="linenr">23: </span>    ln -s /usr/local/node-v0.12.9-linux-x64 ./node
<span class="linenr">24: </span>RUN \
<span id="coderef-npm-taobao" class="coderef-off"><span class="linenr">25: </span>    ["/bin/bash", "-c", "source .bashrc; npm install --registry=https://registry.npm.taobao.org"]</span>
<span class="linenr">26: </span>
<span class="linenr">27: </span># Add project files
<span class="linenr">28: </span>COPY src ./src
<span class="linenr">29: </span>COPY config ./config
<span class="linenr">30: </span>ADD *.sh ./
<span class="linenr">31: </span>ADD public/*.html ./public/
<span class="linenr">32: </span>
<span class="linenr">33: </span># Create directory for upload files.
<span class="linenr">34: </span>RUN \
<span class="linenr">35: </span>    mkdir public/files &amp;&amp;\
<span class="linenr">36: </span>    chmod a+w public/files
<span class="linenr">37: </span>
<span class="linenr">38: </span># Start service.
<span id="coderef-read" class="coderef-off"><span class="linenr">39: </span>CMD ["/bin/bash", "-c", "./start.sh &amp;&amp; read"]</span>
</pre>

<dl class="org-dl">
<dt> 配置行 <a href="#coderef-dockerpool"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dockerpool');" onmouseout="CodeHighlightOff(this, 'coderef-dockerpool');">1</a> </dt><dd>在官方仓库被墙的大环境下，使用 <code>dockerpool.com</code> 提供的镜像
</dd>

<dt> 配置行 <a href="#coderef-163-ubuntu"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-163-ubuntu');" onmouseout="CodeHighlightOff(this, 'coderef-163-ubuntu');">6</a> </dt><dd>使用163的ubuntu源，提高速度
</dd>

<dt> 配置行 <a href="#coderef-npm-taobao"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-npm-taobao');" onmouseout="CodeHighlightOff(this, 'coderef-npm-taobao');">25</a> </dt><dd>使用taobao的npm源，提高速度
</dd>

<dt> 配置行 <a href="#coderef-read"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-read');" onmouseout="CodeHighlightOff(this, 'coderef-read');">39</a> </dt><dd>调用read命令避免命令退出导致容器停止
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">创建 <code>docker</code> 镜像</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-sh">sudo docker build -t <span style="color: #8abeb7;">'tangxinfa/upload-fiddle:0.0.1'</span> .
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">运行 <code>docker</code> 容器</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-sh">sudo docker run -idt --name=<span style="color: #8abeb7;">'upload-fiddle'</span> -p 127.0.0.1:80:80 <span style="color: #8abeb7;">'tangxinfa/upload</span><span style="color: #8abeb7; text-decoration: underline;">-fiddle:0.0.1'</span>
</pre>
</div>

<p>
现在可以通过浏览器访问服务了：<a href="http://localhost/">http://localhost/</a>
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">打开 <code>docker</code> 容器终端查看运行日志</h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">

<pre class="src src-sh">sudo docker exec -ti upload-fiddle /bin/bash
tail -f run.log
</pre>
</div>

<p>
直接 <code>exit</code> 退出终端不会停止容器。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用国内镜像加速npm]]></title>
            <link>/article/4f7f752856fd5185955c50cf52a0901f-npm.html</link>
            <guid>/article/4f7f752856fd5185955c50cf52a0901f-npm.html</guid>
            <pubDate>Wed, 16 Dec 2015 09:42:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
使用 <code>npm</code> 安装 <code>node.js</code> 包时会很慢，使用国内镜像可以提高速度。
</p>

<ul class="org-ul">
<li>方式一

<div class="org-src-container">

<pre class="src src-sh">npm install --registry=https://registry.npm.taobao.org
</pre>
</div>
</li>

<li>方式二

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">export</span> <span style="color: #f0c674;">npm_config_registry</span>=https://registry.npm.taobao.org
npm install
</pre>
</div>
</li>

<li>方式三

<div class="org-src-container">

<pre class="src src-sh">npm config set <span style="color: #f0c674;">registry</span>=https://registry.npm.taobao.org
npm install
</pre>
</div>
</li>
</ul>

<p>
最后再推荐一下 <a href="http://npm.taobao.org/">淘宝 NPM 镜像</a> ，不但有 <code>npm</code> 的镜像，还有 <a href="http://npm.taobao.org/mirrors/node">node.js镜像</a> ，以后安装 <code>node.js</code> 可以更方便了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[node.js写日志堵塞问题]]></title>
            <link>/article/node.js-519965e55fd75835585e95ee9898.html</link>
            <guid>/article/node.js-519965e55fd75835585e95ee9898.html</guid>
            <pubDate>Sat, 12 Dec 2015 12:19:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
今天遇到一起后台服务中断问题，原因是有一个服务写日志导致磁盘满，清掉日志释放磁盘空间后，服务无法自动恢复，此时有以下症状：
</p>

<ul class="org-ul">
<li><code>node.js</code> 进程内存占用超高（超过1G），CPU占用超高（接近100%）
</li>

<li><a href="https://github.com/Unitech/pm2">pm2</a> 运行异常

<p>
<code>stop</code> 和 <code>delete</code> 操作会卡住， <code>start</code> 和 <code>restart</code> 操作失败。
</p>

<p>
后台有大量 <a href="https://github.com/Unitech/pm2">pm2</a> 进程，应该是 <code>crontab</code> 每分钟调用 <code>pm2 start</code> 确保服务拉起导致。
</p>

<p>
<code>killall -9 node</code> 及 <a href="https://github.com/Unitech/pm2">pm2</a> 仍然无法将服务恢复。
</p>

<p>
<code>pm2 kill</code> 也会卡住，最终通过 <code>kill -9</code> 干掉 <a href="https://github.com/Unitech/pm2">pm2</a> 的后台进程 <code>PM2 v0.14.3: God Daemon</code> 才把服务重新启动。
</p>
</li>
</ul>


<p>
一个小时后又出现险情，类似的症状，虽然没有严重到中断服务，但是 <a href="https://github.com/Unitech/pm2">pm2</a> 失控很让人揪心，服务开了两个实例，其中一个实例状态：
</p>

<pre class="example">
    │ App name          │ id │ mode    │ pid │ status  │ restart │ uptime │ memory │ watching │
    │ xxx.xxxxxxxxx.com │ 0  │ cluster │ N/A │ errored │ 2       │ 0      │ 0 B    │ disabled │
</pre>

<p>
执行 <code>pm2 delete 0</code> 也是挂住，最终还是通过 <code>kill -9</code> 干掉 <a href="https://github.com/Unitech/pm2">pm2</a> 的后台进程 <code>PM2 v0.14.3: God Daemon</code> 才把服务重新启动。
</p>

<p>
<code>top</code> 看到的进程状态：
</p>

<pre class="example">
 PID USER      PR  NI  VIRT  RES  SHR S %CPU   %MEM  TIME+   COMMAND           
1640 nobody    20   0  793m 149m 8468 R 105.5  0.9   0:34.74 node /usr/local  
1649 nobody    20   0  796m 152m 8472 R 103.6  1.0   0:34.78 node /usr/local
</pre>

<p>
服务输出的日志量在每秒700行（每行不超过120个字符）左右，最终将日志级别调到 <code>error</code> ，几乎不再输出日志，方才将CPU占用降下来：
</p>

<pre class="example">
    PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM  TIME+    COMMAND           
3527 nobody       20   0  829m 185m 8476 R 62.3  1.2  30:41.12 node /usr/local
3537 nobody       20   0  825m 181m 8476 R 60.4  1.1  30:45.96 node /usr/local
</pre>


<p>
我使用的日志模块为 <a href="https://github.com/baryon/tracer">tracer</a> ，简单地通过 <code>tracer.console(options)</code> 实例化全局的日志对象，最终写日志调用的是 <code>console.log</code> 。
</p>

<p>
在上层，我使用 <a href="https://github.com/Unitech/pm2">pm2</a> 来做进程管理，使用以下参数启动我的服务：
</p>

<pre class="example">
pm2 -n xxx.xxxxxxxxx.com -l /usr/local/xxx.xxxxxxxxx.com/run.log --merge-logs start /usr/local/xxx.xxxxxxxxx.com/src/index.js -i 2
</pre>

<p>
通过 <code>pm2 describe xxx.xxxxxxxxx.com</code> 输出可以发现最终会写三个日志文件：
</p>

<pre class="example">
     │ entire log path   │ /usr/local/xxx.xxxxxxxxx.com/run.log             │
     │ error log path    │ /root/.pm2/logs/xxx.xxxxxxxxx.com-error.log      │
     │ out log path      │ /root/.pm2/logs/xxx.xxxxxxxxx.com-out.log        │
</pre>

<p>
根据 <a href="https://nodejs.org/docs/latest-v0.12.x/api/console.html#console_console">console的文档</a> 中的描述：
</p>

<blockquote>
<p>
The console functions are synchronous when the destination is a terminal or a file (to avoid lost messages in case of premature exit) and asynchronous when it's a pipe (to avoid blocking for long periods of time).
</p>

<p>
如果输出目标为终端或文件时，console函数是同步的（避免程序过早退出导致丢消息），目标为管道时则为异步（避免长时间堵塞）。
</p>
</blockquote>

<p>
这个特性引起的问题我也在另一篇文章《 <a href="http://blog.kankanan.com/article/process.exit-5bfc81f4768463a7523653f08f9351fa4e0d5168.html">process.exit导致的控制台输出不全</a> 》里有提及。
</p>

<p>
也就是说不出意外的话，我们的服务写日志是阻塞式的，每秒钟同步方式写700行日志到一块普通机械硬盘上， <code>node.js</code> 不卡死才怪，更何况这块硬盘上还在被其它服务频繁读写。
</p>

<p>
一个服务运行过程中不写日志文件是不可能的，在 <code>node.js</code> 写日志方面需要找到更优的方案。
</p>

<p>
但是在寻找更好的方案之前，我做了一个常识性的思考：
</p>

<blockquote>
<p>
将应用程序日志写到磁盘文件的模块，除非它丢弃日志，当磁盘写入无法跟上日志产生的速度，就要暂存到某个地方，它可能是本机的内存或连网的另一台机器。
</p>
</blockquote>

<p>
所以我最终要找的，不仅仅是一个异步写日志文件的模块，还要先减少磁盘写入量，或者日志不直接写到磁盘文件，而是发送到一个日志服务，如果日志是写在本地磁盘，最好能够做到磁盘满时不中断服务，这种情况下丢失日志也是可以接受的。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[package.json文件dependencies中的各种版本号形式]]></title>
            <link>/article/package.json-65874ef6-dependencies-4e2d7684540479cd7248672c53f75f625f0f.html</link>
            <guid>/article/package.json-65874ef6-dependencies-4e2d7684540479cd7248672c53f75f625f0f.html</guid>
            <pubDate>Thu, 10 Dec 2015 09:07:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
查看 <code>package.json</code> 文件时，往往会在 <code>dependencies</code> 下看到各种各样的版本号形式，示例如下：
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #8abeb7;">"dependencies"</span>: {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"async"</span>: <span style="color: #8abeb7;">"1.2.1"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"chokidar"</span>: <span style="color: #8abeb7;">"^1.0.0"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"vizion"</span>: <span style="color: #8abeb7;">"latest"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"babel"</span>: <span style="color: #8abeb7;">"^5.x"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"pm2-logs"</span>: <span style="color: #8abeb7;">"~0.1.1"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"ikt"</span>: <span style="color: #8abeb7;">"git+http://ikt.pm2.io/ikt.git#master"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"punt"</span>: <span style="color: #8abeb7;">"*"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"express"</span>: <span style="color: #8abeb7;">"&gt;=3.0.0"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #8abeb7;">"connect"</span>: <span style="color: #8abeb7;">"1.30.2 - 2.30.2"</span>,
}
</pre>
</div>

<p>
一般自已写 <code>package.json</code> 时，图省事版本号会用 <code>*</code> ，想想也是很危险的，指不定哪天依赖的包不再向后兼容，程序运行估计就有问题了。
</p>

<p>
版本号形式是有据可循的，它就是《<a href="http://semver.org/lang/zh-CN/">语义化版本 2.0.0</a>》， <code>npm</code> 遵循该规范，但做了以下扩展：
</p>

<blockquote>
<p>
版本号的构建号部分允许使用 <code>-</code> 字符，所以 <code>0.2.0-1</code> 在《<a href="http://semver.org/lang/zh-CN/">语义化版本 2.0.0</a>》中是非法的，却是合法的 npm 语义版本（Semantic Versioning）。
</p>
</blockquote>

<p>
<code>npm</code> 使用 <a href="https://github.com/npm/node-semver">semver</a> 包进行版本号解析。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">版本号解析示例</h2>
<div class="outline-text-2" id="text-1">
<p>
这篇文章《<a href="http://deadhorse.me/nodejs/2014/04/27/semver-in-nodejs.html">node.js 中的版本管理</a>》对常见的版本号风格进行了解释，虽然对 <code>^</code> 前缀解析不清，但还是值得一看，同时了提供了使用建议。
</p>

<p>
版本号格式： <code>主版本号.次版本号.修订号</code>
</p>

<dl class="org-dl">
<dt> 1.2.1 </dt><dd>匹配指定版本，这里是匹配1.2.1。
</dd>

<dt> ^1.0.0 </dt><dd>匹配 &gt;=1.0.0 且 &lt;2.0.0的版本。

<p>
<code>^</code> 前缀意为 <code>与指定的版本兼容</code> 。
</p>

<p>
<code>^</code> 前缀表示最左边的非0段不允许改变，该段之后的段可以为更高版，所以
</p>

<p>
^1.1.0 匹配 &gt;=1.1.0 且 &lt;2.0.0
</p>

<p>
^0.0.3 匹配 &gt;=0.0.3 且 &lt;0.0.4
</p>
</dd>

<dt> latest </dt><dd>当前发布版本。

<p>
这是一个标记（tag，详见 <a href="https://docs.npmjs.com/cli/dist-tag">dist-tag | npm Documentation</a>），默认情况下 <code>npm install</code> 安装的就是这个 <code>latest</code> 标记。
常见的标记还有 <code>next</code> <code>stable</code> <code>beta</code> <code>canary</code> 。
</p>
</dd>

<dt> ^5.x </dt><dd>匹配 &gt;=5.0.0 且 &lt;6.0.0。

<p>
<code>X</code>, <code>x</code> 及 <code>*</code> 为通配符，版本号尾部省略的段等同于通配符，所以
</p>

<ul class="org-ul">
<li>匹配 &gt;=0.0.0
</li>
</ul>
<p>
1   匹配 &gt;=1.0.0 且 &lt;2.0.0
</p>

<p>
1.2 匹配 &gt;=1.2.0 且 &lt;1.3.0
</p>
</dd>

<dt> ~0.1.1 </dt><dd>匹配 &gt;=0.1.1 且 &lt;0.2.0。

<p>
<code>~</code> 前缀意为 <code>约等于版本</code>
</p>

<p>
如果存在次版本号，则允许修订号为更高版，否则允许次版本号为更高版。
</p>

<p>
~1 匹配 &gt;=1.0.0 且 &lt;2.0.0
</p>
</dd>

<dt> * </dt><dd>匹配 &gt;=0.0.0
</dd>

<dt> &gt;=3.0.0 </dt><dd>同字面意义 &gt;=3.0.0。

<p>
其它操作符有 &lt; &lt;= &gt; &gt;= = ，多个表达式之间用 空格 分隔表示并集，用 || 分隔交集。
</p>
</dd>

<dt> 1.30.2 - 2.30.2 </dt><dd>匹配 &gt;=1.30.2 且 &lt;=2.30.2

<p>
尾部缺失的节被替换为0再进行比较，如：1.30 - 2.30.2 同 1.30.0 - 2.30.2。
</p>
</dd>

<dt> git+<a href="http://ikt.pm2.io/ikt.git#master">http://ikt.pm2.io/ikt.git#master</a> </dt><dd>Git URL形式的依赖

<p>
还支持URL、GitHub URL、本地 URL，详见 <a href="https://docs.npmjs.com/files/package.json#urls-as-dependencies">URLs as Dependencies</a>
</p>
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">参考</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="https://docs.npmjs.com/files/package.json">package.json | npm Documentation</a>
</li>

<li><a href="http://blog.nodejitsu.com/package-dependencies-done-right/">Package.json dependencies done right | Nodejitsu Inc.</a>
</li>

<li><a href="http://deadhorse.me/nodejs/2014/04/27/semver-in-nodejs.html">node.js 中的版本管理</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[node.js应用错误处理]]></title>
            <link>/article/node.js-5e94752895198bef59047406.html</link>
            <guid>/article/node.js-5e94752895198bef59047406.html</guid>
            <pubDate>Fri, 30 Oct 2015 10:08:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
先看一个简单的示例：
</p>

<div class="org-src-container">

<pre class="src src-js">app.post(<span style="color: #8abeb7;">'/products'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">req</span>, <span style="color: #f0c674;">res</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   service.add(req.body, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   logger.error(err.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   res.statusCode = 500;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> res.end({error: err.message});
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   res.statusCode = 200;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   res.end();
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
}};
</pre>
</div>

<p>
上面的代码能够直接用于产品环境吗？
</p>

<p>
对于稍微严谨的产品，答案肯定是 <span class="underline">否</span> 。
</p>

<p>
针对 service.add 调用失败提两个疑问：
</p>

<ul class="org-ul">
<li>如何根据错误类型给客户端返回不同的响应，以便客户端更人性化（而非简单的弹消息框）？
</li>

<li>err.message 会不会包含不应该给用户看到的信息？
</li>
</ul>

<p>
我们需要规范化错误类型，进行明确的分类标识，直到最外层的代码能够根据错误对象提供的信息，给客户端返回恰当的响应，
下面是我能想到的一些基本原则：
</p>

<ul class="org-ul">
<li>错误对象拥有统一的接口

<p>
确保错误对象是一个Error类实例，如需要自定义错误类型，从Error类继承。
</p>
</li>

<li>对错误进行命名标识

<p>
重量级的做法：为每一个错误类型自定义一个错误类。
轻量级的做法：将Error对象的name属性设置为错误类型标识。
</p>
</li>

<li>在恰当的层次将底层Error对象转化为自定义的错误对象

<p>
对底层返回的原始错误，尽可能在调用栈恰当的层次转化为合适应用层错误对象，但不必强制对所有底层错误进行转换，
原生的Error对象可以认为是未标识的错误，这种错误可以默认处理（如：给客户端返回HTTP 500错误）。
</p>
</li>
</ul>

<p>
错误进行分类标识后的使用示例：
</p>

<div class="org-src-container">

<pre class="src src-js">app.post(<span style="color: #8abeb7;">'/products'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">req</span>, <span style="color: #f0c674;">res</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   service.add(req.body, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   logger.error(err.toString());
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err.name === <span style="color: #8abeb7;">'ProductAlreadyExists'</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   res.statusCode = 400;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   } <span style="color: #b5bd68;">else</span> {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   err.message = <span style="color: #8abeb7;">'&#20869;&#37096;&#38169;&#35823;'</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   res.statusCode = 500;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> res.end({error: err.message});
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   res.statusCode = 200;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   res.end();
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
}};
</pre>
</div>

<p>
优雅的错误处理是系统可维护性的重要组成部分，它和代码各部分息息相关，系统成型后很难再引入错误处理，设计系统时应该一开始就将它纳入考虑范围。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">参考</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>《<a href="https://www.joyent.com/developers/node/design/errors">Error Handling in Nodejs - Developer Center - Joyent</a>》

<p>
来自Joyent的Node.js错误处理最佳实践
</p>
</li>

<li>《<a href="https://cnodejs.org/topic/52090bc944e76d216af25f6f">Node.js下自定义错误类型 - CNode</a>》

<p>
派生Error类注意事项
</p>
</li>

<li>《<a href="https://docs.nodejitsu.com/articles/errors/what-is-the-error-object">What is the error object? - docs.nodejitsu.com</a>》

<p>
Error对象详解
</p>
</li>

<li>《<a href="http://www.bennadel.com/blog/2828-creating-custom-error-objects-in-node-js-with-error-capturestacktrace.htm">Creating Custom Error Objects In Node.js With Error.captureStackTrace()</a>》

<p>
直接可用的自定义Error类方案
</p>
</li>

<li><a href="https://github.com/jayyvis/extend-error">extend-error</a>

<p>
用于扩展Error类的node.js模块
</p>
</li>

<li><a href="https://github.com/davepacheco/node-verror">node-verror</a>

<p>
包裹原始Error对象，并且保证可访问性的node.js模块，Joyent的Node.js错误处理最佳实践中进行了推荐
</p>
</li>

<li>《<a href="https://github.com/davepacheco/node-verror/issues/15">Support for custom error types? · Issue #15 · davepacheco/node-verror</a>》

<p>
<a href="https://github.com/davepacheco/node-verror">node-verror</a> 支持扩展的讨论</p>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[process.exit导致的控制台输出不全]]></title>
            <link>/article/process.exit-5bfc81f4768463a7523653f08f9351fa4e0d5168.html</link>
            <guid>/article/process.exit-5bfc81f4768463a7523653f08f9351fa4e0d5168.html</guid>
            <pubDate>Thu, 27 Aug 2015 09:03:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li>先上案例程序：

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">for</span>(<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">i</span> = 0; i &lt; 10000; ++i) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">"this is long long long long long long long long long long long </span><span style="color: #8abeb7; text-decoration: underline;">long long long long long long long long long long long long long long long long long long log "</span><span style="text-decoration: underline;"> + i);</span>
}
process.exit(0);
</pre>
</div>

<p>
这个程序输出10000行日志，然后结束进程。
</p>
</li>

<li><code>Emacs Shell</code> 以及 <code>GNOME Terminal</code> 下运行结果（省略中间部分输出）：

<pre class="example">
$ node /home/tangxinfa/Examples/test_exit.js
this is long long long long long long long long long long long long long long long long long long long long long long long long long long long long long log 0
...
this is long long long long long long long long long long long long long long long long long long long long long long long long long long long long long log 119
$
</pre>

<p>
程序只输出了前面200行日志。
</p>
</li>

<li>按 <code>Ctrl+Alt+F2</code> 进入2号系统终端下运行结果（省略中间部分输出）：

<pre class="example">
$ node /home/tangxinfa/Examples/test_exit.js
this is long long long long long long long long long long long long long long long long long long long long long long long long long long long long long log 0
...
this is long long long long long long long long long long long long long long long long long long long long long long long long long long long long long log 9999
$
</pre>

<p>
程序输出了完整的日志。
</p>
</li>

<li>日志重定向到文件时 <code>Emacs Shell</code> 以及 <code>GNOME Terminal</code> 下运行结果（省略中间部分输出）：

<pre class="example">
$ node /home/tangxinfa/Examples/test_exit.js &gt; /tmp/test_exit.log
$ tail -1 /tmp/test_exit.log
this is long long long long long long long long long long long long long long long long long long long long long long long long long long long long long log 9999
$
</pre>

<p>
程序输出了完整的日志。
</p>
</li>

<li>原因

<p>
如果输出目标为终端（ <code>Emacs Shell</code> 以及 <code>GNOME Terminal</code> 并非真正的终端）或文件时，console函数是同步的（避免程序过早退出导致丢消息），目标为管道时则为异步（避免长时间堵塞）。
</p>

<blockquote>
<p>
The console functions are synchronous when the destination is a terminal or a file (to avoid lost messages in case of premature exit) and asynchronous when it's a pipe (to avoid blocking for long periods of time).
</p>
</blockquote>

<p>
参考：《<a href="http://stackoverflow.com/questions/18748164/process-exit0-output-disappears">process.exit(0): output disappears?</a>》
</p>
</li>

<li>解决方案

<p>
调用 <code>process.exit</code> 时确保输出完毕，封装如下：
</p>

<div class="org-src-container">

<pre class="src src-js"><span class="linenr">1: </span><span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">Safe exit. Makesure log output flushed to console.</span>
<span class="linenr">2: </span><span style="color: #b5bd68;">function</span> <span style="color: #de935f;">exit</span>(<span style="color: #f0c674;">code</span>) {
<span class="linenr">3: </span><span style="color: #969896; background-color: #1d1f21;"> </span>   process.stdout.write(<span style="color: #8abeb7;">''</span>, <span style="color: #b5bd68;">function</span> () {
<span id="coderef-stderr-write" class="coderef-off"><span class="linenr">4: </span><span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stderr.write(<span style="color: #8abeb7;">''</span>, <span style="color: #b5bd68;">function</span> () {</span>
<span class="linenr">5: </span><span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.exit(code);
<span class="linenr">6: </span><span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   });
<span class="linenr">7: </span><span style="color: #969896; background-color: #1d1f21;"> </span>   });
<span class="linenr">8: </span>}
</pre>
</div>

<p>
注意，上面的 <code>exit</code> 函数不会像 <code>process.exit</code> 一样立即终止程序，请将 <code>process.exit</code> 替换为  <code>return exit</code> 。
</p>

<p>
通过 <a href="https://github.com/Unitech/pm2">pm2</a> 运行 node.js 应用时会接管标准输出和错误输出到日志文件，不存在进程退出日志输出丢失的问题，
由于 <a href="https://github.com/Unitech/pm2">pm2</a> 会改写 process.stdout.write 和 process.stderr.write ，改写后的函数无返回值并忽略传入的回调函数，
导致前面封装的 exit 函数无效，需要针对 <a href="https://github.com/Unitech/pm2">pm2</a> 做处理：
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">Safe exit, Makesure log output flushed to console.</span>
<span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">PM2 changed process.stderr.write and process.stdout.write's behavior,</span>
<span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">log output write to file will flushed automatically,</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">exit</span>(<span style="color: #f0c674;">code</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (<span style="color: #b5bd68;">typeof</span>(process.env.pm_id) == <span style="color: #8abeb7;">'undefined'</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stdout.write(<span style="color: #8abeb7;">''</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.stderr.write(<span style="color: #8abeb7;">''</span>, <span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.exit(code);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   });
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   });
<span style="color: #969896; background-color: #1d1f21;"> </span>   } <span style="color: #b5bd68;">else</span> {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   process.exit(code);
<span style="color: #969896; background-color: #1d1f21;"> </span>   }
}
</pre>
</div>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux服务器出现大量CLOSE_WAIT状态的连接]]></title>
            <link>/article/linux-670d52a1566851fa73b0592791cf-close_wait-72b6600176848fde63a5.html</link>
            <guid>/article/linux-670d52a1566851fa73b0592791cf-close_wait-72b6600176848fde63a5.html</guid>
            <pubDate>Sat, 01 Aug 2015 19:21:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
昨天服务器停止服务，node.js进程耗光了服务器的内存及CPU，node.js进程卡死无法被 <code>kill</code> 掉，最后要来root帐号密码，直接 <code>kill -9</code> 才结束掉进程。
</p>

<p>
再次鄙视一下 <a href="https://github.com/nodejitsu/forever">forever</a> ，杀不掉原来的 node.js 进程组也就罢了，竟然又拉起了一套新的 node.js 进程组。
</p>

<p>
统计了一下 <code>10</code> 万个fd都耗光了，其中 <code>9</code> 万多个为 <code>CLOSE_WAIT</code> 状态，此时服务器已经无法响应请求。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">CLOSE_WAIT 状态介绍</h2>
<div class="outline-text-2" id="text-1">
<p>
先看一副TCP连接关闭的状态图（ <a href="http://intronetworks.cs.luc.edu/current/html/tcp.html#index-29">来源</a> ）：
</p>


<div class="figure">
<p><img src="../static/tcp_normal_close.png" alt="tcp_normal_close.png" />
</p>
</div>

<p>
被动关闭一方才会出现 <code>CLOSE_WAIT</code> 状态，由于被动关闭方未调用 <code>close</code> 关闭socket导致，问题肯定是由服务器代码引起。
</p>

<p>
检测到对端socket关闭然后关闭本端socket是由 node.js 自行完成的，最大的可能是没有机会执行 <code>close</code> 。
</p>

<p>
我们的应用客户端与服务器有一个tls长连接，当连接断开时客户端会等待3-10秒后尝试重连服务器，如果服务器出现卡顿会导致客户端频繁重连，
</p>

<p>
如果服务器来不及关闭这些连接，则会出现 CLOSE_WAIT 状态的连接，占用大量文件描述符，减少 CLOSE_WAIT 超时时间能够在一定程度上缓解这个问题，
</p>

<p>
但是对于我们这种长连接的环境，大量CLOSE_WAIT是问题的表象，而非根源。
</p>

<p>
参考：《<a href="http://lvxuehu.iteye.com/blog/452487">解决CLOSE_WAIT 问题</a>》
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">内存及CPU占用彪升问题</h2>
<div class="outline-text-2" id="text-2">
<p>
伴随着 CLOSE_WAIT 出现的状况是 node.js 进程内存及CPU占用超高，单node.js进程内存占用达到 1.5G，CPU占用 90% 以上，此时应该会导致 node.js 响应慢，
来不及关闭连上来的socket。
</p>

<p>
所以解决问题的关键就是：找出什么原因导致 node.js 内存及CPU 100%占用。
</p>

<p>
想到的可能是redis负载过高引起，从运维监控图上可以看出一些蹊跷，node.js出问题时redis的连接数也同样彪升，而出问题的机器上刚好就是跑redis的机器，
另一台服务器一直相安无事，没有跑redis。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">一次午夜故障元凶浮出水面</h2>
<div class="outline-text-2" id="text-3">
<p>
在晚上两点的时候服务出现问题，同样的现象，特别留意了一下redis的统计，请求速度很低，只有1200，平时都是5000。偶然在进程列表中发现了 redis-rdb-bgsave 的身影，
不断地执行ps看进程列表，发现 redis-rdb-bgsave 进程不断地出现，查看redis的持久化配置如下：
</p>

<pre class="example">
save 900 1
save 300 10
save 60 10000
</pre>

<p>
我们的系统有大量的redis，1分钟肯定过万，这样redis持久化变是常态了，而且由于用的是机械硬盘，持久化肯定会引起系统卡顿，先将它调整为15分钟最多持久化一次：
</p>

<pre class="example">
config set save "900 1"
</pre>

<p>
重启程序释放资源后系统开始正常响应，但是10多分钟后系统再次无响应，才想起一则经验教训：
</p>

<pre class="example">
     跑redis的机器至少要预留和redis占用内存同样大小的空闲内存空间，redis RDB持久化进行fork时最坏会占用双倍内存，内存不足就会动用交换分区，系统性能急剧下降。
</pre>

<p>
于是，立即改配置将redis所在机器上的node.js cluster进程数调小，腾出大把内存，总算没有再出现问题，今晚终于可以入眠。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">更多疑问</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>我们的node.js进程为什么常常会占用很多内存？
</li>

<li>netstat中看到CLOSE_WAIT状态的连接输入缓冲往往有数据，而ESTABLISHED状态的连接读写缓冲区往往为空，为什么？
</li>

<li>node.js卡顿时forever杀不死反而启动了新实例帮倒忙，pm2就一定能够解决吗？
</li>

<li>redis持久化引起服务挂掉，已经是在第二个项目中遇到了，终极解决方案是什么？
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[后台服务监护工具：forever与pm2]]></title>
            <link>/article/540e53f0670d52a176d162a45de55177ff1a-forever-4e0e-pm2.html</link>
            <guid>/article/540e53f0670d52a176d162a45de55177ff1a-forever-4e0e-pm2.html</guid>
            <pubDate>Fri, 24 Jul 2015 16:15:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
使用后台服务监护工具有很多好处：
</p>

<ul class="org-ul">
<li>程序崩溃时自动拉起
</li>

<li>程序日志聚合（你的系统有多个模块或多个进程的时候很有必要）
</li>

<li>代码更新时自动重启服务
</li>
</ul>

<p>
node.js下最常用的后台服务监护工具有：<a href="https://github.com/nodejitsu/forever">forever</a> 、<a href="https://github.com/Unitech/pm2">pm2</a> 。
</p>

<p>
<a href="https://github.com/nodejitsu/forever">forever</a> 先出现，<a href="https://github.com/Unitech/pm2">pm2</a> 后出现功能更丰富，下面是特性对比：
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Feature</th>
<th scope="col" class="left">Forever</th>
<th scope="col" class="left">PM2</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Keep Alive</td>
<td class="left">✔</td>
<td class="left">✔</td>
</tr>

<tr>
<td class="left">Coffeescript</td>
<td class="left">✔</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">Log aggregation</td>
<td class="left">&#xa0;</td>
<td class="left">✔</td>
</tr>

<tr>
<td class="left">API</td>
<td class="left">&#xa0;</td>
<td class="left">✔</td>
</tr>

<tr>
<td class="left">Terminal monitoring</td>
<td class="left">&#xa0;</td>
<td class="left">✔</td>
</tr>

<tr>
<td class="left">Clustering</td>
<td class="left">&#xa0;</td>
<td class="left">✔</td>
</tr>

<tr>
<td class="left">JSON configuration</td>
<td class="left">&#xa0;</td>
<td class="left">✔</td>
</tr>
</tbody>
</table>

<p>
我在3个项目中使用 <a href="https://github.com/nodejitsu/forever">forever</a> ，多次重启出错后，决定转向 <a href="https://github.com/Unitech/pm2">pm2</a> ，目前我已经在两个较小的项目中成功使用 <a href="https://github.com/Unitech/pm2">pm2</a> 。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="https://github.com/nodejitsu/forever">forever</a></h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>安装

<div class="org-src-container">

<pre class="src src-js">npm install -g forever
</pre>
</div>
</li>

<li>配置

<p>
启动脚本
<code>start.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">PATH</span>=$<span style="color: #f0c674;">PATH</span>:<span style="color: #b294bb;">`pwd`</span>/node/bin:<span style="color: #b294bb;">`pwd`</span>/../node/bin:<span style="color: #b294bb;">`pwd`</span>/node_modules/forever/bi<span style="text-decoration: underline;">n:/usr/local/node/bin</span>
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">NODE_ENV</span>=${<span style="color: #f0c674;">NODE_ENV</span>:-production}
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">NODE_CONFIG_DIR</span>=<span style="color: #b294bb;">`pwd`</span>/config

<span style="color: #f0c674;">SCRIPT</span>=<span style="color: #b294bb;">`pwd`</span>/src/index.js
<span style="color: #f0c674;">LOGFILE</span>=<span style="color: #b294bb;">`pwd`</span>/run.log

<span style="color: #f0c674;">running</span>=<span style="color: #b294bb;">`forever list | grep "$SCRIPT" | grep -v grep | wc -l`</span>

<span style="color: #b5bd68;">if</span> [ $<span style="color: #f0c674;">running</span> -lt 1 ]; <span style="color: #b5bd68;">then</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   forever start --spinSleepTime=10000 --killSignal=SIGINT --pidFile=<span style="color: #b294bb;">`pwd`</span>/run.<span style="text-decoration: underline;">pid -l $</span><span style="color: #f0c674; text-decoration: underline;">LOGFILE</span><span style="text-decoration: underline;"> -a -w --watchDirectory=</span><span style="color: #b294bb; text-decoration: underline;">`pwd`</span><span style="text-decoration: underline;">/src --watchIgnore=</span><span style="color: #8abeb7; text-decoration: underline;">".svn/*"</span><span style="text-decoration: underline;"> </span><span style="color: #8abeb7; text-decoration: underline;">"$SCRIPT"</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b294bb;">echo</span> -e <span style="color: #8abeb7;">"\nRunning."</span>
<span style="color: #b5bd68;">else</span>
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b294bb;">echo</span> -e <span style="color: #8abeb7;">"\nAlready running."</span>
<span style="color: #b5bd68;">fi</span>

forever list | grep <span style="color: #8abeb7;">"$SCRIPT"</span>
</pre>
</div>

<p>
停止脚本
<code>stop.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">PATH</span>=$<span style="color: #f0c674;">PATH</span>:<span style="color: #b294bb;">`pwd`</span>/node/bin:<span style="color: #b294bb;">`pwd`</span>/../node/bin:<span style="color: #b294bb;">`pwd`</span>/node_modules/forever/bi<span style="text-decoration: underline;">n:/usr/local/node/bin</span>

<span style="color: #f0c674;">SCRIPT</span>=<span style="color: #b294bb;">`pwd`</span>/src/index.js

forever stop <span style="color: #8abeb7;">"$SCRIPT"</span>
</pre>
</div>

<p>
重启脚本     
<code>restart.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">PATH</span>=$<span style="color: #f0c674;">PATH</span>:<span style="color: #b294bb;">`pwd`</span>/node/bin:<span style="color: #b294bb;">`pwd`</span>/../node/bin:<span style="color: #b294bb;">`pwd`</span>/node_modules/forever/bi<span style="text-decoration: underline;">n:/usr/local/node/bin</span>

<span style="color: #f0c674;">SCRIPT</span>=<span style="color: #b294bb;">`pwd`</span>/src/index.js

forever restart <span style="color: #8abeb7;">"$SCRIPT"</span> || ./start.sh
</pre>
</div>
</li>

<li>用法

<p>
启动
</p>

<div class="org-src-container">

<pre class="src src-sh">./start.sh
</pre>
</div>

<p>
停止
</p>

<div class="org-src-container">

<pre class="src src-sh">./stop.sh
</pre>
</div>

<p>
重启
</p>

<div class="org-src-container">

<pre class="src src-sh">./restart.sh
</pre>
</div>
</li>

<li>缺点

<ul class="org-ul">
<li>程序退出过程中的日志无法捕获

<p>
参见：<a href="https://github.com/foreverjs/forever/issues/385#issuecomment-115163346">no logging after graceful shutdown #385</a>
</p>

<p>
应该是forever通过信号通知程序退出后，不再捕获程序的日志输出，程序退出的这段时间内日志丢失。
</p>

<p>
一个补丁方案：程序收到forever的退出信号后将日志直接写到日志文件（正常情况下是由forever捕获程序的错误输出写日志文件）。
</p>
</li>

<li>重启可能失败

<p>
代码更新后，forever会发信号重启进程，但是程序始终重启不成功，出现大量下面的日志：
</p>
<pre class="example">
Error: bind EADDRINUSE
</pre>

<p>
怀疑跟node.js的cluster中master自动拉起slave的行为相冲突，此时只有一个forever实例在运行，这种情况占比很高。
</p>

<p>
另外crontab中调用start.sh也可能和forever相冲突，当node全退出时，可能启动多个forever实例，这种情况占比稍低。
</p>

<p>
另外一种情况是node.js出问题了CPU及内存100%占用，此时普通的kill杀不死（必须得kill -9），forever误认为已成功结束node.js进程，
然后拉起新的进程。
</p>
</li>

<li>未内置支持开机启动

<p>
可以直接放在crontab每分钟调用一次 <code>start.sh</code> 来实现，万一连forever进程都挂了，可以全部拉起来。
开机启动不内置则意味着一百个人有一百种做法，带来不必要的争议。
</p>
</li>

<li>允许程序同时启动多个实例

<p>
forever未对启动的程序进行唯一性标识，导致程序可能意外启动多个实例，多个实例之间往往相冲突，降低了系统可用性。
</p>

<p>
而由程序自已来实现单实例运行是很困难的，forever会不断地拉起退出的多余副本。
</p>
</li>

<li>未内置支持cluster以及优雅重启

<p>
部署代码重启程序过程中会停止服务几秒钟。
</p>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a href="https://github.com/Unitech/pm2">pm2</a></h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>安装

<div class="org-src-container">

<pre class="src src-js">npm install -g pm2
</pre>
</div>
</li>

<li>配置

<p>
以 <a href="https://github.com/tangxinfa/upload-fiddle">upload-fiddle</a> 项目为例。
</p>

<p>
统一配置其它脚本需要的环境变量
<code>.bashrc</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">export</span> <span style="color: #f0c674;">PATH</span>=<span style="color: #b294bb;">`pwd`</span>/node/bin:<span style="color: #b294bb;">`pwd`</span>/../node/bin:<span style="color: #b294bb;">`pwd`</span>/node_modules/pm2/bin:/usr/loc<span style="text-decoration: underline;">al/node/bin:$</span><span style="color: #f0c674; text-decoration: underline;">PATH</span>
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">NODE_ENV</span>=${<span style="color: #f0c674;">NODE_ENV</span>:-production}
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">NODE_CONFIG_DIR</span>=<span style="color: #b294bb;">`pwd`</span>/config
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">APP_NAME</span>=<span style="color: #8abeb7;">"upload-fiddle"</span>
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">APP_SCRIPT</span>=<span style="color: #b294bb;">`pwd`</span>/src/index.js
</pre>
</div>

<p>
启动脚本
<code>start.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

<span style="color: #b294bb;">source</span> .bashrc
pm2 --node-args=<span style="color: #8abeb7;">"--harmony"</span> -n <span style="color: #8abeb7;">"$APP_NAME"</span> start <span style="color: #8abeb7;">"$APP_SCRIPT"</span> -i 0 --watch <span style="color: #8abeb7;">"`pw</span><span style="color: #8abeb7; text-decoration: underline;">d`/src/*.js"</span>
</pre>
</div>

<p>
停止脚本
<code>stop.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

<span style="color: #b294bb;">source</span> .bashrc
pm2 --node-args=<span style="color: #8abeb7;">"--harmony"</span> stop <span style="color: #8abeb7;">"$APP_NAME"</span>
</pre>
</div>

<p>
重启脚本
<code>restart.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

<span style="color: #b294bb;">source</span> .bashrc
pm2 --node-args=<span style="color: #8abeb7;">"--harmony"</span> restart <span style="color: #8abeb7;">"$APP_NAME"</span>
</pre>
</div>
</li>

<li>用法

<p>
启动
</p>

<div class="org-src-container">

<pre class="src src-sh">./start.sh
</pre>
</div>

<p>
停止
</p>

<div class="org-src-container">

<pre class="src src-sh">./stop.sh
</pre>
</div>

<p>
重启
</p>

<div class="org-src-container">

<pre class="src src-sh">./restart.sh
</pre>
</div>
</li>

<li>缺点

<ul class="org-ul">
<li>程序退出过程中的日志无法捕获？

<p>
不一定。使用 <code>pm2 stop</code> 会有同样的问题，但是pm2支持优雅退出（ <code>pm2 gracefulReload</code> ），此时不但退出过程中的日志能够正常捕获，而且可以实现服务0停机时间。
</p>
</li>

<li>重启可能失败

<p>
是的。=pm2 restart= 并没有采用激进的措施（kill -9）确保旧进程结束。重现步骤：用gdb调试运行中的node进程（gdb node &lt;PID&gt;后不执行任何gdb命令），然后用pm2 restart重启服务，此时旧的进程杀不死，新的进程被创建。
</p>
</li>

<li>允许程序同时启动多个实例

<p>
pm2对启动的程序进行了唯一性标识，但是它将启动的信息保存在了当前用户的home目录下（~/.pm2），所以使用其它帐号时还是有能够启动多个程序实例，对于这一点forever也存在同样的问题。
</p>

<p>
对于服务器来说，多帐号是常态，应该默认防止这种问题发生。
</p>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">程序写日志相关</h2>
<div class="outline-text-2" id="text-3">
<p>
用c/c++写日志的时候我一般都会使用日志库，如：<a href="http://logging.apache.org/log4cxx/index.html">log4cxx</a> 、<a href="https://github.com/HardySimpson/zlog">zlog</a> ，这些日志库容易使用而且很稳定，支持将日志写到文件或控制台，支持按大小、日期分割日志文件，支持限定日志文件数、占用空间。
</p>

<p>
但是node.js下最好的写日志方式其实是将日志直接输出到错误输出（stderr），由 <a href="https://github.com/nodejitsu/forever">forever</a> 、<a href="https://github.com/Unitech/pm2">pm2</a> 这样的后台服务监护工具来写日志文件。这是因为node.js做为一种动态语言，容易出现异常，特别是前期开发阶段，很多分支没有跑到，往往是写日志的语句出错，此时日志库是很难做到将异常时程序的调用堆栈写到日志文件中的，由台后服务监护工具来做能确保万无一失。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">参考</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>《<a href="http://se77en.cc/2013/06/27/goodbye-node-forever-hello-pm2-translation/">告别node-forever,拥抱PM2</a>》
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用node.js的对象模式验证模块joi引入强类型]]></title>
            <link>/article/4f7f7528-node.js-76845bf98c616a215f0f9a8c8bc16a215757-joi-5f1551655f3a7c7b578b.html</link>
            <guid>/article/4f7f7528-node.js-76845bf98c616a215f0f9a8c8bc16a215757-joi-5f1551655f3a7c7b578b.html</guid>
            <pubDate>Mon, 13 Jul 2015 10:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li>弱类型的Javascript

<p>
Javascript是一门弱类型的语言，定义变量不需要指定类型，可以为同一个变量赋任意类型的值。误用类型不会报错，而结果会让你大吃一惊：
</p>

<pre class="example">
&gt; "1" + 1
'11'
&gt; if ("false") { console.log("yes") } else { console.log("no"); }
yes
undefined
&gt;
</pre>

<p>
redis中很多数据结构取出时都是字符串值（如：set、hash），调用方需要自行将它转换成正确的类型（如：Boolean、Date、Number），如果不转换成正确的类型会导致冗长的代码，如Boolean类型：
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">if</span> ((String(model.stoped) == <span style="color: #8abeb7;">'true'</span>)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">Do something when stoped.</span>
}
</pre>
</div>

<p>
如果手工转换成正确的类型肯定要写很多样板代码了。
</p>
</li>

<li>对象模式验证模块 <a href="https://github.com/hapijs/joi#anydefaultvalue-description">joi</a>

<p>
有很多的ORM（ Object Relational Mapping 对象关系映射）库都能够实现强类型的数据模型，但是它们都相当的复杂，支持各种各样的数据库后端，支持一对一、一对多、多对多等数据关系，但是很少支持分表分库，我们的系统一般是数据模型简单但要考虑用户量大了横向扩展，所以一开始就进行了分表分库，无法使用重型的ORM。
</p>

<p>
如果有一个能够自动根据模式（Schema）定义对值进行类型转换的库，一定会非常有用。
</p>

<p>
<a href="https://github.com/hapijs/joi#anydefaultvalue-description">joi</a> 一个Javascript对象模式描述语言以及验证（Object schema description language and validator for JavaScript objects）的库，它可以完成对象类型转换以及合法性验证。
</p>
</li>

<li><a href="https://github.com/hapijs/joi#anydefaultvalue-description">joi</a> 的用法示例

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">joi</span> = require(<span style="color: #8abeb7;">'joi'</span>);
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">redis</span> = require(<span style="color: #8abeb7;">'redis'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = redis.createClient(6379, <span style="color: #8abeb7;">'127.0.0.1'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">User</span> = <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">options</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (! options) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   options = {};
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #81a2be;">this</span>.id = options.id || 0;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #81a2be;">this</span>.name = options.name || <span style="color: #8abeb7;">''</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #81a2be;">this</span>.male = options.male || <span style="color: #81a2be;">true</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #81a2be;">this</span>.birthday = options.birthday;
};

User.schema = joi.object().keys({
<span style="color: #969896; background-color: #1d1f21;"> </span>   id: joi.number().integer().min(1),
<span style="color: #969896; background-color: #1d1f21;"> </span>   name: joi.string().required(),
<span style="color: #969896; background-color: #1d1f21;"> </span>   male: joi.<span style="color: #81a2be;">boolean</span>().<span style="color: #b5bd68;">default</span>(<span style="color: #81a2be;">true</span>),
<span style="color: #969896; background-color: #1d1f21;"> </span>   birthday: joi.date().required()
});

User.find = <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">id</span>, <span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   client.hgetall(<span style="color: #8abeb7;">"user:"</span> + id, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">value</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   } <span style="color: #b5bd68;">else</span> <span style="color: #b5bd68;">if</span> (! value) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Error</span>(<span style="color: #8abeb7;">"User not found"</span>));
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   joi.validate(value, User.schema, callback);
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
};

User.<span style="color: #81a2be;">prototype</span>.save = <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">value</span> = {};
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">for</span>(<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">fieldName</span> <span style="color: #b5bd68;">in</span> <span style="color: #81a2be;">this</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (<span style="color: #b5bd68;">typeof</span>(<span style="color: #81a2be;">this</span>[fieldName]) != <span style="color: #8abeb7;">'function'</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   value[fieldName] = <span style="color: #81a2be;">this</span>[fieldName];
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   joi.validate(value, User.schema, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">validatedValue</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.hmset(<span style="color: #8abeb7;">"user:"</span> + validatedValue.id, validatedValue, callback);
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
};


<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">user</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">User</span>({
<span style="color: #969896; background-color: #1d1f21;"> </span>   id: 1,
<span style="color: #969896; background-color: #1d1f21;"> </span>   name: <span style="color: #8abeb7;">"txf"</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   male: <span style="color: #81a2be;">true</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   birthday: <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Date</span>(<span style="color: #8abeb7;">"1983-03-22"</span>)
});

user.save(<span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.error(<span style="color: #8abeb7;">"user save error("</span> + err.toString() + <span style="color: #8abeb7;">")"</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.quit();
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   console.info(<span style="color: #8abeb7;">"user saved"</span>);

<span style="color: #969896; background-color: #1d1f21;"> </span>   User.find(user.id, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">user</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   client.quit();
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.error(<span style="color: #8abeb7;">"user find error("</span> + err.toString() + <span style="color: #8abeb7;">")"</span>);
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span>;
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   }

<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   console.log(<span style="color: #8abeb7;">"user found: "</span> + JSON.stringify(user));
<span style="color: #969896; background-color: #1d1f21;"> </span>   });
});
</pre>
</div>

<p>
运行结果：
</p>

<div class="org-src-container">

<pre class="src src-js">user saved
user found: {<span style="color: #8abeb7;">"id"</span>:1,<span style="color: #8abeb7;">"name"</span>:<span style="color: #8abeb7;">"txf"</span>,<span style="color: #8abeb7;">"male"</span>:<span style="color: #81a2be;">true</span>,<span style="color: #8abeb7;">"birthday"</span>:<span style="color: #8abeb7;">"1983-03-22T00:00:00.000</span><span style="color: #8abeb7; text-decoration: underline;">Z"</span><span style="text-decoration: underline;">}</span>
</pre>
</div>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Node.js服务器TCP死连接问题诊断]]></title>
            <link>/article/node.js-670d52a15668-tcp-6b7b8fde63a595ee98988bca65ad.html</link>
            <guid>/article/node.js-670d52a15668-tcp-6b7b8fde63a595ee98988bca65ad.html</guid>
            <pubDate>Thu, 16 Apr 2015 12:29:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
最近一段时间，由于开发工作开始跟嵌入式相关，开始遇到一个问题：TCP死连接。
</p>

<p>
TCP死连接症状是这样的：通信双方从一方系统上看已经断开（不存在），但是另一方系统上看却是连接中（ESTABLISHED状态）。
</p>

<p>
TCP死连接一般在一方（或中间线路上的设备）断电、死机后出现，此时由于另一方收不到断开连接的IP报文，会认为连接仍然存在，日积月累会耗光文件描述符空间从而导致性能下降，最终拒绝服务。
</p>

<p>
对付这种问题，一般需要双方都进行连接心跳检测。比如：连接空闲一段时间后一方发一个心跳请求，另一端回个心跳响应，心跳请求发送方一段时间后还收不到响应则认为连接已断开，心跳请求接收方一段时间内没有收到心跳请求也认为连接已断开。
</p>

<p>
需要注意到的是node.js的tls服务器端握手超时处理不当可能会导致TCP死连接出现，有问题的代码示例如下：
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">options</span> = {
<span style="color: #969896; background-color: #1d1f21;"> </span>   key: <span style="color: #8abeb7;">"..."</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   cert: <span style="color: #8abeb7;">"..."</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   handshakeTimeout: 10*1000,
<span style="color: #969896; background-color: #1d1f21;"> </span>   plain: <span style="color: #81a2be;">true</span>,
<span style="color: #969896; background-color: #1d1f21;"> </span>   ssl: <span style="color: #81a2be;">true</span>
};

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">tlsServer</span> = tls.createServer(options, app).listen(5433, 8192, <span style="color: #b5bd68;">function</span>(){
<span style="color: #969896; background-color: #1d1f21;"> </span>   logger.log(<span style="color: #8abeb7;">'tls server listening on port 5433'</span>);
});

tlsServer.on(<span style="color: #8abeb7;">'clientError'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">exception</span>, <span style="color: #f0c674;">socket</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   logger.warn(<span style="color: #8abeb7;">'tls server client('</span> + socket.remoteAddress + <span style="color: #8abeb7;">':'</span> + socket.remot<span style="text-decoration: underline;">ePort +</span><span style="color: #8abeb7; text-decoration: underline;">') error('</span><span style="text-decoration: underline;"> + exception + </span><span style="color: #8abeb7; text-decoration: underline;">')'</span><span style="text-decoration: underline;">);</span>
});
</pre>
</div>

<p>
上面的代码通过指定 <code>handshakeTimeout</code> 使用指定SSL握手超时时间，但是并未关闭底层的TCP连接，从而导致TCP连接泄露，在 <code>clientError</code> 事件处理函数中添加以下释放语句即可：
</p>

<div class="org-src-container">

<pre class="src src-js">socket.destroy();
</pre>
</div>

<p>
除了常见的断电、死机引起TCP死连接外，这里还有一个论坛帖子论坛其它原因：《<a href="http://serverfault.com/questions/504187/too-many-established-connections-left-open">Too many established connections left open</a>》。
</p>

<p>
另外还有 linux 内核的 tcp keepalive机制作为心跳解决方案：《<a href="http://machael.blog.51cto.com/829462/211989/">linux下使用TCP存活(keepalive)定时器</a>》。
</p>

<p>
谨记：除了主动通过连接发送数据外，其它情况下操作系统可能不会告诉你连接已经关闭了。
</p>

<p>
要彻底解决这个问题，除了要避免泄露（或忘记关闭）TCP连接外，要有心跳机制，还需要从代码层面进行防御性编程，如：对于读写操作设置超时时间，一旦超时主动关闭连接。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[理解node.js中的Error对象]]></title>
            <link>/article/740689e3-node.js-4e2d7684-error-5bf98c61.html</link>
            <guid>/article/740689e3-node.js-4e2d7684-error-5bf98c61.html</guid>
            <pubDate>Tue, 09 Dec 2014 05:38:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
Error对象在 <a href="http://nodejs.org">node.js</a> 程序中无处不在，但是关于它在 <a href="http://nodejs.org/docs/latest/api/all.html">node.js文档</a> （写这篇文章时node.js的最新版本为v0.10.33）中却找不到描述资料，只在以下部分提及：
</p>

<dl class="org-dl">
<dt> <a href="http://nodejs.org/docs/latest/api/all.html#all_util_iserror_object">util.isError(object)</a> </dt><dd>判断对象是否为Error对象.
</dd>

<dt> <a href="http://nodejs.org/docs/latest/api/all.html#all_additions_to_error_objects">Domain: Additions to Error objects</a> </dt><dd>在Error对象上附加额外的字段.
</dd>
</dl>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Error到底是何方神圣？</h2>
<div class="outline-text-2" id="text-1">
<p>
Error对象是在ECMAScript 5.1（于2011年7月发布）中 <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.11">定义</a> 的，是一个比较新的特性：
</p>

<blockquote>
<p>
Instances of Error objects are thrown as exceptions when runtime errors occur. The Error objects may also serve as base objects for user-defined exception classes.
</p>
</blockquote>

<p>
它只有两个属性：
</p>

<dl class="org-dl">
<dt> name </dt><dd>错误名称，默认为"Error"
</dd>

<dt> message </dt><dd>错误消息，默认为""
</dd>
</dl>

<p>
V8实现了一个扩展属性：
</p>

<dl class="org-dl">
<dt> stack </dt><dd>错误描述及调用堆栈 
</dd>
</dl>

<p>
它只有一个方法：
</p>

<dl class="org-dl">
<dt> toString </dt><dd>转成字符串形式，通常为 "name: message"
</dd>
</dl>

<p>
构造一个Error实例：
</p>

<p>
new Error(message) 或者 Error(message)，两者是一样的。
</p>

<p>
示例：显示错误消息
</p>

<div class="org-src-container">

<pre class="src src-js">console.log(err);
console.log(err.toString());
console.log(err.message);
</pre>
</div>

<p>
需要注意的是console.log(JSON.stringify(err))显示的是空对象{}.
</p>

<p>
示例：显示错误消息及调用堆栈
</p>

<div class="org-src-container">

<pre class="src src-js">console.log(err.stack);
</pre>
</div>

<p>
示例：显示错误名称
</p>

<div class="org-src-container">

<pre class="src src-js">console.log(err.name);
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">如何自定义Error类型？</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">function</span> <span style="color: #de935f;">MyError</span>(<span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span> <span style="color: #81a2be;">this</span>.message = message || <span style="color: #8abeb7;">''</span>;
}

MyError.<span style="color: #81a2be;">prototype</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Error</span>();
MyError.<span style="color: #81a2be;">prototype</span>.constructor = MyError;
MyError.<span style="color: #81a2be;">prototype</span>.name = <span style="color: #8abeb7;">'MyError'</span>;
</pre>
</div>

<p>
Error实例类型判断
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">err</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Error</span>(<span style="color: #8abeb7;">"this is error"</span>);
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">myerr</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">MyError</span>(<span style="color: #8abeb7;">"this is my error"</span>);
err <span style="color: #b5bd68;">instanceof</span> <span style="color: #81a2be;">Error</span> <span style="color: #969896; font-style: italic;">/*</span><span style="color: #969896; font-style: italic;">true*/</span>
err <span style="color: #b5bd68;">instanceof</span> <span style="color: #81a2be;">MyError</span> <span style="color: #969896; font-style: italic;">/*</span><span style="color: #969896; font-style: italic;">false*/</span>
myerr <span style="color: #b5bd68;">instanceof</span> <span style="color: #81a2be;">MyError</span> <span style="color: #969896; font-style: italic;">/*</span><span style="color: #969896; font-style: italic;">true*/</span>
myerr <span style="color: #b5bd68;">instanceof</span> <span style="color: #81a2be;">Error</span> <span style="color: #969896; font-style: italic;">/*</span><span style="color: #969896; font-style: italic;">true*/</span>
</pre>
</div>

<p>
stack输出有问题：自定义的错误描述没了
</p>

<div class="org-src-container">

<pre class="src src-js">err.stack <span style="color: #969896; font-style: italic;">/*</span><span style="color: #969896; font-style: italic;">'Error: this is error\n    at repl:1:11 ...*/</span>
myerr.stack <span style="color: #969896; font-style: italic;">/*</span><span style="color: #969896; font-style: italic;">'MyError\n    at repl:1:21 ...*/</span>
</pre>
</div>

<p>
修复node.js下MyError的stack不正确的问题
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">function</span> <span style="color: #de935f;">MyError</span>(<span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span> Error.captureStackTrace(<span style="color: #81a2be;">this</span>, <span style="color: #81a2be;">this</span>.constructor)
<span style="color: #969896; background-color: #1d1f21;"> </span> <span style="color: #81a2be;">this</span>.message = message || <span style="color: #8abeb7;">''</span>;
}

MyError.<span style="color: #81a2be;">prototype</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Error</span>();
MyError.<span style="color: #81a2be;">prototype</span>.constructor = MyError;
MyError.<span style="color: #81a2be;">prototype</span>.name = <span style="color: #8abeb7;">'MyError'</span>;
</pre>
</div>

<p>
<b>最终版：更node.js化一些</b>
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">function</span> <span style="color: #de935f;">MyError</span>(<span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">if</span> (!(<span style="color: #81a2be;">this</span> <span style="color: #b5bd68;">instanceof</span> <span style="color: #81a2be;">MyError</span>)) {
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">MyError</span>(message);
<span style="color: #969896; background-color: #1d1f21;"> </span>   }
<span style="color: #969896; background-color: #1d1f21;"> </span>   Error.captureStackTrace(<span style="color: #81a2be;">this</span>, <span style="color: #81a2be;">this</span>.constructor)
<span style="color: #969896; background-color: #1d1f21;"> </span>   <span style="color: #81a2be;">this</span>.message = message || <span style="color: #8abeb7;">''</span>;
}

util.inherits(MyError, Error)
MyError.<span style="color: #81a2be;">prototype</span>.name = <span style="color: #8abeb7;">'MyError'</span>;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">参考</h2>
<div class="outline-text-2" id="text-3">
<dl class="org-dl">
<dt> <a href="https://docs.nodejitsu.com/articles/errors/what-is-the-error-object">What is the error object?</a> </dt><dd>对Error对象的成员有所提及，但与当前的node.js版本不一致。
</dd>

<dt> <a href="https://cnodejs.org/topic/52090bc944e76d216af25f6f">Node.js下自定义错误类型</a> </dt><dd>教你如何自定义错误类型。
</dd>

<dt> <a href="http://stackoverflow.com/questions/10624873/what-properties-does-nodejs-expresss-error-object-exposes">What properties does nodejs express's Error object exposes?</a> </dt><dd>讨论Error对象相关属性
</dd>

<dt> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error">MDN &gt; Web technology for developers &gt; JavaScript &gt; JavaScript reference &gt; Standard built-in objects &gt; Error</a> </dt><dd>Error对象参考文档
</dd>

<dt> <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.11">Error Objects</a> </dt><dd>Error对象标准文档
</dd>
</dl>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[编译安装node.js]]></title>
            <link>/article/7f168bd15b8988c5-node.js.html</link>
            <guid>/article/7f168bd15b8988c5-node.js.html</guid>
            <pubDate>Mon, 17 Feb 2014 08:23:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li>下载

<p>
node.js是一个新兴的开发平台，版本更新非常活跃，因此应该尽量下载安装最新的版本。
</p>

<p>
到 <a href="http://nodejs.org/">http://nodejs.org/</a> 下载最新的版本。
</p>
</li>

<li>安装

<p>
解压后参照 README.md 进行安装：
</p>

<div class="org-src-container">

<pre class="src src-sh">./configure
make
make install
</pre>
</div>
</li>

<li>安装后

<p>
默认安装到/usr/local。
</p>

<dl class="org-dl">
<dt> /usr/local/bin/node </dt><dd>node主程序
</dd>
<dt> /usr/local/bin/npm </dt><dd>node模块管理程序
</dd>
<dt> /usr/local/lib/node_modules </dt><dd>node全局模块目录
</dd>
</dl>
<p>
像一些需要全局安装的模块也会把文件安装在/usr/local目录下。
</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[express.js中如何在第一次请求的响应中取得connect.sid]]></title>
            <link>/article/express.js-4e2d59824f5557287b2c4e006b218bf76c42768454cd5e944e2d53d65f97-connect.sid.html</link>
            <guid>/article/express.js-4e2d59824f5557287b2c4e006b218bf76c42768454cd5e944e2d53d65f97-connect.sid.html</guid>
            <pubDate>Fri, 14 Feb 2014 15:34:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在web页面通过iframe跨域登录访问服务的情况下，是不方便取cookie中的sessionid的，于是想到将sessionid直接放到响应体中，
这就需要在node.js中直接获取connect.sid这个cookie值，一开始想当然地以为系统（使用的是passport.js）会在登录认证通过后
执行res.cookie('connect.sid', &#x2026;)进行设置，就想直接从res的Set-Cookie头解析出设置的值，结果发现这个cookie压根不存在，
甚至在库代码中搜索cookie都不管用，着实急得人直抓头。最后dump出res后确在req中见到了connect.sid值的影子：req.sessionID，
然后在 <a href="http://stackoverflow.com/questions/13693101/express-sessionid-differs-from-sessionid-in-cookie">《Express SessionID differs from SessionID in Cookie》</a> 中找到了从req.sessionID计算出connect.sid的方法：
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">signature</span> = require(<span style="color: #8abeb7;">'express/node_modules/cookie-signature'</span>);
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">connectSid</span> = <span style="color: #8abeb7;">'s:'</span> + signature.sign(req.sessionID, sessionOptions.secret);
</pre>
</div>

<p>
其实，connect.sid这个cookie是在请求到来后在req上设置的（不存在则设置），不管有没有登录都会设置。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[node.js下访问mysql注意事项]]></title>
            <link>/article/node.js-4e0b8bbf95ee-mysql-6ce8610f4e8b9879.html</link>
            <guid>/article/node.js-4e0b8bbf95ee-mysql-6ce8610f4e8b9879.html</guid>
            <pubDate>Fri, 11 Oct 2013 02:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
本文仅针对 <a href="https://github.com/felixge/node-mysql">node-mysql</a> 模块。
</p>

<ul class="org-ul">
<li>Connection 对象为一个到mysql的连接，在其上的query是串行进行的。

<p>
由于mysql协议类似http是串行的，在一个mysql连接上的多个query必须依次进行。
</p>

<p>
<a href="https://github.com/felixge/node-mysql">node-mysql</a> 的 Connection对象上同时发起的多个query会队列化，
</p>

<p>
处理完一个query再进行下一query的处理，传递给回调函数的query结果不会错乱。
</p>

<p>
在有一定访问量的服务中应该总是使用 <code>连接池</code> 。
</p>
</li>
</ul>


<ul class="org-ul">
<li>处理Connection对象的重连。

<p>
mysql连接空闲一段时间后（默认8小时）会自动关闭，
</p>

<p>
可以在Connection对象的 <code>error</code> 事件中检测后连接断开时进行重连。
</p>

<p>
使用 <code>连接池</code> 不会有问题，连接断开后会默认从连接池中剔除。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[《理解Node.js》培训课件]]></title>
            <link>/article/300a740689e3-node.js-300b57f98bad8bfe4ef6.html</link>
            <guid>/article/300a740689e3-node.js-300b57f98bad8bfe4ef6.html</guid>
            <pubDate>Thu, 04 Jul 2013 10:31:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
本课件介绍Node.js的特点及其初步使用。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">开发计划 <code>[1/3]</code></h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><code>[X]</code> 编写大纲
</li>
<li><code>[&#xa0;]</code> 编写内容
</li>
<li><code>[&#xa0;]</code> 制作Microsoft PowerPoint格式文档
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">在线演示</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://blog.kankanan.com/slides/%E7%90%86%E8%A7%A3Node.js.html">《理解Node.js》</a></p>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>