<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>nginx - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/nginx.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Thu, 13 Jun 2019 03:59:30 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>nginx - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/nginx.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[使用 NDK 移植 Linux C/C++ 程序到 Android 系统]]></title>
            <link>/article/4f7f7528-ndk-79fb690d-linux-c-c-7a0b5e8f5230-android-7cfb7edf.html</link>
            <guid>/article/4f7f7528-ndk-79fb690d-linux-c-c-7a0b5e8f5230-android-7cfb7edf.html</guid>
            <pubDate>Thu, 09 Aug 2018 07:28:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org7f2af8e" class="outline-2">
<h2 id="org7f2af8e">区分基础概念：JNI 与 NDK</h2>
<div class="outline-text-2" id="text-org7f2af8e">
<ul class="org-ul">
<li>JNI（Java Native Interface）是一种 Java 语言特性</li>
</ul>

<p>
用于 Java 程序与 C、C++ 库间的互相调用。
</p>

<ul class="org-ul">
<li>NDK（Native Development Kit）是 Google 提供的使用 C/C++ 编写 Android 程序的开发工具包</li>
</ul>

<p>
它使用 JNI 实现 Java 程序调用 C/C++ 本地代码，允许 C/C++ 本地代码访问 Android
API，不只是用来开发或移植 C/C++ 库，也可以是 C/C++ 程序。
</p>

<p>
引用自 <a href="https://developer.android.com/ndk/">Android NDK  |  Android NDK  |  Android Developers</a>
</p>
<blockquote>
<p>
Android NDK
</p>

<p>
The Android NDK is a toolset that lets you implement parts of your app in native
code, using languages such as C and C++. For certain types of apps, this can
help you reuse code libraries written in those languages.
</p>
</blockquote>

<p>
NDK 提供一系列稳定的 C/C++ API，头文件在 <code>sysroot/usr/include</code> 下，主要包括 C 标准库、C++ 标准库、jni、math、pthread、zlib、OpenGL、Android 相关的库，
<a href="https://developer.android.com/ndk/guides/stable_apis">NDK 支持的 API</a> 也会随着需求的增加而日趋完善。
</p>
</div>
</div>


<div id="outline-container-orgdd97e5f" class="outline-2">
<h2 id="orgdd97e5f">移植使用 GNU Autotools 的项目</h2>
<div class="outline-text-2" id="text-orgdd97e5f">
<p>
NDK 提供了创建独立工具链的工具，对于移植使用 GNU Autotools 的项目到 Android 平台很有帮助，省去写 <code>Android.mk</code> 。
</p>

<ul class="org-ul">
<li><p>
创建独立工具链
</p>

<div class="org-src-container">
<pre class="src src-sh">/opt/android-ndk/build/tools/make_standalone_toolchain.py <span style="color: #4E9A06;">\</span>
<span style="background-color: #E6E6E6;"> </span>   --arch arm64 --api 28 --stl=libc++ --install-dir /opt/android-toolchain
</pre>
</div></li>

<li><p>
环境变量配置
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">PATH</span>=$<span style="color: #0084C8; font-weight: bold;">PATH</span>:/opt/android-toolchain/bin
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">CC</span>=aarch64-linux-android-clang
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">CXX</span>=aarch64-linux-android-clang++
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">LD</span>=aarch64-linux-android-ld
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">AR</span>=aarch64-linux-android-ar
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">STRIP</span>=aarch64-linux-android-strip
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">RANLIB</span>=aarch64-linux-android-ranlib
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">AS</span>=aarch64-linux-android-clang
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">CFLAGS</span>=<span style="color: #4E9A06;">"-fPIE -fPIC"</span>
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">CXXFLAGS</span>=<span style="color: #4E9A06;">"-fPIE -fPIC"</span>
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">LDFLAGS</span>=<span style="color: #4E9A06;">"-pie"</span>
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">SYSROOT</span>=/opt/android-toolchain/sysroot
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">CROSS_COMPILE_HOST</span>=aarch64-linux-android
</pre>
</div></li>

<li><p>
交叉编译
</p>

<div class="org-src-container">
<pre class="src src-sh">./configure --host=${<span style="color: #0084C8; font-weight: bold;">CROSS_COMPILE_HOST</span>} --prefix=/opt/local
make
make install
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org84d4921" class="outline-2">
<h2 id="org84d4921">移植 Nginx 遇到的问题</h2>
<div class="outline-text-2" id="text-org84d4921">
<ul class="org-ul">
<li><p>
编译出错 <code>cstddef:43:25: fatal error: stddef.h: No such file or directory</code>
</p>

<p>
看起来是 C++ 编译器找不到 C 头文件，是已知问题，在 Standalone 工具链中使用
<code>gcc</code> 就会出现，见
</p>

<p>
<a href="https://github.com/android-ndk/ndk/issues/215">stddef.h: No such file or directory · Issue #215 · android-ndk/ndk</a>
</p>

<p>
改为使用 <code>clang</code> 就好了，以后的 NDK 将彻底移除对 <code>gcc</code> 的支持。
</p></li>

<li><p>
交叉编译 OpenSSL
</p>

<p>
网上有大量的移植文档，基本上是基于 <a href="https://wiki.openssl.org/index.php/Android">OpenSSL Android - OpenSSLWiki</a> ，最大的问题是使用的 NDK 和 OpenSSL 版本都比较旧，最后主要参考
</p>

<p>
<a href="https://github.com/couchbaselabs/couchbase-lite-libcrypto">couchbaselabs/couchbase-lite-libcrypto: Pre-built OpenSSL libcrypto static libraries</a>
</p>

<p>
移植成功。OpenSSL 的交叉编译需要完整的 NDK 包，最好新开一个 Shell 来编译
OpenSSL，避免为独立工具链设置的环境变量影响到 OpenSSL 的编译。
</p>

<p>
编译过程中会报错 <code>crtbegin_so.o: No such file: No such file or directory</code> ，将它从工具链中拷到当前目录即可， <code>crtend_so.o</code> 、 <code>crtbegin_dynamic.o</code> 、
<code>crtend_android.o</code> 也进行相同处理，参考
<a href="https://stackoverflow.com/questions/6881164/crtbegin-so-o-missing-for-android-toolchain-custom-build">gcc - crtbegin_so.o missing for android toolchain (custom build) - Stack Overflow</a>
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;"># </span><span style="color: #204A87;">Download</span>
wget https://codeload.github.com/openssl/openssl/zip/OpenSSL_1_1_0-stable -O ope<span style="text-decoration: underline;">nssl-OpenSSL_1_1_0-stable.zip</span>
unzip openssl-OpenSSL_1_1_0-stable.zip
wget https://raw.githubusercontent.com/couchbaselabs/couchbase-lite-libcrypto/ma<span style="text-decoration: underline;">ster/build-android-setenv.sh -O openssl.setenv</span>
sed -i -e <span style="color: #4E9A06;">'s/^_ANDROID_NDK=/#_ANDROID_NDK=/g'</span> openssl.setenv

<span style="color: #204A87;"># </span><span style="color: #204A87;">Config</span>
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">ANDROID_NDK_ROOT</span>=/opt/android-ndk
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">_ANDROID_TARGET_SELECT</span>=arch-arm64-v8a
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">_ANDROID_NDK</span>=<span style="color: #4E9A06;">"android-ndk"</span>
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">ANDROID_EABI_PREFIX</span>=aarch64-linux-android
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">_ANDROID_EABI</span>=<span style="color: #4E9A06;">"${ANDROID_EABI_PREFIX}-4.9"</span>
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">_ANDROID_ARCH</span>=arch-arm64
<span style="color: #A020F0;">export</span> <span style="color: #0084C8; font-weight: bold;">_ANDROID_API</span>=<span style="color: #4E9A06;">"android-28"</span>
<span style="color: #A020F0;">source</span> openssl.setenv

<span style="color: #204A87;"># </span><span style="color: #204A87;">Build</span>
<span style="color: #A020F0;">cd</span> openssl-OpenSSL_1_1_0-stable
./Configure dist
./Configure no-ssl2 no-ssl3 no-comp no-hw no-engine --openssldir=/opt/local/ --p<span style="text-decoration: underline;">refix=/opt/local/ linux-generic64 -DB_ENDIAN -B$</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">ANDROID_DEV</span><span style="text-decoration: underline;"> </span><span style="color: #4E9A06; text-decoration: underline;">\</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   -I${<span style="color: #0084C8; font-weight: bold;">ANDROID_NDK_ROOT</span>}/sysroot/usr/include -I${<span style="color: #0084C8; font-weight: bold;">ANDROID_NDK_ROOT</span>}/sysr<span style="text-decoration: underline;">oot/usr/include/${</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">ANDROID_EABI_PREFIX</span><span style="text-decoration: underline;">} </span><span style="color: #4E9A06; text-decoration: underline;">\</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   -fPIE -pie -L${<span style="color: #0084C8; font-weight: bold;">ANDROID_NDK_ROOT</span>}/platforms/${<span style="color: #0084C8; font-weight: bold;">_ANDROID_API</span>}/${<span style="color: #0084C8; font-weight: bold;">_ANDROI</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">D_ARCH</span><span style="text-decoration: underline;">}/usr/lib</span>
ln -s ${<span style="color: #0084C8; font-weight: bold;">SYSROOT</span>}/usr/lib/crtbegin_so.o
ln -s ${<span style="color: #0084C8; font-weight: bold;">SYSROOT</span>}/usr/lib/crtend_so.o
ln -s ${<span style="color: #0084C8; font-weight: bold;">SYSROOT</span>}/usr/lib/crtbegin_dynamic.o
ln -s ${<span style="color: #0084C8; font-weight: bold;">SYSROOT</span>}/usr/lib/crtend_android.o
make -j6
make install
</pre>
</div></li>

<li><p>
交叉编译出的配置检测程序无法直接运行
</p>

<p>
Nginx 没有使用 GNU Autotools，而是有自已的 Configure 脚本，遇到的第一个问题就是 Nginx 是通过使用编译器编译一个测试程序来获取配置信息，交叉编译出来的程序肯定是无法在编译机上运行的，一个可靠的办法就是修改 Configure 脚本，改为上传到目标设备上执行。
</p>

<p>
下面是我写好的一个远程执行脚本 <code>execute</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;">#</span><span style="color: #204A87;">!/bin/</span><span style="color: #A52A2A; font-weight: bold;">bash</span>

<span style="color: #A52A2A; font-weight: bold;">if</span> [ $<span style="color: #0084C8; font-weight: bold;">#</span> != 2 ] || ([ $<span style="color: #0084C8; font-weight: bold;">1</span> != <span style="color: #4E9A06;">"-c"</span> ] &amp;&amp; [ $<span style="color: #0084C8; font-weight: bold;">1</span> != <span style="color: #4E9A06;">"-f"</span> ]) ; <span style="color: #A52A2A; font-weight: bold;">then</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A020F0;">echo</span> <span style="color: #4E9A06;">"usage: $0 -&lt;c|f&gt; &lt;cmd|file&gt;"</span> &gt;&gt; /dev/stderr
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">exit</span> 22 <span style="color: #204A87;">#</span><span style="color: #204A87;">Invalid argument</span>
<span style="color: #A52A2A; font-weight: bold;">fi</span>

<span style="color: #0084C8; font-weight: bold;">LOG_FILE</span>=/dev/null

<span style="color: #A52A2A; font-weight: bold;">if</span> [[ <span style="color: #4E9A06;">"$CROSS_COMPILE_HOST"</span> = *<span style="color: #4E9A06;">"android"</span>* ]]; <span style="color: #A52A2A; font-weight: bold;">then</span>
<span style="background-color: #E6E6E6;"> </span>   adb connect ${<span style="color: #0084C8; font-weight: bold;">CROSS_COMPILE_DEVICE_IP</span>} &gt;&gt;$<span style="color: #0084C8; font-weight: bold;">LOG_FILE</span> 2&gt;&amp;1
<span style="background-color: #E6E6E6;"> </span>   adb wait-for-device
<span style="background-color: #E6E6E6;"> </span>   adb root &gt;&gt;$<span style="color: #0084C8; font-weight: bold;">LOG_FILE</span> 2&gt;&amp;1
<span style="background-color: #E6E6E6;"> </span>   adb connect ${<span style="color: #0084C8; font-weight: bold;">CROSS_COMPILE_DEVICE_IP</span>} &gt;&gt;$<span style="color: #0084C8; font-weight: bold;">LOG_FILE</span> 2&gt;&amp;1
<span style="background-color: #E6E6E6;"> </span>   adb wait-for-device
<span style="background-color: #E6E6E6;"> </span>   adb remount &gt;&gt;$<span style="color: #0084C8; font-weight: bold;">LOG_FILE</span> 2&gt;&amp;1
<span style="background-color: #E6E6E6;"> </span>   adb connect ${<span style="color: #0084C8; font-weight: bold;">CROSS_COMPILE_DEVICE_IP</span>} &gt;&gt;$<span style="color: #0084C8; font-weight: bold;">LOG_FILE</span> 2&gt;&amp;1
<span style="background-color: #E6E6E6;"> </span>   adb wait-for-device
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">if</span> [ $<span style="color: #0084C8; font-weight: bold;">1</span> == <span style="color: #4E9A06;">"-f"</span> ]; <span style="color: #A52A2A; font-weight: bold;">then</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   <span style="color: #0084C8; font-weight: bold;">tempfile</span>=<span style="color: #ff00ff;">`mktemp -u XXXXXXXX`</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   <span style="color: #0084C8; font-weight: bold;">tempdir</span>=/tmp/cross-compile
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   adb shell mkdir ${<span style="color: #0084C8; font-weight: bold;">tempdir</span>} &gt;&gt;$<span style="color: #0084C8; font-weight: bold;">LOG_FILE</span> 2&gt;&amp;1
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   adb push $<span style="color: #0084C8; font-weight: bold;">2</span> ${<span style="color: #0084C8; font-weight: bold;">tempdir</span>}/${<span style="color: #0084C8; font-weight: bold;">tempfile</span>} &gt;&gt;$<span style="color: #0084C8; font-weight: bold;">LOG_FILE</span> 2&gt;&amp;1
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   adb shell <span style="color: #4E9A06;">"find ${tempdir} -ctime +1 -type f -exec rm {} \; &gt;/dev/null 2</span><span style="color: #4E9A06; text-decoration: underline;">&gt;&amp;1; cd ${tempdir} &amp;&amp; chmod a+x $tempfile &amp;&amp; ./$tempfile"</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">else</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   adb shell $<span style="color: #0084C8; font-weight: bold;">2</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">fi</span>
<span style="color: #A52A2A; font-weight: bold;">else</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">if</span> [ $<span style="color: #0084C8; font-weight: bold;">1</span> == <span style="color: #4E9A06;">"-f"</span> ]; <span style="color: #A52A2A; font-weight: bold;">then</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   <span style="color: #0084C8; font-weight: bold;">tempfile</span>=<span style="color: #ff00ff;">`mktemp -u XXXXXXXX`</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   <span style="color: #0084C8; font-weight: bold;">tempdir</span>=/tmp/cross-compile
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   ssh -o <span style="color: #0084C8; font-weight: bold;">StrictHostKeyChecking</span>=no root@${<span style="color: #0084C8; font-weight: bold;">CROSS_COMPILE_DEVICE_IP</span>} mkdir ${<span style="color: #0084C8; font-weight: bold; text-decoration: underline;">tempdir</span><span style="text-decoration: underline;">} &gt;&gt;$</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">LOG_FILE</span><span style="text-decoration: underline;"> 2&gt;&amp;1</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   scp -o <span style="color: #0084C8; font-weight: bold;">StrictHostKeyChecking</span>=no $<span style="color: #0084C8; font-weight: bold;">2</span> root@${<span style="color: #0084C8; font-weight: bold;">CROSS_COMPILE_DEVICE_IP</span>}:${<span style="color: #0084C8; font-weight: bold;">tem</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">pdir</span><span style="text-decoration: underline;">}/${</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">tempfile</span><span style="text-decoration: underline;">} &gt;&gt;$</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">LOG_FILE</span><span style="text-decoration: underline;"> 2&gt;&amp;1</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   ssh -o <span style="color: #0084C8; font-weight: bold;">StrictHostKeyChecking</span>=no root@${<span style="color: #0084C8; font-weight: bold;">CROSS_COMPILE_DEVICE_IP</span>} <span style="color: #4E9A06;">"find ${</span><span style="color: #4E9A06; text-decoration: underline;">tempdir} -mmin +1 -type f -exec rm {} \; &gt;/dev/null 2&gt;&amp;1; cd ${tempdir} &amp;&amp; chmod a+x $tempfile &amp;&amp; ./$tempfile"</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">else</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   ssh -o <span style="color: #0084C8; font-weight: bold;">StrictHostKeyChecking</span>=no root@${<span style="color: #0084C8; font-weight: bold;">CROSS_COMPILE_DEVICE_IP</span>} $<span style="color: #0084C8; font-weight: bold;">2</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">fi</span>
<span style="color: #A52A2A; font-weight: bold;">fi</span>
</pre>
</div>

<p>
修改 <code>nginx-1.14.0</code> 的配置脚本，将本地运行测试程序的地方改为远程执行
</p>
<div class="org-src-container">
<pre class="src src-sh">sed -i -e <span style="color: #4E9A06;">'s/\/bin\/sh -c $NGX_AUTOTEST/timeout 10 \/build\/execute -f $NGX_AUTO</span><span style="color: #4E9A06; text-decoration: underline;">TEST/g'</span><span style="text-decoration: underline;"> </span><span style="color: #ff00ff; text-decoration: underline;">`find auto -type f`</span>
sed -i -e <span style="color: #4E9A06;">'s/$NGX_AUTOTEST &gt;\/dev\/null/timeout 10 \/build\/execute -f $NGX_AUTO</span><span style="color: #4E9A06; text-decoration: underline;">TEST &gt;\/dev\/null/g'</span><span style="text-decoration: underline;"> </span><span style="color: #ff00ff; text-decoration: underline;">`find auto -type f`</span>
sed -i -e <span style="color: #4E9A06;">'s/`$NGX_AUTOTEST`/`timeout 10 \/build\/execute -f $NGX_AUTOTEST`/g'</span> <span style="color: #ff00ff;">`</span><span style="color: #ff00ff; text-decoration: underline;">find auto -type f`</span>
</pre>
</div>

<p>
运行时需要预先设置环境变量 <code>CROSS_COMPILE_DEVICE_IP</code> 为目标设备 IP，对于嵌入式
Linux 设备，需要使用 <code>ssh-copy-id</code> 命令设置为本机免密码 ssh 登录，对于 Android
设备需要预先 adb 授权通过。
</p></li>

<li><p>
编译时找不到 <code>crypt.h</code>
</p>

<p>
<code>crypt.h</code> 属于 <code>glibc</code> ， <code>glibc</code> 是 Linux 下的 C 标准库实现，除了实现 <code>ANSI
  C</code> 标准库还有大量方便 Linux 开发的扩展功能。而 NDK 提供的 C 标准库并非 <code>glibc</code>
而是 <a href="https://github.com/android/platform_bionic/">Bionic libc</a> ，这导致移植 Nginx 时由于缺少 <code>crypt.h</code> 头文件而编译不过。
</p>

<p>
可以将 <code>crypt</code> 调用替换为 <code>DES_crypt</code>
</p>
<div class="org-src-container">
<pre class="src src-sh">sed -i -e <span style="color: #4E9A06;">'s/#include &lt;crypt.h&gt;/#if (NGX_HAVE_CRYPT_H)\n#include &lt;crypt.h&gt;\n#end</span><span style="color: #4E9A06; text-decoration: underline;">if\n#include &lt;openssl\/des.h&gt;/g'</span><span style="text-decoration: underline;"> src/os/unix/ngx_linux_config.h</span>
sed -i -e <span style="color: #4E9A06;">'s/= crypt(/= DES_crypt(/g'</span> src/os/unix/ngx_user.c
</pre>
</div></li>

<li><p>
链接时找不到 <code>glob</code> 函数
</p>

<p>
NDK 工具链是有提供 <code>glob.h</code> 头文件的，但是链接时却找不到 <code>glob</code> 函数。网络上有很多单独提供 <a href="https://github.com/tatowilson/Cross-Compile-Nginx-with-RTMP-Module-for-Android/tree/master/glob">glob</a> 下载的，但是都无法直接通过编译，因为里面有很多平台相关的特性。
</p>

<p>
<a href="https://github.com/android-ndk/ndk/issues/718">Undefined reference to glob and globfree in libc.so · Issue #718 · android-ndk/ndk</a>
中说是已经在 <code>r17b</code> 版本解决，需安装 <code>android-ndk-r17-beta2</code> 同时设置 <code>API
  Level</code> 为 <code>28</code> 即可。
</p></li>

<li><p>
交叉编译 Nginx
</p>

<p>
可使用独立工具链来交叉编译 Nginx，参考前面环境变量配置部分先设置好工具链的环境变量。
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">CC_TEST_FLAGS</span>=<span style="color: #4E9A06;">"${CFLAGS} ${LDFLAGS}"</span> ./configure --with-ld-opt=<span style="color: #4E9A06;">"${LDFLAGS}"</span> --pr<span style="text-decoration: underline;">efix=/opt/local --crossbuild=</span><span style="color: #ff00ff; text-decoration: underline;">`/build/execute -c 'uname -srm' | tr ' ' ':'`</span><span style="text-decoration: underline;"> --user=root --group=root --with-select_module --with-poll_module --with-file-aio --with-http_ssl_module --without-mail_pop3_module --without-mail_imap_module  --without-mail_smtp_module</span>
make
make install
</pre>
</div></li>

<li><p>
编译出的 Nginx 无法在低版本的 Android 上运行
</p>

<p>
之前为了使用最新的 NDK 工具链包含的函数 <code>glob</code> ，而将 <code>API Level</code> 设置成 <code>28</code>
，这就意味着编译出来的程序无法在低版本的 Android（&lt;=8.1） 上运行，在 Android
7.1 上运行会报错 <code>/system/bin/nginx: No such file or directory</code> 。
</p>

<p>
将 NDK 最新工具链带的 <code>so</code> 也拷到设备上，运行程序前设置一下 <code>$LD_LIBRARY_PATH</code>
优先使用最新的 <code>so</code> ，Nginx 运行后直接卡死或者立即崩溃。
</p>

<p>
添加 <code>-static -Wl,--dynamic-linker=/system/bin/linker</code> 链接选项静态编译，运行时会报错 <code>/system/bin/nginx: Accessing a corrupted shared library</code> 的错误，需要使用 <code>/system/bin/linker64</code> 。
</p>

<p>
由于 <code>-static</code> 与 <code>-pie</code> 是互相冲突的选项，静态编译的程序运行时会报错 <code>only
  position independent executables (PIE) are supported.</code> 。
</p></li>

<li><p>
编译在 Android 5 及以上版本运行的 Nginx
</p>

<p>
参考以下项目，通过使用 docker 方便交叉编译 nginx-1.14.0
</p>

<p>
<a href="https://github.com/tangxinfa/android-nginx">tangxinfa/android-nginx: Cross compile nginx with android ndk</a>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgd56d5d7" class="outline-2">
<h2 id="orgd56d5d7">结论</h2>
<div class="outline-text-2" id="text-orgd56d5d7">
<p>
一般的 C/C++ 库通常本身就会注重可移植性，不会生硬地依赖系统底层特性，使用 NDK
移植是可行的，即使是 <code>ffmpeg</code> 这种大型的库也可以成功移植到 Android。
</p>

<p>
而对于一些 Linux 下的程序，使用 NDK 直接移植会有很大的失败机率，因为他们可能使用了 NDK 不支持的特性（如 <code>glibc</code> ）。
</p>

<p>
NDK 一直在改进，以前阻碍我们移植到 Android 的问题很可能会在新版本中解决，遗憾的是编译出的程序无法运行在旧版本 Android 上。
</p>
</div>
</div>

<div id="outline-container-org1043cb5" class="outline-2">
<h2 id="org1043cb5">参考</h2>
<div class="outline-text-2" id="text-org1043cb5">
<ul class="org-ul">
<li><a href="https://developer.android.com/ndk/guides/concepts">Concepts  |  Android NDK  |  Android Developers</a></li>

<li><a href="http://www.jkeabc.com/475203.html">Android NDK vs AOSP Build System</a></li>

<li><a href="https://developer.android.com/ndk/guides/stable_apis">Android NDK Native APIs  |  Android NDK  |  Android Developers</a></li>

<li><a href="https://software.intel.com/en-us/articles/building-an-android-command-line-application-using-the-ndk-build-tools">Building an Android* Command-Line Application Using the NDK Build Tools | Intel® Software</a></li>

<li><a href="https://www.jianshu.com/p/6332418b12b1">Android NDK开发扫盲及最新CMake的编译使用 - 简书</a></li>

<li><a href="https://blog.csdn.net/minghuang2017/article/details/78938852">在命令行下用cmake交叉编译可在android中运行的so包 - CSDN博客</a></li>

<li><a href="https://blog.csdn.net/minghuang2017/article/details/79000345">cmake使用独立工具链交叉编译可在android中运行的so包 - CSDN博客</a></li>

<li><a href="https://warpedtimes.wordpress.com/2010/02/03/building-open-source-libraries-with-android-ndk/">Building Open Source libraries with Android NDK | Thoughts and Ideas In Warped Times</a></li>

<li><a href="https://zhangtom.com/2017/07/11/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%B8%A6RTMP%E6%A8%A1%E5%9D%97%E7%9A%84Nginx%E5%88%B0Android/">交叉编译带RTMP模块的Nginx到Android | Tom's Blog</a></li>

<li><a href="https://stackoverflow.com/questions/10380422/android-static-linking-vs-dynamic-linking-against-glibc">Android Static Linking vs Dynamic Linking against glibc - Stack Overflow</a></li>

<li><a href="https://stackoverflow.com/questions/27082959/gcc-static-and-pie-are-incompatible-for-x86">android 5.0 lollipop - GCC: -static and -pie are incompatible for x86? - Stack Overflow</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Nginx 自动生成并缓存缩略图]]></title>
            <link>/article/nginx-81ea52a8751f62105e767f135b587f29756556fe.html</link>
            <guid>/article/nginx-81ea52a8751f62105e767f135b587f29756556fe.html</guid>
            <pubDate>Wed, 30 Aug 2017 06:35:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org5f9b33e" class="outline-2">
<h2 id="org5f9b33e">配置示例</h2>
<div class="outline-text-2" id="text-org5f9b33e">
<div class="org-src-container">
<pre class="src src-conf"><span style="color: #204A87;"># </span><span style="color: #204A87;">&#35775;&#38382;&#21407;&#22987;&#22270;&#29255;</span>
<span style="color: #2F8B58; font-weight: bold;">location /image</span> {
    root /data;
}

<span style="color: #204A87;"># </span><span style="color: #204A87;">&#35775;&#38382;&#32553;&#30053;&#22270;&#29255;</span>
<span style="color: #2F8B58; font-weight: bold;">location ~* ^/thumbnail/(.*)$</span> {
    alias /data/thumbnail;

    <span style="color: #2F8B58; font-weight: bold;">if (!-f $request_filename)</span> {
        proxy_pass http://127.0.0.1/_thumbnail/$1;
        break;
    }

    proxy_set_header     Host $http_host;
    proxy_store          /data/thumbnail/$1;
    proxy_store_access   user:rw  group:r  all:r;
    proxy_temp_path      /tmp/image;
}

<span style="color: #204A87;"># </span><span style="color: #204A87;">&#29983;&#25104;&#32553;&#30053;&#22270;</span>
<span style="color: #2F8B58; font-weight: bold;">location /_thumbnail</span> {
    alias /data/image/;
    <span style="color: #204A87;"># </span><span style="color: #204A87;">&#25351;&#23450;&#35201;&#32553;&#25918;&#30340;&#23485;&#12289;&#39640;&#65292;"-" &#34920;&#31034;&#31561;&#27604;&#20363;&#32553;&#25918;</span>
    image_filter resize 400 <span style="color: #4E9A06;">"-"</span>;
    image_filter_jpeg_quality 75;
    <span style="color: #204A87;"># </span><span style="color: #204A87;">&#35774;&#32622;&#33021;&#22788;&#29702;&#30340;&#26368;&#22823;&#21407;&#22987;&#22270;&#29255;&#25991;&#20214;&#65292;&#40664;&#35748; 1MB &#22826;&#23567;&#20102;</span>
    image_filter_buffer 20M;
    <span style="color: #204A87;"># </span><span style="color: #204A87;">&#25298;&#32477;&#22806;&#37096;&#30452;&#25509;&#35775;&#38382;</span>
    allow 127.0.0.0/8;
    deny all;
}
</pre>
</div>

<dl class="org-dl">
<dt><code>/data/image/</code></dt><dd>原始图片存放目录</dd>

<dt><code>/data/thumbnail</code></dt><dd><p>
缩略图存放目录
</p>

<p>
需确保 nginx worker 进程有写入权限
</p>
<div class="org-src-container">
<pre class="src src-sh">chown nginx:nginx /data/thumbnail
</pre>
</div></dd>

<dt><code>/tmp/image</code> </dt><dd>生成缩略图时的临时目录</dd>
</dl>


<p>
访问原始图片： <code>http://127.0.0.1/image/test.jpeg</code>
</p>

<p>
访问缩略图片： <code>http://127.0.0.1/thumbnail/test.jpeg</code>
</p>
</div>
</div>

<div id="outline-container-org14f8841" class="outline-2">
<h2 id="org14f8841">参考</h2>
<div class="outline-text-2" id="text-org14f8841">
<ul class="org-ul">
<li><a href="http://nginx.org/en/docs/http/ngx_http_image_filter_module.html#image_filter">Module ngx_http_image_filter_module</a></li>
</ul>


<ul class="org-ul">
<li><a href="https://gist.github.com/phpdude/1451684">Nginx image filter + caching of results</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[解决个人用户目录做为 Web 服务根目录的权限问题]]></title>
            <link>/article/89e351b34e2a4eba7528623776ee5f55505a4e3a-web-670d52a1683976ee5f5576846743965095ee9898.html</link>
            <guid>/article/89e351b34e2a4eba7528623776ee5f55505a4e3a-web-670d52a1683976ee5f5576846743965095ee9898.html</guid>
            <pubDate>Tue, 14 Jun 2016 05:38:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
我们在个人帐号目录下进行日常的开发工作，通常使用弱权限帐号（如：nobody）运行 Web 服务器（如：nginx）。
</p>

<p>
nginx 配置 Web 服务器的根目录为个人用户目录，这样修改代码后刷新浏览器就可以看到效果。
</p>

<pre class="example">
user nobody;

server {
   listen       80;
   server_name  www.example.com;

   location / {
       root   /home/tangxinfa/projects/www.example.com;
       index  index.html index.htm;
   }
}
</pre>

<p>
然而 linux 的用户权限系统禁止 Web 服务器用户（nobody）访问个人用户（tangxinfa）的数据。
</p>

<p>
使用浏览器访问，会得到一个错误页面
</p>
<pre class="example">
403 Forbidden
</pre>

<p>
使用 linux 命令确认问题是由用户权限系统引起
</p>
<pre class="example">
$ sudo -u nobody -g nobody ls -la /home/tangxinfa/projects/www.example.com
ls: cannot access '/home/tangxinfa/projects/www.example.com': Permission denied
</pre>


<p>
解决方法有以下几种：
</p>

<ul class="org-ul">
<li><p>
使用软链接
</p>

<p>
很多人都会下意识地想到通过软链接来解决
</p>
<pre class="example">
sudo ln -s /home/tangxinfa/projects/www.example.com /var/www/
sudo chown -R nobody:nobody /var/www/www.example.com
sudo chown -R nobody:nobody /home/tangxinfa/projects/www.example.com
</pre>
<p>
将个人用户目录链到 Web 服务器用户目录下是没有用的，linux 按原始路径（/home/tangxinfa/projects/www.example.com）来检查权限。
</p>

<p>
可以反过来，将项目从个人用户目录移到 Web 服务器用户目录下，然后反向建一个软链接，即可以让 Web 服务器工作正常，又不影响日常开发。
</p>

<pre class="example">
sudo mv /home/tangxinfa/projects/www.example.com /var/www/
ln -s /var/www/www.example.com /home/tangxinfa/projects/
</pre>

<p>
但是，如果项目是版本控制系统（如：git）仓库的一个子项目（目录），将目录变成软链接后 git 会认为目录被删除了。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
用户目录给 Web 服务帐号开放权限
</p>

<p>
按 linux 的帐号权限系统要求，修改（chmod）用户目录的属性，每一级目录的权限都要修改，容易过渡放开权限，引入安全问题。
</p>

<p>
设置 Web 服务帐号为用户帐号
</p>

<pre class="example">
user tangxinfa;
</pre>

<p>
由于 Web 服务器（nginx）通常配有多个服务，Web 服务帐号是全局共用的，其它服务的目录权限也要进行调整。如果 nginx 只运行这一个服务的话，还是可行的。
</p>

<p>
设置 Web 服务帐号为 root 帐号
</p>

<pre class="example">
user root;
</pre>

<p>
使用 root 帐号会引入安全隐患，一般不推荐，但很少会遇到目录权限方面的问题，可以应急使用。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
将用户目录挂载到 Web 帐号目录下
</p>

<p>
mount 命令支持将一个目录重新挂载到其它位置
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo mkdir /var/www/www.example.com
sudo chown nobody:nobody /var/www/www.example.com
sudo mount --bind -o ro,<span style="color: #0084C8; font-weight: bold;">username</span>=nobody /home/tangxinfa/projects/www.example.com<span style="text-decoration: underline;"> /var/www/www.example.com</span>
</pre>
</div>

<p>
Web 服务器和日常开发可以兼顾，两全其美的方案。
</p>

<p>
bind 形式的挂载放到 /etc/fstab 会挂载失败（估计是挂载时相关依赖还没有准备好），影响开机。
</p>

<p>
创建挂载脚本 /usr/sbin/bind-mounts 并添加可执行权限，内容如下
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #204A87;">#</span><span style="color: #204A87;">!/bin/</span><span style="color: #A52A2A; font-weight: bold;">bash</span>

mount --bind -o ro,<span style="color: #0084C8; font-weight: bold;">username</span>=nobody /home/tangxinfa/projects/www.example.com /var<span style="text-decoration: underline;">/www/www.example.com</span>
</pre>
</div>

<p>
创建 systemd 服务文件 /usr/lib/systemd/system/bind-mounts.service
</p>
<pre class="example">
[Unit]
Description=Bind Mounts
After=local-fs.target

[Service]
Type=simple
ExecStart=/usr/sbin/bind-mounts

[Install]
WantedBy=multi-user.target
</pre>

<p>
启用 bind-mounts 服务
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl enable bind-mounts
</pre>
</div></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Nginx Comet: 基于 HTTP 长连接的“服务器推”技术]]></title>
            <link>/article/nginx-comet-57fa4e8e-http-957f8fde63a57684201c670d52a1566863a8201d6280672f.html</link>
            <guid>/article/nginx-comet-57fa4e8e-http-957f8fde63a57684201c670d52a1566863a8201d6280672f.html</guid>
            <pubDate>Fri, 14 Dec 2012 13:09:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org3fc4cc8" class="outline-2">
<h2 id="org3fc4cc8">简介</h2>
<div class="outline-text-2" id="text-org3fc4cc8">
<p>
可参考这篇文章：<a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/">Comet：基于 HTTP 长连接的“服务器推”技术</a>
</p>
</div>
</div>

<div id="outline-container-org7b4523e" class="outline-2">
<h2 id="org7b4523e"><a href="https://github.com/slact/nginx_http_push_module">nginx_http_push_module</a> （不建议使用）</h2>
<div class="outline-text-2" id="text-org7b4523e">
<p>
这个模块功能上没有问题，网上介绍的文章相对比较多，但是存在严重的内存泄露问题，而且发现使用kill -HUP的方式优雅重启nginx虽会释放一部分内存，但nginx错误日志显示有共享内存锁相关的冲突，我们不得不每小时彻底重启一次nginx。简单说一下就是它使用一个全局的内存池来分配订阅者及响应需要的内存空间，但是从nginx内存池分配的小内存块（&lt; pagesize，4096）是不会释放的也不会归还到池中进行重用，具体可查看nginx源码的ngx_palloc和ngx_pfree函数进行验证。
</p>

<p>
可google "nginx中mod_push模块内存分配改造"，在作者的<a href="http://http//blog.lifeibo.com/">网站</a>正在改版暂时找不到该文章。
</p>

<p>
<a href="http://bsd.ee/~hadara/blog/?p=215=1">这里</a>也有人<a href="https://github.com/slact/nginx_http_push_module/pull/60">指出</a>该问题，同时该文作者也fork了一个分枝，但是我试了一下，除了不支持push_channel_timeout特性外，还是一样有内存泄露。
</p>

<dl class="org-dl">
<dt>参考配置</dt><dd></dd>
</dl>
<pre class="example">
location ~ ^/publish$ {
    allow 127.0.0.1;
    deny all;
    set $push_channel_id $arg_id;
    push_publisher;
    push_delete_oldest_received_message on;
    push_message_timeout 5s;
    #push_channel_timeout 60s;
    push_store_messages off;
}

location ~ ^/activity$ {
    if ($args ~ "callback=(.+)" ) {
        rewrite ^/activity "/activity_jsonp" last;
    }
    push_subscriber;
    push_subscriber_timeout 60s;
    push_subscriber_concurrency first;
    push_max_channel_subscribers 1;
    set $push_channel_id $arg_id;
    default_type application/json;
}

location ~ ^/activity_jsonp$ {
    push_subscriber;
    push_subscriber_timeout 60s;
    push_subscriber_concurrency first;
    push_max_channel_subscribers 1;
    set $push_channel_id $arg_id;
    default_type application/json;
    echo_before_body $arg_callback "(";
    echo_after_body ")";
}
</pre>
</div>
</div>

<div id="outline-container-orga631c3e" class="outline-2">
<h2 id="orga631c3e"><a href="https://github.com/wandenberg/nginx-push-stream-module">nginx-push-stream-module</a> （建议使用）</h2>
<div class="outline-text-2" id="text-orga631c3e">
<p>
由于 <a href="https://github.com/slact/nginx_http_push_module">nginx_http_push_module</a> 存在内存泄露问题，同时没有人进行正式的修复，我们决定尝试一下<a href="https://github.com/wandenberg/nginx-push-stream-module">nginx-push-stream-module</a>，这个模块功能更强大同时文档更完整，看起来也更活跃。
</p>

<dl class="org-dl">
<dt>优点</dt><dd><ul class="org-ul">
<li>更成熟有内存消耗说明文档，便于决定共享内存容量配置。有统计功能。可对响应内容进行再处理。</li>
<li>测试中未发现明显的内存泄露</li>
<li>内置支持jsonp
返回的jsonp是这样的格式callback([text])，可以通过修改ngx_http_push_stream_module_utils.h中定义的NGX_HTTP_PUSH_STREAM_CALLBACK_INIT_CHUNK和NGX_HTTP_PUSH_STREAM_CALLBACK_END_CHUNK去除多余的中括号。</li>
</ul></dd>
</dl>
<dl class="org-dl">
<dt>参考配置</dt><dd></dd>
</dl>
<pre class="example">
push_stream_store_messages off;
push_stream_max_subscribers_per_channel 1;
push_stream_subscriber_connection_ttl 60s;
push_stream_longpolling_connection_ttl 60s;

server {
    listen 80;
    server_name localhost 127.0.0.1;
    
    ...

    location ~ ^/publish$ {
        allow 127.0.0.1;
        deny all;
        push_stream_publisher admin;
        set $push_stream_channel_id $arg_id;
    }
    
    location ~ ^/activity$ {
        push_stream_subscriber long-polling;
        set $push_stream_channels_path $arg_id;
        push_stream_content_type "application/json";
        push_stream_message_template "~text~";
    }

    ...
}

</pre>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[理解nginx的keepalive_timeout配置项]]></title>
            <link>/article/740689e3-nginx-7684-keepalive_timeout-914d7f6e9879.html</link>
            <guid>/article/740689e3-nginx-7684-keepalive_timeout-914d7f6e9879.html</guid>
            <pubDate>Mon, 12 Nov 2012 09:05:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
不要误以为它是指tcp连接空闲多少秒后关闭，它仅表示连接建立多少秒后关闭，不会在一次请求后重新计时。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[nginx下快速搭建php运行环境]]></title>
            <link>/article/nginx-4e0b5feb901f642d5efa-php-8fd0884c73af5883.html</link>
            <guid>/article/nginx-4e0b5feb901f642d5efa-php-8fd0884c73af5883.html</guid>
            <pubDate>Sat, 11 Aug 2012 13:09:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-orgb139e84" class="outline-2">
<h2 id="orgb139e84">安装</h2>
<div class="outline-text-2" id="text-orgb139e84">
</div>
<div id="outline-container-orgc296de6" class="outline-3">
<h3 id="orgc296de6">安装nginx</h3>
<div class="outline-text-3" id="text-orgc296de6">
<p>
yaourt -S nginx
</p>
</div>
</div>
<div id="outline-container-org677aa9f" class="outline-3">
<h3 id="org677aa9f">安装php</h3>
<div class="outline-text-3" id="text-org677aa9f">
<p>
yaourt -S php
</p>
</div>
</div>
<div id="outline-container-org569088d" class="outline-3">
<h3 id="org569088d">安装php-fpm</h3>
<div class="outline-text-3" id="text-org569088d">
<p>
yaourt -S php-fpm
</p>
</div>
</div>
</div>

<div id="outline-container-orgcd36737" class="outline-2">
<h2 id="orgcd36737">配置</h2>
<div class="outline-text-2" id="text-orgcd36737">
</div>
<div id="outline-container-orgc78d102" class="outline-3">
<h3 id="orgc78d102">配置nginx</h3>
<div class="outline-text-3" id="text-orgc78d102">
<ul class="org-ul">
<li><p>
将nginx.conf中的以下部分：
</p>
<pre class="example">
#location ~ \.php$ {
...
#}
</pre></li>
<li><p>
修改为
</p>
<pre class="example">
location ~ \.php$ {
   root           /usr/share/nginx/html;
   fastcgi_pass   127.0.0.1:9000;
   fastcgi_index  index.php;
   fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
   include        fastcgi_params;
}
</pre></li>
</ul>
</div>
</div>
<div id="outline-container-org211e5c7" class="outline-3">
<h3 id="org211e5c7">配置php</h3>
<div class="outline-text-3" id="text-org211e5c7">
<p>
在open_basedir中添加：/usr/share/nginx/html
</p>
</div>
</div>
<div id="outline-container-org9cf55a3" class="outline-3">
<h3 id="org9cf55a3">配置php-fpm.conf</h3>
<div class="outline-text-3" id="text-org9cf55a3">
<p>
启用以下listen配置：
listen = 127.0.0.1:9000
</p>
</div>
</div>
</div>

<div id="outline-container-orgadc1b47" class="outline-2">
<h2 id="orgadc1b47">运行</h2>
<div class="outline-text-2" id="text-orgadc1b47">
<ul class="org-ul">
<li><p>
重启nginx
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo /etc/rc.d/nginx restart
</pre>
</div></li>
<li><p>
启动php-fpm
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo php-fpm
</pre>
</div></li>
<li>然后在/usr/share/nginx/html目录中写php脚本即可。</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>