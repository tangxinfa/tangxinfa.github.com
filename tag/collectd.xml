<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>collectd - 看看俺 – KanKanAn.com</title>
        <description>记我所思，忆我所为。</description>
        <link>http://blog.kankanan.com/tag/collectd.xml</link>
        <lastBuildDate>Sun, 21 Aug 2016 05:52:39 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <image>
            <title>collectd - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/collectd.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <generator>Feed for Node.js</generator>
        <category>技术</category>
        <item>
            <title><![CDATA[collectd 问题诊断方法]]></title>
            <link>/article/collectd-95ee98988bca65ad65b96cd5.html</link>
            <guid>/article/collectd-95ee98988bca65ad65b96cd5.html</guid>
            <pubDate>Mon, 30 May 2016 08:27:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">输出日志</h2>
<div class="outline-text-2" id="text-1">
<p>
<code>collectd.conf</code>
</p>
<pre class="example">
LoadPlugin "logfile"
&lt;Plugin "logfile"&gt;
  LogLevel "info"
  File "/var/log/collectd.log"
  Timestamp true
&lt;/Plugin&gt;
</pre>

<p>
collectd-exec 插件执行的脚本标准错误输出（stderr）会出现在日志文件中（/var/log/collectd.log）。
</p>

<p>
通过分析日志可以查出统计脚本本身的问题。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">网络抓包</h2>
<div class="outline-text-2" id="text-2">
<p>
使用 tcpdump 抓包
</p>
<div class="org-src-container">

<pre class="src src-sh">tcpdump -i any host &lt;collectd server ip&gt; -XX -tttt -nnnn -s 0 -w ~/&lt;collectd ser<span style="text-decoration: underline;">ver ip&gt;.pcap</span>
</pre>
</div>
<p>
请将 <code>&lt;collectd server ip&gt;</code> 替换为 collectd.conf 中 <code>network</code> 插件中的 <code>Server</code> 值。
</p>

<p>
使用 wireshark 查看抓到的包，右键菜单中选择 <code>Decode As...</code> ，弹出的列表中选择按 <code>collectd</code> 协议进行解析。
</p>

<p>
检查上报的数据是否有问题。
</p>

<p>
如果上报的数据是正常的，则有可能是以前上报了有问题的数据导致，请尝试从 collectd 服务器上直接将相应的 rrd 文件删除。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">分析 rrd 文件</h2>
<div class="outline-text-2" id="text-3">
<p>
collectd 是使用 RRDtool 进行数据存储，直接查看 rrd 文件数据是最直接的诊断方法。
</p>

<div class="org-src-container">

<pre class="src src-sh">rrdtool fetch /var/lib/collectd/localhost/test/gauge.rrd AVERAGE --start 1464585<span style="text-decoration: underline;">532 --end N</span>
</pre>
</div>

<p>
RRDtool 的用法请参考 <a href="http://oss.oetiker.ch/rrdtool/tut/rrdtutorial.en.html">RRDtool - rrdtutorial</a>
</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[理解 collectd 的四种数据类型]]></title>
            <link>/article/740689e3-collectd-768456db79cd6570636e7c7b578b.html</link>
            <guid>/article/740689e3-collectd-768456db79cd6570636e7c7b578b.html</guid>
            <pubDate>Mon, 30 May 2016 06:32:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">collectd 的基础是 <a href="http://oss.oetiker.ch/rrdtool/">RRDtool</a></h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
RRDtool is the OpenSource industry standard, high performance data logging and graphing system for time series data.
</p>
</blockquote>

<blockquote>
<p>
What makes RRDtool so special?
</p>

<p>
RRDtool is GNU licensed software developed by Tobias Oetiker, a system manager at the Swiss Federal Institute of Technology. Though it is a database, there are distinct differences between RRDtool databases and other databases as listed below:
</p>

<ul class="org-ul">
<li>RRDtool stores data; that makes it a back-end tool. The RRDtool command set allows one to create graphs; that makes it a front-end tool as well. Other databases just store data and can not create graphs.
</li>

<li>In case of linear databases, new data gets appended at the bottom of the database table. Thus its size keeps on increasing, whereas the size of an RRDtool database is determined at creation time. Imagine an RRDtool database as the perimeter of a circle. Data is added along the perimeter. When new data reaches the starting point, it overwrites existing data. This way, the size of an RRDtool database always remains constant. The name "Round Robin" stems from this behavior.
</li>

<li>Other databases store the values as supplied. RRDtool can be configured to calculate the rate of change from the previous to the current value and store this information instead.
</li>

<li>Other databases get updated when values are supplied. The RRDtool database is structured in such a way that it needs data at predefined time intervals. If it does not get a new value during the interval, it stores an UNKNOWN value for that interval. So, when using the RRDtool database, it is imperative to use scripts that run at regular intervals to ensure a constant data flow to update the RRDtool database.
</li>
</ul>
</blockquote>

<blockquote>
<p>
是什么让 RRDtool 如此特殊？
</p>

<p>
RRDtool 是由 Tobias Oetiker 开发的遵循 GNU 协议的软件，他是 Swiss Federal Institute of Technology 的 system manager。虽然 RRDtool 是一个数据库，但与其它数据库有着明显的区别，如下所述：
</p>

<ul class="org-ul">
<li>RRDtool 存储数据，是后端工具。RRDtool 命令集可用于创建图表，因此它也是前端工具。其它数据库只存储数据但不创建图表。
</li>

<li>做为线性数据库，新数据追加在数据库的底部。这样它的尺寸会不断增长，然而 RRDtool 数据库的尺寸在创建时确定。想像 RRDtool 数据库是圆周长。数据随着周长添加。当新数据达到起始点，它会覆盖已存在的数据。这样，RRDtool 数据库的尺寸总是保持不变。因此得名“Round Robin”。
</li>

<li>其它数据库存储供应的数据值。而 RRDtool 可配置为计算前一个值到当前值的变化率，做为替代物进行存储。
</li>

<li>其它数据库在供应数据值时就会进行更新。RRDtool 数据库构造为需要预定义时间间隔的数据。在一个时间间隔内，如果它无法获取到一个新值，它会为该时间间隔存储一个未知（UNKNOWN） 值。因此，使用 RRDtool 数据库时，必须定期运行脚本确保恒定的数据流去更新 RRDtool 数据库。
</li>
</ul>
</blockquote>

<p>
以上引用自 <a href="http://oss.oetiker.ch/rrdtool/tut/rrd-beginners.en.html">RRDtool - rrd-beginners</a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">collectd 的四种数据类型</h2>
<div class="outline-text-2" id="text-2">
<p>
RRDtool 默认的时间间隔为 300 秒（5分钟），collectd 默认时间间隔为 10 秒。
</p>

<p>
通常的建议是上报数据时，确保时间间隔与 collectd 服务器的设置一致（即 COLLECTD_INTERVAL），
但是了解 collectd 会如何处理上报的值，更有利于我们正确地上报数据，获得理想的结果。
</p>

<p>
collectd 用到了 RRDtool 中的四种数据类型：ABSOLUTE、COUNTER、DERIVE、GAUGE，《<a href="http://blog.kankanan.com/article/collectd-6570636e7c7b578b8be689e3.html">collectd 数据类型详解</a>》 已有描述，而具体如何使用则看本文。
</p>

<p>
假设要上报一个 100/秒 的统计值，在一个时间间隔（10 秒）内分成多部分上报，分别使用四种数据类型进行上报。
</p>

<p>
<code>absolute.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #999999; font-style: italic;">#</span><span style="color: #999999; font-style: italic;">!/bin/</span><span style="color: #99cc99;">bash</span>

<span style="color: #ffcc66;">HOSTNAME</span>=<span style="color: #66cccc;">"${COLLECTD_HOSTNAME:-localhost}"</span>
<span style="color: #ffcc66;">VALUE</span>=0

<span style="color: #99cc99;">while</span> [ 1 ]; <span style="color: #99cc99;">do</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 3
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=200
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/absolute\" N:$VALUE"</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 1
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=100
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/absolute\" N:$VALUE"</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 6
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=700
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/absolute\" N:$VALUE"</span>
<span style="color: #99cc99;">done</span>
</pre>
</div>

<p>
<code>ABSOLUTE</code> 类型值的处理
</p>
<blockquote>
<p>
将时间间隔（10 秒）内的上报的值进行累加，然后与时间间隔（10 秒）相除
</p>

<p>
(200 + 100 + 700)/10 == 100
</p>
</blockquote>

<p>
<code>counter.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #999999; font-style: italic;">#</span><span style="color: #999999; font-style: italic;">!/bin/</span><span style="color: #99cc99;">bash</span>

<span style="color: #ffcc66;">HOSTNAME</span>=<span style="color: #66cccc;">"${COLLECTD_HOSTNAME:-localhost}"</span>
<span style="color: #ffcc66;">VALUE</span>=0

<span style="color: #99cc99;">while</span> [ 1 ]; <span style="color: #99cc99;">do</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 3
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=$[VALUE+500]
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/counter\" N:$VALUE"</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 1
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=$[VALUE+200]
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/counter\" N:$VALUE"</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 6
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=$[VALUE+300]
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/counter\" N:$VALUE"</span>
<span style="color: #99cc99;">done</span>
</pre>
</div>

<p>
<code>COUNTER</code> 类型值的处理
</p>
<blockquote>
<p>
将时间间隔（10 秒）内的变化值（时间间隔内最后上报的值减去上一时间间隔最后上报的值）与时间间隔（10 秒）相除
</p>

<p>
(2000 - 1000) / 10 == 100
</p>
</blockquote>

<p>
<code>derive.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #999999; font-style: italic;">#</span><span style="color: #999999; font-style: italic;">!/bin/</span><span style="color: #99cc99;">bash</span>

<span style="color: #ffcc66;">HOSTNAME</span>=<span style="color: #66cccc;">"${COLLECTD_HOSTNAME:-localhost}"</span>
<span style="color: #ffcc66;">VALUE</span>=0

<span style="color: #99cc99;">while</span> [ 1 ]; <span style="color: #99cc99;">do</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 3
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=$[VALUE+500]
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/counter\" N:$VALUE"</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 1
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=$[VALUE+200]
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/counter\" N:$VALUE"</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 6
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=$[VALUE+300]
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/counter\" N:$VALUE"</span>
<span style="color: #99cc99;">done</span>
</pre>
</div>

<p>
<code>DERIVE</code> 类型值的处理
</p>
<blockquote>
<p>
将时间间隔（10 秒）内的变化值（时间间隔内最后上报的值减去上一时间间隔最后上报的值）与时间间隔（10 秒）相除
</p>

<p>
(2000 - 1000) / 10 == 100
</p>
</blockquote>

<p>
<code>gauge.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #999999; font-style: italic;">#</span><span style="color: #999999; font-style: italic;">!/bin/</span><span style="color: #99cc99;">bash</span>

<span style="color: #ffcc66;">HOSTNAME</span>=<span style="color: #66cccc;">"${COLLECTD_HOSTNAME:-localhost}"</span>
<span style="color: #ffcc66;">VALUE</span>=0

<span style="color: #99cc99;">while</span> [ 1 ]; <span style="color: #99cc99;">do</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 8
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=50
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/gauge\" N:$VALUE"</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   sleep 2
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #ffcc66;">VALUE</span>=300
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/test/gauge\" N:$VALUE"</span>
<span style="color: #99cc99;">done</span>
</pre>
</div>

<p>
<code>GAUGE</code> 类型值的处理
</p>
<blockquote>
<p>
将时间间隔（10 秒）内的值乘以该值与上一值的时间间隔，再累加，最后与时间间隔（10 秒）相除
</p>

<p>
((50 * 8) + (300 * 2)) / 10 == 100
</p>
</blockquote>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><code>COUNTER</code> VS <code>DERIVE</code></h2>
<div class="outline-text-2" id="text-3">
<p>
这两者非常相似，不同点表现在当前上报的值小于上一上报值时：
</p>

<ul class="org-ul">
<li><code>COUNTER</code> 认为数据发生了溢出，会进行”回绕“计算，只要在数据集定义的取值范围（Min-Max）内，仍会做为当前时间间隔（10 秒）的值。

<p>
如生成统计值的程序或设备发生重启，而且重启时间小于一个时间间隔（10 秒），则有可能因”回绕“计算得出巨大的错误值。
</p>

<p>
因此建议在 <code>COUNTER</code> 类型数据集上设置合理的取值范围，一方面支持”回绕“计算，另一方面又不受误计算的影响。
</p>
</li>

<li><code>DERIVE</code> 认为这是异常值，丢弃该值。
</li>
</ul>


<p>
<code>COUNTER</code> 和 <code>DERIVE</code> 类型的值与上一值紧密相关，需要减去上一值才是变化值。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><code>ABSOLUTE</code> VS <code>GAUGE</code></h2>
<div class="outline-text-2" id="text-4">
<p>
<code>ABSOLUTE</code> 是变化值，而 <code>GAUGE</code> 变化率（数量/秒）。
</p>

<p>
<code>ABSOLUTE</code> 需要将时间间隔（10 秒）内的值累加再除以时间间隔（10 秒）算出变化率（数量/秒）。
</p>

<p>
<code>GAUGE</code> 还与当前值到上一值的时间间隔紧密相关，上一值到当前值的时间间隔内的变化率都为当前值。
</p>

<p>
<code>COUNTER</code> 和 <code>DERIVE</code> 类型的值与上一值无关，本身就是变化值（或变化率）。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[collectd 数据类型详解]]></title>
            <link>/article/collectd-6570636e7c7b578b8be689e3.html</link>
            <guid>/article/collectd-6570636e7c7b578b8be689e3.html</guid>
            <pubDate>Sat, 07 May 2016 07:07:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://collectd.org/documentation/manpages/collectd-exec.5.shtml">man 5 collectd-exec</a>
</p>
<blockquote>
<p>
type identifies the type and number of values (i. e. data-set) passed to collectd. A large list of predefined data-sets is available in the types.db file. See types.db(5) for a description of the format of this file.
</p>
</blockquote>
<blockquote>
<p>
type 标识传给 collectd 的值的类型和数量（即数据集）。types.db 中预定义了大量数据集（data-sets）。types.db 的格式描述可以查看 types.db(5) 手册。
</p>
</blockquote>

<p>
<a href="https://collectd.org/documentation/manpages/types.db.5.shtml">man 5 types.db</a>
</p>
<blockquote>
<p>
The types.db file contains one line for each data-set specification. Each line consists of two fields delimited by spaces and/or horizontal tabs. The first field defines the name of the data-set, while the second field defines a list of data-source specifications, delimited by spaces and, optionally, a comma (",") right after each list-entry.
</p>

<p>
The format of the data-source specification has been inspired by RRDtool's data-source specification. Each data-source is defined by a quadruple made up of the data-source name, type, minimal and maximal values, delimited by colons (":"): ds-name:ds-type:min:max. ds-type may be either ABSOLUTE, COUNTER, DERIVE, or GAUGE. min and max define the range of valid values for data stored for this data-source. If U is specified for either the min or max value, it will be set to unknown, meaning that no range checks will happen. See rrdcreate(1) for more details.
</p>
</blockquote>
<blockquote>
<p>
types.db 文件每行定义一种数据集（data-set），为空格或水平制表符分隔的两个字段。第一个字段定义数据集名称，第二字段定义数据源规格列表，列表条目用空格或逗号分隔。
</p>

<p>
数据源规格受到 RRDtool 启发。每一数据源定义为四元组，依次是名称、类型、最小值、最大值，使用冒号分隔：ds-name:ds-type:min:max。ds-type 可取 ABSOLUTE、COUNTER、DERIVE、GAUGE 之一。min 和 max 定义有效的取值范围，可以指定 min 或 max 为未知 U，表示不检查取值范围。查阅 rrdcreate(1) 手册了解更多。
</p>
</blockquote>

<p>
<a href="https://collectd.org/wiki/index.php/Data_source">Data source - collectd Wiki</a>
</p>
<blockquote>
<p>
Data source types
</p>

<p>
There are four data source types which are basically identical to the data source types of the same name in RRDtool:
</p>

<p>
GAUGE
</p>

<p>
A GAUGE value is simply stored as-is. This is the right choice for values which may increase as well as decrease, such as temperatures or the amount of memory used.
</p>


<p>
DERIVE
</p>

<p>
These data sources assume that the change of the value is interesting, i.e. the derivative. Such data sources are very common with events that can be counted, for example the number of emails that have been received by an MTA since it was started. The total number of emails is not interesting, but the change since the value has been read the last time. The value is therefore converted to a rate using the following formula:
</p>

<p>
rate = (value_new - value_old) / (time_new - time_old)
</p>

<p>
Please note that if value_new &lt; value_old, the resulting rate will be negative. If you set the minimum value to zero, such data points will be discarded. Using DERIVE data sources and a minimum value of zero is recommended for counters that rarely overflow, i.e. wrap-around after their maximum value has been reached. This data source type is available since version 4.8.
</p>


<p>
COUNTER
</p>

<p>
These data sources behave exactly like DERIVE data sources in the “normal” case. Their behavior differs when value_new &lt; value_old, i.e. when the new value is smaller than the previous value. In this case, COUNTER data sources will assume the counter “wrapped around” and take this into account. The formula for wrap-around cases is:
</p>

<p>
rate = (2**width - value_old + value_new) / (time_new - time_old)
width = value_old &lt; 2**32 ? 32 : 64
</p>

<p>
Please note that the rate of a COUNTER data source is never negative. If a counter is reset to zero, for example because an application was restarted, the wrap-around calculation may result in a huge rate. Thus setting a reasonable maximum value is essential when using COUNTER data sources. Because of this, COUNTER data sources are only recommended for counters that wrap-around often, for example 32 bit octet counters of a busy switch port.
</p>


<p>
ABSOLUTE
</p>

<p>
This is probably the most exotic type: It is intended for counters which are reset upon reading. In effect, the type is very similar to GAUGE except that the value is an (unsigned) integer and will be divided by the time since the last reading. This data source type is available since version 4.8 and has been added mainly for consistency with the data source types available in RRDtool.
</p>
</blockquote>
<blockquote>
<p>
数据源类型
</p>

<p>
源自 RRDtool 的四种数据源类型：
</p>

<p>
GAUGE
</p>

<p>
GAUGE 意为计量，其值简单地原样存储。用于可增减的值，如：温度或费用支出。
</p>


<p>
DERIVE
</p>

<p>
DERIVE 意为导数，关注值的变动，即导数。
这样的数据源通常为可计数的事件，如：邮件客户端启动后收到的邮件数。
相对于收件箱里的邮件总数，上次查看邮箱后新收到的邮件数量更值得关注。
该值可以根据以下公式转化为速率：
</p>

<p>
rate = (value_new - value_old) / (time_new - time_old)
</p>

<p>
如果 value_new 小于 value_old，得出的 rate 为负。
如果设置最小值（min）为 0 ，这个数据点将被丢弃。
对于很少溢出（即达到最大值后回绕）的计数器推荐使用 DERIVE 数据源并设置最小值（min）为 0。
DERIVE 类型从 4.8 版本开始提供。
</p>


<p>
COUNTER
</p>

<p>
COUNTER 意为计数器，”正常“情况下与 DERIVE 一样。
细微的差异在于当 value_new 小于 value_old 时，COUNTER 数据源类型假设计数器已经“回绕”，计算速率的公式：
</p>

<p>
rate = (2**width - value_old + value_new) / (time_new - time_old)
width = value_old &lt; 2**32 ? 32 : 64
</p>

<p>
COUNTER 数据源类型计算出的速率（rate）值不为负。
如果计数器被重置为 0，如当应用程序重启后，回绕计算可能导致结果为巨大的速率（rate）。
当使用 COUNTER 数据源时，必须设置一个合理的最大值（max）。
因此，COUNTER 数据源仅推荐用于常常会回绕的计数器，例如，繁忙的交换机端口的 32 位字节计数器。
</p>


<p>
ABSOLUTE
</p>

<p>
ABSOLUTE 意为绝对，可能是最特殊的类型：用于读取后会重置的计数器。
效果上，它和 GAUGE 类型非常相似，除了它的值是无符号整型，还要与上次读取至今的时间相除。
</p>

<p>
这个数据源类型从 4.8 版本开始提供，主要是为了和 RRDtool 保持一致。
</p>
</blockquote>

<ul class="org-ul">
<li>数据集（Data Set）

<p>
传递到 collectd 的数据的定义，如 types.db 中的一条：
</p>
<pre class="example">
load            shortterm:GAUGE:0:5000, midterm:GAUGE:0:5000, longterm:GAUGE:0:5000
</pre>

<p>
以上定义了一种数据集，名为 load，包括三个值：shortterm、midterm、longterm，这三个值的类型都是 GAUGE，取值范围 0-5000。
</p>

<p>
详情参见 <a href="https://collectd.org/wiki/index.php/Data_set">Data set - collectd Wiki</a>
</p>
</li>

<li>数据源（Data Source）

<p>
就是数据集（Data Set）的值定义，为名称、类型、最小值、最大值四元组。
</p>
</li>

<li>数据源类型（Data Source Type）

<p>
就是数据源中的类型字段，共有四种类型：ABSOLUTE、COUNTER、DERIVE、GAUGE。
</p>
</li>
</ul>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">示例</h2>
<div class="outline-text-2" id="text-1">
<p>
以下 collectd-exec 插件示例脚本用到了 load 数据集
</p>
<pre class="example">
#!/bin/bash

HOSTNAME="${COLLECTD_HOSTNAME:-localhost}"
INTERVAL="${COLLECTD_INTERVAL:-60}"

while [ 1 ]; do
    echo "PUTVAL \"$HOSTNAME/test_load/load\" interval=$INTERVAL N:1:2:3"
    sleep "$INTERVAL"
done
</pre>

<p>
插件名称 <code>test_load</code> ，数据类型（数据集）为 <code>load</code> ， <code>N</code> 代指当前时间，shortterm、midterm、longterm 的值分别为 1、2、3。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 collectd 监控 pm2 应用性能]]></title>
            <link>/article/4f7f7528-collectd-76d163a7-pm2-5e947528602780fd.html</link>
            <guid>/article/4f7f7528-collectd-76d163a7-pm2-5e947528602780fd.html</guid>
            <pubDate>Thu, 05 May 2016 08:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://github.com/Unitech/pm2">pm2</a> 是 node.js 应用的产品级进程管理器。
</p>

<blockquote>
<p>
PM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.
</p>
</blockquote>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">关键性能指标</h2>
<div class="outline-text-2" id="text-1">
<p>
通过 <a href="https://github.com/Unitech/pm2">pm2</a> 可以获取到 node.js 应用的几个关键性能指标：
</p>

<ul class="org-ul">
<li>Memory used

<p>
node.js 应用的内存占用。
</p>

<p>
node.js（v8） 通过垃圾收集（GC）技术进行自动内存管理，这里测量到的内存占用还包含一部分未回收的垃圾。
</p>
</li>

<li>CPU used

<p>
node.js 应用的 CPU 占用。
</p>

<p>
node.js 是单线程模型，虽然所有 I/O 操作是异步的，但是代码指令执行是同步的，过多的请求处理或消耗 CPU 的操作会导致应用响应速度变慢，可能无法提供正常的服务。
</p>
</li>

<li>Loop delay

<p>
node.js 应用事件循环的延迟。
</p>

<p>
pm2 测量 node.js 应用 Loop delay 的逻辑如下：
</p>

<blockquote>
<p>
记下开始时间（ process.hrtime ）
</p>

<p>
设置 1 秒钟的定时器（setInterval）
</p>

<p>
定时器触发时获取结束时间（ process.hrtime ）
</p>

<p>
结束时间与开始时间的时间差减去 1 秒钟就是 Loop delay
</p>
</blockquote>
<p>
具体实现请查阅 pm2 源代码：node_modules/pm2/node_modules/pmx/lib/probes/pacemaker.js
</p>
</li>
</ul>


<p>
一般来说 <code>Loop delay</code> 与 <code>CPU used</code> 指标是正相关的，但是如果 node.js 应用不小心调用了一些同步 I/O 操作或 I/O 出现瓶颈，则会出现 <code>CPU used</code> 低但是 <code>Loop delay</code> 高的情况。
</p>

<ul class="org-ul">
<li>restart_time 及 unstable_restarts

<p>
node.js（javascript）是一门动态语言，很少运行到的代码分支里一个错误的变量引用就可能导致整个应用异常退出，pm2 会在 node.js 应用退出时自动重新拉起应用，
但这可能会掩盖潜藏的问题（BUG），监控 node.js 应用的重启次数可以及时发现这种问题（BUG）。
</p>
</li>
</ul>

<p>
上线新代码后，通过观测这几个关键性能指标，以及与历史记录进行对比，可以用来评估新代码的运行效率与质量。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">收集性能指标</h2>
<div class="outline-text-2" id="text-2">
<p>
通过 pm2 收集 node.js 应用性能指标的脚本 <code>/usr/local/bin/collectd-pm2.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">os</span> = require(<span style="color: #66cccc;">'os'</span>);
<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">exec</span> = require(<span style="color: #66cccc;">'child_process'</span>).exec;


<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">hostname</span> = process.env.COLLECTD_HOSTNAME || os.hostname();
<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">interval</span> = parseInt(process.env.COLLECTD_INTERVAL, 10) || 1;

<span style="color: #99cc99;">function</span> <span style="color: #f99157;">collect</span> () {
<span style="color: #cccccc; background-color: #515151;"> </span>   exec(<span style="color: #66cccc;">'pm2 jlist'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">error</span>, <span style="color: #ffcc66;">stdout</span>, <span style="color: #ffcc66;">stderr</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (error) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   process.stderr.write(error.toString());
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   process.exit(1);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   }

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (stderr) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   process.stderr.write(stderr.toString() + <span style="color: #66cccc;">"\n"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   }

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">timestamp</span> = Math.floor(Date.now() / 1000);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">list</span> = JSON.parse(stdout);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   list.forEach(<span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">item</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">name</span> = <span style="color: #66cccc;">''</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">for</span>(<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">i</span> = 0, <span style="color: #ffcc66;">n</span> = item.name.length; i &lt; n; ++i) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   name += item.name[i].match(<span style="color: #66cccc;">/^[0-9a-zA-Z]+$/</span>) ? item.name[i] : <span style="color: #66cccc;">'_</span><span style="color: #66cccc; text-decoration: underline;">'</span><span style="text-decoration: underline;">;</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   }
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   process.stdout.write(<span style="color: #66cccc;">"PUTVAL \"" + hostname + "</span>/<span style="color: #66cccc;">" + name + "</span>-loop_de<span style="text-decoration: underline;">lay</span><span style="color: #66cccc; text-decoration: underline;">" + "</span><span style="text-decoration: underline;">/delay-</span><span style="color: #66cccc; text-decoration: underline;">" + item.pm_id + "</span><span style="text-decoration: underline;">\</span><span style="color: #66cccc; text-decoration: underline;">" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #66cccc; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #66cccc; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.pm2_env.axm_monitor[</span><span style="color: #66cccc; text-decoration: underline;">"Loop delay"</span><span style="text-decoration: underline;">].value.replace(</span><span style="color: #66cccc; text-decoration: underline;">'ms'</span><span style="text-decoration: underline;">, </span><span style="color: #66cccc; text-decoration: underline;">''</span><span style="text-decoration: underline;">) + </span><span style="color: #66cccc; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   process.stdout.write(<span style="color: #66cccc;">"PUTVAL \"" + hostname + "</span>/<span style="color: #66cccc;">" + name + "</span>-memory_<span style="text-decoration: underline;">used</span><span style="color: #66cccc; text-decoration: underline;">" + "</span><span style="text-decoration: underline;">/gauge-</span><span style="color: #66cccc; text-decoration: underline;">" + item.pm_id + "</span><span style="text-decoration: underline;">\</span><span style="color: #66cccc; text-decoration: underline;">" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #66cccc; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #66cccc; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.monit.memory + </span><span style="color: #66cccc; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   process.stdout.write(<span style="color: #66cccc;">"PUTVAL \"" + hostname + "</span>/<span style="color: #66cccc;">" + name + "</span>-cpu_use<span style="text-decoration: underline;">d</span><span style="color: #66cccc; text-decoration: underline;">" + "</span><span style="text-decoration: underline;">/gauge-</span><span style="color: #66cccc; text-decoration: underline;">" + item.pm_id + "</span><span style="text-decoration: underline;">\</span><span style="color: #66cccc; text-decoration: underline;">" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #66cccc; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #66cccc; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.monit.cpu + </span><span style="color: #66cccc; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   process.stdout.write(<span style="color: #66cccc;">"PUTVAL \"" + hostname + "</span>/<span style="color: #66cccc;">" + name + "</span>-restart<span style="text-decoration: underline;">_time</span><span style="color: #66cccc; text-decoration: underline;">" + "</span><span style="text-decoration: underline;">/gauge-</span><span style="color: #66cccc; text-decoration: underline;">" + item.pm_id + "</span><span style="text-decoration: underline;">\</span><span style="color: #66cccc; text-decoration: underline;">" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #66cccc; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #66cccc; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.pm2_env.restart_time + </span><span style="color: #66cccc; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   process.stdout.write(<span style="color: #66cccc;">"PUTVAL \"" + hostname + "</span>/<span style="color: #66cccc;">" + name + "</span>-unstabl<span style="text-decoration: underline;">e_restarts</span><span style="color: #66cccc; text-decoration: underline;">" + "</span><span style="text-decoration: underline;">/gauge-</span><span style="color: #66cccc; text-decoration: underline;">" + item.pm_id + "</span><span style="text-decoration: underline;">\</span><span style="color: #66cccc; text-decoration: underline;">" interval="</span><span style="text-decoration: underline;"> + interval + </span><span style="color: #66cccc; text-decoration: underline;">" "</span><span style="text-decoration: underline;"> + timestamp + </span><span style="color: #66cccc; text-decoration: underline;">":"</span><span style="text-decoration: underline;"> + item.pm2_env.unstable_restarts + </span><span style="color: #66cccc; text-decoration: underline;">"\n"</span><span style="text-decoration: underline;">);</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   });

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   setTimeout(collect, interval*1000);
<span style="color: #cccccc; background-color: #515151;"> </span>   });
}

collect();
</pre>
</div>

<p>
pm2 是使用 root 帐号运行的，collectd exec 插件不允许以 root 权限运行收集统计的程序（collectd-pm2.js），一个简单的方法是用 c 写一个包裹程序，使用 <code>setuid</code> 切换到 root 帐号。
</p>

<p>
<code>collectd-pm2-root.c</code>
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;stdio.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;sys/types.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;sys/stat.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;sys/wait.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;unistd.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;stdlib.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;signal.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;string.h&gt;</span>


<span style="color: #6699cc;">int</span> <span style="color: #f99157;">main</span>(<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">argc</span>, <span style="color: #6699cc;">char</span>* <span style="color: #ffcc66;">argv</span>[]) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (setuid(0) == -1 || setgid(0) == -1) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   perror(<span style="color: #66cccc;">"setuid or setgid to root user error"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"\npermit setuid and setgid to root user: \n\tchown root</span><span style="color: #66cccc; text-decoration: underline;">:root %s\n\tchmod 4755 %s\n"</span><span style="text-decoration: underline;">, argv[0], argv[0]);</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> EXIT_FAILURE;
<span style="color: #cccccc; background-color: #515151;"> </span>   }

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> system(<span style="color: #66cccc;">"/bin/bash -c 'export PM2_HOME=${PM2_HOME:-~root/.pm2}; node /</span><span style="color: #66cccc; text-decoration: underline;">usr/local/bin/collectd-pm2.js'"</span><span style="text-decoration: underline;">);</span>
}
</pre>
</div>

<p>
编译安装
</p>
<div class="org-src-container">

<pre class="src src-sh">gcc -O2 collectd-pm2-root.c -o collectd-pm2-root
cp collectd-pm2-root /usr/local/bin
chown root:root /usr/local/bin/collectd-pm2-root
chmod 4755 /usr/local/bin/collectd-pm2-root
</pre>
</div>

<p>
配置 collectd，修改 <code>collectd.conf</code>
</p>
<pre class="example">
LoadPlugin exec

&lt;Plugin exec&gt;
    Exec "nobody:nobody" "/usr/local/bin/collectd-pm2-root"
&lt;/Plugin&gt;
</pre>

<p>
测试运行统计收集脚本
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo -u nobody -g nobody /usr/local/bin/collectd-pm2-root
</pre>
</div>

<p>
重启 collectd 生效即可。
</p>

<p>
以上代码已在 github 开源：<a href="https://github.com/tangxinfa/collectd-pm2">https://github.com/tangxinfa/collectd-pm2</a> 。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[collectd exec 插件使用进阶]]></title>
            <link>/article/collectd-exec-63d24ef64f7f75288fdb9636.html</link>
            <guid>/article/collectd-exec-63d24ef64f7f75288fdb9636.html</guid>
            <pubDate>Thu, 05 May 2016 04:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
前面一篇文章《<a href="http://blog.kankanan.com/article/4f7f7528-collectd-8fdb884c670d52a176d163a7.html">使用 collectd 进行服务监控 | 看看俺 – KanKanAn.com</a>》展示了如何使用 collectd 的 exec 插件。
</p>

<p>
要使收集的统计信息显示正常、易于使用，则需要对上报的数据有充分的理解。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">数据的标识</h2>
<div class="outline-text-2" id="text-1">
<p>
引用自 <a href="https://collectd.org/documentation/manpages/collectd-exec.5.shtml">man 5 collectd-exec</a>
</p>
<blockquote>
<p>
PUTVAL Identifier [OptionList] Valuelist
  Submits one or more values (identified by Identifier, see below) to the daemon which will dispatch it to all it's write-plugins.
</p>

<p>
An Identifier is of the form "host/plugin-instance/type-instance" with both instance-parts being optional. If they're omitted the hyphen must be omitted, too. plugin and each instance-part may be chosen freely as long as
the tuple (plugin, plugin instance, type instance) uniquely identifies the plugin within collectd. type identifies the type and number of values (i. e. data-set) passed to collectd. A large list of predefined data-sets is
available in the types.db file. See types.db(5) for a description of the format of this file.
</p>

<p>
The OptionList is an optional list of Options, where each option is a key-value-pair. A list of currently understood options can be found below, all other options will be ignored. Values that contain spaces must be quoted
with double quotes.
</p>

<p>
Valuelist is a colon-separated list of the time and the values, each either an integer if the data-source is a counter, or a double if the data-source is of type "gauge". You can submit an undefined gauge-value by using
U. When submitting U to a counter the behavior is undefined. The time is given as epoch (i. e. standard UNIX time).
</p>

<p>
You can mix options and values, but the order is important: Options only effect following values, so specifying an option as last field is allowed, but useless. Also, an option applies to all following values, so you
don't need to re-set an option over and over again.
</p>

<p>
The currently defined Options are:
</p>

<p>
interval=seconds
    Gives the interval in which the data identified by Identifier is being collected.
</p>

<p>
Please note that this is the same format as used in the unixsock plugin, see collectd-unixsock(5). There's also a bit more information on identifiers in case you're confused.
</p>

<p>
Since examples usually let one understand a lot better, here are some:
</p>

<p>
PUTVAL leeloo/cpu-0/cpu-idle N:2299366
PUTVAL alice/interface/if_octets-eth0 interval=10 1180647081:421465:479194
</p>
</blockquote>

<ul class="org-ul">
<li><code>Identifier</code> 

<p>
格式为 <code>host/plugin-instance/type-instance</code> 
</p>

<p>
其中的 <code>-</code> 为分隔符， <code>instance</code> 部分是可省略（此时 <code>-</code> 也要省略）。
</p>
</li>

<li><code>host</code>

<p>
主机名称，通常取自 <code>HOSTNAME</code> 环境变量。
</p>
</li>

<li><code>plugin</code> 

<p>
插件名称。
</p>
</li>

<li><code>type</code>

<p>
预定义的值类型名称，定义值的类型及数量，以及 collectd 服务会对值做何处理（如：按时间间隔平均化）。
</p>

<p>
参考 <a href="https://collectd.org/documentation/manpages/types.db.5.shtml">man 5 types.db</a> <a href="https://collectd.org/wiki/index.php/Data_source">Data source - collectd Wiki</a>
</p>

<p>
如某个上报的统计指标在网页上没有对应的图表产生，请检查 collectd 服务器与客户机上 types.db，数据集必须定义且一致，上报的值必须符合数据集定义。
服务器或客户端安装的 collectd 可能版本较低，附带的 types.db 中缺少第三方插件要求的数据集定义，运营人员改动 types.db 中 memory 类型也会导致上报失败：
</p>
<pre class="example">
# memory         value:GAUGE:0:281474976710656
memory          free:GAUGE:0:281474976710656, buffered:GAUGE:0:281474976710656, used:GAUGE:0:281474976710656, cached:GAUGE:0:281474976710656
</pre>
</li>
</ul>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">数据的展示</h2>
<div class="outline-text-2" id="text-2">
<p>
数据由上到下分级展示。
</p>

<ul class="org-ul">
<li>主机列表

<p>
选择要查看的主机，对应上面的 <code>host</code>
</p>
</li>
</ul>


<ul class="org-ul">
<li>插件列表

<p>
选择要查看的插件，对应上面的 <code>plugin</code>
</p>
</li>
</ul>


<ul class="org-ul">
<li>统计图表列表页

<p>
插件实例（ <code>plugin instance</code> ）+类型（ <code>type</code> ）产生一张图表，类型实例（ <code>type instance</code> ）对应图标上的一条曲线。
</p>
</li>
</ul>


<ul class="org-ul">
<li>统计图表详情页

<p>
点击统计图表列表页上的图表进入统计图表详情页，此时可以选择统计的时间范围（如：按小时、天、周、月、年）。
</p>

<p>
另外可以聚合显示所有主机上的相同统计图表，以便进行交叉对比。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">标识的使用</h2>
<div class="outline-text-2" id="text-3">
<p>
上报数据时，我们拥有极大的自由性，而 collectd 会宽容地接受并展示结果，但是为了让最终的结果有用、易用，我们需要正确地指定上报的信息项。
</p>

<ul class="org-ul">
<li><code>host</code>

<p>
应该填写主机名称，当我们需要整个服务（包括多台主机）的统计时，可以借助 collectd 界面提供的聚合功能实现。
</p>
</li>
</ul>


<ul class="org-ul">
<li><code>plugin</code>

<p>
插件名称
</p>
</li>

<li><code>plugin instance</code>

<p>
插件实例，对应插件收集一个统计指标名称，如：memory。
</p>

<p>
对于简单的插件（只收集一个统计指标），则可以直接省略插件实例（plugin instance）部分，插件名称命名使用统计指标名称。
</p>
</li>

<li><code>type</code>

<p>
请在 types.db 中预定义的类型中选择。
</p>
</li>

<li><code>type instance</code>

<p>
对于主机上的唯一统计指标（如：load），就不需要使用 <code>type instance</code> 了，如果是主机上的非唯一统计指标（如：各分区使用率、进程 cpu 占用率等），则可以使用 <code>type instance</code> 来区分（如：填写为分区路径、进程名称等）。
</p>

<p>
多个 <code>type instance</code> 会在同一张图表中各使用一条曲线展示，如果放在一起展示没有意义，则可能更适合使用 <code>plugin instance</code> 进行标识。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">突破 root 帐号限制</h2>
<div class="outline-text-2" id="text-4">
<p>
引用自 <a href="https://collectd.org/documentation/manpages/collectd-exec.5.shtml">man 5 collectd-exec</a>
</p>
<blockquote>
<p>
CAVEATS
    ·   The user, the binary is executed as, may not have root privileges, i. e.  must have an UID that is non-zero. This is for your own good.
</p>
</blockquote>

<p>
Exec 插件不允许以 root 权限执行。
</p>

<ul class="org-ul">
<li>温和的解决办法

<p>
引用自 <a href="https://collectd.org/wiki/index.php/Plugin:Exec">Plugin:Exec - collectd Wiki</a>
</p>
<blockquote>
<p>
The security concerns are addressed by forcing the plugin to check that custom programs are never executed with superuser privileges. If the daemon runs as root, you have to configure another user ID with which the new process is created. To circumvent missing access privileges to files, you need to lean on the unix group concept. I.e. your script requires access to /var/log/messages, which is owned by root, its common practice to have this file being group readable by the admin-group. Given the used ID corrosponds to MyWatcherUser, you need to add that user to the admin group via /etc/group (or what else manages users / groups on your system). 
</p>
</blockquote>

<p>
将原本需要 <code>root</code> 才能访问的文件，改变属组（ <code>group</code> ）为 <code>admin</code> ，权限为 <code>group</code> 可读，然后将插件账号的 <code>group</code> 也改为 <code>admin</code> 。
</p>
</li>

<li>暴力的解决方法

<p>
利用 <code>setuid</code> ，允许可执行程序以 <code>root</code> 身份运行。
</p>

<p>
参考
<a href="http://blog.kankanan.com/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html">linux下允许普通用户执行需要root权限的命令 | 看看俺 – KanKanAn.com</a></p>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux 的 collectd 支持监控 redis]]></title>
            <link>/article/archlinux-7684-collectd-652f630176d163a7-redis.html</link>
            <guid>/article/archlinux-7684-collectd-652f630176d163a7-redis.html</guid>
            <pubDate>Thu, 31 Mar 2016 09:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
Archlinux 下使用 <code>pacman</code> 安装的 <code>collectd</code> 没有 redis 插件。
</p>

<p>
查看 collectd 的 <a href="https://projects.archlinux.org/svntogit/community.git/tree/trunk/PKGBUILD?h=packages/collectd">PKGBUILD</a> 文件，并未明令禁止 redis 插件，从源代码编译安装的话，只要系统装了 <code>hiredis</code> ，redis 插件应该就会自动启用。
</p>

<p>
所以我们需要从源代码编译安装 <code>collectd</code> 软件包。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">安装 ABS</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
What is the Arch Build System?
</p>

<p>
The Arch Build System is a ports-like system for building and packaging software from source code. While pacman is the specialized Arch tool for binary package management (including packages built with the ABS), ABS is a collection of tools for compiling source into installable .pkg.tar.xz packages.    
</p>
</blockquote>
<p>
引用自 <a href="https://wiki.archlinux.org/index.php/Arch_Build_System">Arch Build System - ArchWiki</a>
</p>

<div class="org-src-container">

<pre class="src src-sh">yaourt -S abs
sudo abs
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">编译安装 collectd</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>yaourt -S hiredis
<span class="linenr">2: </span>cp -R /var/abs/community/collectd ~/
<span class="linenr">3: </span><span style="color: #cc99cc;">cd</span> ~/collectd
<span id="coderef-archlinux_makepkg" class="coderef-off"><span class="linenr">4: </span>makepkg</span>
<span class="linenr">5: </span>yaourt -U ./collectd-5.5.1-2-x86_64.pkg.tar.xz
</pre>
</div>

<dl class="org-dl">
<dt> 行 <a href="#coderef-archlinux_makepkg"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-archlinux_makepkg');" onmouseout="CodeHighlightOff(this, 'coderef-archlinux_makepkg');">4</a>  </dt><dd>如果报 <code>Missing dependencies</code> 错误则按提示使用 pacman 装上缺失的依赖项
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">使用以前的 collectd 配置</h2>
<div class="outline-text-2" id="text-3">
<p>
重新安装 collectd 后，以前的配置保存在 <code>/etc/collectd.conf.pacsave</code> ，恢复一下
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo mv /etc/collectd.conf.pacsave /etc/collectd.conf
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">启用 collectd 插件</h2>
<div class="outline-text-2" id="text-4">
<p>
修改 collectd 配置文件 <code>/etc/collectd.conf</code> 
</p>
<pre class="example">
LoadPlugin redis

&lt;Plugin redis&gt;
  &lt;Node "db"&gt;
     Host "127.0.0.1"
     Port "6379"
     Timeout 2000
  &lt;/Node&gt;
&lt;/Plugin&gt;
</pre>

<p>
重启 collectd 服务，现在可以在界面上看到 redis 的监控项了。
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">参考</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="http://arch.acgtyrant.com/2013/12/26/soul/">Arch Linux 的靈魂：PKGBUILD、AUR 和 ABS | Tyrant's Arch Linux</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 collectd 进行服务监控]]></title>
            <link>/article/4f7f7528-collectd-8fdb884c670d52a176d163a7.html</link>
            <guid>/article/4f7f7528-collectd-8fdb884c670d52a176d163a7.html</guid>
            <pubDate>Thu, 31 Mar 2016 04:39:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
collectd 的官网 <a href="https://collectd.org/">collectd.org</a> 。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">collectd 服务</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>安装

<div class="org-src-container">

<pre class="src src-sh">yaourt -S collectd
</pre>
</div>
</li>

<li>启动

<div class="org-src-container">

<pre class="src src-sh">sudo systemctl enable collectd
sudo systemctl start collectd
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">collectd 界面</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><a href="http://blog.kankanan.com/article/nginx-4e0b5feb901f642d5efa-php-8fd0884c73af5883.html">nginx下快速搭建php运行环境</a></h3>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">安装 rrdtool</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">

<pre class="src src-sh">yaourt -S rrdtool
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">下载 GCP</h3>
<div class="outline-text-3" id="text-2-3">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #cc99cc;">cd</span> /usr/share/nginx/html/
sudo git clone https://github.com/pommi/CGP.git
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">配置 GCP</h3>
<div class="outline-text-3" id="text-2-4">
<p>
修改配置文件 /usr/share/nginx/html/CGP/conf/config.php
</p>
<pre class="example">
# collectd's datadir
$CONFIG['datadir'] = '/var/lib/collectd/rrd';
</pre>
<p>
改为
</p>
<pre class="example">
# collectd's datadir
$CONFIG['datadir'] = '/var/lib/collectd';
</pre>
</div>
</div>

<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5">打开界面</h3>
<div class="outline-text-3" id="text-2-5">
<p>
浏览器打开页面 <a href="http://localhost/CGP/index.php"><a href="http://localhost/CGP/index.php">http://localhost/CGP/index.php</a></a> ，可以看到服务器自身的监控信息。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">collectd 插件</h2>
<div class="outline-text-2" id="text-3">
<p>
collectd 支持很多 <a href="https://collectd.org/wiki/index.php/Table_of_Plugins">插件</a> ，使用 c 语言开发插件请参考 <a href="https://collectd.org/wiki/index.php/Plugin_architecture">Plugin architecture - collectd Wiki</a>。
</p>

<p>
<a href="https://collectd.org/wiki/index.php/Plugin:Exec">Exec</a> 插件使用 shell 脚本来收集系统监控数据。
</p>

<p>
以监控电池电量为例。
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">启用 Exec 插件</h3>
<div class="outline-text-3" id="text-3-1">
<p>
修改 collectd 配置文件 /etc/collectd.conf
</p>
<pre class="example">
LoadPlugin exec
&lt;Plugin exec&gt;
   Exec "nobody:nobody" "/usr/bin/power-capacity"
&lt;/Plugin&gt;
</pre>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">监控笔记本电量脚本</h3>
<div class="outline-text-3" id="text-3-2">
<p>
<code>/usr/bin/power-capacity</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #999999; font-style: italic;">#</span><span style="color: #999999; font-style: italic;">!/bin/</span><span style="color: #99cc99;">bash</span>

<span style="color: #ffcc66;">HOSTNAME</span>=<span style="color: #66cccc;">"${COLLECTD_HOSTNAME:-localhost}"</span>
<span style="color: #ffcc66;">INTERVAL</span>=<span style="color: #66cccc;">"${COLLECTD_INTERVAL:-60}"</span>

<span style="color: #99cc99;">while</span> sleep <span style="color: #66cccc;">"$INTERVAL"</span>; <span style="color: #99cc99;">do</span>
<span style="color: #cccccc; background-color: #515151;"> </span> <span style="color: #ffcc66;">VALUE</span>=$(<span style="color: #cc99cc;">echo</span> -n <span style="color: #cc99cc;">`cat /sys/class/power_supply/BAT0/capacity`</span>)
<span style="color: #cccccc; background-color: #515151;"> </span> <span style="color: #cc99cc;">echo</span> <span style="color: #66cccc;">"PUTVAL \"$HOSTNAME/power/capacity\" interval=$INTERVAL N:$VALUE"</span>
<span style="color: #99cc99;">done</span>
</pre>
</div>

<p>
为脚本添加可执行权限
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo chmod a+x /usr/bin/power-capacity
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">重启 collectd 生效插件</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">

<pre class="src src-sh">sudo systemctl restart collectd
</pre>
</div>

<p>
过一会儿就可以在界面上看到电量监控项。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">collectd 多机器监控</h2>
<div class="outline-text-2" id="text-4">
<p>
监控本机没有什么用处，通过 network 插件，可以将 collectd 配置为服务器或客户端。
</p>

<ul class="org-ul">
<li>collectd 服务器

<p>
接受 collectd 客户端的上报的数据。
</p>
</li>

<li>collectd 客户端

<p>
上报数据到 collectd 服务器。
</p>
</li>
</ul>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">本机配置为 collectd 服务器</h3>
<div class="outline-text-3" id="text-4-1">
<p>
通过 <a href="https://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_network">network</a> 插件配置为 server 端。
</p>

<p>
修改 collectd 配置文件 /etc/collectd.conf 
</p>
<pre class="example">
LoadPlugin network

&lt;Plugin network&gt;
    &lt;Listen "0.0.0.0" "25826"&gt;
        SecurityLevel Sign
        AuthFile "/etc/collectd/passwd"
    &lt;/Listen&gt;
&lt;/Plugin&gt;
</pre>

<p>
创建密码文件
<code>/etc/collectd/passwd</code>
</p>
<pre class="example">
user0: foo
user1: bar
</pre>

<p>
重启 collectd 服务，生效配置。
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">其它机器配置为 collectd 客户端</h3>
<div class="outline-text-3" id="text-4-2">
<p>
参考前面的 <a href="#sec-1">collectd 服务</a> 一节安装 collectd。
</p>

<p>
通过 <a href="https://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_network">network</a> 插件配置为 client 端。
</p>

<p>
修改 collectd 配置文件 /etc/collectd.conf 
</p>
<pre class="example">
LoadPlugin network

&lt;Plugin network&gt;
    &lt;Server "172.17.0.1" "25826"&gt;
        SecurityLevel Encrypt
        Username "user0"
        Password "foo"
    &lt;/Server&gt;
&lt;/Plugin&gt;
</pre>
<p>
服务器的 IP 为 172.17.0.1。
</p>

<p>
重启 collectd 服务，生效配置，等一会儿就可以在界面上看到客户端机器的监控信息。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">参考</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="https://github.com/pommi/CGP/blob/master/README.md">CGP/README.md at master · pommi/CGP</a>
</li>

<li><a href="https://collectd.org/wiki/index.php/First_steps">First steps - collectd Wiki</a>
</li>

<li><a href="http://www.drupal001.com/2012/07/system-monitor-collectd/">Collectd详解、Collectd使用说明、Collectd中文说明 - 系统性能监控利器</a>
</li>

<li><a href="https://collectd.org/wiki/index.php/Plugin:Exec">Plugin:Exec - collectd Wiki</a>
</li>

<li><a href="http://blog.sina.com.cn/s/blog_502c8cc40100pbgu.html">collectd使用_新浪研发中心_新浪博客</a>
</li>

<li><a href="https://collectd.org/documentation/manpages/collectd.conf.5.shtml#global_options">collectd.conf(5) – collectd – The system statistics collection daemon</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>