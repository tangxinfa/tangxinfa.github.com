<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>IoT - 看看俺 – KanKanAn.com</title>
        <description>记我所思，忆我所为。</description>
        <link>http://blog.kankanan.com/tag/iot.xml</link>
        <lastBuildDate>Thu, 10 Mar 2016 06:09:56 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <image>
            <title>IoT - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/iot.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <generator>Feed for Node.js</generator>
        <category>技术</category>
        <item>
            <title><![CDATA[node.js下进行mqtt实践]]></title>
            <link>/article/node.js-4e0b8fdb884c-mqtt-5b9e8df5.html</link>
            <guid>/article/node.js-4e0b8fdb884c-mqtt-5b9e8df5.html</guid>
            <pubDate>Sun, 21 Feb 2016 05:13:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
通过 mqtt 可以将设备连接在一起，能够实现将消息（可能来自服务器也可能来自其它设备）推送到设备，如果设备离线，
服务器可以暂存消息，在设备上线时再推送，有一些特性很关键：
</p>

<ul class="org-ul">
<li>offline

<p>
允许设备暂时离线。
</p>

<p>
即使是使用固定宽带，有些用户也会因为各种原因无法保持稳定的长连接，可能是上级路由设备有限制，或者是带宽被其它应用抢占而导致长连接不稳定。
将设备的在线状态与 TCP 长连接状态耦合在一起是不明智的。
</p>
</li>

<li>bridge

<p>
设备连接在不同的 broker 上，通过 bridge 实现互通。
</p>

<p>
支持几万台设备在线，估计一台 broker 就够了，但是一旦达到数十万、百万甚至上亿，肯定需要搭建 broker 集群，参见 <a href="http://www.kegel.com/c10k.html">The C10K problem</a>。
</p>
</li>
</ul>

<p>
简单起见， node.js 服务器端使用 <a href="https://github.com/mcollina/mosca">mosca</a>， 客户端使用 <a href="https://github.com/mqttjs/MQTT.js">MQTT.js</a> ，由于 <a href="https://github.com/mcollina/mosca">mosca</a> 不支持 bridge，本文不涉及 bridge 特性。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">客户端与服务器通信</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>客户端通过服务器给自已发个消息

<p>
<code>server.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">mosca</span> = require(<span style="color: #66cccc;">'mosca'</span>);

<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">settings</span> = {
<span style="color: #cccccc; background-color: #515151;"> </span>   port: 1883
};

<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">server</span> = <span style="color: #99cc99;">new</span> <span style="color: #6699cc;">mosca.Server</span>(settings);
server.on(<span style="color: #66cccc;">'ready'</span>, <span style="color: #99cc99;">function</span> () {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(<span style="color: #66cccc;">'mosca server running'</span>);
}).on(<span style="color: #66cccc;">'clientConnected'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">client</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(<span style="color: #66cccc;">'client('</span> + client.id + <span style="color: #66cccc;">') connected'</span>);
}).on(<span style="color: #66cccc;">'published'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">packet</span>, <span style="color: #ffcc66;">client</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(<span style="color: #66cccc;">'client('</span> + (client ? client.id : <span style="color: #66cccc;">'internal'</span>) + <span style="color: #66cccc;">') published top</span><span style="color: #66cccc; text-decoration: underline;">ic('</span><span style="text-decoration: underline;"> + packet.topic + </span><span style="color: #66cccc; text-decoration: underline;">'): '</span><span style="text-decoration: underline;"> + packet.payload);</span>
}).on(<span style="color: #66cccc;">'subscribed'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">topic</span>, <span style="color: #ffcc66;">client</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(<span style="color: #66cccc;">'client('</span> + client.id + <span style="color: #66cccc;">') subscribed topic('</span> + topic + <span style="color: #66cccc;">')'</span>);
}).on(<span style="color: #66cccc;">'unsubscribed'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">topic</span>, <span style="color: #ffcc66;">client</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(<span style="color: #66cccc;">'client('</span> + client.id + <span style="color: #66cccc;">') unsubscribed topic('</span> + topic + <span style="color: #66cccc;">')'</span>);
}).on(<span style="color: #66cccc;">'clientDisconnecting'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">client</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(<span style="color: #66cccc;">'client('</span> + client.id + <span style="color: #66cccc;">') disconnecting'</span>);
}).on(<span style="color: #66cccc;">'clientDisconnected'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">client</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(<span style="color: #66cccc;">'client('</span> + client.id + <span style="color: #66cccc;">') disconnected'</span>);
});
</pre>
</div>

<p>
<code>client.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">mqtt</span> = require(<span style="color: #66cccc;">'mqtt'</span>);


<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">client</span> = mqtt.connect(<span style="color: #66cccc;">'mqtt://127.0.0.1:1883'</span>);
client.on(<span style="color: #66cccc;">'connect'</span>, <span style="color: #99cc99;">function</span> () {
<span style="color: #cccccc; background-color: #515151;"> </span>   client.subscribe(<span style="color: #66cccc;">'presence'</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   client.publish(<span style="color: #66cccc;">'presence'</span>, <span style="color: #66cccc;">'a message from myself'</span>);
}).on(<span style="color: #66cccc;">'message'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">topic</span>, <span style="color: #ffcc66;">message</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(topic + <span style="color: #66cccc;">': '</span> + message.toString());
<span style="color: #cccccc; background-color: #515151;"> </span>   client.end();
});
</pre>
</div>

<p>
运行 <code>server.js</code>
</p>
<pre class="example">
$ node server.js
mosca server running
client(mqttjs_a423c0af) connected
client(internal) published topic($SYS/41TXEHPDe/new/clients): mqttjs_a423c0af
client(mqttjs_a423c0af) subscribed topic(presence)
client(internal) published topic($SYS/41TXEHPDe/new/subscribes): {"clientId":"mqttjs_a423c0af","topic":"presence"}
client(mqttjs_a423c0af) published topic(presence): a message from myself
client(mqttjs_a423c0af) unsubscribed topic(presence)
client(mqttjs_a423c0af) disconnected
client(internal) published topic($SYS/41TXEHPDe/new/unsubscribes): {"clientId":"mqttjs_a423c0af","topic":"presence"}
client(internal) published topic($SYS/41TXEHPDe/disconnect/clients): mqttjs_a423c0af
</pre>

<p>
运行 <code>client.js</code>
</p>
<pre class="example">
$ node client.js
presence: a message from myself
$
</pre>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">客户端与客户端通信</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>客户端发送消息给另一个客户端

<p>
下面的例子演示了客户端通过约定的 <code>topic</code> 互相通信。
</p>

<p>
<code>client_sub.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">mqtt</span> = require(<span style="color: #66cccc;">'mqtt'</span>);

<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">client</span> = mqtt.connect(<span style="color: #66cccc;">'mqtt://127.0.0.1:1883'</span>);
client.on(<span style="color: #66cccc;">'connect'</span>, <span style="color: #99cc99;">function</span> () {
<span style="color: #cccccc; background-color: #515151;"> </span>   client.publish(<span style="color: #66cccc;">'sub'</span>, <span style="color: #66cccc;">'message from pub'</span>);
}).on(<span style="color: #66cccc;">'message'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">topic</span>, <span style="color: #ffcc66;">message</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(topic + <span style="color: #66cccc;">': '</span> + message.toString());
<span style="color: #cccccc; background-color: #515151;"> </span>   client.end();
});
</pre>
</div>

<p>
<code>client_pub.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">mqtt</span> = require(<span style="color: #66cccc;">'mqtt'</span>);

<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">client</span> = mqtt.connect(<span style="color: #66cccc;">'mqtt://127.0.0.1:1883'</span>);
client.on(<span style="color: #66cccc;">'connect'</span>, <span style="color: #99cc99;">function</span> () {
<span style="color: #cccccc; background-color: #515151;"> </span>   client.publish(<span style="color: #66cccc;">'sub'</span>, <span style="color: #66cccc;">'message from pub'</span>);
}).on(<span style="color: #66cccc;">'message'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">topic</span>, <span style="color: #ffcc66;">message</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(topic + <span style="color: #66cccc;">': '</span> + message.toString());
<span style="color: #cccccc; background-color: #515151;"> </span>   client.end();
});
</pre>
</div>

<p>
运行 <code>server.js</code>
</p>
<pre class="example">
$ node server.js
mosca server running
client(mqttjs_ebdc9fd4) connected
client(internal) published topic($SYS/4Jk9PBwDe/new/clients): mqttjs_ebdc9fd4
client(mqttjs_ebdc9fd4) subscribed topic(sub)
client(internal) published topic($SYS/4Jk9PBwDe/new/subscribes): {"clientId":"mqttjs_ebdc9fd4","topic":"sub"}
client(mqttjs_ff000868) connected
client(internal) published topic($SYS/4Jk9PBwDe/new/clients): mqttjs_ff000868
client(mqttjs_ff000868) published topic(sub): message from pub
client(mqttjs_ebdc9fd4) unsubscribed topic(sub)
client(mqttjs_ebdc9fd4) disconnected
client(internal) published topic($SYS/4Jk9PBwDe/new/unsubscribes): {"clientId":"mqttjs_ebdc9fd4","topic":"sub"}
client(internal) published topic($SYS/4Jk9PBwDe/disconnect/clients): mqttjs_ebdc9fd4
</pre>

<p>
运行 <code>client_sub.js</code>
</p>
<pre class="example">
$ node client_sub.js
sub: message from pub
$
</pre>

<p>
运行 <code>client_pub.js</code>
</p>
<pre class="example">
$ node client_pub.js
</pre>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">客户端与客户端离线通信</h2>
<div class="outline-text-2" id="text-3">
<p>
离线通信需要同时满足以下条件
</p>

<ul class="org-ul">
<li>服务器配置持久存储
</li>

<li>订阅方启用会话状态

<p>
连接服务器时使用同样的 clientId 并指定 <code>clean</code> 为 <code>false</code>
</p>
</li>

<li>发布方发布持久消息

<p>
发布消息时指定 <code>qos</code> 大于 <code>0</code> 以及 <code>retain</code> 为 <code>true</code>
</p>
</li>
</ul>

<p>
下面的例子演示了客户端接收离线消息
</p>

<p>
<code>client_sub.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">mqtt</span> = require(<span style="color: #66cccc;">'mqtt'</span>);

<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">client</span> = mqtt.connect(<span style="color: #66cccc;">'mqtt://127.0.0.1:1883'</span>, {clientId: <span style="color: #66cccc;">'sub'</span>, clean: <span style="color: #6699cc;">fals</span><span style="color: #6699cc; text-decoration: underline;">e</span><span style="text-decoration: underline;">});</span>
client.on(<span style="color: #66cccc;">'connect'</span>, <span style="color: #99cc99;">function</span> () {
<span style="color: #cccccc; background-color: #515151;"> </span>   client.subscribe(<span style="color: #66cccc;">'sub'</span>);
}).on(<span style="color: #66cccc;">'message'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">topic</span>, <span style="color: #ffcc66;">message</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(topic + <span style="color: #66cccc;">': '</span> + message.toString());
<span style="color: #cccccc; background-color: #515151;"> </span>   client.end();
});
</pre>
</div>

<p>
<code>client_pub.js</code>
</p>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">mqtt</span> = require(<span style="color: #66cccc;">'mqtt'</span>);

<span style="color: #99cc99;">var</span> <span style="color: #ffcc66;">client</span> = mqtt.connect(<span style="color: #66cccc;">'mqtt://127.0.0.1:1883'</span>, {clientId: <span style="color: #66cccc;">'pub'</span>});
client.on(<span style="color: #66cccc;">'connect'</span>, <span style="color: #99cc99;">function</span> () {
<span style="color: #cccccc; background-color: #515151;"> </span>   client.publish(<span style="color: #66cccc;">'sub'</span>, <span style="color: #66cccc;">'message from pub'</span>, {qos: 1, retain: <span style="color: #6699cc;">true</span>});
}).on(<span style="color: #66cccc;">'message'</span>, <span style="color: #99cc99;">function</span> (<span style="color: #ffcc66;">topic</span>, <span style="color: #ffcc66;">message</span>) {
<span style="color: #cccccc; background-color: #515151;"> </span>   console.log(topic + <span style="color: #66cccc;">': '</span> + message.toString());
<span style="color: #cccccc; background-color: #515151;"> </span>   client.end();
});
</pre>
</div>

<p>
运行 <code>srever.js</code>
</p>
<pre class="example">
$ node mqtt_server.js
mosca server running
client(sub) connected
client(internal) published topic($SYS/V19OSVfix/new/clients): sub
client(sub) subscribed topic(sub)
client(internal) published topic($SYS/V19OSVfix/new/subscribes): {"clientId":"sub","topic":"sub"}
client(sub) disconnected
client(internal) published topic($SYS/V19OSVfix/disconnect/clients): sub
client(pub) connected
client(internal) published topic($SYS/V19OSVfix/new/clients): pub
client(pub) published topic(sub): message from pub
client(sub) connected
client(internal) published topic($SYS/V19OSVfix/new/clients): sub
client(sub) subscribed topic(sub)
client(internal) published topic($SYS/V19OSVfix/new/subscribes): {"clientId":"sub","topic":"sub"}
client(sub) disconnected
client(internal) published topic($SYS/V19OSVfix/disconnect/clients): sub
</pre>

<p>
运行 <code>client_sub.js</code> 订阅消息后退出
</p>
<pre class="example">
$ node client_sub.js 
sub: message from pub
$
</pre>

<p>
运行 <code>client_pub.js</code> 发布消息
</p>
<pre class="example">
$ node mqtt_client_pub.js
</pre>

<p>
运行 <code>client_sub.js</code> 接收离线消息后退出
</p>
<pre class="example">
$ node client_sub.js 
sub: message from pub
$
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">参考</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">MQTT Version 3.1.1</a>
</p>

<p>
<a href="https://www.youtube.com/watch?v=WE7GVIFRV7Q">Matteo Collina: "MQTT" and "Node.js"- Messaging the Internet of Things </a>
</p>

<p>
<a href="http://thejackalofjavascript.com/getting-started-mqtt/">Getting started with MQTT | The Jackal of Javascript</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[mqtt协议一瞥]]></title>
            <link>/article/mqtt-534f8bae4e0077a5.html</link>
            <guid>/article/mqtt-534f8bae4e0077a5.html</guid>
            <pubDate>Tue, 05 Jan 2016 03:16:00 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote>
<p>
IoT是Internet of Things的缩写，字面翻译是“物体组成的因特网”，准确的翻译应该为“物联网”。物联网(Internet Of Things)又称传感网，简要讲就是互联网从人向物的延伸。
</p>
</blockquote>
<p>
引用自 <a href="http://baike.baidu.com/subview/2831030/13489169.htm">IOT（物联网）_百度百科</a>
</p>


<blockquote>
<p>
MQTT is a machine-to-machine (M2M)/"Internet of Things" connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium. For example, it has been used in sensors communicating to a broker via satellite link, over occasional dial-up connections with healthcare providers, and in a range of home automation and small device scenarios. It is also ideal for mobile applications because of its small size, low power usage, minimised data packets, and efficient distribution of information to one or many receivers.
</p>
</blockquote>
<p>
引用自 <a href="http://mqtt.org/">mqtt.org</a>
</p>


<blockquote>
<p>
MQTT（Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分。
</p>
</blockquote>
<p>
引用自 <a href="http://baike.baidu.com/view/9956531.htm">MQTT_百度百科</a>
</p>


<blockquote>
<p>
MQTT is a lightweight messaging protocol that is based on publish/subscribe pattern. Due to its low overhead and simplicity, this protocol is suitable for use in IoT and M2M applications. 
</p>
</blockquote>
<p>
引用自 <a href="http://www.bitreactive.com/mqtt-request-response/">Request/Response Pattern Over MQTT | Bitreactive</a>
</p>


<blockquote>
<p>
MQTT - MQ Telemetry Transport
</p>

<p>
轻量级的 Machine-to-Machine 通信协议。
Publish/Subscribe模式。
基于TCP/IP。
支持QoS。
适合于低带宽、不可靠连接、嵌入式设备、CPU内存资源紧张。
是一种比较不错的Android消息推送方案。
FacebookMessenger采用了MQTT。
MQTT有可能成为物联网的重要协议。
</p>
</blockquote>
<p>
引用自 <a href="http://www.cnblogs.com/caca/p/mqtt.html">MQTT协议简记 - cacard - 博客园</a>
</p>

<blockquote>
<p>
Why MQTT?
</p>

<p>
It is a publish/subscribe protocol
It has Multiple Quality of Service levels (QOS)
It has at-least-once and exactly-once semantics
It has a low overhead (2 bytes at minimum)
It supports offline messaging
It retains messages, like a key/value store
</p>
</blockquote>
<p>
引用自 <a href="http://thejackalofjavascript.com/getting-started-mqtt/">Getting started with MQTT | The Jackal of Javascript</a>
</p>


<p>
<span class="underline">简言之， <code>mqtt</code> 就是简单高效基于 <code>发布/订阅</code> 的 <code>消息传输协议</code> ，主要用于资源受限设备（如：传感器、手机等）与服务器间有保障地进行消息或事件推送。</span>
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">有一些人（或项目）在尝试将 <code>mqtt</code> 扩展到其它用途</h2>
<div class="outline-text-2" id="text-1">
<dl class="org-dl">
<dt> 请求/响应模型（Request/Response） </dt><dd><a href="http://www.bitreactive.com/mqtt-request-response/">Request/Response Pattern Over MQTT | Bitreactive</a>
</dd>
</dl>


<dl class="org-dl">
<dt> 远程过程调用（RPC） </dt><dd><a href="https://github.com/wolfeidau/mqtt-rpc">wolfeidau/mqtt-rpc</a>
</dd>
</dl>


<dl class="org-dl">
<dt> 包裹WEB服务（REST） </dt><dd><a href="http://bytecontinnum.com/2014/12/consuming-mobile-apis-with-mqtt-reqres-pattern/">REST over MQTT for Constrained Devices/Mobiles | Prithiviraj Damodaran</a>
</dd>
</dl>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">IoT领域的其它竞争对手</h2>
<div class="outline-text-2" id="text-2">
<dl class="org-dl">
<dt> <a href="https://tools.ietf.org/html/rfc7252">CoAP</a> </dt><dd>Constrained Applications Protocol

<p>
基于 <code>UDP</code> 协议，简化版的 <a href="https://tools.ietf.org/html/draft-ietf-httpbis-http2">HTTP/2</a> 。
</p>

<blockquote>
<p>
The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained networks in the Internet of Things.
The protocol is designed for machine-to-machine (M2M) applications such as smart energy and building automation.
</p>
</blockquote>
<p>
引用自  <a href="http://coap.technology/">CoAP — Constrained Application Protocol</a>
</p>
</dd>
</dl>


<dl class="org-dl">
<dt> <a href="https://tools.ietf.org/html/draft-ietf-httpbis-http2">HTTP/2</a> </dt><dd>HTTP/2 (originally named HTTP/2.0) is the second major version of the HTTP network protocol used by the World Wide Web

<p>
<a href="http://timkellogg.me/blog/2015/02/20/can-http2-replace-mqtt/">Can HTTP/2 Replace MQTT? - Tim Kellogg</a>
</p>

<p>
<a href="http://www.limmat.co/2015/02/18/http-2-the-new-iot-protocol/">HTTP/2 - The New IoT Protocol?</a>
</p>

<p>
<a href="http://robbysimpson.com/2015/01/26/http2-and-the-internet-of-things/">HTTP/2 and the Internet of Things</a>
</p>

<p>
<a href="https://systembash.com/mqtt-vs-websockets-vs-http2-the-best-iot-messaging-protocol/">MQTT vs Websockets vs HTTP/2: The Best IoT Messaging Protocol?</a>
</p>

<p>
<a href="http://webofthings.org/2015/10/25/http2-for-internet-of-things-1/">What’s in HTTP/2 for the Internet of Things? 1/2 | Web of Things</a>
</p>
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">个人总结</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://tools.ietf.org/html/draft-ietf-httpbis-http2">HTTP/2</a> 做为一种通用的应用层协议，由于被广泛部署，有着天然的优势，但是 <code>mqtt</code> 带来的 <code>Machine-To-Machine</code> 、 <code>offline</code> 、 <code>bridge</code>  消息传输，现在就可以应用到产品中。
</p>

<p>
或许将来有一天会出现构建于 <a href="https://tools.ietf.org/html/draft-ietf-httpbis-http2">HTTP/2</a> 上的类 <code>mqtt</code> 解决方案，它能够运行在绝大多数的资源内限嵌入式设备上，在这之前 <code>mqtt</code> 之类的成熟的应用层协议会有一席之地，特别是在它完美契合你的应用的情况下。
</p>

<p>
做为一个开发者，与其坐等完美的解决方案出现，还不如立即开始学习 <code>mqtt</code> ，应用 <code>mqtt</code> ，从 <code>mqtt</code> 中学到协议设计的经验与技术，以至成为实现构建于 <a href="https://tools.ietf.org/html/draft-ietf-httpbis-http2">HTTP/2</a> 上的类 <code>mqtt</code> 解决方案的那个人。</p>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>