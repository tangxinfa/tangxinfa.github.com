<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>json - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/json.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Wed, 15 Nov 2017 03:18:56 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>json - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/json.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[Envoy 的 json_transcoder_filter 介绍]]></title>
            <link>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</link>
            <guid>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</guid>
            <pubDate>Thu, 12 Oct 2017 11:56:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
json_transcoder_filter 实现 HTTP/1.1+JSON 与 HTTP/2+GRPC 的互转。
</p>

<p>
使用第三方库 <a href="https://github.com/grpc-ecosystem/grpc-httpjson-transcoding">grpc-httpjson-transcoding</a> 完成 json 与 grpc 的协议转换，
转换规则由 <a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 定义。
</p>

<p>
<a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 通过注解（Annotations）为 GRPC 接口添加 RESTful HTTP 接口映射。
</p>

<p>
<code>json_transcoder_filter</code> 对 stream 有一定支持，由于它是基于 HTTP/1.1，本质上是请求-响应模型，
只支持 GRPC 的 <code>Server streaming</code> 和 <code>Client streaming</code> ，不支持 <code>Bidirectional streaming</code> ，
它将 GRPC 消息流映射为消息数组（Json array）。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">示例项目</h2>
<div class="outline-text-2" id="text-1">
<p>
Envoy 带了一个 <a href="https://github.com/envoyproxy/envoy/tree/master/examples/grpc-bridge">grpc-bridge 示例项目</a>，依照它做了一个 grpc_json_transcoder 示例项目：
</p>

<ul class="org-ul">
<li><a href="https://github.com/tangxinfa/grpc_json_transcoder_example">tangxinfa/grpc_json_transcoder_example: Envoy grpc_json_transcoder filter example</a>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">参考</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="https://cloud.google.com/endpoints/docs/grpc/transcoding">Transcoding HTTP/JSON to gRPC  |  Cloud Endpoints with gRPC  |  Google Cloud Platform</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Protobuf 与 Json 数据格式转换]]></title>
            <link>/article/protobuf-4e0e-json-6570636e683c5f0f8f6c6362.html</link>
            <guid>/article/protobuf-4e0e-json-6570636e683c5f0f8f6c6362.html</guid>
            <pubDate>Fri, 29 Sep 2017 03:57:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Protobuf 和 Json 存在显著的差异</h2>
<div class="outline-text-2" id="text-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">数据格式</th>
<th scope="col" class="left">编码</th>
<th scope="col" class="left">自描述</th>
<th scope="col" class="left">字段顺序性</th>
<th scope="col" class="left">基本数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Protobuf</td>
<td class="left">二进制</td>
<td class="left">否</td>
<td class="left">是</td>
<td class="left">丰富</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">编码后的数据不包括字段名称，</td>
<td class="left">&#xa0;</td>
<td class="left">double</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">字段以 proto 文件 tag 值标识</td>
<td class="left">&#xa0;</td>
<td class="left">float</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">int32</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">int64</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">uint32</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">uint64</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">sint32</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">sint64</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">fixed32</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">fixed64</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">sfixed32</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">sfixed64</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">bool</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">string</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">bytes</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Json</td>
<td class="left">文本</td>
<td class="left">是</td>
<td class="left">否</td>
<td class="left">较少</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">string</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">number</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">bool</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">null</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">number 整型取值范围[-(2**53-1), 2**53-1]</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">因此不能精确转换为 int64 或 uint64 类型</td>
</tr>
</tbody>
</table>

<p>
参考
</p>

<p>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number">Number - JavaScript | MDN</a>
</p>

<p>
<a href="https://developers.google.com/protocol-buffers/docs/proto3#scalar">Language Guide (proto3)  |  Protocol Buffers  |  Google Developers</a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Protobuf 与 Json 的静态转换</h2>
<div class="outline-text-2" id="text-2">
<p>
使用 protoc 生成 proto 文件的编解码代码，再手工进行 Protobuf 与 Json 格式转换是很容易的，
但是这需要在 proto 文件更新时重新生成代码，并重新编译、部署程序。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Protobuf 与 Json 的动态转换</h2>
<div class="outline-text-2" id="text-3">
<p>
如果程序能够解析 proto 文件，并根据 proto 定义完成 Protobuf 与 Json 的转换会很有用处。
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">example.proto</h3>
<div class="outline-text-3" id="text-3-1">
<p>
以下为接下来要使用的 <code>example.proto</code> 文件内容
</p>

<div class="org-src-container">

<pre class="src src-protobuf">syntax = <span style="color: #8abeb7;">"proto3"</span>;

<span style="color: #b5bd68;">package</span> <span style="color: #81a2be;">example</span>;

<span style="color: #b5bd68;">message</span> <span style="color: #81a2be;">Hello</span> {
  <span style="color: #81a2be;">string</span> <span style="color: #f0c674;">name</span> = 1;
  <span style="color: #81a2be;">int32</span> <span style="color: #f0c674;">times</span> = 2;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Node.js</h3>
<div class="outline-text-3" id="text-3-2">
<p>
在查找 Node.js 下 Protobuf 使用相关资料的过程中，发现 Node.js 可以直接载入 proto 文件，
然后直接获取 Protobuf 编解码对象进行 Protobuf 的编解码，如下所示：
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">ProtoBuf</span> = require(<span style="color: #8abeb7;">"protobufjs"</span>);
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">dgram</span> = require(<span style="color: #8abeb7;">'dgram'</span>);
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">server</span> = dgram.createSocket(<span style="color: #8abeb7;">'udp4'</span>);

<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">builder</span> = ProtoBuf.loadProtoFile(<span style="color: #8abeb7;">"./cover.helloworld.proto"</span>),
<span style="color: #969896; background-color: #222427;"> </span>   Cover = builder.build(<span style="color: #8abeb7;">"cover"</span>),
<span style="color: #969896; background-color: #222427;"> </span>   HelloCoverReq = Cover.helloworld.helloCoverReq;
<span style="color: #969896; background-color: #222427;"> </span>   HelloCoverRsp = Cover.helloworld.helloCoverRsp;
</pre>
</div>
<p>
引用自 <a href="http://imweb.io/topic/570130a306f2400432c1396c">在NodeJS中玩转Protocol Buffer - 腾讯Web前端 IMWeb 团队社区 | blog | 团队博客</a>
</p>

<p>
这就是动态语言的优势，而且 Javascript 原生支持 Json，用来演示再合适不过。
</p>

<p>
以下为完整的 Protobuf 与 Json 动态互转示例代码：
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #8abeb7;">"use strict"</span>;

<span style="color: #b5bd68;">const</span> <span style="color: #f0c674;">ProtoBuf</span> = require(<span style="color: #8abeb7;">"protobufjs"</span>);
<span style="color: #b5bd68;">const</span> <span style="color: #f0c674;">util</span> = require(<span style="color: #8abeb7;">'util'</span>);
<span style="color: #b5bd68;">const</span> <span style="color: #f0c674;">assert</span> = require(<span style="color: #8abeb7;">'assert'</span>);

ProtoBuf.load(<span style="color: #8abeb7;">"./example.proto"</span>).then((root) =&gt; {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">const</span> <span style="color: #f0c674;">Hello</span> = root.lookup(<span style="color: #8abeb7;">'example.Hello'</span>);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">const</span> <span style="color: #f0c674;">source</span> = {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   name: <span style="color: #8abeb7;">"world"</span>,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   times: 100
<span style="color: #969896; background-color: #222427;"> </span>   };
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">const</span> <span style="color: #f0c674;">hello</span> = Hello.create(source);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">const</span> <span style="color: #f0c674;">buffer</span> = Hello.encode(hello).finish();
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">const</span> <span style="color: #f0c674;">destination</span> = Hello.decode(buffer);
<span style="color: #969896; background-color: #222427;"> </span>   assert(JSON.stringify(source) == JSON.stringify(destination));

<span style="color: #969896; background-color: #222427;"> </span>   console.log({
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   source: JSON.stringify(source),
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   destination: JSON.stringify(destination)
<span style="color: #969896; background-color: #222427;"> </span>   });
});
</pre>
</div>

<p>
运行结果
</p>
<pre class="example">
$ node /home/tangxinfa/Examples/learn_node/protobuf_json.js
{ source: '{"name":"world","times":100}',
  destination: '{"name":"world","times":100}' }
</pre>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">C++</h3>
<div class="outline-text-3" id="text-3-3">
<p>
C++ 是静态类型的语言，肯定不如 Node.js 那么方便，主要用到 Protobuf 的反射（Reflection）机制，具体实现见：
</p>

<ul class="org-ul">
<li><a href="https://github.com/HaustWang/pb2json">HaustWang/pb2json: protobuf message与json互转，使用C++11特性</a>
</li>

<li><a href="https://github.com/shafreeck/pb2json">https://github.com/shafreeck/pb2json</a>
</li>

<li><a href="https://github.com/shramov/json2pb">shramov/json2pb: Python/C++ implementation of JSON to/from Protobuf convertor</a>
</li>
</ul>


<p>
<a href="https://github.com/HaustWang/pb2json">HaustWang/pb2json</a> 实现了静态和动态 Protobuf 与 Json 互转，这里以它写一个完整的示例
</p>

<ul class="org-ul">
<li>拉取 <a href="https://github.com/HaustWang/pb2json">HaustWang/pb2json</a> 代码

<div class="org-src-container">

<pre class="src src-sh">git clone https://github.com/HaustWang/pb2json.git
</pre>
</div>
</li>

<li>protobuf_json.cpp

<div class="org-src-container">

<pre class="src src-cpp"><span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">"pb2json/byReflection/pb2json.h"</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;google/protobuf/compiler/importer.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;google/protobuf/dynamic_message.h&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;iostream&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;string&gt;</span>
<span style="color: #b294bb;">#include</span> <span style="color: #8abeb7;">&lt;cassert&gt;</span>
<span style="color: #b5bd68;">using</span> <span style="color: #81a2be;">std</span>::<span style="color: #81a2be;">string</span>;

<span style="color: #b5bd68;">class</span> <span style="color: #81a2be;">ErrorCollector</span>: <span style="color: #b5bd68;">public</span> <span style="color: #81a2be;">google</span>::<span style="color: #81a2be;">protobuf</span>::<span style="color: #81a2be;">compiler</span>::<span style="color: #81a2be;">MultiFileErrorCollector</span><span style="color: #de935f; background-color: #373b41;"> {</span>
<span style="color: #b5bd68;">public</span>:
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #de935f;">ErrorCollector</span>()
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> :warnings_(0), errors_(0)
<span style="color: #969896; background-color: #222427;"> </span> {}
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">virtual</span> ~<span style="color: #de935f;">ErrorCollector</span>() {}
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">virtual</span> <span style="color: #81a2be;">void</span> <span style="color: #de935f;">AddError</span>(<span style="color: #b5bd68;">const</span> <span style="color: #81a2be;">string</span>&amp; <span style="color: #f0c674;">filename</span>, <span style="color: #81a2be;">int</span> <span style="color: #f0c674;">line</span>, <span style="color: #81a2be;">int</span> <span style="color: #f0c674;">column</span>,
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">const</span> <span style="color: #81a2be;">string</span>&amp; <span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> ++errors_;
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">std</span>::cerr &lt;&lt; filename &lt;&lt; <span style="color: #8abeb7;">":"</span> &lt;&lt; line &lt;&lt; <span style="color: #8abeb7;">":"</span> &lt;&lt; column &lt;&lt; <span style="color: #8abeb7;">": "</span> &lt;&lt; message &lt;&lt; <span style="color: #de935f; background-color: #373b41;">std</span><span style="color: #de935f; background-color: #373b41;">::endl;</span>
<span style="color: #969896; background-color: #222427;"> </span> }

<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">virtual</span> <span style="color: #81a2be;">void</span> <span style="color: #de935f;">AddWarning</span>(<span style="color: #b5bd68;">const</span> <span style="color: #81a2be;">string</span>&amp; <span style="color: #f0c674;">filename</span>, <span style="color: #81a2be;">int</span> <span style="color: #f0c674;">line</span>, <span style="color: #81a2be;">int</span> <span style="color: #f0c674;">column</span>,
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">const</span> <span style="color: #81a2be;">string</span>&amp; <span style="color: #f0c674;">message</span>) {
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> ++warnings_;
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">std</span>::cerr &lt;&lt; filename &lt;&lt; <span style="color: #8abeb7;">":"</span> &lt;&lt; line &lt;&lt; <span style="color: #8abeb7;">":"</span> &lt;&lt; column &lt;&lt; <span style="color: #8abeb7;">": "</span> &lt;&lt; message &lt;&lt; <span style="color: #de935f; background-color: #373b41;">std</span><span style="color: #de935f; background-color: #373b41;">::endl;</span>
<span style="color: #969896; background-color: #222427;"> </span> }

<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">uint</span> <span style="color: #de935f;">errors</span>() <span style="color: #b5bd68;">const</span> { <span style="color: #b5bd68;">return</span> errors_; }
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">uint</span> <span style="color: #de935f;">warnings</span>() <span style="color: #b5bd68;">const</span> { <span style="color: #b5bd68;">return</span> warnings_; }

<span style="color: #b5bd68;">private</span>:
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">uint</span> <span style="color: #f0c674;">errors_</span>;
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">uint</span> <span style="color: #f0c674;">warnings_</span>;
};


<span style="color: #81a2be;">int</span> <span style="color: #de935f;">main</span>(<span style="color: #81a2be;">int</span> <span style="color: #f0c674;">argc</span>, <span style="color: #81a2be;">char</span> *<span style="color: #f0c674;">argv</span>[]) {
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">parse proto file with protobuf compiler module,</span>
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">also can generate self-described protobuf message with protoc,</span>
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">then we can get file descriptor without protobuf compiler,</span>
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">see https://developers.google.com/protocol-buffers/docs/techniques#self-des</span><span style="color: #de935f; background-color: #373b41; font-style: italic;">cription</span>
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">google</span>::<span style="color: #81a2be;">protobuf</span>::<span style="color: #81a2be;">compiler</span>::<span style="color: #81a2be;">DiskSourceTree</span> <span style="color: #f0c674;">sourceTree</span>;
<span style="color: #969896; background-color: #222427;"> </span> sourceTree.MapPath(<span style="color: #8abeb7;">""</span>, <span style="color: #8abeb7;">"."</span>);
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">ErrorCollector</span> <span style="color: #f0c674;">collector</span>;
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">google</span>::<span style="color: #81a2be;">protobuf</span>::<span style="color: #81a2be;">compiler</span>::<span style="color: #81a2be;">Importer</span> <span style="color: #f0c674;">importer</span>(&amp;sourceTree, &amp;collector);
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">const</span> <span style="color: #81a2be;">char</span>* <span style="color: #f0c674;">proto_file</span> = <span style="color: #8abeb7;">"example.proto"</span>;
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">const</span> <span style="color: #81a2be;">google</span>::<span style="color: #81a2be;">protobuf</span>::<span style="color: #81a2be;">FileDescriptor</span>* <span style="color: #f0c674;">fileDescriptor</span> = importer.Import(proto<span style="color: #de935f; background-color: #373b41;">_file);</span>
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">if</span> (fileDescriptor == <span style="color: #81a2be;">NULL</span>) {
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">std</span>::cerr &lt;&lt; <span style="color: #8abeb7;">"proto file "</span> &lt;&lt; proto_file &lt;&lt; <span style="color: #8abeb7;">" import failed"</span> &lt;&lt; <span style="color: #81a2be;">std</span>::endl;
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">return</span> EXIT_FAILURE;
<span style="color: #969896; background-color: #222427;"> </span> }

<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">const</span> <span style="color: #81a2be;">google</span>::<span style="color: #81a2be;">protobuf</span>::<span style="color: #81a2be;">Descriptor</span>* <span style="color: #f0c674;">descriptor</span> = fileDescriptor-&gt;FindMessageTy<span style="color: #de935f; background-color: #373b41;">peByName(</span><span style="color: #de935f; background-color: #373b41;">"Hello"</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span> assert(descriptor);

<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">google</span>::<span style="color: #81a2be;">protobuf</span>::<span style="color: #81a2be;">DynamicMessageFactory</span> <span style="color: #f0c674;">factory</span>;
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">const</span> <span style="color: #81a2be;">google</span>::<span style="color: #81a2be;">protobuf</span>::<span style="color: #81a2be;">Message</span>* <span style="color: #f0c674;">prototype</span> = factory.GetPrototype(descriptor);
<span style="color: #969896; background-color: #222427;"> </span> assert(prototype);
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">google</span>::<span style="color: #81a2be;">protobuf</span>::<span style="color: #81a2be;">Message</span>* <span style="color: #f0c674;">message</span> = prototype-&gt;New();
<span style="color: #969896; background-color: #222427;"> </span> assert(message);

<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">string</span> <span style="color: #f0c674;">source</span> = <span style="color: #8abeb7;">"{\"name\":\"world\",\"times\":100}"</span>;
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">bool</span> <span style="color: #f0c674;">ok</span> = <span style="color: #81a2be;">Pb2Json</span>::Json2Message(<span style="color: #81a2be;">nlohmann</span>::<span style="color: #81a2be;">json</span>::parse(source), *message);
<span style="color: #969896; background-color: #222427;"> </span> assert(ok);

<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">nlohmann</span>::<span style="color: #81a2be;">json</span> <span style="color: #f0c674;">destinationJson</span>;
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">Pb2Json</span>::Message2Json(*message, destinationJson);
<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">string</span> <span style="color: #f0c674;">destination</span> = destinationJson.dump();

<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #81a2be;">std</span>::cout &lt;&lt; <span style="color: #8abeb7;">"source: "</span> &lt;&lt; source &lt;&lt; <span style="color: #8abeb7;">"\tdestination: "</span> &lt;&lt; destination &lt;&lt; <span style="color: #81a2be;">std</span>::<span style="color: #de935f; background-color: #373b41;">endl;</span>
<span style="color: #969896; background-color: #222427;"> </span> assert(source == destination);

<span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">return</span> EXIT_SUCCESS;
}
</pre>
</div>

<ul class="org-ul">
<li>编译

<div class="org-src-container">

<pre class="src src-sh">g++ -O2 protobuf_json.cpp ./pb2json/byReflection/pb2json.cpp -lm -o protobuf_jso<span style="color: #de935f; background-color: #373b41;">n -lprotobuf</span>
</pre>
</div>
</li>

<li>运行

<pre class="example">
$ ./protobuf_json
source: {"name":"world","times":100}    destination: {"name":"world","times":100}
</pre>
</li>
</ul>
</li>
</ul>


<p>
相关参考
</p>

<ul class="org-ul">
<li><a href="http://blog.csdn.net/haust_wang/article/details/49994883">c++使用Protobuf Message转Json字符串（Json库使用Json cpp） - - CSDN博客</a>
</li>

<li><a href="http://blog.csdn.net/haust_wang/article/details/50135967">Protobuf与Json互转 - - CSDN博客</a>
</li>

<li><a href="https://stackoverflow.com/questions/7007876/c-protobuf-to-from-json-conversion">C++ Protobuf to/from JSON conversion - Stack Overflow</a>
</li>

<li><a href="https://stackoverflow.com/questions/11996557/how-to-dynamically-build-a-new-protobuf-from-a-set-of-already-defined-descriptor">c++ - How to dynamically build a new protobuf from a set of already defined descriptors? - Stack Overflow</a>
</li>

<li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/#minor4.2">Google Protocol Buffer 的使用和原理</a>
</li>

<li><a href="https://developers.google.com/protocol-buffers/docs/reference/cpp/">C++ API  |  Protocol Buffers  |  Google Developers</a>
</li>
</ul>
</div>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>