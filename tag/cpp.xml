<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>cpp - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/cpp.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Thu, 13 Jun 2019 03:59:30 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>cpp - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/cpp.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[完美的 c++ 项目代码定义跳转]]></title>
            <link>/article/5b8c7f8e7684-c-987976ee4ee378015b9a4e498df38f6c.html</link>
            <guid>/article/5b8c7f8e7684-c-987976ee4ee378015b9a4e498df38f6c.html</guid>
            <pubDate>Wed, 15 Nov 2017 07:26:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
阅读代码时如果能够很方便地跳转到函数、类型定义处，会极大地提高效率。使用 grep 或
ctags 或 gtags 的问题在于给出的结果不够严谨，可能会给出很多候选，容易打断思路，另一方面 c++ 本身语法非常复杂，继承、重载等会让选择正确的跳转处变得更加困难，
ctags 或 gtags 之类的静态代码分析工具对 c++ 的支持也相当有限。
</p>

<p>
clang 编译器较之 gcc 在进行代码分析方面提供了良好的支持，编译器给出的结果往往是最正确和最丰富的。
</p>

<p>
本文描述了使用如何将 emacs 打造成阅读 c++ 代码的利器。
</p>

<div id="outline-container-orgb93cc9c" class="outline-2">
<h2 id="orgb93cc9c">编译数据库</h2>
<div class="outline-text-2" id="text-orgb93cc9c">
<p>
编译数据库（ <code>compile_commands.json</code> ）里面记录了每一个源代码文件对应的编译命令，有了编译数据库就可以从 clang 编译器获取最详尽的代码分析数据，让代码跳转、自动完成更加精确。
</p>

<p>
不同的构建工具可以使用相应的工具来生成编译数据库（ <code>compile_commands.json</code> ）。
</p>
</div>

<div id="outline-container-orgfd20747" class="outline-3">
<h3 id="orgfd20747">bazel</h3>
<div class="outline-text-3" id="text-orgfd20747">
<ul class="org-ul">
<li><p>
安装
</p>

<p>
使用 <code>Bazel And Compile Commands</code> 脚本可以很方便地为 Bazel 构建项目生成 compile_commands.json 
</p>

<div class="org-src-container">
<pre class="src src-sh">git clone https://github.com/vincent-picaud/Bazel_and_CompileCommands.git
</pre>
</div></li>

<li><p>
生成
</p>

<div class="org-src-container">
<pre class="src src-sh">../Bazel_and_CompileCommands/setup_compile_commands.sh
../Bazel_and_CompileCommands/create_compile_commands.sh //...
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-orgfa55270" class="outline-3">
<h3 id="orgfa55270">make</h3>
<div class="outline-text-3" id="text-orgfa55270">
<p>
<a href="https://github.com/rizsotto/Bear">Bear</a> 是一个生成生成编译数据库的工具，其工作原理是监视编译工具（如：make）调用的编译命令，是一种很通用的方案。
</p>

<ul class="org-ul">
<li><p>
安装
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S bear
</pre>
</div></li>

<li><p>
生成
</p>

<div class="org-src-container">
<pre class="src src-sh">bear make
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org1d65f8c" class="outline-3">
<h3 id="org1d65f8c">cmake</h3>
<div class="outline-text-3" id="text-org1d65f8c">
<ul class="org-ul">
<li><p>
安装
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S cmake
</pre>
</div></li>

<li><p>
生成
</p>

<div class="org-src-container">
<pre class="src src-sh">cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .
</pre>
</div></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org3b0d953" class="outline-2">
<h2 id="org3b0d953"><a href="https://github.com/Andersbakken/rtags">rtags</a></h2>
<div class="outline-text-2" id="text-org3b0d953">
<blockquote>
<p>
RTags is a client/server application that indexes C/C++ code and keeps a persistent file-based database of references, declarations, definitions, symbolnames etc. 
</p>
</blockquote>

<p>
<a href="https://github.com/Andersbakken/rtags">rtags</a> 是基于 clang，根据编译器提供的信息可以实现精确的查找定义、引用及调用、列出派生类等。
</p>
</div>

<div id="outline-container-orgc23253a" class="outline-3">
<h3 id="orgc23253a">启动后台服务</h3>
<div class="outline-text-3" id="text-orgc23253a">
<div class="org-src-container">
<pre class="src src-sh">nohup rdm &amp;
</pre>
</div>
</div>
</div>

<div id="outline-container-org1fffb6d" class="outline-3">
<h3 id="org1fffb6d">提交项目信息到后台服务</h3>
<div class="outline-text-3" id="text-org1fffb6d">
<p>
由于 bazel 会将代码通过软链接放到一个沙箱中进行编译，导致生成的编译数据库中代码目录与实际编辑的路径不一致，使用 rtags 查找定义时会报 "/xxx/xxx.cpp not indexed" 错误，可以通过提交项目信息时指定 <code>--project-root</code> 进行修正。
</p>

<div class="org-src-container">
<pre class="src src-sh">rc -J . --project-root $<span style="color: #0084C8; font-weight: bold;">PWD</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org8bfdbb5" class="outline-3">
<h3 id="org8bfdbb5">在 emacs 中整合以上工具</h3>
<div class="outline-text-3" id="text-org8bfdbb5">
<p>
请参考 <a href="https://github.com/Andersbakken/rtags#elisp">https://github.com/Andersbakken/rtags#elisp</a>
</p>

<p>
以下是我的配置，首先需要安装这些 emacs 包： <code>rtags</code> <code>helm-rtags</code>
<code>company-rtags</code> <code>flycheck-rtags</code>
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #204A87;">;;;; </span><span style="color: #204A87;">rtags</span>
(<span style="color: #A52A2A; font-weight: bold;">defun</span> <span style="color: #00578E; font-weight: bold;">my-rtags-load-compile-commands-command</span> ()
<span style="background-color: #E6E6E6;"> </span> <span style="color: #4E9A06;">"rtags load compile_commands.json command"</span>
<span style="background-color: #E6E6E6;"> </span> <span style="color: #204A87;">;; </span><span style="color: #204A87;">compile_commands.json generate by https://github.com/vincent-picaud/Bazel_a</span><span style="color: #204A87; text-decoration: underline;">nd_CompileCommands</span>
<span style="background-color: #E6E6E6;"> </span> <span style="color: #204A87;">;; </span><span style="color: #204A87;">will refer source code from bazel's sandbox, must use "--project-root" to f</span><span style="color: #204A87; text-decoration: underline;">ix it.</span>
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">let</span> ((project-root default-directory)
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   (tmp-project-root <span style="color: #4E9A06;">""</span>))
<span style="background-color: #E6E6E6;"> </span>   (<span style="color: #A52A2A; font-weight: bold;">while</span> (<span style="color: #A52A2A; font-weight: bold;">and</span> project-root (not (file-exists-p (concat project-root <span style="color: #4E9A06;">"compile_c</span><span style="color: #4E9A06; text-decoration: underline;">ommands.json"</span><span style="text-decoration: underline;">))))</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">setq</span> tmp-project-root (file-name-directory (directory-file-name project-r<span style="text-decoration: underline;">oot)))</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span> (message <span style="color: #4E9A06;">"tmp-project-root: %s, project-root: %s"</span> tmp-project-root project<span style="text-decoration: underline;">-root)</span>
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">if</span> (equal tmp-project-root project-root)
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">setq</span> project-root nil)
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   (<span style="color: #A52A2A; font-weight: bold;">setq</span> project-root tmp-project-root)))
<span style="background-color: #E6E6E6;"> </span>   (<span style="color: #A52A2A; font-weight: bold;">unless</span> project-root
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span> (message <span style="color: #4E9A06;">"RTags: compile_commands.json not exists"</span>)
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">setq</span> project-root default-directory))
<span style="background-color: #E6E6E6;"> </span>   (message <span style="color: #4E9A06;">"RTags: %s"</span> (concat project-root <span style="color: #4E9A06;">"compile_commands.json"</span>))
<span style="background-color: #E6E6E6;"> </span>   (format <span style="color: #4E9A06;">"rc -J %s --project-root %s"</span> project-root project-root)))

(<span style="color: #A52A2A; font-weight: bold;">defun</span> <span style="color: #00578E; font-weight: bold;">my-rtags-run</span> ()
<span style="background-color: #E6E6E6;"> </span> <span style="color: #4E9A06;">"rtags startup with generated compile_commands.json"</span>
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">interactive</span>)
<span style="background-color: #E6E6E6;"> </span> (rtags-start-process-unless-running)
<span style="background-color: #E6E6E6;"> </span> (shell-command (my-rtags-load-compile-commands-command)))

(<span style="color: #A52A2A; font-weight: bold;">defun</span> <span style="color: #00578E; font-weight: bold;">my-rtags-build</span> ()
<span style="background-color: #E6E6E6;"> </span> <span style="color: #4E9A06;">"rtags startup use compile_commands.json generate from build tool"</span>
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">interactive</span>)
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">cond</span> ((file-exists-p <span style="color: #4E9A06;">"BUILD"</span>) (my-rtags-bazel))
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   ((file-exists-p <span style="color: #4E9A06;">"CMakeLists.txt"</span>) (my-rtags-cmake))
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   ((file-exists-p <span style="color: #4E9A06;">"Makefile"</span>) (my-rtags-make))
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   (t (<span style="color: #F5666D; font-weight: bold;">error</span> <span style="color: #4E9A06;">"No build tool detected"</span>))))

(<span style="color: #A52A2A; font-weight: bold;">defun</span> <span style="color: #00578E; font-weight: bold;">my-rtags-bazel</span> ()
<span style="background-color: #E6E6E6;"> </span> <span style="color: #4E9A06;">"rtags startup use compile_commands.json generate from bazel"</span>
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">interactive</span>)
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">let</span> ((tool_dir <span style="color: #4E9A06;">"~/Opensource/Bazel_and_CompileCommands"</span>)
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   (command <span style="color: #4E9A06;">""</span>))
<span style="background-color: #E6E6E6;"> </span>   (<span style="color: #A52A2A; font-weight: bold;">setq</span> command (format <span style="color: #4E9A06;">"%s/setup_compile_commands.sh; %s/create_compile_comma</span><span style="color: #4E9A06; text-decoration: underline;">nds.sh //..."</span><span style="text-decoration: underline;"> tool_dir tool_dir))</span>
<span style="background-color: #E6E6E6;"> </span>   (<span style="color: #A52A2A; font-weight: bold;">setq</span> command (read-string <span style="color: #4E9A06;">"Build bazel compile_commands.json: "</span> command nil<span style="text-decoration: underline;"> nil))</span>
<span style="background-color: #E6E6E6;"> </span>   (<span style="color: #A52A2A; font-weight: bold;">unless</span> command
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span> (<span style="color: #F5666D; font-weight: bold;">error</span> <span style="color: #4E9A06;">"Build compile_commands.json for bazel failed"</span>))
<span style="background-color: #E6E6E6;"> </span>   (rtags-start-process-unless-running)
<span style="background-color: #E6E6E6;"> </span>   (async-shell-command (concat command <span style="color: #4E9A06;">" &amp;&amp; "</span> (my-rtags-load-compile-commands-<span style="text-decoration: underline;">command)))))</span>

(<span style="color: #A52A2A; font-weight: bold;">defun</span> <span style="color: #00578E; font-weight: bold;">my-rtags-make</span> ()
<span style="background-color: #E6E6E6;"> </span> <span style="color: #4E9A06;">"build compile_commands.json for make"</span>
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">interactive</span>)
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">let</span> ((command (read-string <span style="color: #4E9A06;">"Build make compile_commands.json: "</span> <span style="color: #4E9A06;">"bear make"</span> n<span style="text-decoration: underline;">il nil)))</span>
<span style="background-color: #E6E6E6;"> </span>   (<span style="color: #A52A2A; font-weight: bold;">unless</span> command
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span> (<span style="color: #F5666D; font-weight: bold;">error</span> <span style="color: #4E9A06;">"Build compile_commands.json for make failed"</span>))
<span style="background-color: #E6E6E6;"> </span>   (rtags-start-process-unless-running)
<span style="background-color: #E6E6E6;"> </span>   (async-shell-command (concat command <span style="color: #4E9A06;">" &amp;&amp; "</span> (my-rtags-load-compile-commands-<span style="text-decoration: underline;">command)))))</span>

(<span style="color: #A52A2A; font-weight: bold;">defun</span> <span style="color: #00578E; font-weight: bold;">my-rtags-cmake</span> ()
<span style="background-color: #E6E6E6;"> </span> <span style="color: #4E9A06;">"build compile_commands.json for cmake"</span>
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">interactive</span>)
<span style="background-color: #E6E6E6;"> </span> (<span style="color: #A52A2A; font-weight: bold;">let</span> ((command (read-string <span style="color: #4E9A06;">"Build cmake compile_commands.json: "</span> <span style="color: #4E9A06;">"cmake -DCMA</span><span style="color: #4E9A06; text-decoration: underline;">KE_EXPORT_COMPILE_COMMANDS=ON ."</span><span style="text-decoration: underline;"> nil nil)))</span>
<span style="background-color: #E6E6E6;"> </span>   (rtags-start-process-unless-running)
<span style="background-color: #E6E6E6;"> </span>   (async-shell-command (concat command <span style="color: #4E9A06;">" &amp;&amp; "</span> (my-rtags-load-compile-commands-<span style="text-decoration: underline;">command)))))</span>

(<span style="color: #A52A2A; font-weight: bold;">setq</span> rtags-completions-enabled t)
(eval-after-load 'company
<span style="background-color: #E6E6E6;"> </span> '(add-to-list
<span style="background-color: #E6E6E6;"> </span>   'company-backends 'company-rtags))
(<span style="color: #A52A2A; font-weight: bold;">setq</span> rtags-autostart-diagnostics t)
(rtags-enable-standard-keybindings)
(<span style="color: #A52A2A; font-weight: bold;">require</span> '<span style="color: #F5666D;">helm-rtags</span>)
(<span style="color: #A52A2A; font-weight: bold;">require</span> '<span style="color: #F5666D;">flycheck-rtags</span>)
(define-key c-mode-map (kbd <span style="color: #4E9A06;">"C-c C-j"</span>) 'rtags-find-symbol)
(define-key c++-mode-map (kbd <span style="color: #4E9A06;">"C-c C-j"</span>) 'rtags-find-symbol)
(define-key c-mode-map (kbd <span style="color: #4E9A06;">"C-c C-b"</span>) 'rtags-location-stack-back)
(define-key c++-mode-map (kbd <span style="color: #4E9A06;">"C-c C-b"</span>) 'rtags-location-stack-back)
(define-key c-mode-map (kbd <span style="color: #4E9A06;">"C-c C-r"</span>) 'rtags-find-references)
(define-key c++-mode-map (kbd <span style="color: #4E9A06;">"C-c C-r"</span>) 'rtags-find-references)
</pre>
</div>

<p>
第一次需在项目根目录执行 <code>M-x my-rtags-build</code> ，它会先生成编译数据库（ <code>compile_commands.json</code> ）再启动 rtags 后台服务。以后可直接运行 rtags 后台服务 <code>M-x my-rtags-run</code> 。
</p>

<p>
现在随便打开项目中的 c++ 源代码，将光标放到变量名上，然后按 <code>C-c C-j</code> 跳转到定义处，更多用法请参考 rtags 文档。
</p>
</div>
</div>
</div>

<div id="outline-container-org18db525" class="outline-2">
<h2 id="org18db525">参考</h2>
<div class="outline-text-2" id="text-org18db525">
<ul class="org-ul">
<li><a href="https://sarcasm.github.io/notes/dev/compilation-database.html#cmake">Compilation database — Sarcasm notebook</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[为什么不能在构造函数中调用shared_from_this]]></title>
            <link>/article/4e3a4ec04e484e0d80fd57286784902051fd65704e2d8c037528-shared_from_this.html</link>
            <guid>/article/4e3a4ec04e484e0d80fd57286784902051fd65704e2d8c037528-shared_from_this.html</guid>
            <pubDate>Thu, 19 Dec 2013 17:02:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
先看示例代码：
</p>

<div class="org-src-container">
<pre class="src src-c++"><span style="color: #A52A2A; font-weight: bold;">class</span> <span style="color: #2F8B58; font-weight: bold;">Chicken</span> : <span style="color: #A52A2A; font-weight: bold;">public</span> <span style="color: #2F8B58; font-weight: bold;">enable_shared_from_this</span>&lt;<span style="color: #2F8B58; font-weight: bold;">Chicken</span>&gt;
{
<span style="color: #A52A2A; font-weight: bold;">public</span>:
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #00578E; font-weight: bold;">Chicken</span>()
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> {
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">shared_ptr</span>&lt;<span style="color: #2F8B58; font-weight: bold;">Chicken</span>&gt; <span style="color: #0084C8; font-weight: bold;">chicken_ptr</span> = shared_from_this();    <span style="color: #204A87;">//</span><span style="color: #204A87;">throw std::ba</span><span style="color: #204A87; text-decoration: underline;">d_weak_ptr</span>
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> }
};
</pre>
</div>

<p>
再看shared_from_this()的行为：
</p>
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #A52A2A; font-weight: bold;">return</span> _weak_ptr-&gt;lock();
</pre>
</div>

<p>
<code>_weak_ptr</code> 为父类（ <code>enable_shared_from_this</code> &lt;Chicken&gt;）的成员变量，需要一个 <code>shared_ptr</code> &lt;Chicken&gt;对象来初始化它，而 <code>shared_ptr</code> &lt;Chicken&gt;需要一个Chicken对象来创建，但此时Chicken对象正在构造中，这是个鸡与蛋的无解问题。
</p>

<p>
其实 <code>_weak_ptr</code> 成员变量是在 <code>shared_ptr</code> 的构造函数中延迟初始化的，不只是在构造函数中不能调用 <code>shared_from_this</code> ，像下面的使用方式同样不行：
</p>
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #2F8B58; font-weight: bold;">Chicken</span>* <span style="color: #0084C8; font-weight: bold;">chicken</span> = <span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">Chicken</span>();
<span style="color: #2F8B58; font-weight: bold;">shared_ptr</span>&lt;<span style="color: #2F8B58; font-weight: bold;">Chicken</span>&gt; <span style="color: #0084C8; font-weight: bold;">chicken_ptr</span> = chicken-&gt;shared_from_this();  <span style="color: #204A87;">//</span><span style="color: #204A87;">throw std::bad</span><span style="color: #204A87; text-decoration: underline;">_weak_ptr</span>
</pre>
</div>

<p>
<code>enable_shared_from_this</code> 不是从this祼指针变出智能指针的魔法，它只是一个辅助类，为一个只使用 <code>shared_ptr</code> 管理对象生命周期的类添加一个自身的智能指针成员变量供内部使用。
</p>

<p>
而“不能在构造函数中调用 <code>shared_from_this</code> ”这个问题仅仅是标准实现上的一个漏洞。
</p>

<p>
你应该像下面这样用：
</p>
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #A52A2A; font-weight: bold;">class</span> <span style="color: #2F8B58; font-weight: bold;">Chicken</span> : <span style="color: #A52A2A; font-weight: bold;">public</span> <span style="color: #2F8B58; font-weight: bold;">enable_shared_from_this</span>&lt;<span style="color: #2F8B58; font-weight: bold;">Chicken</span>&gt;
{
<span style="color: #A52A2A; font-weight: bold;">public</span>:
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #00578E; font-weight: bold;">Chicken</span>()
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> {
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> }

<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">void</span> <span style="color: #00578E; font-weight: bold;">use</span>()
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> {
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">shared_ptr</span>&lt;<span style="color: #2F8B58; font-weight: bold;">Chicken</span>&gt; <span style="color: #0084C8; font-weight: bold;">chicken_ptr</span> = shared_from_this();
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> }
};

<span style="color: #2F8B58; font-weight: bold;">shared_ptr</span>&lt;<span style="color: #2F8B58; font-weight: bold;">Chicken</span>&gt; <span style="color: #0084C8; font-weight: bold;">chicken_ptr</span>(<span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">Chicken</span>);
chicken_ptr-&gt;use();
</pre>
</div>

<p>
突然想起一段对话：
</p>
<blockquote>
<p>
阿漆：闻西，事情进行的怎么样了，闻西？
</p>

<p>
达闻西： 最近我发明了些东西，相信能帮得到你。
</p>

<p>
达闻西拿出手电筒。
</p>

<p>
阿漆：手电筒？
</p>

<p>
达闻西：错，这支不是一只普通的手电筒，这支是一支不需要电池的太阳能手电筒，在有光的时候他就会亮。
</p>

<p>
司令：那如果没有光呢？
</p>

<p>
达闻西：绝对不亮。
</p>

<p>
阿漆：有没有可能没光的时候它也会亮？
</p>

<p>
达闻西：问的好，关灯。
</p>

<p>
达闻西：你拿另一只手电筒照它呢，它就会亮。
</p>

<p>
达闻西：哈哈，怎么样啊？
</p>

<p>
阿漆：这个发明还真有创意啊。
</p>
</blockquote>



<p>
参考：《<a href="http://hi.baidu.com/cpuramdisk/item/7c2f8d77385e0f29d7a89cf0">shared_from_this 几个值得注意的地方</a>》</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[C++的函数、闭包与协程]]></title>
            <link>/article/c-768451fd6570300195ed53054e0e534f7a0b.html</link>
            <guid>/article/c-768451fd6570300195ed53054e0e534f7a0b.html</guid>
            <pubDate>Fri, 15 Mar 2013 02:04:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org9304ea6" class="outline-2">
<h2 id="org9304ea6">实现序号生成器</h2>
<div class="outline-text-2" id="text-org9304ea6">
</div>
<div id="outline-container-orgae04476" class="outline-3">
<h3 id="orgae04476">函数（Function）</h3>
<div class="outline-text-3" id="text-orgae04476">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;cassert&gt;</span>

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">id_generator</span>(<span style="color: #2F8B58; font-weight: bold;">int</span>&amp; <span style="color: #0084C8; font-weight: bold;">base</span>, <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">step</span>)
{
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">result</span> = *base;
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> *base += step;
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">return</span> result;
}

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">argc</span>, <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">argv</span>[])
{
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">odd_base</span> = 1;
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">even_base</span> = 0;<span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">    </span>
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator(odd_base, 2) == 1);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator(odd_base, 2) == 3);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator(odd_base, 2) == 5);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator(even_base, 2) == 0);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator(even_base, 2) == 2);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator(even_base, 2) == 4);<span style="color: #ffff00; background-color: #ff0000; font-weight: bold;">        </span>
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}
</pre>
</div>

<dl class="org-dl">
<dt>编译</dt><dd><pre class="example">
g++ -g add.cpp -o add
</pre></dd>
</dl>
</div>
</div>

<div id="outline-container-org33ba31f" class="outline-3">
<h3 id="org33ba31f">闭包（Closure）</h3>
<div class="outline-text-3" id="text-org33ba31f">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;cassert&gt;</span>

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">argc</span>, <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">argv</span>[])
{
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">base</span> = 1;
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">auto</span> <span style="color: #0084C8; font-weight: bold;">id_generator_odd</span> = [=]() <span style="color: #A52A2A; font-weight: bold;">mutable</span> { <span style="color: #2F8B58; font-weight: bold;">int</span> result = base; base += 2; <span style="color: #A52A2A; font-weight: bold;">return</span><span style="text-decoration: underline;"> result; };</span>
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> base = 0;
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">auto</span> <span style="color: #0084C8; font-weight: bold;">id_generator_even</span> = [=]() <span style="color: #A52A2A; font-weight: bold;">mutable</span> { <span style="color: #2F8B58; font-weight: bold;">int</span> result = base; base += 2; <span style="color: #A52A2A; font-weight: bold;">retur</span><span style="color: #A52A2A; font-weight: bold; text-decoration: underline;">n</span><span style="text-decoration: underline;"> result; };</span>
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_odd() == 1);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_odd() == 3);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_odd() == 5);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_even() == 0);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_even() == 2);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_even() == 4);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(base == 0);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}
</pre>
</div>

<dl class="org-dl">
<dt>编译</dt><dd><pre class="example">
g++ -g closure.cpp -o closure -std=c++0x
</pre></dd>
</dl>
</div>
</div>

<div id="outline-container-org598025e" class="outline-3">
<h3 id="org598025e">协程（Coroutine）</h3>
<div class="outline-text-3" id="text-org598025e">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;boost/bind.hpp&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;boost/coroutine/all.hpp&gt;</span>

<span style="color: #A52A2A; font-weight: bold;">typedef</span> <span style="color: #F5666D;">boost</span>::<span style="color: #F5666D;">coroutines</span>::<span style="color: #2F8B58; font-weight: bold;">coroutine</span>&lt; <span style="color: #2F8B58; font-weight: bold;">int</span>(<span style="color: #2F8B58; font-weight: bold;">void</span>) &gt; <span style="color: #2F8B58; font-weight: bold;">IDGenerator</span>;

<span style="color: #2F8B58; font-weight: bold;">void</span> <span style="color: #00578E; font-weight: bold;">idGenerator</span>(<span style="color: #F5666D;">IDGenerator</span>::<span style="color: #2F8B58; font-weight: bold;">caller_type</span>&amp; <span style="color: #0084C8; font-weight: bold;">ca</span>, <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">base</span>, <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">step</span>)
{
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">do</span>{
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> ca(base);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> base += step;
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> }<span style="color: #A52A2A; font-weight: bold;">while</span>(<span style="color: #F5666D;">true</span>);
}

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">argc</span>, <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">argv</span>[])
{
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">IDGenerator</span> <span style="color: #0084C8; font-weight: bold;">id_generator_odd</span>(<span style="color: #F5666D;">boost</span>::bind(idGenerator, _1, 1, 2));
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">IDGenerator</span> <span style="color: #0084C8; font-weight: bold;">id_generator_even</span>(<span style="color: #F5666D;">boost</span>::bind(idGenerator, _1, 0, 2));
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_odd.get() == 1);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_odd().get() == 3);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_odd().get() == 5);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_even.get() == 0);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_even().get() == 2);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> assert(id_generator_even().get() == 4);
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}
</pre>
</div>

<dl class="org-dl">
<dt>编译</dt><dd><pre class="example">
g++ -g coroutine.cpp -lboost_context -o coroutine -std=c++0x
</pre></dd>
</dl>
</div>
</div>
</div>

<div id="outline-container-org857274b" class="outline-2">
<h2 id="org857274b">特性比较</h2>
<div class="outline-text-2" id="text-org857274b">
</div>
<div id="outline-container-orga6f3be6" class="outline-3">
<h3 id="orga6f3be6">函数（Function）</h3>
<div class="outline-text-3" id="text-orga6f3be6">
<ul class="org-ul">
<li>无状态</li>
<li>需要独立定义执行体</li>
<li>调用过程中从头到尾执行体内所有代码</li>
<li>在输入相同的情况下，能够保证输出也相同</li>
<li>没有副作用，多线程安全</li>
<li>要借助外部变量保存状态</li>
<li>调用比较麻烦，需要传入保存状态的参数</li>
</ul>
</div>
</div>

<div id="outline-container-org31b549e" class="outline-3">
<h3 id="org31b549e">闭包（Closure）</h3>
<div class="outline-text-3" id="text-org31b549e">
<ul class="org-ul">
<li>有状态，内部直接保存</li>
<li>直接内联定义执行体</li>
<li>调用过程中从头到尾执行体内所有代码</li>
<li>输入相同的情况下，输出可能不同</li>
<li>有副作用，非多线程安全</li>
<li>定义时可以多种方式安全地引用外部变量</li>
<li>调用简单，不需要传入保存状态的参数</li>
</ul>
</div>
</div>

<div id="outline-container-org39ba12b" class="outline-3">
<h3 id="org39ba12b">协程（Coroutine）</h3>
<div class="outline-text-3" id="text-org39ba12b">
<ul class="org-ul">
<li>有状态，内部直接保存</li>
<li>需要独立定义执行体</li>
<li>调用过程中直接从上次的运行状态继续运行</li>
<li>输入相同的情况下，输出可能不同</li>
<li>严禁多线程访问</li>
<li>调用简单，不需要传入保存状态的参数</li>
</ul>
</div>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[log4cxx使用心得]]></title>
            <link>/article/log4cxx-4f7f75285fc35f97.html</link>
            <guid>/article/log4cxx-4f7f75285fc35f97.html</guid>
            <pubDate>Tue, 17 Jun 2008 02:01:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
简介
</p>

<p>
apache出品必属精品。正宗c++日志库，与log4j一脉相承。
</p>

<p>
<a href="http://logging.apache.org/log4cxx/index.html">http://logging.apache.org/log4cxx/index.html</a>
</p></li>

<li><p>
下载、编译、安装
</p>

<p>
打算安装到${HOME}/libs目录下：
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #A020F0;">cd</span> ~/libs
wget http://mirror.bjtu.edu.cn/apache//apr/apr-1.4.4.tar.bz2
tar xjvf apr-1.4.4.tar.bz2
<span style="color: #A020F0;">cd</span> apr-1.4.4
./configure --prefix=${<span style="color: #0084C8; font-weight: bold;">HOME</span>}/libs &amp;&amp; make &amp;&amp; make install
<span style="color: #A020F0;">cd</span> ..
wget http://mirror.bjtu.edu.cn/apache//apr/apr-util-1.3.11.tar.bz2
tar xjvf apr-util-1.3.11.tar.bz2
<span style="color: #A020F0;">cd</span> apr-util-1.3.11
./configure --prefix=${<span style="color: #0084C8; font-weight: bold;">HOME</span>}/libs --with-apr=${<span style="color: #0084C8; font-weight: bold;">HOME</span>}/libs &amp;&amp; make &amp;&amp; make instal<span style="text-decoration: underline;">l</span>
<span style="color: #A020F0;">cd</span> ..
wget http://apache.etoak.com//logging/log4cxx/0.10.0/apache-log4cxx-0.10.0.tar.g<span style="text-decoration: underline;">z</span>
tar xzvf apache-log4cxx-0.10.0.tar.gz
<span style="color: #A020F0;">cd</span> apache-log4cxx-0.10.0
./configure --with-charset=utf-8 --prefix=${<span style="color: #0084C8; font-weight: bold;">HOME</span>}/libs --with-apr=${<span style="color: #0084C8; font-weight: bold;">HOME</span>}/libs -<span style="text-decoration: underline;">-with-apr-util=${</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">HOME</span><span style="text-decoration: underline;">}/libs &amp;&amp; make &amp;&amp; make install</span>
</pre>
</div></li>

<li><p>
使用例子
</p>

<p>
<code>hello.cpp</code> ：
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">"log4cxx/logger.h"</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">"log4cxx/propertyconfigurator.h"</span>

<span style="color: #A52A2A; font-weight: bold;">static</span> <span style="color: #F5666D;">log4cxx</span>::<span style="color: #2F8B58; font-weight: bold;">LoggerPtr</span> <span style="color: #00578E; font-weight: bold;">logger</span>(<span style="color: #F5666D;">log4cxx</span>::<span style="color: #F5666D;">Logger</span>::getLogger(<span style="color: #4E9A06;">"hello"</span>));

<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">argc</span>, <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">argv</span>[])
{
<span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">log4cxx</span>::<span style="color: #F5666D;">PropertyConfigurator</span>::configure(<span style="color: #4E9A06;">"./log4cxx_hello.properties"</span>);
<span style="background-color: #E6E6E6;"> </span> LOG4CXX_INFO(logger, <span style="color: #4E9A06;">"&#20320;&#22909;&#65292;log4cxx!"</span>);
<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">return</span> 0;
}
</pre>
</div>

<p>
<code>log4cxx_hello.properties</code> ：
</p>
<pre class="example">
log4j.rootLogger=debug, R

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

# Pattern to output the caller's file name and line number.
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n

log4j.appender.R=org.apache.log4j.RollingFileAppender
log4j.appender.R.File=./hello.log

log4j.appender.R.MaxFileSize=100KB
# Keep one backup file
log4j.appender.R.MaxBackupIndex=10

log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=%5p %c [%t] (%F:%L) - %m%n
</pre>

<p>
编译：
</p>
<div class="org-src-container">
<pre class="src src-sh">g++ -o hello hello.cpp -I${<span style="color: #0084C8; font-weight: bold;">HOME</span>}/libs/include ${<span style="color: #0084C8; font-weight: bold;">HOME</span>}/libs/lib/liblog4cxx.a ${<span style="color: #0084C8; font-weight: bold;">HO</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">ME</span><span style="text-decoration: underline;">}/libs/lib/libaprutil-1.a ${</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">HOME</span><span style="text-decoration: underline;">}/libs/lib/libapr-1.a  -lexpat -lpthread</span>
</pre>
</div></li>

<li><p>
注意事项
</p>

<p>
由于一个日志文件写满后会重命名所有已有的日志文件，配置过大MaxBackupIndex的会有性能问题，因此log4cxx编译时限制了它的大小（大概十多个）以避免配置的MaxBackupIndex过大，如果要设置更大一点的MaxFileSize来保存更多日志，需要在编译前进行修改。
</p>

<p>
参考：<a href="http://objectmix.com/apache/684503-urgent-log4cxx-large-window-sizes-not-allowed.html">http://objectmix.com/apache/684503-urgent-log4cxx-large-window-sizes-not-allowed.html</a>
</p></li>

<li>使用技巧
<ul class="org-ul">
<li><p>
决定配置文件的格式（xml，property）。以使用相应的配置器（Configurator）装入配置文件。
</p>

<p>
xml虽较property格式繁锁，支持的配置面更全，而property格式的配置文件使用更简单，容易在网上找到现成的配置文件。
</p></li>

<li><p>
logger命名
</p>

<p>
logger名称反映了软件模块，如果有代表软件模块的类，则在类中包含以该类类名命名的logger对象，该模块功能相关代码通过该logger进行日志记录。另外可将logger对象作为全局变量，方便使用，特别是当软件模块较松散，并无对应的封装类时。
</p></li>

<li>在代码中适当地放置日志代码。引用适当的日志对象，对日志进行适当分级。</li>

<li>余下的工作就是修改配置文件，对日志进行控制了。</li>
</ul></li>
</ul>

<p>
　　使用配置文件的好处就是可以方便地配置日志而不需要修改源代码，可以在配置文件中方便配置日志过滤、格式、日志目的地。
</p>

<ul class="org-ul">
<li>体验</li>
</ul>

<p>
　之前产品中用到的是log4cplus，但是常常有写日志崩溃的情况出现，使用log4cxx正是用于解决该崩溃。</p>
]]></content:encoded>
        </item>
    </channel>
</rss>