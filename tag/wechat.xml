<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>wechat - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/wechat.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Mon, 24 Apr 2017 07:33:21 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>wechat - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/wechat.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[微信公众号后台开发需要缓存的凭据]]></title>
            <link>/article/5fae4fe1516c4f1753f7540e53f05f0053d1970089817f135b58768451ed636e.html</link>
            <guid>/article/5fae4fe1516c4f1753f7540e53f05f0053d1970089817f135b58768451ed636e.html</guid>
            <pubDate>Mon, 10 Apr 2017 10:03:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
根据《<a href="https://mp.weixin.qq.com/wiki/7/85eff372c164ddc66c47777dc972279f.html">接口频率限制说明 - 微信公众平台开发者文档</a>》，很多接口（API）都有调用次数限制，凭据（Token）使用过程中需注意超时、刷新。对这些凭据进行缓存一方面可以避免超出限制被平台拒绝服务，减少微信公众号接口调用次数也能够减少服务响应时间。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">全局接口调用凭据</h2>
<div class="outline-text-2" id="text-1">
<p>
根据《<a href="https://mp.weixin.qq.com/wiki/14/9f9c82c1af308e3b14ba9b973f99a8ba.html">获取access token - 微信公众平台开发者文档</a>》中的描述，全局接口调用凭据有以下特性：
</p>


<ul class="org-ul">
<li>每日调用次数限制

<p>
新注册帐号每日 2000 次，认证服务号每日 100000 次。
</p>
</li>
</ul>


<ul class="org-ul">
<li>过期时间限制

<p>
当前为 7200 秒
</p>
</li>
</ul>


<ul class="org-ul">
<li>过期前需重新获取（刷新）

<p>
旧凭据会失效，刷新过程中公众平台会保证新、旧凭据短时间内同时可用。
</p>
</li>
</ul>


<p>
后台服务往往有多个，而且会多机器、多进程方式部署，所以必须全局缓存该凭据，如使用 <code>Redis</code> 或 <code>Memcached</code> 来缓存；如果每一处业务代码发现凭据过期时擅自去重新获取凭据，高并发情况下可能瞬间出现大量的刷新操作，导致超出每日的接口调用次数限制，最好由一个中控服务负责凭据的管理，其它业务服务需要凭据时访问中控服务，由中控服务来负责凭据的获取、刷新。
</p>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">微信网页授权凭据</h2>
<div class="outline-text-2" id="text-2">
<p>
根据《 <a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140183&token=&lang=zh_CN">微信公众平台-微信网页授权</a> 》中的描述，网页授权接口调用凭据有以下特性：
</p>


<ul class="org-ul">
<li>每日调用次数限制

<p>
无
</p>
</li>
</ul>


<ul class="org-ul">
<li>过期时间限制

<p>
当前为 7200 秒
</p>
</li>
</ul>


<ul class="org-ul">
<li>过期前需重新刷新
</li>
</ul>


<p>
网页授权凭据是通过用户授权码（ <code>code</code> ）换取的，用户授权码是一次性的，与用户的后继会话交互要依赖该授权凭据（Token）。后台服务往往有多个，而且会多机器、多进程方式部署，所以必须全局缓存该凭据，并在过期前刷新该凭据。
</p>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">微信JS接口的临时票据</h2>
<div class="outline-text-2" id="text-3">
<p>
根据《<a href="https://mp.weixin.qq.com/wiki?action=doc&id=mp1421141115&t=0.5032559735352876#fl1">S-SDK使用权限签名算法-获取jsapi_ticket</a> 》中的描述，微信JS接口的临时票据有以下特性：
</p>


<ul class="org-ul">
<li>每日调用次数限制

<p>
认证服务号每日 1000000 次
</p>
</li>
</ul>


<ul class="org-ul">
<li>过期时间限制

<p>
当前为 7200 秒
</p>
</li>
</ul>


<ul class="org-ul">
<li>过期前需重新获取（刷新）
</li>
</ul>


<p>
后台服务往往有多个，而且会多机器、多进程方式部署，所以必须全局缓存该凭据，并在过期前重新获取。</p>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>