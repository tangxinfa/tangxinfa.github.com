<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>flashcache - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/flashcache.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Thu, 09 Aug 2018 07:29:36 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>flashcache - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/flashcache.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[Zabbix添加Flashcache监控]]></title>
            <link>/article/zabbix-6dfb52a0-flashcache-76d163a7.html</link>
            <guid>/article/zabbix-6dfb52a0-flashcache-76d163a7.html</guid>
            <pubDate>Fri, 29 May 2015 08:27:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org42fcd10" class="outline-2">
<h2 id="org42fcd10">下载 <code>Zabbix</code> 的 <code>Flashcache</code> 开源模板</h2>
<div class="outline-text-2" id="text-org42fcd10">
<div class="org-src-container">
<pre class="src src-sh">git clone https://github.com/lesovsky/zabbix-extensions.git
</pre>
</div>
</div>
</div>

<div id="outline-container-org9bdb31f" class="outline-2">
<h2 id="org9bdb31f">设置 <code>zabbix_agentd</code></h2>
<div class="outline-text-2" id="text-org9bdb31f">
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#23433;&#35013;&#37197;&#32622;&#25991;&#20214;</span>
cp zabbix-extensions/files/flashcache/flashcache.conf /usr/local/etc/zabbix_agen<span style="text-decoration: underline;">td.conf.d/</span>
<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#23433;&#35013;&#33050;&#26412;</span>
mkdir /usr/local/etc/zabbix_scripts
cp zabbix-extensions/files/flashcache/scripts/* /usr/local/etc/zabbix_scripts/
<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#20462;&#25913;&#37197;&#32622;&#25991;&#20214;&#20013;&#24341;&#29992;&#30340;&#33050;&#26412;&#36335;&#24452;</span>
sed --in-place -e <span style="color: #8abeb7;">'s/\/usr\/libexec\/zabbix-extensions\//\/usr\/local\/etc\/zabb</span><span style="color: #8abeb7; text-decoration: underline;">ix_/g'</span><span style="text-decoration: underline;"> /usr/local/etc/zabbix_agentd.conf.d/flashcache.conf</span>
<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#21253;&#21547;&#37197;&#32622;&#25991;&#20214;&#30446;&#24405;</span>
sed --in-place -e <span style="color: #8abeb7;">'s/# Include=\/usr\/local\/etc\/zabbix_agentd\.conf\.d\//Inclu</span><span style="color: #8abeb7; text-decoration: underline;">de=\/usr\/local\/etc\/zabbix_agentd\.conf\.d\//g'</span><span style="text-decoration: underline;"> /usr/local/etc/zabbix_agentd.conf</span>
</pre>
</div>

<p>
重启 <code>zabbix_agentd</code> 生效配置。
</p>
</div>
</div>

<div id="outline-container-org38c56be" class="outline-2">
<h2 id="org38c56be">设置 <code>Zabbix</code> 后台</h2>
<div class="outline-text-2" id="text-org38c56be">
<ul class="org-ul">
<li><p>
导入 <code>Flashcache</code> 模板
</p>

<p>
Configuration -&gt; Templates -&gt; Import -&gt; Import file 选择之前下载的 <code>zabbix-extensions/files/flashcache/flashcache-template.xml</code>
</p></li>

<li><p>
应用 <code>Flashcache</code> 模板
</p>

<p>
Configuration -&gt; Hosts 下选择要应用到的主机 -&gt; Templates -&gt; Link new templates 选择 <code>Flashcache-Template</code></p></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Flashcache优化]]></title>
            <link>/article/flashcache-4f185316.html</link>
            <guid>/article/flashcache-4f185316.html</guid>
            <pubDate>Fri, 22 May 2015 10:12:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
调整 dev.flashcache.&lt;cache name&gt;.dirty_thresh_pct
</p>

<p>
脏缓存回写阈值（百分比），默认 <code>20</code> 。
</p>

<p>
仅 <code>Write-Back</code> 模式下有效。
</p>

<p>
调大该值可以减轻写压力（缓存数据写入HDD及元数据写入SSD），缓存已满时该缓存块不能被淘汰，减少了可用缓存空间。
</p>

<p>
如果最近写入的数据很可能是热数据，可以考虑调大该值，建议调到 <code>90</code> ：
</p>

<div class="org-src-container">
<pre class="src src-sh">sysctl -w dev.flashcache.&lt;cache name&gt;.dirty_thresh_pct=90
</pre>
</div></li>

<li><p>
调整 dev.flashcache.reclaim_policy
</p>

<p>
缓存空间回收策略，默认 <code>FIFO(0)</code> 。
</p>

<p>
改为 <code>LRU(1)</code> :
</p>

<div class="org-src-container">
<pre class="src src-sh">sysctl -w dev.flashcache.&lt;cache name&gt;.reclaim_policy=1
</pre>
</div></li>

<li>辅助调试

<ul class="org-ul">
<li><p>
统计清零
</p>

<div class="org-src-container">
<pre class="src src-sh">sysctl -w dev.flashcache.&lt;cache name&gt;.zero_stats=1
</pre>
</div></li>

<li><p>
快速停止
</p>

<p>
Flashcache在停止时会将SSD中的脏数据写回到HDD中，这是非常耗时的，会导致关机慢。
</p>

<p>
手工快速停止
</p>

<div class="org-src-container">
<pre class="src src-sh">service flashcache forcestop
</pre>
</div>

<p>
总是快速停止
</p>

<div class="org-src-container">
<pre class="src src-sh">sysctl -w dev.flashcache.sdb+sdc1.fast_remove=1
</pre>
</div></li>
</ul></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[FlashCache多盘方案实战]]></title>
            <link>/article/flashcache-591a76d865b968485b9e6218.html</link>
            <guid>/article/flashcache-591a76d865b968485b9e6218.html</guid>
            <pubDate>Wed, 29 Apr 2015 09:38:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
目标系统为单SSD+多HDD，将多HDD创建为RAID5逻辑盘，然后使用FlashCache将SSD做为RAID5逻辑盘的缓存。
</p>

<div id="outline-container-org5d3e779" class="outline-2">
<h2 id="org5d3e779">系统信息</h2>
<div class="outline-text-2" id="text-org5d3e779">
<ul class="org-ul">
<li><p>
OS
</p>

<p>
CentOS release 6.5 (Final) x86_64
</p></li>

<li><p>
CPU
</p>

<p>
8
</p>

<p>
Intel(R) Atom(TM) CPU  C2750  @ 2.40GHz
</p></li>

<li><p>
MEMORY
</p>

<p>
4
</p>

<p>
TOTAL 16G
</p></li>

<li><p>
HDD
</p>

<p>
4
</p>

<p>
WDC WD4000FYYZ-0 4TB 7200转
</p>

<p>
/dev/sdc /dev/sdd /dev/sde /dev/sdf
</p></li>

<li><p>
SSD
</p>

<p>
1
</p>

<p>
INTEL SSDSC2BB30 300GB
</p>

<p>
/dev/sdb
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org8027983" class="outline-2">
<h2 id="org8027983">卸载HDD及SSD盘</h2>
<div class="outline-text-2" id="text-org8027983">
<div class="org-src-container">
<pre class="src src-sh">umount /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdb
</pre>
</div>

<p>
确保系统重启后不会自动挂载这些盘。
</p>
</div>
</div>

<div id="outline-container-org4ceba48" class="outline-2">
<h2 id="org4ceba48">将多HDD创建为RAID5逻辑盘</h2>
<div class="outline-text-2" id="text-org4ceba48">
<ul class="org-ul">
<li><p>
格式化HDD盘
</p>

<div class="org-src-container">
<pre class="src src-sh">parted /dev/sdc
(parted) mklabel gpt
(parted) unit TB
(parted) mkpart primary 0.00TB 4.00TB
(parted) print
</pre>
</div>

<p>
其它HDD盘也做如上处理.
</p></li>

<li><p>
创建RAID5逻辑分区
</p>

<div class="org-src-container">
<pre class="src src-sh">mdadm --create /dev/md0 --level=raid5 --raid-devices=4 /dev/sd[c-f]1
parted /dev/md0
(parted) mklabel gpt
(parted) unit TB
(parted) mkpart primary 0.00TB 12.00TB
(parted) print
(parted) quit
</pre>
</div></li>

<li><p>
保存RAID5配置
</p>

<div class="org-src-container">
<pre class="src src-sh">mdadm --detail --scan &gt; /etc/mdadm.conf
</pre>
</div>

<p>
参考：<a href="https://raid.wiki.kernel.org/index.php/RAID_setup#Saving_your_RAID_configuration">Saving your RAID configuration</a>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgbb70fe1" class="outline-2">
<h2 id="orgbb70fe1">安装Flashcache</h2>
<div class="outline-text-2" id="text-orgbb70fe1">
<div class="org-src-container">
<pre class="src src-sh">wget https://github.com/facebook/flashcache/archive/stable_v3.1.3.zip -O flashca<span style="text-decoration: underline;">che_stable_v3.1.3.zip</span>
unzip flashcache_stable_v3.1.3.zip
<span style="color: #b294bb;">cd</span> flashcache-stable_v3.1.3
make
make install
modprobe flashcache
</pre>
</div>
</div>
</div>

<div id="outline-container-org583aa51" class="outline-2">
<h2 id="org583aa51">创建Flashcache混合设备</h2>
<div class="outline-text-2" id="text-org583aa51">
<div class="org-src-container">
<pre class="src src-sh">flashcache_create -p around cachedev /dev/sdb /dev/md0p1
mkfs.ext4 /dev/mapper/cachedev
</pre>
</div>
</div>
</div>

<div id="outline-container-org9c76632" class="outline-2">
<h2 id="org9c76632">挂载Flashcache混合设备</h2>
<div class="outline-text-2" id="text-org9c76632">
<div class="org-src-container">
<pre class="src src-sh">mkdir /data
mount /dev/mapper/cachedev /data
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd2e1314" class="outline-2">
<h2 id="orgd2e1314">系统重启后需要重新创建并挂载Flashcache设备</h2>
<div class="outline-text-2" id="text-orgd2e1314">
<div class="org-src-container">
<pre class="src src-sh">flashcache_create -p around cachedev /dev/sdb /dev/md0p1
mount /dev/mapper/cachedev /data
</pre>
</div>

<p>
注意：使用除 <code>writethrough</code> 和 <code>writearound</code> 以外的模式需要使用 <code>flashcache_load</code> 重新创建设备。
</p>
</div>
</div>

<div id="outline-container-org6617ef2" class="outline-2">
<h2 id="org6617ef2">写入速度测试</h2>
<div class="outline-text-2" id="text-org6617ef2">
<p>
循环创建60MiB大小的文件，测得的磁盘写入速度为 <b>35.6MiB</b> ，磁盘读取速度为 <b>2.1MiB</b> 。
</p>
</div>
</div>

<div id="outline-container-org3056bb3" class="outline-2">
<h2 id="org3056bb3">读取速度测试</h2>
<div class="outline-text-2" id="text-org3056bb3">
<ul class="org-ul">
<li>500并发120G文件每次读取32KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
2107
</p></li>

<li><p>
传输速度
</p>

<p>
132.35MiB/s
</p></li>
</ul></li>

<li>500并发500G文件每次读取32KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
1937
</p></li>

<li><p>
传输速度
</p>

<p>
61.09MiB
</p></li>
</ul></li>

<li>500并发1T文件每次读取32KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
1574
</p></li>

<li><p>
传输速度
</p>

<p>
49.64MiB/s
</p></li>
</ul></li>

<li>500并发120G文件每次读取64KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
5006
</p></li>

<li><p>
传输速度
</p>

<p>
157.88MiB/s
</p></li>
</ul></li>

<li>500并发500G文件每次读取64KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
897
</p></li>

<li><p>
传输速度
</p>

<p>
56.37MiB/s
</p></li>
</ul></li>

<li>500并发1T文件每次读取64KB顺序读取

<ul class="org-ul">
<li><p>
请求处理速度
</p>

<p>
782
</p></li>

<li><p>
传输速度
</p>

<p>
49.10MiB/s
</p></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-org02a53f3" class="outline-2">
<h2 id="org02a53f3">注意事项</h2>
<div class="outline-text-2" id="text-org02a53f3">
<ul class="org-ul">
<li><p>
重建（rebuild）
</p>

<p>
当一块盘坏掉后，如果配置了热备盘（Hot spare disk），会自动重建，请将坏盘换掉并配置成热备盘；\
如果未配置热备盘，读性能会下降（坏盘中的数据需要全部通过计算重现），请将坏盘换掉系统会自动进行重建。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org3a9922d" class="outline-2">
<h2 id="org3a9922d">潜在的优化选项</h2>
<div class="outline-text-2" id="text-org3a9922d">
<ul class="org-ul">
<li>开启SSD写Cache</li>

<li><p>
禁用文件、目录访问时间戳
</p>

<p>
noatime,nodiratime
</p></li>

<li><p>
<code>Write-Back</code> 模式优化
</p>

<div class="org-src-container">
<pre class="src src-sh">sysctl -w dev.flashcache.sdb+md0p1.dirty_thresh_pct=80
</pre>
</div></li>
</ul>
</div>
</div>


<div id="outline-container-orga5ef442" class="outline-2">
<h2 id="orga5ef442">卸载Flashcache设备</h2>
<div class="outline-text-2" id="text-orga5ef442">
<div class="org-src-container">
<pre class="src src-sh">umount /dev/mapper/cachedev
dmsetup remove cachedev
</pre>
</div>
</div>
</div>

<div id="outline-container-org1bb3936" class="outline-2">
<h2 id="org1bb3936">Q&amp;A</h2>
<div class="outline-text-2" id="text-org1bb3936">
<ul class="org-ul">
<li><p>
重新调整 Flashcache 选项会不会删除数据？
</p>

<p>
<code>writethrough</code> 、 <code>writearound</code> 模式不会，其它的会。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org9da81f3" class="outline-2">
<h2 id="org9da81f3">相关参考</h2>
<div class="outline-text-2" id="text-org9da81f3">
<dl class="org-dl">
<dt>《<a href="http://lzw.me/a/linux-lvm.html">Linux LVM逻辑卷管理详细介绍</a>》</dt><dd>非常好的LVM入门文章</dd>

<dt>《<a href="http://www.linux-mag.com/id/7582/">Pick Your Pleasure: RAID-0 mdadm Striping or LVM Striping?</a>》</dt><dd>LVM与RAID-0的比较</dd>

<dt>《<a href="http://www.tecmint.com/create-raid0-in-linux/">Creating Software RAID0 (Stripe) on ‘Two Devices’ Using ‘mdadm’ Tool in Linux – Part 2</a>》</dt><dd>构建RAID-0教程</dd>

<dt>《<a href="http://zengrong.net/post/2014.htm">在CentOS 6.1上配置 4TB硬盘+RAID1</a>》</dt><dd>使用 <code>parted</code> 代替 <code>fdisk</code> 对大于2TB的硬盘进行分区</dd>

<dt>《<a href="http://wiki.mikejung.biz/Software_RAID">Software RAID - How to Optimize Software RAID on Linux using Mdadm</a>》</dt><dd>优化RAID</dd>

<dt>《<a href="http://sysadmin.blog.51cto.com/83876/236802">RAID5单盘故障读写分析</a>》</dt><dd>RAID5一块盘坏掉后的情形分析</dd>
</dl>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在Archlinux上使用FlashCache]]></title>
            <link>/article/5728-archlinux-4e0a4f7f7528-flashcache.html</link>
            <guid>/article/5728-archlinux-4e0a4f7f7528-flashcache.html</guid>
            <pubDate>Thu, 23 Apr 2015 12:16:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://github.com/facebook/flashcache/">Flashcache</a> 是 <a href="https://www.facebook.com">Facebook</a> 的一个开源项目，通过将固态硬盘（SSD）做为机械硬盘（HDD）的缓存层，提升磁盘I/O性能。
</p>

<p>
<a href="https://github.com/facebook/flashcache/">Flashcache</a> 位于磁盘驱动层与文件系统层之间，是一个 <code>linux</code> 内核模块。
</p>

<div id="outline-container-orgc48ee6b" class="outline-2">
<h2 id="orgc48ee6b">编译安装</h2>
<div class="outline-text-2" id="text-orgc48ee6b">
<p>
由于Archlinux总是使用最新的linux内核，最好从最新的 <a href="https://github.com/facebook/flashcache/">Flashcache</a> 源代码进行编译安装。
</p>

<div class="org-src-container">
<pre class="src src-sh">git clone https://github.com/facebook/flashcache.git
<span style="color: #b294bb;">cd</span> flashcache
make
sudo make install
</pre>
</div>
</div>
</div>

<div id="outline-container-org6037a85" class="outline-2">
<h2 id="org6037a85">挂载模块</h2>
<div class="outline-text-2" id="text-org6037a85">
<div class="org-src-container">
<pre class="src src-sh">sudo insmod /lib/modules/<span style="color: #b294bb;">`uname -r`</span>/extra/flashcache/flashcache.ko
</pre>
</div>

<ul class="org-ul">
<li><p>
修复挂载错误
</p>

<blockquote>
<p>
insmod: ERROR: could not insert module /lib/modules/3.19.3-3-ARCH/extra/flashcache/flashcache.ko: Unknown symbol in module
</p>
</blockquote>

<p>
通过 <code>dmesg | grep flashcache</code> 可以看到以下错误信息：
</p>

<blockquote>
<p>
[ 2130.514615] flashcache: Unknown symbol dm_put_device (err 0)<br />
[ 2130.514654] flashcache: Unknown symbol dm_io_client_create (err 0)<br />
[ 2130.514693] flashcache: Unknown symbol dm_kcopyd_client_create (err 0)<br />
[ 2130.514738] flashcache: Unknown symbol dm_unregister_target (err 0)<br />
[ 2130.514774] flashcache: Unknown symbol dm_io_client_destroy (err 0)<br />
[ 2130.514798] flashcache: Unknown symbol dm_kcopyd_copy (err 0)<br />
[ 2130.514821] flashcache: Unknown symbol dm_register_target (err 0)<br />
[ 2130.514846] flashcache: Unknown symbol dm_kcopyd_client_destroy (err 0)<br />
[ 2130.514870] flashcache: Unknown symbol dm_table_get_mode (err 0)<br />
[ 2130.514895] flashcache: Unknown symbol dm_io (err 0)<br />
[ 2130.514915] flashcache: Unknown symbol dm_get_device (err 0)
</p>
</blockquote>

<p>
先挂载 <code>dm-mod</code> 模块再挂载 <code>flashcache</code> 模块即可：
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo modprobe dm-mod
sudo insmod /lib/modules/<span style="color: #b294bb;">`uname -r`</span>/extra/flashcache/flashcache.ko
</pre>
</div>

<p>
参考：<a href="https://bbs.archlinux.org/viewtopic.php?id=30478">No entry for device-mapper found</a>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org717cc2d" class="outline-2">
<h2 id="org717cc2d">模拟实验</h2>
<div class="outline-text-2" id="text-org717cc2d">
<p>
参考：<a href="http://my.oschina.net/renguijiayi/blog/303747">flashcache的实现与用法</a>
</p>

<ul class="org-ul">
<li><p>
创建SSD模拟设备
</p>

<p>
使用内存文件模拟块设备（1G）
</p>

<div class="org-src-container">
<pre class="src src-sh">dd <span style="color: #f0c674;">if</span>=/dev/zero <span style="color: #f0c674;">of</span>=/dev/shm/ssd.img <span style="color: #f0c674;">bs</span>=1024k <span style="color: #f0c674;">count</span>=1024
sudo losetup /dev/loop1 /dev/shm/ssd.img
</pre>
</div></li>

<li><p>
创建HDD模拟设备
</p>

<p>
使用普通磁盘文件模拟块设备（5G）
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo dd <span style="color: #f0c674;">if</span>=/dev/zero <span style="color: #f0c674;">of</span>=/hdd.img <span style="color: #f0c674;">bs</span>=1024k <span style="color: #f0c674;">count</span>=5120
sudo losetup /dev/loop2 /hdd.img
</pre>
</div></li>

<li><p>
创建Flashcache混合设备
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo flashcache_create -p around cachedev /dev/loop1 /dev/loop2
sudo mkfs.ext4 /dev/mapper/cachedev
</pre>
</div></li>

<li><p>
挂载Flashcache混合设备
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo mkdir /data
sudo mount /dev/mapper/cachedev /data
</pre>
</div></li>
</ul>

<p>
/data目录下的数据读写就已经在使用Flashcache了。
</p>

<ul class="org-ul">
<li><p>
创建用来测试的数据文件（1G）
</p>

<div class="org-src-container">
<pre class="src src-sh">dd <span style="color: #f0c674;">if</span>=/dev/urandom <span style="color: #f0c674;">of</span>=/dev/shm/test.dat <span style="color: #f0c674;">bs</span>=1024k <span style="color: #f0c674;">count</span>=1024
</pre>
</div></li>

<li><p>
测算使用HDD写耗时
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #8abeb7;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /dev/shm/test.dat /'</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m4.751s
user    0m0.000s
sys 0m0.600s
</pre></li>

<li><p>
测算使用HDD读耗时
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #8abeb7;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /test.dat /dev/shm/</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m10.580s
user    0m0.010s
sys 0m0.727s
</pre></li>

<li><p>
测算使用Flashcache写耗时
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #8abeb7;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /dev/shm/test.dat /data/'</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m7.363s
user    0m0.000s
sys 0m0.760s
</pre></li>

<li><p>
测算使用Flashcache读耗时
</p>

<p>
第一轮测试（缓存预热）
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #8abeb7;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /data/test.dat /dev/shm/'</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m9.557s
user    0m0.013s
sys 0m1.157s
</pre>

<p>
第二轮测试（缓存生效）
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo sh -c <span style="color: #8abeb7;">'echo 1 &gt; /proc/sys/vm/drop_caches; time cp /data/test.dat /dev/shm/'</span>
</pre>
</div>

<p>
输出：
</p>

<pre class="example">
real    0m3.107s
user    0m0.000s
sys 0m0.850s
</pre></li>

<li><p>
清除测试数据
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo rm /test.dat /dev/shm/test.dat /data/test.dat
</pre>
</div></li>

<li><p>
结果分析
</p>

<ul class="org-ul">
<li>Flashcache读性能： <b>提升70%</b></li>

<li>Flashcache写性能： <b>降低55%</b></li>
</ul>

<p>
因为使用了 <code>Write-Around</code> 方式，所以提升了读性能，降低了写性能。
</p></li>

<li><p>
清除模拟环境
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo umount /data
sudo dmsetup remove cachedev
sudo losetup -d /dev/loop1
sudo rm /dev/shm/ssd.img
sudo losetup -d /dev/loop2
sudo rm /hdd.img
sudo rmdir /data
</pre>
</div></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>