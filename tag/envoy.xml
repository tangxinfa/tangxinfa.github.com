<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>envoy - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/envoy.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Thu, 23 Aug 2018 13:25:14 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>envoy - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/envoy.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[使用 Envoy 做为 socket.io 的前端代理]]></title>
            <link>/article/4f7f7528-envoy-505a4e3a-socket.io-7684524d7aef4ee37406.html</link>
            <guid>/article/4f7f7528-envoy-505a4e3a-socket.io-7684524d7aef4ee37406.html</guid>
            <pubDate>Mon, 20 Nov 2017 06:39:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-orgc2b5761" class="outline-2">
<h2 id="orgc2b5761">示例 socket.io 项目</h2>
<div class="outline-text-2" id="text-orgc2b5761">
<ul class="org-ul">
<li><p>
编译
</p>

<div class="org-src-container">
<pre class="src src-sh">go get github.com/tangxinfa/envoy-socket.io-example
<span style="color: #b294bb;">cd</span> $<span style="color: #f0c674;">GOPATH</span>/src/github.com/tangxinfa/envoy-socket.io-example
glide install
go build
</pre>
</div></li>

<li><p>
运行
</p>

<div class="org-src-container">
<pre class="src src-sh">./envoy-socket.io-example -addr 127.0.0.1:8001 -logtostderr
</pre>
</div></li>

<li><p>
用浏览器打开 <code>http://localhost:8001</code>
</p>

<p>
正常情况下，会收到 <code>welcome</code> 消息，表示 <code>socket.io</code> 连接成功，可以在下方的编辑框输入内容，服务器会 echo 回来。
这是客户端直接 socket.io 服务，接下来将展示使用 Envoy 做为前端代理来访问后端的 socket.io 服务。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org69d6e72" class="outline-2">
<h2 id="org69d6e72">修复 Envoy 的 Websocket 相关 Bug</h2>
<div class="outline-text-2" id="text-org69d6e72">
<p>
之前的 Envoy 版本为
</p>
<pre class="example">
commit 3e43c2225c8882918b36b4b7c7bb55c6af2db929
Author: Greg Greenway &lt;ggreenway@users.noreply.github.com&gt;
Date:   Wed Nov 15 14:48:38 2017 -0800

Fix v2 TcpProxy config (#2065)

Signed-off-by: Greg Greenway &lt;ggreenway@apple.com&gt;
</pre>

<p>
存在两个问题导致 Websocket 不可用：
</p>

<ul class="org-ul">
<li><p>
Connection 请求头包含多个值时未能正确处理，导致未正确判断出 Websocket 请求
</p>

<p>
Firefox 发起的 Websocket 请求 Connection 头的值为： <code>keep-alive, Upgrade</code> 。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
Envoy 向 Upstream 发起的 Websocket 请求多了一个 <code>transfer-encoding: chunked</code> 请求头
</p>

<p>
由于请求体是空的，所以是一个无效的 HTTP 请求。
</p></li>
</ul>


<p>
我提交了 Pull Request <a href="https://github.com/envoyproxy/envoy/pull/2070">#2070</a> ，已合到 <code>master</code> 分支，该问题已修复。
</p>
</div>
</div>

<div id="outline-container-org23c8c74" class="outline-2">
<h2 id="org23c8c74">将 Envoy 做为 socket.io 服务前端代理</h2>
<div class="outline-text-2" id="text-org23c8c74">
<ul class="org-ul">
<li><p>
启动 Envoy
</p>

<p>
使用是的修复 BUG 后的 Envoy。
</p>

<div class="org-src-container">
<pre class="src src-sh">~/Opensource/envoy/bazel-bin/source/exe/envoy-static --log-level trace --config-<span style="text-decoration: underline;">path ./envoy.json</span>
</pre>
</div></li>
</ul>


<ul class="org-ul">
<li><p>
用浏览器打开 <code>http://localhost:9001</code>
</p>

<p>
正常情况下，会收到 <code>welcome</code> 消息，表示 socket.io 连接成功，可以在下方的编辑框输入内容，服务器会 echo 回来。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org179ba66" class="outline-2">
<h2 id="org179ba66">将 Envoy 做为 socket.io 服务集群前端代理</h2>
<div class="outline-text-2" id="text-org179ba66">
<p>
在后台服务为集群的情况下，Envoy 会通过负载均衡将请求调度到所有服务结点，
对于无状态服务，不管 Envoy 使用什么样的负载均衡策略都可以正常工作，
但是对于有状态的服务，则要求将一个用户的请求总是调度到同一个服务结点。
</p>

<blockquote>
<p>
Socket.IO never assumes that WebSocket will just work, because in practice there’s a good chance that it won’t. Instead, it establishes a connection with XHR or JSONP right away, and then attempts to upgrade the connection to WebSocket. Compared to the fallback method which relies on timeouts, this means that none of your users will have a degraded experience.
</p>
</blockquote>
<p>
引用自 <a href="https://mashhurs.wordpress.com/2016/09/30/polling-vs-websocket-transport/">Socket.IO Polling vs. WebSocket Transport – on Balancing Methods</a>。
</p>

<p>
socket.io 的 <code>transports</code> 选项默认值为 <code>['polling', 'websocket']</code> ，
也就是说首先发一个 HTTP 轮询请求，根据响应决定是否升级到使用 <code>websocket</code> ，
这样在 Websocket 可用的情况下，会有两次 HTTP 交互，需确保两次 HTTP 交互
调度到同一个服务结点，socket.io 连接才能建立成功。
</p>

<p>
Envoy 本身支持多种负载均衡策略，适合这里的场景是 <code>Ring hash</code> 。
</p>

<blockquote>
<p>
Ring hash
</p>

<p>
The ring/modulo hash load balancer implements consistent hashing to upstream hosts. The algorithm is based on mapping all hosts onto a circle such that the addition or removal of a host from the host set changes only affect 1/N requests. This technique is also commonly known as “ketama” hashing. The consistent hashing load balancer is only effective when protocol routing is used that specifies a value to hash on. Currently the only implemented mechanism is to hash via HTTP header values in the HTTP router filter. 
</p>
</blockquote>

<p>
遗憾的是 Envoy 的 Websocket 实现过于简陋，当检测到 <code>Websocket</code> 升级请求时，
它以 <code>TcpProxy</code> 的方式连接上游服务器，检测到非 <code>Websocket</code> 升级请求时，
会正常地做为 HTTP 请求进行处理。由于 <code>TcpProxy</code> 只支持随机 Hash 算法选择上游服务结点，
会导致默认情况下 socket.io 连接无法建立。
</p>

<p>
通过指定 socket.io 的 <code>transports</code> 选项值为 <code>['websocket', 'polling']</code> ，
也就是首先尝试建立 <code>websocket</code> 连接，失败时再降级为 <code>polling</code> ，能够解决这个问题。
</p>

<p>
Envoy 的 <code>Ring hash</code> 是根据配置的请求头来计算 Hash 值的，刚刚有一个按特定 Cookie 计算 Hash 值的
Pull Request <a href="https://github.com/envoyproxy/envoy/pull/1766">Implement cookie hashing for v2 API #1766</a> 已经合并到 master 分支，官方文档方面还没有更新，
本文暂不采用。
</p>

<p>
一般 Web 前端都是通过自定义请求头或者 Cookie 中的特定字段来标识一个用户，由于 Cookie
可能会在交互过程中发生变化，因此不适合用于计算 Hash 值，而 Websocket 升级请求又不支持自定义请求头，
因此这两种常用的方式失效了。
</p>

<p>
另一个合理的选择是通过 <code>Referer</code> 请求头来计算 Hash，这是客户端网页的地址，不会在交互过程中变化，
只要想办法将用户的标识（如 ID）附在 URL 上，如：<a href="http://www.example.com/chat?uid=1234">http://www.example.com/chat?uid=1234</a> ，
就可以保证用户请求能够均衡地分布到所有服务结点上，同一用户的请求也会调度到同一个服务结点。
</p>

<p>
如下所示。
</p>

<ul class="org-ul">
<li><p>
启动服务集群
</p>

<div class="org-src-container">
<pre class="src src-sh">./envoy-socket.io-example -127.0.0.1:8002 -logtostderr &amp;
./envoy-socket.io-example -127.0.0.1:8003 -logtostderr &amp;
./envoy-socket.io-example -127.0.0.1:8004 -logtostderr &amp;
</pre>
</div></li>

<li><p>
启动 Envoy
</p>

<p>
使用是的修复 BUG 后的 Envoy。
</p>

<div class="org-src-container">
<pre class="src src-sh">~/Opensource/envoy/bazel-bin/source/exe/envoy-static --log-level trace --config-<span style="text-decoration: underline;">path ./envoy2.json</span>
</pre>
</div></li>
</ul>


<ul class="org-ul">
<li><p>
用浏览器打开多个 <code>http://localhost:9002/index2.html</code> 页面
</p>

<p>
正常情况下，每个页面都会收到 <code>welcome</code> 消息，表示 socket.io 连接成功，可以在下方的编辑框输入内容，服务器会 echo 回来。</p></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在浏览器中访问 gRPC 消息推送服务的一些思索]]></title>
            <link>/article/57286d4f89c856684e2d8bbf95ee-grpc-6d88606f63a89001670d52a176844e004e9b601d7d22.html</link>
            <guid>/article/57286d4f89c856684e2d8bbf95ee-grpc-6d88606f63a89001670d52a176844e004e9b601d7d22.html</guid>
            <pubDate>Thu, 26 Oct 2017 09:13:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
gRPC 数据编码采用 Protobuf、底层传输协议使用了 HTTP/2，支持双向流（ <code>Bidirectional streaming</code> ）接口，用来开发消息推送服务的再完美不过。
</p>

<p>
由于 gRPC 的实现需要访问 HTTP/2 的底层细节（如： Trailers），而这些实现细节浏览器上是无法访问到的，因此也就注定了无法在浏览器上直接进行调用 gRPC。
</p>

<p>
HTTP/2 在 2015 年底开始被广泛支持（参考 <a href="https://zh.wikipedia.org/wiki/HTTP/2">HTTP/2 - 维基百科，自由的百科全书</a>），另一个流行的消息推送技术 WebSocket 在 2013 年底开始被广泛支持（参考 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API#Browser_compatibility">WebSockets - Web APIs | MDN</a>）。从 <a href="http://caniuse.com/#search=HTTP2">HTTP/2支持情况</a> 页面可以看到 IE11 以下都不支持，从 <a href="http://caniuse.com/#search=WebSocket">WebSocket支持情况</a> 页面可以看到 IE11 以下及 Android 4.4 以下都不支持。相对来讲 WebSocket 更成熟，而且由于 <a href="https://socket.io/">socket.io</a> 的存在，即使在旧浏览器上也能提供服务。
</p>

<p>
现在的情况下，最好是开发一个 <a href="https://socket.io/">socket.io</a> 代理供浏览器访问 gRPC 服务，一个 WebSocket 连接可以很方便地映射到一个 gRPC 双向流（ Bidirectional streaming）接口。
</p>


<p>
下面是方案调研时接触的一些相关开源项目，供参考。
</p>

<div id="outline-container-orgd66af56" class="outline-2">
<h2 id="orgd66af56"><a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a></h2>
<div class="outline-text-2" id="text-orgd66af56">
<blockquote>
<p>
grpc-gateway is a plugin of protoc. It reads gRPC service definition, and generates a reverse-proxy server which translates a RESTful JSON API into gRPC. This server is generated according to custom options in your gRPC definition.
</p>
</blockquote>

<p>
grpc-gateway 为 Grpc 服务生成 HTTP/1.1 JSON RESTful 反向代理服务，使得 Grpc 服务可以被不方便采用 Grpc 的客户端访问。
</p>

<ul class="org-ul">
<li><p>
存在的问题
</p>

<p>
不支持双向流（Bidirectional streaming）
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org807a12a" class="outline-2">
<h2 id="org807a12a"><a href="https://github.com/tmc/grpc-websocket-proxy">grpc-websocket-proxy</a></h2>
<div class="outline-text-2" id="text-org807a12a">
<blockquote>
<p>
A proxy to transparently upgrade grpc-gateway streaming endpoints to use websockets
</p>
</blockquote>

<p>
<a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a> 的 WebSocket 代理，进行了多次协议转换：
</p>

<pre class="example">
WebSocket &lt;-&gt; HTTP/1.1 &lt;-&gt; gRPC
</pre>

<p>
在收到 WebSocket 连接后，会创建一个 HTTP/1.1 客户端，与 <a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a> 进行对接。
</p>

<p>
根据示例 Protobuf 协议文件中的描述，貌似支持 <code>Bidirectional streaming</code> ，但是 <a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a> 的 README 中明确声明了不打算支持 <code>True bi-directional streaming</code> ，理论上只要是基于 HTTP/1.1，就不可能实现  <code>Bidirectional streaming</code> 。
</p>

<p>
这个方案的一个优点就是 proxy 代码是根据 proto 定义自动生成的，开发效率超高。
</p>

<p>
然而运行效率低下，特别是维护大量长连接的消息推送应用，连接数要翻倍。
</p>
</div>
</div>

<div id="outline-container-org1271514" class="outline-2">
<h2 id="org1271514"><a href="https://socket.io/">socket.io</a></h2>
<div class="outline-text-2" id="text-org1271514">
<blockquote>
<p>
Socket.IO enables real-time bidirectional event-based communication.
It works on every platform, browser or device, focusing equally on reliability and speed. 
</p>
</blockquote>

<p>
<code>node.js</code> 下的实时双向通讯方案，优先使用 <code>websocket</code> 做为传输层，使用其它传输方式做为备选：ajax、jsonp 轮询，flash。
</p>

<p>
<a href="https://socket.io/">socket.io</a> 本身已经进化成了一种规范，有各种语言下的实现。
</p>

<p>
go 语言实现 <a href="https://github.com/googollee/go-socket.io">go-socket.io</a> ，这个项目 README 中建议使用 v1.4 版本，实际使用时发现浏览器直接关闭时服务器未能检测客户端离线，未转化成 "Disconnect" 事件，使用 master 分支则没有这个问题：
</p>

<div class="org-src-container">
<pre class="src src-sh">go get github.com/googollee/go-socket.io
</pre>
</div>

<p>
go 的 socket.io 实现没有官方支持，很不完善，<a href="https://github.com/googollee/go-socket.io">go-socket.io</a> 只有服务器端实现，已
经很久没有更新了，而 go 的 socket.io 客户端实现就更不靠谱了，实际使用时很多问
题，直接使用 websocket 会更靠谱一些。
</p>
</div>
</div>

<div id="outline-container-org3324199" class="outline-2">
<h2 id="org3324199"><a href="https://lyft.github.io/envoy/">envoy</a></h2>
<div class="outline-text-2" id="text-org3324199">
<p>
<a href="https://lyft.github.io/envoy/">envoy</a> 有一些插件完成了部分功能：
</p>

<ul class="org-ul">
<li><p>
<a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_http1_bridge_filter.html">gRPC HTTP/1.1 bridge</a>
</p>

<p>
实现了通过 HTTP/1.1 协议调用 gRPC（HTTP/2） 的功能。
</p>

<p>
采用和 gRPC 一致的数据编码方式（Protobuf 二进制数据），只支持 <code>unary gRPC API</code> 。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
<a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_json_transcoder_filter.html">gRPC-JSON transcoder filter</a>
</p>

<p>
支持 gRPC 的 <code>Server streaming</code> 和 <code>Client streaming</code> ，Envoy 将流式请求及响应缓存起来了，所以实时性较差；不支持 <code>Bidirectional streaming</code> 。
</p>

<p>
由于客户端是通过 HTTP/1.1 进行访问，所以不支持真正的 streaming。
</p>

<p>
详见 <a href="http://blog.kankanan.com/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html">Envoy 的 json_transcoder_filter 介绍</a>
</p>

<p>
要在 Envoy 中实现 Websocket 访问 gRPC 可以参考 <a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_json_transcoder_filter.html">gRPC-JSON transcoder filter</a> 。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
<a href="https://envoyproxy.github.io/envoy/configuration/http_filters/grpc_web_filter.html">gRPC-Web filter</a>
</p>

<p>
基于 <a href="https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md">gRPC Web</a> 协议的实现，跟原始的 gRPC 协议基本一致，通过去除对 HTTP/2 底层（如 frame）的依赖，使得在浏览器上调用 gRPC 成为可能。
</p>

<p>
当前不支持 <code>Bidirectional Streaming</code> ，以后在最新的浏览器中可能支持。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
<a href="https://envoyproxy.github.io/envoy/intro/arch_overview/websocket.html?highlight=websocket">WebSocket support</a>
</p>

<p>
支持接入 WebSocket，会建立一条到 Upstream 的 TCP 连接，Upstream 服务需要是一个完整的 WebSocket 服务器，
相当于是一个 WebSocket 的透明代理。
</p>

<p>
由于客户端发起的 WebSocket 连接与到 Upstream 的连接（TCP）是 <code>1:1</code> 的关系，可扩展性较差。
</p></li>
</ul>


<p>
Envoy 中编写插件支持 WebSocket 到 gRPC 的协议转换（支持 <code>Bidirectional streaming</code> ）理论上是可以实现的，不过难度会比较高，需要对 Envoy 的实现非常了解。初步看了一下 envoy 的相关代码，表面上代码层次分明，但是实际上却是错综复杂，大量使用继承，上下层会互相调用，由于大量采用回调函数，逻辑不好理解。
</p>
</div>
</div>


<div id="outline-container-org767f531" class="outline-2">
<h2 id="org767f531">nginx</h2>
<div class="outline-text-2" id="text-org767f531">
<p>
与 envoy 的 <a href="https://envoyproxy.github.io/envoy/intro/arch_overview/websocket.html?highlight=websocket">WebSocket support</a> 相似，支持接入 WebSocket，会建立一条到 Upstream 的 TCP 连接，Upstream 服务需要是一个完整的 WebSocket 服务器，相当于是一个 WebSocket 的透明代理，由于客户端发起的 WebSocket 连接与到 Upstream 的连接（通过 proxy_pass 指令）是 <code>1:1</code> 的关系，连接数倍增，参考 <a href="https://www.nginx.com/blog/http2-module-nginx/#QandAnginx">https://www.nginx.com/blog/http2-module-nginx/#QandAnginx</a> 。
</p>

<ul class="org-ul">
<li><p>
<a href="https://github.com/slact/nchan">Nchan</a>
</p>

<blockquote>
<p>
Fast, horizontally scalable, multiprocess pub/sub queuing server and proxy for HTTP, long-polling, Websockets and EventSource (SSE), powered by Nginx.
</p>
</blockquote>

<p>
是 Nginx 的一个插件，支持各种接入方式，是搭建消息推送系统的一种很好的选择。
通过回调（HTTP/1.1 Restful）与业务系统集成在一起，使得业务系统不需要关心客户端接入细节。</p></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Envoy 的 json_transcoder_filter 介绍]]></title>
            <link>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</link>
            <guid>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</guid>
            <pubDate>Thu, 12 Oct 2017 11:56:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
json_transcoder_filter 实现 HTTP/1.1+JSON 与 HTTP/2+GRPC 的互转。
</p>

<p>
使用第三方库 <a href="https://github.com/grpc-ecosystem/grpc-httpjson-transcoding">grpc-httpjson-transcoding</a> 完成 json 与 grpc 的协议转换，
转换规则由 <a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 定义。
</p>

<p>
<a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 通过注解（Annotations）为 GRPC 接口添加 RESTful HTTP 接口映射。
</p>

<p>
<code>json_transcoder_filter</code> 对 stream 有一定支持，由于它是基于 HTTP/1.1，本质上是请求-响应模型，
只支持 GRPC 的 <code>Server streaming</code> 和 <code>Client streaming</code> ，不支持 <code>Bidirectional streaming</code> ，
它将 GRPC 消息流映射为消息数组（Json array）。
</p>

<div id="outline-container-orgab32387" class="outline-2">
<h2 id="orgab32387">示例项目</h2>
<div class="outline-text-2" id="text-orgab32387">
<p>
Envoy 带了一个 <a href="https://github.com/envoyproxy/envoy/tree/master/examples/grpc-bridge">grpc-bridge 示例项目</a>，依照它做了一个 grpc_json_transcoder 示例项目：
</p>

<ul class="org-ul">
<li><a href="https://github.com/tangxinfa/grpc_json_transcoder_example">tangxinfa/grpc_json_transcoder_example: Envoy grpc_json_transcoder filter example</a></li>
</ul>
</div>
</div>

<div id="outline-container-org2f92100" class="outline-2">
<h2 id="org2f92100">参考</h2>
<div class="outline-text-2" id="text-org2f92100">
<ul class="org-ul">
<li><a href="https://cloud.google.com/endpoints/docs/grpc/transcoding">Transcoding HTTP/JSON to gRPC  |  Cloud Endpoints with gRPC  |  Google Cloud Platform</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>