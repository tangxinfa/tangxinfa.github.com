<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>android - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/android.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Mon, 28 Jan 2019 08:38:18 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>android - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/android.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[使用 docker 创建 NDK 开发环境]]></title>
            <link>/article/4f7f7528-docker-521b5efa-ndk-5f0053d173af5883.html</link>
            <guid>/article/4f7f7528-docker-521b5efa-ndk-5f0053d173af5883.html</guid>
            <pubDate>Tue, 14 Aug 2018 10:03:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
编写 Dockerfile
</p>

<div class="org-src-container">
<pre class="src src-dockerfile"><span style="color: #b5bd68;">FROM</span> <span style="color: #81a2be; font-weight: bold;">ubuntu:18.04</span>

<span style="color: #b5bd68;">RUN</span> sed -i <span style="color: #8abeb7;">'s/http:\/\/archive\.ubuntu\.com\/ubuntu\//http:\/\/mirrors\.163\.com</span><span style="color: #8abeb7; text-decoration: underline;">\/ubuntu\//g'</span><span style="text-decoration: underline;"> /etc/apt/sources.list</span>
<span style="color: #b5bd68;">RUN</span> apt-get -y update
<span style="color: #b5bd68;">RUN</span> apt-get install -y make wget cmake git autoconf automake libtool file
<span style="color: #b5bd68;">RUN</span> <span style="color: #f0c674;">DEBIAN_FRONTEND</span>=noninteractive apt-get install -y tzdata
<span style="color: #b5bd68;">RUN</span> mkdir /build &amp;&amp; <span style="color: #8abeb7;">\</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span style="color: #8abeb7;">\</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"Asia/Shanghai"</span> &gt; /etc/timezone
<span style="color: #b5bd68;">RUN</span> apt-get install -y android-tools-adb
<span style="color: #b5bd68;">RUN</span> apt-get install -y unzip
<span style="color: #b5bd68;">RUN</span> echo no | dpkg-reconfigure dash
<span style="color: #b5bd68;">RUN</span> wget -c https://dl.google.com/android/repository/android-ndk-r17-beta2-linux<span style="text-decoration: underline;">-x86_64.zip?</span><span style="color: #f0c674; text-decoration: underline;">hl</span><span style="text-decoration: underline;">=zh-cn -O /build/android-ndk-r17-beta2-linux-x86_64.zip</span>
<span style="color: #b5bd68;">RUN</span> unzip /build/android-ndk-r17-beta2-linux-x86_64.zip -d /opt/
<span style="color: #b5bd68;">RUN</span> rm /build/android-ndk-r17-beta2-linux-x86_64.zip
<span style="color: #b5bd68;">RUN</span> apt-get install -y python
<span style="color: #b5bd68;">RUN</span> /opt/android-ndk-r17-beta2/build/tools/make_standalone_toolchain.py --arch a<span style="text-decoration: underline;">rm64 --api 24 --</span><span style="color: #f0c674; text-decoration: underline;">stl</span><span style="text-decoration: underline;">=libc++ --install-dir /opt/android-toolchain</span>
<span style="color: #b5bd68;">RUN</span> echo $<span style="color: #8abeb7;">'export PATH=/opt/android-toolchain/bin:$PATH\n\</span>
<span style="color: #8abeb7;">export CC=aarch64-linux-android-clang\n\</span>
<span style="color: #8abeb7;">export CXX=aarch64-linux-android-clang++\n\</span>
<span style="color: #8abeb7;">export LD=aarch64-linux-android-ld\n\</span>
<span style="color: #8abeb7;">export AR=aarch64-linux-android-ar\n\</span>
<span style="color: #8abeb7;">export STRIP=aarch64-linux-android-strip\n\</span>
<span style="color: #8abeb7;">export RANLIB=aarch64-linux-android-ranlib\n\</span>
<span style="color: #8abeb7;">export AS=aarch64-linux-android-clang\n\</span>
<span style="color: #8abeb7;">export CFLAGS="-fPIE"\n\</span>
<span style="color: #8abeb7;">export CXXFLAGS="$CFLAGS"\n\</span>
<span style="color: #8abeb7;">export LDFLAGS="-fPIE -pie"\n\</span>
<span style="color: #8abeb7;">export SYSROOT=/opt/android-toolchain/sysroot\n\</span>
<span style="color: #8abeb7;">export CROSS_COMPILE_HOST=aarch64-linux-android'</span> &gt; /root/.ndkrc

<span style="color: #b5bd68;">WORKDIR</span> /build

<span style="color: #b5bd68;">ENTRYPOINT</span> [<span style="color: #8abeb7;">"/bin/bash"</span>]
</pre>
</div></li>

<li><p>
构建 docker 镜像
</p>

<div class="org-src-container">
<pre class="src src-sh">docker build -f Dockerfile --network=host -t ndk:r17-beta2 .
</pre>
</div></li>

<li><p>
运行 docker 容器
</p>

<div class="org-src-container">
<pre class="src src-sh">docker run --rm --network=host -v ${<span style="color: #f0c674;">HOME</span>}/.android:/root/.android -it ndk:r17-be<span style="text-decoration: underline;">ta2</span>
</pre>
</div>

<p>
下面的命令全部在 docker 容器中执行。
</p></li>

<li><p>
交叉编译程序
</p>

<div class="org-src-container">
<pre class="src src-sh">cat &gt; hello.c &lt;&lt;EOF
<span style="color: #8abeb7;">#include &lt;stdio.h&gt;</span>
<span style="color: #8abeb7;">int main() {</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span><span style="color: #8abeb7;">   printf("hello ndk\n");</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span><span style="color: #8abeb7;">   return 0;</span>
<span style="color: #8abeb7;">}</span>
<span style="color: #8abeb7;">EOF</span>
<span style="color: #b294bb;">.</span> ~/.ndkrc
$<span style="color: #f0c674;">CC</span> $<span style="color: #f0c674;">CFLAGS</span> $<span style="color: #f0c674;">LDFLAGS</span> hello.c -o hello
</pre>
</div></li>

<li><p>
在设备上运行程序
</p>

<p>
假设设备 IP 为 192.168.1.3
</p>

<div class="org-src-container">
<pre class="src src-sh">adb connect 192.168.1.3
adb root
adb connect 192.168.1.3
adb remount
adb connect 192.168.1.3
adb push ./hello /tmp/hello
adb shell /tmp/hello
</pre>
</div>

<p>
最终将输出结果 <code>hello ndk</code> 。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 NDK 移植 Linux C/C++ 程序到 Android 系统]]></title>
            <link>/article/4f7f7528-ndk-79fb690d-linux-c-c-7a0b5e8f5230-android-7cfb7edf.html</link>
            <guid>/article/4f7f7528-ndk-79fb690d-linux-c-c-7a0b5e8f5230-android-7cfb7edf.html</guid>
            <pubDate>Thu, 09 Aug 2018 07:28:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org6b7155e" class="outline-2">
<h2 id="org6b7155e">区分基础概念：JNI 与 NDK</h2>
<div class="outline-text-2" id="text-org6b7155e">
<ul class="org-ul">
<li>JNI（Java Native Interface）是一种 Java 语言特性</li>
</ul>

<p>
用于 Java 程序与 C、C++ 库间的互相调用。
</p>

<ul class="org-ul">
<li>NDK（Native Development Kit）是 Google 提供的使用 C/C++ 编写 Android 程序的开
发工具包</li>
</ul>

<p>
它使用 JNI 实现 Java 程序调用 C/C++ 本地代码，允许 C/C++ 本地代码访问 Android
API，不只是用来开发或移植 C/C++ 库，也可以是 C/C++ 程序。
</p>

<p>
引用自 <a href="https://developer.android.com/ndk/">Android NDK  |  Android NDK  |  Android Developers</a>
</p>
<blockquote>
<p>
Android NDK
</p>

<p>
The Android NDK is a toolset that lets you implement parts of your app in native
code, using languages such as C and C++. For certain types of apps, this can
help you reuse code libraries written in those languages.
</p>
</blockquote>

<p>
NDK 提供一系列稳定的 C/C++ API，头文件在 <code>sysroot/usr/include</code> 下，主要包括 C 标
准库、C++ 标准库、jni、math、pthread、zlib、OpenGL、Android 相关的库，
<a href="https://developer.android.com/ndk/guides/stable_apis">NDK 支持的 API</a> 也会随着需求的增加而日趋完善。
</p>
</div>
</div>


<div id="outline-container-org81f8083" class="outline-2">
<h2 id="org81f8083">移植使用 GNU Autotools 的项目</h2>
<div class="outline-text-2" id="text-org81f8083">
<p>
NDK 提供了创建独立工具链的工具，对于移植使用 GNU Autotools 的项目到 Android 平台
很有帮助，省去写 <code>Android.mk</code> 。
</p>

<ul class="org-ul">
<li><p>
创建独立工具链
</p>

<div class="org-src-container">
<pre class="src src-sh">/opt/android-ndk/build/tools/make_standalone_toolchain.py <span style="color: #8abeb7;">\</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   --arch arm64 --api 28 --stl=libc++ --install-dir /opt/android-toolchain
</pre>
</div></li>

<li><p>
环境变量配置
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b294bb;">export</span> <span style="color: #f0c674;">PATH</span>=$<span style="color: #f0c674;">PATH</span>:/opt/android-toolchain/bin
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">CC</span>=aarch64-linux-android-clang
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">CXX</span>=aarch64-linux-android-clang++
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">LD</span>=aarch64-linux-android-ld
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">AR</span>=aarch64-linux-android-ar
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">STRIP</span>=aarch64-linux-android-strip
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">RANLIB</span>=aarch64-linux-android-ranlib
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">AS</span>=aarch64-linux-android-clang
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">CFLAGS</span>=<span style="color: #8abeb7;">"-fPIE -fPIC"</span>
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">CXXFLAGS</span>=<span style="color: #8abeb7;">"-fPIE -fPIC"</span>
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">LDFLAGS</span>=<span style="color: #8abeb7;">"-pie"</span>
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">SYSROOT</span>=/opt/android-toolchain/sysroot
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">CROSS_COMPILE_HOST</span>=aarch64-linux-android
</pre>
</div></li>

<li><p>
交叉编译
</p>

<div class="org-src-container">
<pre class="src src-sh">./configure --host=${<span style="color: #f0c674;">CROSS_COMPILE_HOST</span>} --prefix=/opt/local
make
make install
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org28730b9" class="outline-2">
<h2 id="org28730b9">移植 Nginx 遇到的问题</h2>
<div class="outline-text-2" id="text-org28730b9">
<ul class="org-ul">
<li><p>
编译出错 <code>cstddef:43:25: fatal error: stddef.h: No such file or directory</code>
</p>

<p>
看起来是 C++ 编译器找不到 C 头文件，是已知问题，在 Standalone 工具链中使用
<code>gcc</code> 就会出现，见
</p>

<p>
<a href="https://github.com/android-ndk/ndk/issues/215">stddef.h: No such file or directory · Issue #215 · android-ndk/ndk</a>
</p>

<p>
改为使用 <code>clang</code> 就好了，以后的 NDK 将彻底移除对 <code>gcc</code> 的支持。
</p></li>

<li><p>
交叉编译 OpenSSL
</p>

<p>
网上有大量的移植文档，基本上是基于 <a href="https://wiki.openssl.org/index.php/Android">OpenSSL Android - OpenSSLWiki</a> ，最大的问题
是使用的 NDK 和 OpenSSL 版本都比较旧，最后主要参考
</p>

<p>
<a href="https://github.com/couchbaselabs/couchbase-lite-libcrypto">couchbaselabs/couchbase-lite-libcrypto: Pre-built OpenSSL libcrypto static libraries</a>
</p>

<p>
移植成功。OpenSSL 的交叉编译需要完整的 NDK 包，最好新开一个 Shell 来编译
OpenSSL，避免为独立工具链设置的环境变量影响到 OpenSSL 的编译。
</p>

<p>
编译过程中会报错 <code>crtbegin_so.o: No such file: No such file or directory</code> ，将
它从工具链中拷到当前目录即可， <code>crtend_so.o</code> 、 <code>crtbegin_dynamic.o</code> 、
<code>crtend_android.o</code> 也进行相同处理，参考
<a href="https://stackoverflow.com/questions/6881164/crtbegin-so-o-missing-for-android-toolchain-custom-build">gcc - crtbegin_so.o missing for android toolchain (custom build) - Stack Overflow</a>
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Download</span>
wget https://codeload.github.com/openssl/openssl/zip/OpenSSL_1_1_0-stable -O ope<span style="text-decoration: underline;">nssl-OpenSSL_1_1_0-stable.zip</span>
unzip openssl-OpenSSL_1_1_0-stable.zip
wget https://raw.githubusercontent.com/couchbaselabs/couchbase-lite-libcrypto/ma<span style="text-decoration: underline;">ster/build-android-setenv.sh -O openssl.setenv</span>
sed -i -e <span style="color: #8abeb7;">'s/^_ANDROID_NDK=/#_ANDROID_NDK=/g'</span> openssl.setenv

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Config</span>
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">ANDROID_NDK_ROOT</span>=/opt/android-ndk
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">_ANDROID_TARGET_SELECT</span>=arch-arm64-v8a
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">_ANDROID_NDK</span>=<span style="color: #8abeb7;">"android-ndk"</span>
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">ANDROID_EABI_PREFIX</span>=aarch64-linux-android
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">_ANDROID_EABI</span>=<span style="color: #8abeb7;">"${ANDROID_EABI_PREFIX}-4.9"</span>
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">_ANDROID_ARCH</span>=arch-arm64
<span style="color: #b294bb;">export</span> <span style="color: #f0c674;">_ANDROID_API</span>=<span style="color: #8abeb7;">"android-28"</span>
<span style="color: #b294bb;">source</span> openssl.setenv

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Build</span>
<span style="color: #b294bb;">cd</span> openssl-OpenSSL_1_1_0-stable
./Configure dist
./Configure no-ssl2 no-ssl3 no-comp no-hw no-engine --openssldir=/opt/local/ --p<span style="text-decoration: underline;">refix=/opt/local/ linux-generic64 -DB_ENDIAN -B$</span><span style="color: #f0c674; text-decoration: underline;">ANDROID_DEV</span><span style="text-decoration: underline;"> </span><span style="color: #8abeb7; text-decoration: underline;">\</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   -I${<span style="color: #f0c674;">ANDROID_NDK_ROOT</span>}/sysroot/usr/include -I${<span style="color: #f0c674;">ANDROID_NDK_ROOT</span>}/sysr<span style="text-decoration: underline;">oot/usr/include/${</span><span style="color: #f0c674; text-decoration: underline;">ANDROID_EABI_PREFIX</span><span style="text-decoration: underline;">} </span><span style="color: #8abeb7; text-decoration: underline;">\</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   -fPIE -pie -L${<span style="color: #f0c674;">ANDROID_NDK_ROOT</span>}/platforms/${<span style="color: #f0c674;">_ANDROID_API</span>}/${<span style="color: #f0c674;">_ANDROI</span><span style="color: #f0c674; text-decoration: underline;">D_ARCH</span><span style="text-decoration: underline;">}/usr/lib</span>
ln -s ${<span style="color: #f0c674;">SYSROOT</span>}/usr/lib/crtbegin_so.o
ln -s ${<span style="color: #f0c674;">SYSROOT</span>}/usr/lib/crtend_so.o
ln -s ${<span style="color: #f0c674;">SYSROOT</span>}/usr/lib/crtbegin_dynamic.o
ln -s ${<span style="color: #f0c674;">SYSROOT</span>}/usr/lib/crtend_android.o
make -j6
make install
</pre>
</div></li>

<li><p>
交叉编译出的配置检测程序无法直接运行
</p>

<p>
Nginx 没有使用 GNU Autotools，而是有自已的 Configure 脚本，遇到的第一个问题就
是 Nginx 是通过使用编译器编译一个测试程序来获取配置信息，交叉编译出来的程序肯
定是无法在编译机上运行的，一个可靠的办法就是修改 Configure 脚本，改为上传到目
标设备上执行。
</p>

<p>
下面是我写好的一个远程执行脚本 <code>execute</code>
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/</span><span style="color: #b5bd68;">bash</span>

<span style="color: #b5bd68;">if</span> [ $<span style="color: #f0c674;">#</span> != 2 ] || ([ $<span style="color: #f0c674;">1</span> != <span style="color: #8abeb7;">"-c"</span> ] &amp;&amp; [ $<span style="color: #f0c674;">1</span> != <span style="color: #8abeb7;">"-f"</span> ]) ; <span style="color: #b5bd68;">then</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"usage: $0 -&lt;c|f&gt; &lt;cmd|file&gt;"</span> &gt;&gt; /dev/stderr
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b5bd68;">exit</span> 22 <span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">Invalid argument</span>
<span style="color: #b5bd68;">fi</span>

<span style="color: #f0c674;">LOG_FILE</span>=/dev/null

<span style="color: #b5bd68;">if</span> [[ <span style="color: #8abeb7;">"$CROSS_COMPILE_HOST"</span> = *<span style="color: #8abeb7;">"android"</span>* ]]; <span style="color: #b5bd68;">then</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb connect ${<span style="color: #f0c674;">CROSS_COMPILE_DEVICE_IP</span>} &gt;&gt;$<span style="color: #f0c674;">LOG_FILE</span> 2&gt;&amp;1
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb wait-for-device
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb root &gt;&gt;$<span style="color: #f0c674;">LOG_FILE</span> 2&gt;&amp;1
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb connect ${<span style="color: #f0c674;">CROSS_COMPILE_DEVICE_IP</span>} &gt;&gt;$<span style="color: #f0c674;">LOG_FILE</span> 2&gt;&amp;1
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb wait-for-device
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb remount &gt;&gt;$<span style="color: #f0c674;">LOG_FILE</span> 2&gt;&amp;1
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb connect ${<span style="color: #f0c674;">CROSS_COMPILE_DEVICE_IP</span>} &gt;&gt;$<span style="color: #f0c674;">LOG_FILE</span> 2&gt;&amp;1
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb wait-for-device
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b5bd68;">if</span> [ $<span style="color: #f0c674;">1</span> == <span style="color: #8abeb7;">"-f"</span> ]; <span style="color: #b5bd68;">then</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #f0c674;">tempfile</span>=<span style="color: #b294bb;">`mktemp -u XXXXXXXX`</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #f0c674;">tempdir</span>=/tmp/cross-compile
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb shell mkdir ${<span style="color: #f0c674;">tempdir</span>} &gt;&gt;$<span style="color: #f0c674;">LOG_FILE</span> 2&gt;&amp;1
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb push $<span style="color: #f0c674;">2</span> ${<span style="color: #f0c674;">tempdir</span>}/${<span style="color: #f0c674;">tempfile</span>} &gt;&gt;$<span style="color: #f0c674;">LOG_FILE</span> 2&gt;&amp;1
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb shell <span style="color: #8abeb7;">"find ${tempdir} -ctime +1 -type f -exec rm {} \; &gt;/dev/null 2</span><span style="color: #8abeb7; text-decoration: underline;">&gt;&amp;1; cd ${tempdir} &amp;&amp; chmod a+x $tempfile &amp;&amp; ./$tempfile"</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b5bd68;">else</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   adb shell $<span style="color: #f0c674;">2</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b5bd68;">fi</span>
<span style="color: #b5bd68;">else</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b5bd68;">if</span> [ $<span style="color: #f0c674;">1</span> == <span style="color: #8abeb7;">"-f"</span> ]; <span style="color: #b5bd68;">then</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #f0c674;">tempfile</span>=<span style="color: #b294bb;">`mktemp -u XXXXXXXX`</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #f0c674;">tempdir</span>=/tmp/cross-compile
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   ssh -o <span style="color: #f0c674;">StrictHostKeyChecking</span>=no root@${<span style="color: #f0c674;">CROSS_COMPILE_DEVICE_IP</span>} mkdir ${<span style="color: #f0c674; text-decoration: underline;">tempdir</span><span style="text-decoration: underline;">} &gt;&gt;$</span><span style="color: #f0c674; text-decoration: underline;">LOG_FILE</span><span style="text-decoration: underline;"> 2&gt;&amp;1</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   scp -o <span style="color: #f0c674;">StrictHostKeyChecking</span>=no $<span style="color: #f0c674;">2</span> root@${<span style="color: #f0c674;">CROSS_COMPILE_DEVICE_IP</span>}:${<span style="color: #f0c674;">tem</span><span style="color: #f0c674; text-decoration: underline;">pdir</span><span style="text-decoration: underline;">}/${</span><span style="color: #f0c674; text-decoration: underline;">tempfile</span><span style="text-decoration: underline;">} &gt;&gt;$</span><span style="color: #f0c674; text-decoration: underline;">LOG_FILE</span><span style="text-decoration: underline;"> 2&gt;&amp;1</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   ssh -o <span style="color: #f0c674;">StrictHostKeyChecking</span>=no root@${<span style="color: #f0c674;">CROSS_COMPILE_DEVICE_IP</span>} <span style="color: #8abeb7;">"find ${</span><span style="color: #8abeb7; text-decoration: underline;">tempdir} -mmin +1 -type f -exec rm {} \; &gt;/dev/null 2&gt;&amp;1; cd ${tempdir} &amp;&amp; chmod a+x $tempfile &amp;&amp; ./$tempfile"</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b5bd68;">else</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #969896; background-color: #22a224a427a7;"> </span>   ssh -o <span style="color: #f0c674;">StrictHostKeyChecking</span>=no root@${<span style="color: #f0c674;">CROSS_COMPILE_DEVICE_IP</span>} $<span style="color: #f0c674;">2</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b5bd68;">fi</span>
<span style="color: #b5bd68;">fi</span>
</pre>
</div>

<p>
修改 <code>nginx-1.14.0</code> 的配置脚本，将本地运行测试程序的地方改为远程执行
</p>
<div class="org-src-container">
<pre class="src src-sh">sed -i -e <span style="color: #8abeb7;">'s/\/bin\/sh -c $NGX_AUTOTEST/timeout 10 \/build\/execute -f $NGX_AUTO</span><span style="color: #8abeb7; text-decoration: underline;">TEST/g'</span><span style="text-decoration: underline;"> </span><span style="color: #b294bb; text-decoration: underline;">`find auto -type f`</span>
sed -i -e <span style="color: #8abeb7;">'s/$NGX_AUTOTEST &gt;\/dev\/null/timeout 10 \/build\/execute -f $NGX_AUTO</span><span style="color: #8abeb7; text-decoration: underline;">TEST &gt;\/dev\/null/g'</span><span style="text-decoration: underline;"> </span><span style="color: #b294bb; text-decoration: underline;">`find auto -type f`</span>
sed -i -e <span style="color: #8abeb7;">'s/`$NGX_AUTOTEST`/`timeout 10 \/build\/execute -f $NGX_AUTOTEST`/g'</span> <span style="color: #b294bb;">`</span><span style="color: #b294bb; text-decoration: underline;">find auto -type f`</span>
</pre>
</div>

<p>
运行时需要预先设置环境变量 <code>CROSS_COMPILE_DEVICE_IP</code> 为目标设备 IP，对于嵌入式
Linux 设备，需要使用 <code>ssh-copy-id</code> 命令设置为本机免密码 ssh 登录，对于 Android
设备需要预先 adb 授权通过。
</p></li>

<li><p>
编译时找不到 <code>crypt.h</code>
</p>

<p>
<code>crypt.h</code> 属于 <code>glibc</code> ， <code>glibc</code> 是 Linux 下的 C 标准库实现，除了实现 <code>ANSI
  C</code> 标准库还有大量方便 Linux 开发的扩展功能。而 NDK 提供的 C 标准库并非 <code>glibc</code>
而是 <a href="https://github.com/android/platform_bionic/">Bionic libc</a> ，这导致移植 Nginx 时由于缺少 <code>crypt.h</code> 头文件而编译不过。
</p>

<p>
可以将 <code>crypt</code> 调用替换为 <code>DES_crypt</code>
</p>
<div class="org-src-container">
<pre class="src src-sh">sed -i -e <span style="color: #8abeb7;">'s/#include &lt;crypt.h&gt;/#if (NGX_HAVE_CRYPT_H)\n#include &lt;crypt.h&gt;\n#end</span><span style="color: #8abeb7; text-decoration: underline;">if\n#include &lt;openssl\/des.h&gt;/g'</span><span style="text-decoration: underline;"> src/os/unix/ngx_linux_config.h</span>
sed -i -e <span style="color: #8abeb7;">'s/= crypt(/= DES_crypt(/g'</span> src/os/unix/ngx_user.c
</pre>
</div></li>

<li><p>
链接时找不到 <code>glob</code> 函数
</p>

<p>
NDK 工具链是有提供 <code>glob.h</code> 头文件的，但是链接时却找不到 <code>glob</code> 函数。网络上有
很多单独提供 <a href="https://github.com/tatowilson/Cross-Compile-Nginx-with-RTMP-Module-for-Android/tree/master/glob">glob</a> 下载的，但是都无法直接通过编译，因为里面有很多平台相关的特性。
</p>

<p>
<a href="https://github.com/android-ndk/ndk/issues/718">Undefined reference to glob and globfree in libc.so · Issue #718 · android-ndk/ndk</a>
中说是已经在 <code>r17b</code> 版本解决，需安装 <code>android-ndk-r17-beta2</code> 同时设置 <code>API
  Level</code> 为 <code>28</code> 即可。
</p></li>

<li><p>
交叉编译 Nginx
</p>

<p>
可使用独立工具链来交叉编译 Nginx，参考前面环境变量配置部分先设置好工具链的环境
变量。
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #f0c674;">CC_TEST_FLAGS</span>=<span style="color: #8abeb7;">"${CFLAGS} ${LDFLAGS}"</span> ./configure --with-ld-opt=<span style="color: #8abeb7;">"${LDFLAGS}"</span> --pr<span style="text-decoration: underline;">efix=/opt/local --crossbuild=</span><span style="color: #b294bb; text-decoration: underline;">`/build/execute -c 'uname -srm' | tr ' ' ':'`</span><span style="text-decoration: underline;"> --user=root --group=root --with-select_module --with-poll_module --with-file-aio --with-http_ssl_module --without-mail_pop3_module --without-mail_imap_module  --without-mail_smtp_module</span>
make
make install
</pre>
</div></li>

<li><p>
编译出的 Nginx 无法在低版本的 Android 上运行
</p>

<p>
之前为了使用最新的 NDK 工具链包含的函数 <code>glob</code> ，而将 <code>API Level</code> 设置成 <code>28</code>
，这就意味着编译出来的程序无法在低版本的 Android（&lt;=8.1） 上运行，在 Android
7.1 上运行会报错 <code>/system/bin/nginx: No such file or directory</code> 。
</p>

<p>
将 NDK 最新工具链带的 <code>so</code> 也拷到设备上，运行程序前设置一下 <code>$LD_LIBRARY_PATH</code>
优先使用最新的 <code>so</code> ，Nginx 运行后直接卡死或者立即崩溃。
</p>

<p>
添加 <code>-static -Wl,--dynamic-linker=/system/bin/linker</code> 链接选项静态编译，运行
时会报错 <code>/system/bin/nginx: Accessing a corrupted shared library</code> 的错误，需
要使用 <code>/system/bin/linker64</code> 。
</p>

<p>
由于 <code>-static</code> 与 <code>-pie</code> 是互相冲突的选项，静态编译的程序运行时会报错 <code>only
  position independent executables (PIE) are supported.</code> 。
</p></li>

<li><p>
编译在 Android 5 及以上版本运行的 Nginx
</p>

<p>
参考以下项目，通过使用 docker 方便交叉编译 nginx-1.14.0
</p>

<p>
<a href="https://github.com/tangxinfa/android-nginx">tangxinfa/android-nginx: Cross compile nginx with android ndk</a>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org5a86e19" class="outline-2">
<h2 id="org5a86e19">结论</h2>
<div class="outline-text-2" id="text-org5a86e19">
<p>
一般的 C/C++ 库通常本身就会注重可移植性，不会生硬地依赖系统底层特性，使用 NDK
移植是可行的，即使是 <code>ffmpeg</code> 这种大型的库也可以成功移植到 Android。
</p>

<p>
而对于一些 Linux 下的程序，使用 NDK 直接移植会有很大的失败机率，因为他们可能
使用了 NDK 不支持的特性（如 <code>glibc</code> ）。
</p>

<p>
NDK 一直在改进，以前阻碍我们移植到 Android 的问题很可能会在新版本中解决，遗憾
的是编译出的程序无法运行在旧版本 Android 上。
</p>
</div>
</div>

<div id="outline-container-org465b88d" class="outline-2">
<h2 id="org465b88d">参考</h2>
<div class="outline-text-2" id="text-org465b88d">
<ul class="org-ul">
<li><a href="https://developer.android.com/ndk/guides/concepts">Concepts  |  Android NDK  |  Android Developers</a></li>

<li><a href="http://www.jkeabc.com/475203.html">Android NDK vs AOSP Build System</a></li>

<li><a href="https://developer.android.com/ndk/guides/stable_apis">Android NDK Native APIs  |  Android NDK  |  Android Developers</a></li>

<li><a href="https://software.intel.com/en-us/articles/building-an-android-command-line-application-using-the-ndk-build-tools">Building an Android* Command-Line Application Using the NDK Build Tools | Intel® Software</a></li>

<li><a href="https://www.jianshu.com/p/6332418b12b1">Android NDK开发扫盲及最新CMake的编译使用 - 简书</a></li>

<li><a href="https://blog.csdn.net/minghuang2017/article/details/78938852">在命令行下用cmake交叉编译可在android中运行的so包 - CSDN博客</a></li>

<li><a href="https://blog.csdn.net/minghuang2017/article/details/79000345">cmake使用独立工具链交叉编译可在android中运行的so包 - CSDN博客</a></li>

<li><a href="https://warpedtimes.wordpress.com/2010/02/03/building-open-source-libraries-with-android-ndk/">Building Open Source libraries with Android NDK | Thoughts and Ideas In Warped Times</a></li>

<li><a href="https://zhangtom.com/2017/07/11/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%B8%A6RTMP%E6%A8%A1%E5%9D%97%E7%9A%84Nginx%E5%88%B0Android/">交叉编译带RTMP模块的Nginx到Android | Tom's Blog</a></li>

<li><a href="https://stackoverflow.com/questions/10380422/android-static-linking-vs-dynamic-linking-against-glibc">Android Static Linking vs Dynamic Linking against glibc - Stack Overflow</a></li>

<li><a href="https://stackoverflow.com/questions/27082959/gcc-static-and-pie-are-incompatible-for-x86">android 5.0 lollipop - GCC: -static and -pie are incompatible for x86? - Stack Overflow</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux 下编译 Android]]></title>
            <link>/article/archlinux-4e0b7f168bd1-android.html</link>
            <guid>/article/archlinux-4e0b7f168bd1-android.html</guid>
            <pubDate>Thu, 09 Aug 2018 07:26:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-org9f5a7f1" class="outline-2">
<h2 id="org9f5a7f1">安装 openjdk</h2>
<div class="outline-text-2" id="text-org9f5a7f1">
<p>
根据 Android 版本选择 <code>openjdk</code> 版本进行安装
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S jdk8-openjdk
</pre>
</div>

<ul class="org-ul">
<li>参考 <a href="https://wiki.archlinux.org/index.php/Android#Java_Development_Kit">Java_Development_Kit - Android - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-org783d48c" class="outline-2">
<h2 id="org783d48c">安装 repo</h2>
<div class="outline-text-2" id="text-org783d48c">
<p>
<a href="https://android.googlesource.com/tools/repo">repo</a> 是用来从多个 <code>Git</code> 仓库构建 <code>Android</code> 的工具。
</p>

<div class="org-src-container">
<pre class="src src-sh">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/repo
chmod a+x ~/repo
sudo mv ~/repo /usr/local/bin/
</pre>
</div>

<p>
参考 <a href="https://source.android.com/setup/build/downloading#installing-repo">Downloading the Source  |  Android Open Source Project</a>
</p>
</div>
</div>

<div id="outline-container-orgabe65e8" class="outline-2">
<h2 id="orgabe65e8">设置编译环境</h2>
<div class="outline-text-2" id="text-orgabe65e8">
<div class="org-src-container">
<pre class="src src-sh">mkdir -p ~/Opensource/android
<span style="color: #b294bb;">cd</span> ~/Opensource/android
virtualenv2 venv
<span style="color: #b294bb;">source</span> venv/bin/activate
</pre>
</div>

<ul class="org-ul">
<li>参考 <a href="https://wiki.archlinux.org/index.php/Android#Setting_up_the_build_environment">Setting up the build environment - Android - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgd9b2d00" class="outline-2">
<h2 id="orgd9b2d00">下载源代码</h2>
<div class="outline-text-2" id="text-orgd9b2d00">
<div class="org-src-container">
<pre class="src src-sh">repo init -u https://android.googlesource.com/platform/manifest -b master
repo sync -j4
</pre>
</div>

<p>
以后如果要同步最新代码，则执行
</p>

<div class="org-src-container">
<pre class="src src-sh">repo sync
</pre>
</div>

<p>
下载过程中可能被墙导致失败，可以考虑使用 <code>proxychains</code> 来翻墙，最好还是国内找一
个镜像，加快下载速度。
</p>

<p>
代码有几十个 G，下载和编译都需要很长时间。
</p>

<ul class="org-ul">
<li>参考 <a href="https://wiki.archlinux.org/index.php/Android#Downloading%20the%20source%20code">Downloading the source code - Android - ArchWiki</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgd410bee" class="outline-2">
<h2 id="orgd410bee">编译</h2>
<div class="outline-text-2" id="text-orgd410bee">
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b294bb;">source</span> build/envsetup.sh
lunch full-eng
make -j4
</pre>
</div>
</div>
</div>

<div id="outline-container-orgf64c805" class="outline-2">
<h2 id="orgf64c805">测试</h2>
<div class="outline-text-2" id="text-orgf64c805">
<div class="org-src-container">
<pre class="src src-sh">emulator
</pre>
</div>
</div>
</div>

<div id="outline-container-org40f87f3" class="outline-2">
<h2 id="org40f87f3">参考</h2>
<div class="outline-text-2" id="text-org40f87f3">
<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/Android#Building">Building - Android - ArchWiki</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>