<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>c - 看看俺 – KanKanAn.com</title>
        <description>记我所思，忆我所为。</description>
        <link>http://blog.kankanan.com/tag/c.xml</link>
        <lastBuildDate>Sun, 21 Aug 2016 05:52:39 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <image>
            <title>c - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/c.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <generator>Feed for Node.js</generator>
        <category>技术</category>
        <item>
            <title><![CDATA[system(3) 与 SIGCHLD 信号]]></title>
            <link>/article/system-3-4e0e-sigchld-4fe153f7.html</link>
            <guid>/article/system-3-4e0e-sigchld-4fe153f7.html</guid>
            <pubDate>Thu, 28 Jul 2016 03:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
system(3) 常用于执行 shell 命令
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;stdlib.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;stdio.h&gt;</span>


<span style="color: #6699cc;">int</span> <span style="color: #f99157;">main</span>(<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">argc</span>, <span style="color: #6699cc;">char</span> *<span style="color: #ffcc66;">argv</span>[])
{
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">ret</span> = system(<span style="color: #66cccc;">"ls -la"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   printf(<span style="color: #66cccc;">"ret: %d\n"</span>, ret);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> ret;
}
</pre>
</div>

<p>
正常情况下，命令执行成功会返回 0。
</p>

<p>
system(3) 在执行的命令结束时会发出 SIGCHLD 信号，收到 SIGCHLD 信号的线程会从系统调用（如：read，write）中断返回，errno 为 EINTR（4: Interrupted system call）。
</p>

<p>
应用程序应该重试被中断的系统调用，但很多时候是通过第三方库间接进行系统调用，而这些库并未考虑周到，误以为系统调用失败。
</p>

<p>
那么该如何避免 SIGCHLD 信号中断系统调用呢？
</p>


<p>
根据 system(3) 函数的 <a href="http://man7.org/tlpi/code/online/dist/procexec/system.c.html">源码</a> ，其关键逻辑如下：
</p>

<ul class="org-ul">
<li>设置当前线程的 SIGCHLD 信号为阻塞（SIG_BLOCK）状态
</li>

<li>fork

<ul class="org-ul">
<li>子进程

<p>
恢复 SIGCHLD 信号处理，然后 execl()。
</p>
</li>

<li>父进程

<p>
等待子进程（waitpid()）结束，恢复当前线程的 SIGCHLD 信号处理。
</p>
</li>
</ul>
</li>
</ul>

<p>
子进程结束时操作系统会给父进程发送 SIGCHLD 信号，父进程会遍历（通常从主线程找起）一个不阻塞 SIGCHLD 的线程进行处理。
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">在整个应用中忽略 SIGCHLD 信号会有负作用</h2>
<div class="outline-text-2" id="text-1">
<p>
在应用程序最开始的时候（main 函数），添加以下语句
</p>

<div class="org-src-container">

<pre class="src src-c">signal(SIGCHLD, SIG_IGN);
</pre>
</div>

<p>
由于子线程会继续主线程的信号处理，这种方式应该是一劳永逸的。
</p>

<p>
然后，它会导致 system(3) 总是返回 -1，errno 为 ECHILD（10: No child processes），无法判断命令执行是否成功。
</p>

<p>
<a href="http://stackoverflow.com/a/25039605/802708">c - system() function while SIGCHLD is ignored - Stack Overflow</a> 或 man wait(2) 说明了原因：
</p>
<blockquote>
<p>
POSIX.1-2001 指明，如果将 SIGCHLD 置为 SIG_IGN，或者为 SIGCHLD 指定 SA_NOCLDWAIT 标志（见 sigaction(2)），子进程结束后将不会成为僵尸进程，调用 wait() 或 waitpid() 将阻塞到所有子进程结束后返回错误，errno 设置为 ECHILD。
</p>

<p>
POSIX.1-2001 specifies that if the disposition of SIGCHLD is set to SIG_IGN or the SA_NOCLDWAIT flag is set for SIGCHLD (see sigaction(2)), then children that terminate do not become zombies and a call to wait() or waitpid() will block until all children have terminated, and then fail with errno set to ECHILD.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">在整个应用中阻塞 SIGCHLD 信号</h2>
<div class="outline-text-2" id="text-2">
<p>
注意 signal(3) 无法阻塞一个信号，只支持忽略（SIG_IGN）和恢复缺省处理（SIG_DFL）。
</p>

<p>
阻塞（ SIG_BLOCK）和取消阻塞（SIG_UNBLOCK）用于信号掩码（Signal Mask），如 sigprocmask(3) ，多线程下请使用 pthread_sigmask(3)。
</p>

<p>
在应用程序最开始的时候，添加以下语句
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #6699cc;">sigset_t</span> <span style="color: #ffcc66;">set</span>;
sigemptyset(&amp;set);
sigaddset(&amp;set, SIGCHLD);
pthread_sigmask(SIG_BLOCK, &amp;set, <span style="color: #6699cc;">NULL</span>);
</pre>
</div>

<p>
由于子线程会继续主线程的信号处理，这种方式应该是一劳永逸的。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">参考</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><a href="http://www.linuxprogrammingblog.com/all-about-linux-signals?page=show">All about Linux signals | Linux Programming Blog</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[你很可能不懂 snprintf]]></title>
            <link>/article/4f605f8853ef80fd4e0d61c2-snprintf.html</link>
            <guid>/article/4f605f8853ef80fd4e0d61c2-snprintf.html</guid>
            <pubDate>Fri, 13 May 2016 12:36:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
Q: <code>snprintf</code> 返回的是实际写入到缓冲区的字符数吗？
</p>

<p>
A: 错。当缓冲区空间不足时会返回比缓存区空间大的值。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">man 3 snprintf</h2>
<div class="outline-text-2" id="text-1">
<p>
摘录关键部分
</p>

<p>
原型写义
</p>
<blockquote>
<p>
#include &lt;stdio.h&gt;
</p>


<p>
int sprintf(char *str, const char *format, &#x2026;);
</p>

<p>
int snprintf(char *str, size_t size, const char *format, &#x2026;);
</p>
</blockquote>

<p>
功能描述
</p>
<blockquote>
<p>
The functions in the printf() family produce output according to a format as described below.  The functions
printf()  and  vprintf()  write output to stdout, the standard output stream; fprintf() and vfprintf() write
output to the given output stream; sprintf(), snprintf(), vsprintf() and vsnprintf() write to the  character
string str.
</p>

<p>
The function dprintf() is the same as fprintf(3) except that it outputs to a file descriptor, fd, instead of
to a stdio stream.
</p>

<p>
The functions snprintf() and vsnprintf() write at most size  bytes  (including  the  terminating  null  byte
('\0')) to str.
</p>
</blockquote>

<p>
返回值
</p>
<blockquote>
<p>
Upon  successful  return,  these  functions return the number of characters printed (excluding the null byte
used to end output to strings).
</p>

<p>
The functions snprintf() and vsnprintf() do not write more than size bytes (including the  terminating  null
byte ('\0')).  If the output was truncated due to this limit, then the return value is the number of charac‐
ters (excluding the terminating null byte) which would have been written to the final string if enough space
had  been  available.   Thus, a return value of size or more means that the output was truncated.  (See also
below under NOTES.)
</p>

<p>
If an output error is encountered, a negative value is returned.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">了解 snprintf</h2>
<div class="outline-text-2" id="text-2">
<p>
sprintf 输出到缓冲区，提供的缓存区空间不足时，引发臭名昭著的 <code>缓存区溢出</code> 漏洞，snprintf 通过指定缓存区空间大小解决了这个问题。
</p>

<p>
snprintf 常用于字符串格式化（如：拼接 SQL 或 shell 命令），很多人会用它的返回值来指定下一次拼接的起始位置。
</p>

<p>
如下代码所示：
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #99cc99;">const</span> <span style="color: #6699cc;">char</span>* <span style="color: #ffcc66;">fields</span>[] = {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #66cccc;">"name"</span>,
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #66cccc;">"age"</span>,
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #66cccc;">"city"</span>
};

<span style="color: #6699cc;">char</span> <span style="color: #ffcc66;">sql</span>[10] = <span style="color: #66cccc;">"select "</span>;
<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">pos</span> = 0;

<span style="color: #99cc99;">for</span>(<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">i</span> = 0; i &lt; <span style="color: #99cc99;">sizeof</span>(fields)/<span style="color: #99cc99;">sizeof</span>(fields[0]); ++i) {
<span style="color: #cccccc; background-color: #515151;"> </span>   pos += snprintf(sql + pos, <span style="color: #99cc99;">sizeof</span>(sql) - pos, <span style="color: #66cccc;">"%s%s"</span>, (i ? <span style="color: #66cccc;">", "</span> : <span style="color: #66cccc;">""</span>), field<span style="text-decoration: underline;">s[i]);</span>
}

snprintf(sql + pos, <span style="color: #99cc99;">sizeof</span>(sql) - pos, <span style="color: #66cccc;">" from users"</span>);
</pre>
</div>

<p>
上面的代码没有处理缓存区不足的问题，最坏的结果仅仅是因缓存区空间不足而导致 sql 不完整吗？
</p>

<p>
比那要严重多了，它还会导致”缓存区溢出“漏洞。
</p>

<p>
这是因为，当缓冲区尺寸不足时，snprintf 会返回比缓冲区尺寸大的值，最后会导致传给 snprintf 的缓存区尺寸值为负数，
转化为无符号整型（size_t）就是一个超大的整数值。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">使用 snprintf 的正确姿势</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-c"><span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">pos</span> = 0;
<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">n</span> = snprintf(buffer + pos, <span style="color: #99cc99;">sizeof</span>(buffer) - pos, <span style="color: #66cccc;">"%s"</span>, <span style="color: #66cccc;">"hello"</span>);
<span style="color: #99cc99;">if</span> (n &gt;= <span style="color: #99cc99;">sizeof</span>(buffer) - pos) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">// </span><span style="color: #999999; font-style: italic;">a return value of size or more means that the output was truncated</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"error: buffer size not enough\n"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span>;
}
n += pos;

n = snprintf(buffer + pos, <span style="color: #99cc99;">sizeof</span>(buffer) - pos, <span style="color: #66cccc;">"%s"</span>, <span style="color: #66cccc;">" snprintf"</span>);
<span style="color: #99cc99;">if</span> (n &gt;= <span style="color: #99cc99;">sizeof</span>(buffer) - pos) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">// </span><span style="color: #999999; font-style: italic;">a return value of size or more means that the output was truncated</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"error: buffer size not enough\n"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span>;
}
n += pos;
</pre>
</div>

<p>
下次在代码里，当你看到有人用 snprintf 进行”漂亮“的拼接，相信你会从”哇“改口为”操“了。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[安全使用libcurl的正确姿势]]></title>
            <link>/article/5b8951684f7f7528-libcurl-76846b63786e59ff52bf.html</link>
            <guid>/article/5b8951684f7f7528-libcurl-76846b63786e59ff52bf.html</guid>
            <pubDate>Mon, 21 Dec 2015 10:14:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在我们的项目中，数次遇到 <code>libcurl</code> 导致的应用程序崩溃问题，这里总结了一下使用 <code>libcurl</code> 的正确姿势。
</p>

<div class="org-src-container">

<pre class="src src-c"><span class="linenr"> 1: </span><span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;curl/curl.h&gt;</span>
<span class="linenr"> 2: </span><span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;stdint.h&gt;</span>
<span class="linenr"> 3: </span><span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;string.h&gt;</span>
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span>
<span class="linenr"> 6: </span><span style="color: #cc99cc;">#define</span> <span style="color: #ffcc66;">RESPONSE_BODY_SIZE</span> 128
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span style="color: #99cc99;">static</span> <span style="color: #6699cc;">size_t</span> <span style="color: #f99157;">write_function</span>(<span style="color: #99cc99;">const</span> <span style="color: #6699cc;">void</span> *<span style="color: #ffcc66;">buffer</span>, <span style="color: #99cc99;">const</span> <span style="color: #6699cc;">size_t</span> <span style="color: #ffcc66;">size</span>, <span style="color: #99cc99;">const</span> <span style="color: #6699cc;">size_t</span><span style="text-decoration: underline;"> </span><span style="color: #ffcc66; text-decoration: underline;">nmemb</span><span style="text-decoration: underline;">, </span><span style="color: #6699cc; text-decoration: underline;">void</span><span style="text-decoration: underline;"> *</span><span style="color: #ffcc66; text-decoration: underline;">user_p</span><span style="text-decoration: underline;">)</span>
<span class="linenr"> 9: </span>{
<span class="linenr">10: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">char</span>* <span style="color: #ffcc66;">response_body</span> = (<span style="color: #6699cc;">char</span>*)user_p;
<span class="linenr">11: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">uint32_t</span> <span style="color: #ffcc66;">response_body_len</span> = strlen(response_body);
<span class="linenr">12: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">uint32_t</span> <span style="color: #ffcc66;">len</span> = size*nmemb;
<span class="linenr">13: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (len &gt; RESPONSE_BODY_SIZE - response_body_len - 1) {
<span class="linenr">14: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   len = RESPONSE_BODY_SIZE - response_body_len - 1;
<span class="linenr">15: </span><span style="color: #cccccc; background-color: #515151;"> </span>   }
<span id="coderef-curl_write_function_buffer" class="coderef-off"><span class="linenr">16: </span><span style="color: #cccccc; background-color: #515151;"> </span>   memcpy(response_body + response_body_len, buffer, len);</span>
<span id="coderef-curl_write_function_return" class="coderef-off"><span class="linenr">17: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> size*nmemb;</span>
<span class="linenr">18: </span>}
<span class="linenr">19: </span>
<span class="linenr">20: </span><span style="color: #6699cc;">int</span> <span style="color: #f99157;">main</span>(<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">argc</span>, <span style="color: #6699cc;">char</span> *<span style="color: #ffcc66;">argv</span>[])
<span class="linenr">21: </span>{
<span class="linenr">22: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">const</span> <span style="color: #6699cc;">char</span>* <span style="color: #ffcc66;">url</span> = <span style="color: #66cccc;">"http://www.example.com/dns_servers"</span>;
<span class="linenr">23: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">struct</span> <span style="color: #6699cc;">curl_slist</span> *<span style="color: #ffcc66;">headers</span> = <span style="color: #6699cc;">NULL</span>;
<span class="linenr">24: </span><span style="color: #cccccc; background-color: #515151;"> </span>   headers = curl_slist_append(headers, <span style="color: #66cccc;">"Content-Type: application/json"</span>);
<span class="linenr">25: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">const</span> <span style="color: #6699cc;">char</span>* <span style="color: #ffcc66;">request_body</span> = <span style="color: #66cccc;">"{\"host\": \"8.8.8.8\", \"port\": 53}"</span>;
<span class="linenr">26: </span>
<span class="linenr">27: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">CURL</span> *<span style="color: #ffcc66;">curl</span>;
<span class="linenr">28: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">CURLcode</span> <span style="color: #ffcc66;">res</span>;
<span class="linenr">29: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">char</span> <span style="color: #ffcc66;">response_body</span>[RESPONSE_BODY_SIZE] = {<span style="color: #66cccc;">'\0'</span>};
<span class="linenr">30: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">long</span> <span style="color: #ffcc66;">response_code</span> = 0;
<span class="linenr">31: </span>
<span class="linenr">32: </span><span style="color: #cccccc; background-color: #515151;"> </span>   curl = curl_easy_init();
<span class="linenr">33: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(curl) {
<span class="linenr">34: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   curl_easy_setopt(curl, CURLOPT_URL, url);
<span class="linenr">35: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
<span class="linenr">36: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   curl_easy_setopt(curl, CURLOPT_POSTFIELDS, request_body);
<span class="linenr">37: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, strlen(request_body));
<span id="coderef-curl_nosignal" class="coderef-off"><span class="linenr">38: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1L);</span>
<span class="linenr">39: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   curl_easy_setopt(curl, CURLOPT_TIMEOUT, 10L);
<span class="linenr">40: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_function);
<span class="linenr">41: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   curl_easy_setopt(curl, CURLOPT_WRITEDATA, response_body);
<span class="linenr">42: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   res = curl_easy_perform(curl);
<span class="linenr">43: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (res == CURLE_OK) {
<span id="coderef-curl_response_code" class="coderef-off"><span class="linenr">44: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   res = curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &amp;response_code<span style="text-decoration: underline;">);</span></span>
<span class="linenr">45: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   }
<span class="linenr">46: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(res != CURLE_OK) {
<span class="linenr">47: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"request to %s error(%d): %s"</span>, url, res, curl_easy_s<span style="text-decoration: underline;">trerror(res));</span>
<span class="linenr">48: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   }
<span class="linenr">49: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   curl_easy_cleanup(curl);
<span class="linenr">50: </span><span style="color: #cccccc; background-color: #515151;"> </span>   }
<span class="linenr">51: </span>
<span class="linenr">52: </span><span style="color: #cccccc; background-color: #515151;"> </span>   curl_slist_free_all(headers);
<span class="linenr">53: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (response_code == 201) {
<span class="linenr">54: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"request to %s successful: %s\n"</span>, url, response_body);
<span class="linenr">55: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> 0;
<span class="linenr">56: </span><span style="color: #cccccc; background-color: #515151;"> </span>   }
<span class="linenr">57: </span>
<span class="linenr">58: </span><span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"request to %s response failed(%ld): %s\n"</span>, url, response_co<span style="text-decoration: underline;">de, response_body);</span>
<span class="linenr">59: </span><span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> 1;
<span class="linenr">60: </span>}
</pre>
</div>

<p>
上面的示例代码要注意的地方：
</p>

<dl class="org-dl">
<dt> 行 <a href="#coderef-curl_write_function_buffer"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-curl_write_function_buffer');" onmouseout="CodeHighlightOff(this, 'coderef-curl_write_function_buffer');">16</a> </dt><dd>buffer不是 <code>\0</code> 结尾的
</dd>

<dt> 行 <a href="#coderef-curl_write_function_return"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-curl_write_function_return');" onmouseout="CodeHighlightOff(this, 'coderef-curl_write_function_return');">17</a> </dt><dd>总是返回 <code>size*nmemb</code>
</dd>

<dt> 行 <a href="#coderef-curl_nosignal"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-curl_nosignal');" onmouseout="CodeHighlightOff(this, 'coderef-curl_nosignal');">38</a> </dt><dd>总是设置这个选项

<p>
<code>libcurl</code> 不支持异步 <code>dns</code> 解析时，会通过 <code>signal</code> 的方式实现 <code>dns</code> 解析设置超时， <code>signal</code> 会导致多线程程序崩溃，后台服务通常都是多线程的，所以应该总是设置这个选项（但是 <code>libcurl</code> 不支持异步 <code>dns</code> 解析时，超时选项将被忽略）。
</p>

<p>
可以通过运行 <code>curl --version</code> 命令或调用 <code>curl_version</code> 函数查看 <code>libcurl</code> 是否支持异步 <code>dns</code> 解析，调用 <code>curl_version_info</code> 函数还可以获得具体的 <code>c-ares</code> 库版本号。
</p>

<p>
编译 <code>libcurl</code> 时，通过为  <code>configure</code> 指定 <code>--enable-threaded-resolver</code> 或 <code>--enable-ares</code> 选项启用异步 <code>dns</code> 解析。
</p>
</dd>

<dt> 行 <a href="#coderef-curl_response_code"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-curl_response_code');" onmouseout="CodeHighlightOff(this, 'coderef-curl_response_code');">44</a> </dt><dd>状态响应码变量必须是 <code>long</code> 类型

<p>
否则会由于内存越界导致程序崩溃。</p>
</dd>
</dl>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[修复libcurl域名解析超时引起的内存越界问题]]></title>
            <link>/article/4fee590d-libcurl-57df540d89e367908d8565f65f158d77768451855b588d8a754c95ee9898.html</link>
            <guid>/article/4fee590d-libcurl-57df540d89e367908d8565f65f158d77768451855b588d8a754c95ee9898.html</guid>
            <pubDate>Wed, 09 Dec 2015 06:17:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
程序发布后在一个用户的机器上频繁出现崩溃，最终定位到崩溃来自一个断言失败：
</p>

<div class="org-src-container">

<pre class="src src-c">assert(pthread_self() != main_thread_id);
</pre>
</div>

<p>
上面这条语句出现在工作线程回调的函数中，竟然发生了工作线程ID和主线程ID相同的怪事，
观察了运行日志，发现使用libcurl发起HTTP请求如果超时则有很大机率会断言失败导致崩溃，
在使用libcurl发起HTTP请求的代码块前后输出工作线程ID，工作线程ID出现了变化，
根据经验很可能是出现了内存越界。
</p>

<p>
最终找到了几篇 <code>libcurl</code> 多线程安全相关的文章：
</p>

<ul class="org-ul">
<li>《<a href="http://blog.csdn.net/balderfan/article/details/7599554">libcurl 多线程使用注意事项</a>》
</li>

<li>《<a href="http://blog.csdn.net/delphiwcdj/article/details/18284429">Libcurl多线程crash问题</a>》
</li>
</ul>

<p>
修复步骤总结如下：
</p>

<ul class="org-ul">
<li>在主线程起始处初始化 <code>libcurl</code> 库

<div class="org-src-container">

<pre class="src src-c">curl_global_init(CURL_GLOBAL_ALL);
</pre>
</div>
</li>

<li>禁止 <code>libcurl</code> 通过 <code>alarm</code> 实现域名解析超时

<div class="org-src-container">

<pre class="src src-c">curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1L);
</pre>
</div>

<p>
如果不做下面的最后一步， <code>libcurl</code> 上设置的超时都会无效。
</p>
</li>

<li>编译 <code>libcurl</code> 时启用 <code>c-ares</code> 或 <code>threaded resolver</code> ，以支持域名解析超时

<div class="org-src-container">

<pre class="src src-sh">./configure --enable-ares
</pre>
</div>

<p>
或
</p>

<div class="org-src-container">

<pre class="src src-sh">./configure --enable-threaded-resolver
</pre>
</div>

<p>
《<a href="http://daniel.haxx.se/blog/2011/04/25/libcurls-name-resolving/">Asynch resolving in libcurl</a>》对 <code>c-ares</code> 或 <code>threaded resolver</code> 两种方式进行了比较，简而言之：
</p>

<ul class="org-ul">
<li><code>c-ares</code> 是一个异步的域名解析库，开销更少，但是它并非使用系统原生的方式实现，对于定制系统（如：hosts或resolv.conf不在标准位置）可能会有问题。
</li>

<li><code>threaded resolver</code> 每次域名解析都会开一个线程，解析完成后销毁线程，开销会大一些，但是稳定性、兼容性更好。
</li>
</ul>
</li>
</ul>

<p>
按照上面的步骤启用 <code>c-ares</code> 进行修改后程序运行了一整天，没有再崩溃。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下编程获取/etc/resolv.conf中的域名解析服务器]]></title>
            <link>/article/linux-4e0b7f167a0b83b753d6-etc-resolv.conf-4e2d768457df540d89e36790670d52a15668.html</link>
            <guid>/article/linux-4e0b7f167a0b83b753d6-etc-resolv.conf-4e2d768457df540d89e36790670d52a15668.html</guid>
            <pubDate>Fri, 14 Aug 2015 10:01:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
直接上代码吧：
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;unistd.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;sys/types.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;netinet/in.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;arpa/inet.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;arpa/nameser.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;resolv.h&gt;</span>

<span style="color: #6699cc;">int</span> <span style="color: #f99157;">main</span>(<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">argc</span>, <span style="color: #6699cc;">char</span> *<span style="color: #ffcc66;">argv</span>[])
{
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">struct</span> <span style="color: #6699cc;">__res_state</span> <span style="color: #ffcc66;">res</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   res.options &amp;= ~ RES_INIT;

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">err</span> = res_ninit(&amp;res);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (err) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"res_init error: %d\n"</span>, err);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> err;
<span style="color: #cccccc; background-color: #515151;"> </span>   }

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">char</span> <span style="color: #ffcc66;">ip</span>[16];
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">for</span>(<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">i</span> = 0 ; i &lt; res.nscount; ++i) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   ip[0] = <span style="color: #66cccc;">'\0'</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (<span style="color: #6699cc;">!</span> inet_ntop(AF_INET, &amp;res.nsaddr_list[i].sin_addr, ip, <span style="color: #99cc99;">sizeof</span>(ip))) <span style="text-decoration: underline;">{</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   perror(<span style="color: #66cccc;">"inet_ntop"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">continue</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   }
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   printf(<span style="color: #66cccc;">"ip: %s\n"</span>, ip);
<span style="color: #cccccc; background-color: #515151;"> </span>   }

<span style="color: #cccccc; background-color: #515151;"> </span>   res_nclose(&amp;res);

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> 0;
}
</pre>
</div>

<ul class="org-ul">
<li>参考

<p>
《<a href="http://stackoverflow.com/questions/2916675/programmatically-obtain-dns-servers-of-host">Programmatically obtain DNS servers of host</a>》</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[config库避免磁盘满时配置文件被截断]]></title>
            <link>/article/config-5e93907f514d78c176d86ee165f6914d7f6e65874ef688ab622a65ad.html</link>
            <guid>/article/config-5e93907f514d78c176d86ee165f6914d7f6e65874ef688ab622a65ad.html</guid>
            <pubDate>Mon, 20 Jul 2015 09:35:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://github.com/tangxinfa/config">config</a> 库在实际使用过程中发现一个问题：磁盘满时写配置文件可能导致配置文件被清空（文件大小为0）。
</p>

<p>
想到两种方案：
</p>

<ul class="org-ul">
<li>写-替换

<p>
先写到一个临时文件，写成功后替换目标文件，这是由linux下重命名（rename）文件的原子性保证的。由于我们是通过对配置文件加锁的方式支持多进程访问的，可以对配置文件使用独立的锁文件，一想起到配置文件目录里将出现一大堆锁文件，胃就不舒服。
</p>
</li>

<li>预分配空间

<p>
先确保文件拥有足够的空间再写入。虽然不是原子性的，但已经能够解决问题。我比较倾向于这个方案。
</p>
</li>
</ul>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">通过预分配空间方式安全写文件算法</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>如果当前文件过小（不足以容纳新内容），在文件尾部通过追加占位字符（\0）直到文件大小合适
</li>

<li>写入新内容
</li>

<li>将过多的空间截掉
</li>
</ul>

<p>
具体实现参见： <a href="https://github.com/tangxinfa/config/commit/5ed686fc42c3356658d67d2d3bb59d3435f8c68f">5ed686f Fix bug: config file content missing when disk full</a> .
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">测试</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">创建模拟磁盘目录 /mnt/disk</h3>
<div class="outline-text-3" id="text-2-1">
<p>
先确保存在 <code>/dev/loop*</code> 设备，如果不存在先尝试挂载 <code>loop</code> 内核模块
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo modprobe loop
</pre>
</div>

<p>
如果还是没有 <code>loop</code> 设备，可能是最近进行了系统升级，重启后再试。
</p>

<p>
创建模拟磁盘（/mnt/disk）：
</p>

<pre class="example">
$ sudo dd if=/dev/zero of=~/Examples/disk.img bs=8M count=1
$ sudo losetup /dev/loop0 ~/Examples/disk.img
$ sudo parted /dev/loop0
GNU Parted 3.2
Using /dev/loop0
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) mklabel gpt
Warning: The existing disk label on /dev/loop0 will be destroyed and all data on
this disk will be lost. Do you want to continue?
Yes/No? yes
(parted) mkpart primary 0MB 8MB
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? Ignore
(parted) print
Model: Loopback device (loopback)
Disk /dev/loop0: 8389kB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags: 

Number  Start   End     Size    File system  Name  Flags
 1      17.4kB  8372kB  8354kB

(parted) quit
$ sudo mkfs.ext4 /dev/loop0p1
$ sudo mkdir /mnt/disk
$ sudo mount /dev/loop0p1 /mnt/disk
</pre>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">修复前</h3>
<div class="outline-text-3" id="text-2-2">
<p>
磁盘空间不足写配置导致配置文件被损坏
</p>

<pre class="example">
$ sudo ~/Opensource/config/config /mnt/disk/test.json set name libconfig
name: libconfig
$ sudo dd if=/dev/zero of=/mnt/disk/other.data bs=1 obs=1 count=100000000
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.44769 s, 916 kB/s
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.53017 s, 906 kB/s
$ sudo ~/Opensource/config/config /mnt/disk/test.json set data "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
config: write: No space left on device
config: save config file(/mnt/disk/test.json) failed
data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
$ sudo ~/Opensource/config/config /mnt/disk/test.json get name
config: get items(name,,,,,) from config file(/mnt/disk/test.json) failed
</pre>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">修复后</h3>
<div class="outline-text-3" id="text-2-3">
<p>
磁盘空间不足写配置不会对配置文件造成实质影响
</p>

<pre class="example">
$ sudo ~/Opensource/config/config /mnt/disk/test.json set name libconfig
name: libconfig
$ sudo dd if=/dev/zero of=/mnt/disk/other.data bs=1 obs=1 count=100000000
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.6254 s, 895 kB/s
$ sudo ~/Opensource/config/config /mnt/disk/test.json set data "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
config: write: No space left on device
config: save config file(/mnt/disk/test.json) failed
data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
$ sudo ~/Opensource/config/config /mnt/disk/test.json get name
name: libconfig
</pre>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">清除测试环境</h3>
<div class="outline-text-3" id="text-2-4">
<div class="org-src-container">

<pre class="src src-sh">sudo umount /dev/loop0p1
sudo losetup -d /dev/loop0
sudo rmdir /mnt/disk
sudo rm ~/Examples/disk.img
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">参考</h2>
<div class="outline-text-2" id="text-3">
<p>
《<a href="http://www.oschina.net/translate/reliable-file-updates-with-python">使用 Python 进行稳定可靠的文件操作</a>》</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSL_read及SSL_write支持超时]]></title>
            <link>/article/ssl_read-53ca-ssl_write-652f63018d8565f6.html</link>
            <guid>/article/ssl_read-53ca-ssl_write-652f63018d8565f6.html</guid>
            <pubDate>Tue, 27 Jan 2015 06:29:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
原始的socket编程中 <code>read</code> 、 <code>write</code> 支持超时是很容易实现的，如使用 <code>select</code> 或者 <code>setsockopt</code> 设置读写超时并在 <code>read</code> 和 <code>write</code> 出错后根据 <code>errno</code> 判断是否为超时引起。
</p>

<p>
但是在 <code>SSL</code> 编程中对底层socket调用 <code>select</code> 以及使用 <code>errno</code> 行为是未定义的。
</p>

<p>
使用 <code>setsockopt</code> 在底层的socket上设置读写后， <code>SSL_read</code> 、 <code>SSL_write</code> 出错会返回ssl错误码 <code>SSL_ERROR_WANT_READ</code> 或 <code>SSL_ERROR_WANT_WRITE</code> ，
但是被信号中断或者底层SSL需要重新握手也会导致 <code>SSL_read</code> 、 <code>SSL_write</code> 返回同样的ssl错误码。
</p>

<p>
如果能够将信号屏蔽掉，并启用SSL自动重新握手，就能够实现 <code>SSL_read</code> 、 <code>SSL_write</code> 超时检测。
</p>

<ul class="org-ul">
<li>屏蔽信号

<p>
忽略应用产生的信号，如：
</p>

<div class="org-src-container">

<pre class="src src-c">signal(SIGPIPE, SIG_IGN);
signal(SIGCHLD, SIG_IGN);
</pre>
</div>
</li>

<li>在底层socket上设置超时

<div class="org-src-container">

<pre class="src src-c"><span style="color: #99cc99;">struct</span> <span style="color: #6699cc;">timeval</span> <span style="color: #ffcc66;">tv</span>;
tv.tv_sec  = 10;
tv.tv_usec = 0;
setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (<span style="color: #6699cc;">char</span>*)&amp;tv, <span style="color: #99cc99;">sizeof</span>(<span style="color: #99cc99;">struct</span> <span style="color: #6699cc;">timeval</span>));
setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (<span style="color: #6699cc;">char</span>*)&amp;tv, <span style="color: #99cc99;">sizeof</span>(<span style="color: #99cc99;">struct</span> <span style="color: #6699cc;">timeval</span>));
</pre>
</div>
</li>

<li>启用自动重新握手

<div class="org-src-container">

<pre class="src src-c">SSL_CTX_set_mode(ctx, SSL_MODE_AUTO_RETRY);
</pre>
</div>
</li>

<li><code>SSL_read</code> 和 <code>SSL_write</code> 判断是否超时出错

<div class="org-src-container">

<pre class="src src-c"><span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">readed</span> = SSL_read(ssl, data, size);
<span style="color: #99cc99;">if</span> (readed &lt;= 0) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (SSL_get_error(ssl, readed) == SSL_ERROR_WANT_READ) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">// </span><span style="color: #999999; font-style: italic;">timeout</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   } <span style="color: #99cc99;">else</span> {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">// </span><span style="color: #999999; font-style: italic;">error</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   }
}

<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">writed</span> = SSL_write(ssl, data, size);
<span style="color: #99cc99;">if</span> (writed &lt;= 0) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span> (SSL_get_error(ssl, writed) == SSL_ERROR_WANT_WRITE) {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">// </span><span style="color: #999999; font-style: italic;">timeout</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   } <span style="color: #99cc99;">else</span> {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">// </span><span style="color: #999999; font-style: italic;">error</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   }
}
</pre>
</div>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下允许普通用户执行需要root权限的命令]]></title>
            <link>/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html</link>
            <guid>/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html</guid>
            <pubDate>Thu, 26 Dec 2013 07:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
最典型的情况是要实现一个通过web界面重启系统的功能，通常为了安全会以非root用户身份（通常是nobody）运行服务端脚本，这样脚本中就不能执行危险操作了。
</p>

<p>
下面的c工具程序可以允许任意用户执行需要root权限的命令：
</p>

<p>
<a href="../static/as_root.c">as_root.c</a>
</p>

<p>
编译：
</p>
<div class="org-src-container">

<pre class="src src-sh">gcc -g as_root.c -o as_root
</pre>
</div>

<p>
配置：
</p>
<div class="org-src-container">

<pre class="src src-sh">chown root:root ./as_root; chmod 4755 ./as_root
</pre>
</div>

<p>
运行：
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo -u <span style="color: #66cccc;">"nobody"</span> ./as_root <span style="color: #66cccc;">"reboot"</span>
</pre>
</div>

<p>
参考：<a href="http://blog.tianya.cn/blogger/post_show.asp?BlogID=126326&PostID=1629441">如何在普通用户下执行一些需要root用户执行的命令</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSL双方系统时间不一致导致的SSL连接失败及其解决方案]]></title>
            <link>/article/ssl-53cc65b97cfb7edf65f695f44e0d4e0081f45bfc81f47684-ssl-8fde63a559318d2553ca517689e351b365b96848.html</link>
            <guid>/article/ssl-53cc65b97cfb7edf65f695f44e0d4e0081f45bfc81f47684-ssl-8fde63a559318d2553ca517689e351b365b96848.html</guid>
            <pubDate>Fri, 25 Jul 2008 09:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在产品使用中，实施人员常常报告服务器与客户端无法连接，最终查明原因是双方的时间设置不一致。OpenSSL证书有一个有效时间段，当客户端或服务器的系统时间不在这个时间段内时SSL会因证书验证失败而无法连接。在实施中系统时间错误是很常见的，因不能上网而未开时间自动同步、bios没电了、客户疏忽等原因都会导致系统时间设置错误。如果连接失败后再查看系统时间设置进行故障排查终归是一件麻烦的事情。
</p>

<p>
解决这个问题有以下几个办法：
</p>

<ul class="org-ul">
<li>将证书的有效期设置得够大（如：1970-2099）

<p>
这样估计可以在一定程度上解决这个问题，不过这也是个馊主意，一般申请的证书总会有一个合理的有效期。
</p>
</li>

<li>检测及必要时自动同步客户端与服务器的时间

<p>
通过用wireshake抓包分析SSL建立连接的过程，发现在SSL握手过程中，会向对方传送本机的系统时间。因此一个显而易见的办法就是，当连接过程中检测到证书过期，将客户端的时间同步为服务器端的时间，再重连即可。
</p>

<p>
下面是具体的示例代码：
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;openssl/ssl.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;openssl/bio.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;openssl/err.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;winsock2.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;stdio.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;string.h&gt;</span>
<span style="color: #cc99cc;">#include</span> <span style="color: #66cccc;">&lt;time.h&gt;</span>

<span style="color: #99cc99;">typedef</span> <span style="color: #99cc99;">struct</span> <span style="color: #6699cc;">_TimeInfo</span>
{
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">time_t</span> <span style="color: #ffcc66;">client</span>;  <span style="color: #999999; font-style: italic;">/*</span><span style="color: #999999; font-style: italic;">&#23458;&#25143;&#31471;&#30340;&#26102;&#38388;</span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">time_t</span> <span style="color: #ffcc66;">server</span>;  <span style="color: #999999; font-style: italic;">/*</span><span style="color: #999999; font-style: italic;">&#26381;&#21153;&#22120;&#30340;&#26102;&#38388;</span><span style="color: #999999; font-style: italic;">*/</span>
} <span style="color: #6699cc;">TimeInfo</span>;

<span style="color: #cc99cc;">/**</span>
<span style="color: #cccccc; background-color: #515151;"> </span><span style="color: #cc99cc;">* &#21516;&#27493;&#31995;&#32479;&#26102;&#38388;.</span>
<span style="color: #cccccc; background-color: #515151;"> </span><span style="color: #cc99cc;">*/</span>
<span style="color: #6699cc;">BOOL</span> <span style="color: #f99157;">syncSystemTime</span>(<span style="color: #6699cc;">time_t</span> <span style="color: #ffcc66;">t</span>)
{
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">SYSTEMTIME</span> <span style="color: #ffcc66;">st</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">FILETIME</span>   <span style="color: #ffcc66;">ft</span>;<span style="color: #f99157; background-color: #515151;">  </span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">LONGLONG</span>   <span style="color: #ffcc66;">ll</span>;<span style="color: #f99157; background-color: #515151;">  </span>

<span style="color: #cccccc; background-color: #515151;"> </span>   ll = Int32x32To64(t, 10000000) + 116444736000000000; <span style="color: #999999; font-style: italic;">//</span><span style="color: #999999; font-style: italic;">1970.01.01</span><span style="color: #f99157; background-color: #515151;">  </span>

<span style="color: #cccccc; background-color: #515151;"> </span>   ft.dwLowDateTime  = (<span style="color: #6699cc;">DWORD</span>)ll;<span style="color: #f99157; background-color: #515151;">  </span>
<span style="color: #cccccc; background-color: #515151;"> </span>   ft.dwHighDateTime = (<span style="color: #6699cc;">DWORD</span>)(ll &gt;&gt; 32);<span style="color: #f99157; background-color: #515151;">  </span>

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> FileTimeToSystemTime(&amp;ft, &amp;st) &amp;&amp; SetSystemTime(&amp;st);
}

<span style="color: #cc99cc;">/**</span>
<span style="color: #cccccc; background-color: #515151;"> </span><span style="color: #cc99cc;">* &#33719;&#21462;SSL&#25569;&#25163;&#36807;&#31243;&#20013;&#26381;&#21153;&#22120;&#19982;&#23458;&#25143;&#31471;&#21452;&#26041;&#30340;&#31995;&#32479;&#26102;&#38388;.</span>
<span style="color: #cccccc; background-color: #515151;"> </span><span style="color: #cc99cc;">*/</span>
<span style="color: #6699cc;">void</span> <span style="color: #f99157;">getSSLHandleShakeTimeInfo</span>(<span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">write_p</span>,
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>  <span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">version</span>,
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>  <span style="color: #6699cc;">int</span> <span style="color: #ffcc66;">content_type</span>,
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>  <span style="color: #99cc99;">const</span> <span style="color: #6699cc;">unsigned</span> <span style="color: #6699cc;">char</span>* <span style="color: #ffcc66;">buf</span>,
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>  <span style="color: #6699cc;">size_t</span> <span style="color: #ffcc66;">len</span>,
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>  <span style="color: #6699cc;">SSL</span> *<span style="color: #ffcc66;">ssl</span>,
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>  <span style="color: #6699cc;">TimeInfo</span> *<span style="color: #ffcc66;">ti</span>)
{
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(content_type != 22)   <span style="color: #999999; font-style: italic;">//</span><span style="color: #999999; font-style: italic;">require handshake message</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(len &lt; 42)
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(buf[0] == 1)          <span style="color: #999999; font-style: italic;">//</span><span style="color: #999999; font-style: italic;">ClientHello Message send from client to server</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   ti-&gt;client = htonl(*((<span style="color: #6699cc;">u_long</span>*)(buf + 6)));
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">else</span> <span style="color: #99cc99;">if</span>(buf[0] == 2)     <span style="color: #999999; font-style: italic;">//</span><span style="color: #999999; font-style: italic;">ServerHello Message send from server to client</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   ti-&gt;server = htonl(*((<span style="color: #6699cc;">u_long</span>*)(buf + 6)));
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">else</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span>;
}

<span style="color: #6699cc;">int</span> <span style="color: #f99157;">main</span>()
{
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">BIO</span> * <span style="color: #ffcc66;">bio</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">SSL</span> * <span style="color: #ffcc66;">ssl</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">SSL_CTX</span> * <span style="color: #ffcc66;">ctx</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">TimeInfo</span> <span style="color: #ffcc66;">timeInfo</span> = {-1, -1};
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">BOOL</span> <span style="color: #ffcc66;">timeSynced</span> = FALSE;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #6699cc;">long</span> <span style="color: #ffcc66;">result</span>;

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">/* </span><span style="color: #999999; font-style: italic;">Set up the library </span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   SSL_library_init();
<span style="color: #cccccc; background-color: #515151;"> </span>   ERR_load_BIO_strings();
<span style="color: #cccccc; background-color: #515151;"> </span>   SSL_load_error_strings();

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">/* </span><span style="color: #999999; font-style: italic;">Set up the SSL context </span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   ctx = SSL_CTX_new(SSLv3_client_method());
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(ctx == <span style="color: #6699cc;">NULL</span>)
<span style="color: #cccccc; background-color: #515151;"> </span>   {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"Error new SSL_CTX\n"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   ERR_print_errors_fp(stderr);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   SSL_CTX_free(ctx);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> 0;
<span style="color: #cccccc; background-color: #515151;"> </span>   }

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">/* </span><span style="color: #999999; font-style: italic;">Get Server and Client system time via SSL Handshake </span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   SSL_CTX_set_msg_callback(ctx, getSSLHandleShakeTimeInfo);
<span style="color: #cccccc; background-color: #515151;"> </span>   SSL_CTX_set_msg_callback_arg(ctx, &amp;timeInfo);

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">/* </span><span style="color: #999999; font-style: italic;">Load the trust store </span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(<span style="color: #6699cc;">!</span> SSL_CTX_load_verify_locations(ctx, <span style="color: #66cccc;">".\\certs\\cacert.pem"</span>, <span style="color: #6699cc;">NULL</span>))
<span style="color: #cccccc; background-color: #515151;"> </span>   {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"Error loading trust store\n"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   ERR_print_errors_fp(stderr);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   SSL_CTX_free(ctx);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> 0;
<span style="color: #cccccc; background-color: #515151;"> </span>   }

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">/* </span><span style="color: #999999; font-style: italic;">Setup the connection </span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   bio = BIO_new_ssl_connect(ctx);

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">/* </span><span style="color: #999999; font-style: italic;">Set the SSL_MODE_AUTO_RETRY flag </span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   BIO_get_ssl(bio, &amp; ssl);
<span style="color: #cccccc; background-color: #515151;"> </span>   SSL_set_mode(ssl, SSL_MODE_AUTO_RETRY);

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">/* </span><span style="color: #999999; font-style: italic;">Create and setup the connection </span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   BIO_set_conn_hostname(bio, <span style="color: #66cccc;">"192.168.1.5:5555"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(BIO_do_connect(bio) &lt;= 0)
<span style="color: #cccccc; background-color: #515151;"> </span>   {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"Error attempting to connect\n"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   ERR_print_errors_fp(stderr);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   BIO_free_all(bio);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   SSL_CTX_free(ctx);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> 0;
<span style="color: #cccccc; background-color: #515151;"> </span>   }

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">/* </span><span style="color: #999999; font-style: italic;">Check the certificate </span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">switch</span>(SSL_get_verify_result(ssl))
<span style="color: #cccccc; background-color: #515151;"> </span>   {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">case</span> X509_V_OK:
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">break</span>;
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">case</span> X509_V_ERR_CERT_NOT_YET_VALID:
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">case</span> X509_V_ERR_CERT_HAS_EXPIRED:
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(timeInfo.server != -1 &amp;&amp; timeInfo.client != -1)
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   {
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   printf(<span style="color: #66cccc;">"&#24403;&#21069;&#23458;&#25143;&#31471;&#26102;&#38388;: %s"</span>, ctime(&amp;timeInfo.client));
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   printf(<span style="color: #66cccc;">"&#24403;&#21069;&#26381;&#21153;&#22120;&#26102;&#38388;: %s"</span>, ctime(&amp;timeInfo.server));
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   printf(<span style="color: #66cccc;">"&#23581;&#35797;&#19982;&#26381;&#21153;&#22120;&#26102;&#38388;&#21516;&#27493;"</span>);

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">if</span>(syncSystemTime(timeInfo.server))
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   printf(<span style="color: #66cccc;">"&#25104;&#21151;\n"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">else</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   printf(<span style="color: #66cccc;">"&#22833;&#36133;\n"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   printf(<span style="color: #66cccc;">"&#35831;&#37325;&#35797;&#36830;&#25509;&#26381;&#21153;&#22120;&#65281;\n"</span>);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   }
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">default</span>:
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   fprintf(stderr, <span style="color: #66cccc;">"Certificate verification error: %i\n"</span>, SSL_get_verify_r<span style="text-decoration: underline;">esult(ssl));</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   BIO_free_all(bio);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   SSL_CTX_free(ctx);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> 0;
<span style="color: #cccccc; background-color: #515151;"> </span>   }

<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #999999; font-style: italic;">/* </span><span style="color: #999999; font-style: italic;">Close the connection and free the context </span><span style="color: #999999; font-style: italic;">*/</span>
<span style="color: #cccccc; background-color: #515151;"> </span>   BIO_free_all(bio);
<span style="color: #cccccc; background-color: #515151;"> </span>   SSL_CTX_free(ctx);
<span style="color: #cccccc; background-color: #515151;"> </span>   <span style="color: #99cc99;">return</span> 0;
}
</pre>
</div>
</li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>