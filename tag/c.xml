<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>c - 看看俺 – KanKanAn.com</title>
        <description>记我所思，忆我所为。</description>
        <link>http://blog.kankanan.com/tag/c.xml</link>
        <lastBuildDate>Wed, 09 Dec 2015 15:08:50 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <image>
            <title>c - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/c.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <generator>Feed for Node.js</generator>
        <category>技术</category>
        <item>
            <title><![CDATA[修复libcurl域名解析超时引起的内存越界问题]]></title>
            <link>/article/4fee590d-libcurl-57df540d89e367908d8565f65f158d77768451855b588d8a754c95ee9898.html</link>
            <guid>/article/4fee590d-libcurl-57df540d89e367908d8565f65f158d77768451855b588d8a754c95ee9898.html</guid>
            <pubDate>Wed, 09 Dec 2015 06:17:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
程序发布后在一个用户的机器上频繁出现崩溃，最终定位到崩溃来自一个断言失败：
</p>

<div class="org-src-container">

<pre class="src src-c">assert(pthread_self() != main_thread_id);
</pre>
</div>

<p>
上面这条语句出现在工作线程回调的函数中，竟然发生了工作线程ID和主线程ID相同的怪事，
观察了运行日志，发现使用libcurl发起HTTP请求如果超时则有很大机率会断言失败导致崩溃，
在使用libcurl发起HTTP请求的代码块前后输出工作线程ID，工作线程ID出现了变化，
根据经验很可能是出现了内存越界。
</p>

<p>
最终找到了几篇 <code>libcurl</code> 多线程安全相关的文章：
</p>

<ul class="org-ul">
<li>《<a href="http://blog.csdn.net/balderfan/article/details/7599554">libcurl 多线程使用注意事项</a>》
</li>

<li>《<a href="http://blog.csdn.net/delphiwcdj/article/details/18284429">Libcurl多线程crash问题</a>》
</li>
</ul>

<p>
修复步骤总结如下：
</p>

<ul class="org-ul">
<li>在主线程起始处初始化 <code>libcurl</code> 库

<div class="org-src-container">

<pre class="src src-c">curl_global_init(CURL_GLOBAL_ALL);
</pre>
</div>
</li>

<li>禁止 <code>libcurl</code> 通过 <code>alarm</code> 实现域名解析超时

<div class="org-src-container">

<pre class="src src-c">curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1L);
</pre>
</div>

<p>
如果不做下面的最后一步， <code>libcurl</code> 上设置的超时都会无效。
</p>
</li>

<li>编译 <code>libcurl</code> 时启用 <code>c-ares</code> 或 <code>threaded resolver</code> ，以支持域名解析超时

<div class="org-src-container">

<pre class="src src-sh">./configure --enable-ares
</pre>
</div>

<p>
或
</p>

<div class="org-src-container">

<pre class="src src-sh">./configure --enable-threaded-resolver
</pre>
</div>

<p>
《<a href="http://daniel.haxx.se/blog/2011/04/25/libcurls-name-resolving/">Asynch resolving in libcurl</a>》对 <code>c-ares</code> 或 <code>threaded resolver</code> 两种方式进行了比较，简而言之：
</p>

<ul class="org-ul">
<li><code>c-ares</code> 是一个异步的域名解析库，开销更少，但是它并非使用系统原生的方式实现，对于定制系统（如：hosts或resolv.conf不在标准位置）可能会有问题。
</li>

<li><code>threaded resolver</code> 每次域名解析都会开一个线程，解析完成后销毁线程，开销会大一些，但是稳定性、兼容性更好。
</li>
</ul>
</li>
</ul>

<p>
按照上面的步骤启用 <code>c-ares</code> 进行修改后程序运行了一整天，没有再崩溃。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下编程获取/etc/resolv.conf中的域名解析服务器]]></title>
            <link>/article/linux-4e0b7f167a0b83b753d6-etc-resolv.conf-4e2d768457df540d89e36790670d52a15668.html</link>
            <guid>/article/linux-4e0b7f167a0b83b753d6-etc-resolv.conf-4e2d768457df540d89e36790670d52a15668.html</guid>
            <pubDate>Fri, 14 Aug 2015 10:01:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
直接上代码吧：
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;unistd.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;sys/types.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;netinet/in.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;arpa/inet.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;arpa/nameser.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;resolv.h&gt;</span>

<span style="color: #7aa6da;">int</span> <span style="color: #e78c45;">main</span>(<span style="color: #7aa6da;">int</span> <span style="color: #e7c547;">argc</span>, <span style="color: #7aa6da;">char</span> *<span style="color: #e7c547;">argv</span>[])
{
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">struct</span> <span style="color: #7aa6da;">__res_state</span> <span style="color: #e7c547;">res</span>;
<span style="background-color: #424242;"> </span>   res.options &amp;= ~ RES_INIT;

<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">int</span> <span style="color: #e7c547;">err</span> = res_ninit(&amp;res);
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span> (err) {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   fprintf(stderr, <span style="color: #70c0b1;">"res_init error: %d\n"</span>, err);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span> err;
<span style="background-color: #424242;"> </span>   }

<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">char</span> <span style="color: #e7c547;">ip</span>[16];
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">for</span>(<span style="color: #7aa6da;">int</span> <span style="color: #e7c547;">i</span> = 0 ; i &lt; res.nscount; ++i) {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   ip[0] = <span style="color: #70c0b1;">'\0'</span>;
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span> (<span style="color: #7aa6da;">!</span> inet_ntop(AF_INET, &amp;res.nsaddr_list[i].sin_addr, ip, <span style="color: #b9ca4a;">sizeof</span>(ip))) <span style="text-decoration: underline;">{</span>
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   perror(<span style="color: #70c0b1;">"inet_ntop"</span>);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">continue</span>;
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   }
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   printf(<span style="color: #70c0b1;">"ip: %s\n"</span>, ip);
<span style="background-color: #424242;"> </span>   }

<span style="background-color: #424242;"> </span>   res_nclose(&amp;res);

<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span> 0;
}
</pre>
</div>

<ul class="org-ul">
<li>参考

<p>
《<a href="http://stackoverflow.com/questions/2916675/programmatically-obtain-dns-servers-of-host">Programmatically obtain DNS servers of host</a>》</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[config库避免磁盘满时配置文件被截断]]></title>
            <link>/article/config-5e93907f514d78c176d86ee165f6914d7f6e65874ef688ab622a65ad.html</link>
            <guid>/article/config-5e93907f514d78c176d86ee165f6914d7f6e65874ef688ab622a65ad.html</guid>
            <pubDate>Mon, 20 Jul 2015 09:35:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="https://github.com/tangxinfa/config">config</a> 库在实际使用过程中发现一个问题：磁盘满时写配置文件可能导致配置文件被清空（文件大小为0）。
</p>

<p>
想到两种方案：
</p>

<ul class="org-ul">
<li>写-替换

<p>
先写到一个临时文件，写成功后替换目标文件，这是由linux下重命名（rename）文件的原子性保证的。由于我们是通过对配置文件加锁的方式支持多进程访问的，可以对配置文件使用独立的锁文件，一想起到配置文件目录里将出现一大堆锁文件，胃就不舒服。
</p>
</li>

<li>预分配空间

<p>
先确保文件拥有足够的空间再写入。虽然不是原子性的，但已经能够解决问题。我比较倾向于这个方案。
</p>
</li>
</ul>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">通过预分配空间方式安全写文件算法</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>如果当前文件过小（不足以容纳新内容），在文件尾部通过追加占位字符（\0）直到文件大小合适
</li>

<li>写入新内容
</li>

<li>将过多的空间截掉
</li>
</ul>

<p>
具体实现参见： <a href="https://github.com/tangxinfa/config/commit/5ed686fc42c3356658d67d2d3bb59d3435f8c68f">5ed686f Fix bug: config file content missing when disk full</a> .
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">测试</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">创建模拟磁盘目录 /mnt/disk</h3>
<div class="outline-text-3" id="text-2-1">
<p>
先确保存在 <code>/dev/loop*</code> 设备，如果不存在先尝试挂载 <code>loop</code> 内核模块
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo modprobe loop
</pre>
</div>

<p>
如果还是没有 <code>loop</code> 设备，可能是最近进行了系统升级，重启后再试。
</p>

<p>
创建模拟磁盘（/mnt/disk）：
</p>

<pre class="example">
$ sudo dd if=/dev/zero of=~/Examples/disk.img bs=8M count=1
$ sudo losetup /dev/loop0 ~/Examples/disk.img
$ sudo parted /dev/loop0
GNU Parted 3.2
Using /dev/loop0
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) mklabel gpt
Warning: The existing disk label on /dev/loop0 will be destroyed and all data on
this disk will be lost. Do you want to continue?
Yes/No? yes
(parted) mkpart primary 0MB 8MB
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? Ignore
(parted) print
Model: Loopback device (loopback)
Disk /dev/loop0: 8389kB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags: 

Number  Start   End     Size    File system  Name  Flags
 1      17.4kB  8372kB  8354kB

(parted) quit
$ sudo mkfs.ext4 /dev/loop0p1
$ sudo mkdir /mnt/disk
$ sudo mount /dev/loop0p1 /mnt/disk
</pre>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">修复前</h3>
<div class="outline-text-3" id="text-2-2">
<p>
磁盘空间不足写配置导致配置文件被损坏
</p>

<pre class="example">
$ sudo ~/Opensource/config/config /mnt/disk/test.json set name libconfig
name: libconfig
$ sudo dd if=/dev/zero of=/mnt/disk/other.data bs=1 obs=1 count=100000000
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.44769 s, 916 kB/s
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.53017 s, 906 kB/s
$ sudo ~/Opensource/config/config /mnt/disk/test.json set data "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
config: write: No space left on device
config: save config file(/mnt/disk/test.json) failed
data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
$ sudo ~/Opensource/config/config /mnt/disk/test.json get name
config: get items(name,,,,,) from config file(/mnt/disk/test.json) failed
</pre>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">修复后</h3>
<div class="outline-text-3" id="text-2-3">
<p>
磁盘空间不足写配置不会对配置文件造成实质影响
</p>

<pre class="example">
$ sudo ~/Opensource/config/config /mnt/disk/test.json set name libconfig
name: libconfig
$ sudo dd if=/dev/zero of=/mnt/disk/other.data bs=1 obs=1 count=100000000
dd: error writing ‘/mnt/disk/other.data’: No space left on device
6821889+0 records in
6821888+0 records out
6821888 bytes (6.8 MB) copied, 7.6254 s, 895 kB/s
$ sudo ~/Opensource/config/config /mnt/disk/test.json set data "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
config: write: No space left on device
config: save config file(/mnt/disk/test.json) failed
data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
$ sudo ~/Opensource/config/config /mnt/disk/test.json get name
name: libconfig
</pre>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">清除测试环境</h3>
<div class="outline-text-3" id="text-2-4">
<div class="org-src-container">

<pre class="src src-sh">sudo umount /dev/loop0p1
sudo losetup -d /dev/loop0
sudo rmdir /mnt/disk
sudo rm ~/Examples/disk.img
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">参考</h2>
<div class="outline-text-2" id="text-3">
<p>
《<a href="http://www.oschina.net/translate/reliable-file-updates-with-python">使用 Python 进行稳定可靠的文件操作</a>》</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSL_read及SSL_write支持超时]]></title>
            <link>/article/ssl_read-53ca-ssl_write-652f63018d8565f6.html</link>
            <guid>/article/ssl_read-53ca-ssl_write-652f63018d8565f6.html</guid>
            <pubDate>Tue, 27 Jan 2015 06:29:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
原始的socket编程中 <code>read</code> 、 <code>write</code> 支持超时是很容易实现的，如使用 <code>select</code> 或者 <code>setsockopt</code> 设置读写超时并在 <code>read</code> 和 <code>write</code> 出错后根据 <code>errno</code> 判断是否为超时引起。
</p>

<p>
但是在 <code>SSL</code> 编程中对底层socket调用 <code>select</code> 以及使用 <code>errno</code> 行为是未定义的。
</p>

<p>
使用 <code>setsockopt</code> 在底层的socket上设置读写后， <code>SSL_read</code> 、 <code>SSL_write</code> 出错会返回ssl错误码 <code>SSL_ERROR_WANT_READ</code> 或 <code>SSL_ERROR_WANT_WRITE</code> ，
但是被信号中断或者底层SSL需要重新握手也会导致 <code>SSL_read</code> 、 <code>SSL_write</code> 返回同样的ssl错误码。
</p>

<p>
如果能够将信号屏蔽掉，并启用SSL自动重新握手，就能够实现 <code>SSL_read</code> 、 <code>SSL_write</code> 超时检测。
</p>

<ul class="org-ul">
<li>屏蔽信号

<p>
忽略应用产生的信号，如：
</p>

<div class="org-src-container">

<pre class="src src-c">signal(SIGPIPE, SIG_IGN);
signal(SIGCHLD, SIG_IGN);
</pre>
</div>
</li>

<li>在底层socket上设置超时

<div class="org-src-container">

<pre class="src src-c"><span style="color: #b9ca4a;">struct</span> <span style="color: #7aa6da;">timeval</span> <span style="color: #e7c547;">tv</span>;
tv.tv_sec  = 10;
tv.tv_usec = 0;
setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (<span style="color: #7aa6da;">char</span>*)&amp;tv, <span style="color: #b9ca4a;">sizeof</span>(<span style="color: #b9ca4a;">struct</span> <span style="color: #7aa6da;">timeval</span>));
setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (<span style="color: #7aa6da;">char</span>*)&amp;tv, <span style="color: #b9ca4a;">sizeof</span>(<span style="color: #b9ca4a;">struct</span> <span style="color: #7aa6da;">timeval</span>));
</pre>
</div>
</li>

<li>启用自动重新握手

<div class="org-src-container">

<pre class="src src-c">SSL_CTX_set_mode(ctx, SSL_MODE_AUTO_RETRY);
</pre>
</div>
</li>

<li><code>SSL_read</code> 和 <code>SSL_write</code> 判断是否超时出错

<div class="org-src-container">

<pre class="src src-c"><span style="color: #7aa6da;">int</span> <span style="color: #e7c547;">readed</span> = SSL_read(ssl, data, size);
<span style="color: #b9ca4a;">if</span> (readed &lt;= 0) {
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span> (SSL_get_error(ssl, readed) == SSL_ERROR_WANT_READ) {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">timeout</span>
<span style="background-color: #424242;"> </span>   } <span style="color: #b9ca4a;">else</span> {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">error</span>
<span style="background-color: #424242;"> </span>   }
}

<span style="color: #7aa6da;">int</span> <span style="color: #e7c547;">writed</span> = SSL_write(ssl, data, size);
<span style="color: #b9ca4a;">if</span> (writed &lt;= 0) {
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span> (SSL_get_error(ssl, writed) == SSL_ERROR_WANT_WRITE) {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">timeout</span>
<span style="background-color: #424242;"> </span>   } <span style="color: #b9ca4a;">else</span> {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">// </span><span style="color: #969896; font-style: italic;">error</span>
<span style="background-color: #424242;"> </span>   }
}
</pre>
</div>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux下允许普通用户执行需要root权限的命令]]></title>
            <link>/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html</link>
            <guid>/article/linux-4e0b51418bb8666e901a752862376267884c97008981-root-674396507684547d4ee4.html</guid>
            <pubDate>Thu, 26 Dec 2013 07:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
最典型的情况是要实现一个通过web界面重启系统的功能，通常为了安全会以非root用户身份（通常是nobody）运行服务端脚本，这样脚本中就不能执行危险操作了。
</p>

<p>
下面的c工具程序可以允许任意用户执行需要root权限的命令：
</p>

<p>
[[<a href="../static/as_root.c][as_root.c">../static/as_root.c][as_root.c</a>]
</p>

<p>
编译：
</p>
<div class="org-src-container">

<pre class="src src-sh">gcc -g as_root.c -o as_root
</pre>
</div>

<p>
配置：
</p>
<div class="org-src-container">

<pre class="src src-sh">chown root:root ./as_root; chmod 4755 ./as_root
</pre>
</div>

<p>
运行：
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo -u <span style="color: #70c0b1;">"nobody"</span> ./as_root <span style="color: #70c0b1;">"reboot"</span>
</pre>
</div>

<p>
参考：<a href="http://blog.tianya.cn/blogger/post_show.asp?BlogID=126326&PostID=1629441">如何在普通用户下执行一些需要root用户执行的命令</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSL双方系统时间不一致导致的SSL连接失败及其解决方案]]></title>
            <link>/article/ssl-53cc65b97cfb7edf65f695f44e0d4e0081f45bfc81f47684-ssl-8fde63a559318d2553ca517689e351b365b96848.html</link>
            <guid>/article/ssl-53cc65b97cfb7edf65f695f44e0d4e0081f45bfc81f47684-ssl-8fde63a559318d2553ca517689e351b365b96848.html</guid>
            <pubDate>Fri, 25 Jul 2008 09:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在产品使用中，实施人员常常报告服务器与客户端无法连接，最终查明原因是双方的时间设置不一致。OpenSSL证书有一个有效时间段，当客户端或服务器的系统时间不在这个时间段内时SSL会因证书验证失败而无法连接。在实施中系统时间错误是很常见的，因不能上网而未开时间自动同步、bios没电了、客户疏忽等原因都会导致系统时间设置错误。如果连接失败后再查看系统时间设置进行故障排查终归是一件麻烦的事情。
</p>

<p>
解决这个问题有以下几个办法：
</p>

<ul class="org-ul">
<li>将证书的有效期设置得够大（如：1970-2099）

<p>
这样估计可以在一定程度上解决这个问题，不过这也是个馊主意，一般申请的证书总会有一个合理的有效期。
</p>
</li>

<li>检测及必要时自动同步客户端与服务器的时间

<p>
通过用wireshake抓包分析SSL建立连接的过程，发现在SSL握手过程中，会向对方传送本机的系统时间。因此一个显而易见的办法就是，当连接过程中检测到证书过期，将客户端的时间同步为服务器端的时间，再重连即可。
</p>

<p>
下面是具体的示例代码：
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;openssl/ssl.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;openssl/bio.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;openssl/err.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;winsock2.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;stdio.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;string.h&gt;</span>
<span style="color: #c397d8;">#include</span> <span style="color: #70c0b1;">&lt;time.h&gt;</span>

<span style="color: #b9ca4a;">typedef</span> <span style="color: #b9ca4a;">struct</span> <span style="color: #7aa6da;">_TimeInfo</span>
{
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">time_t</span> <span style="color: #e7c547;">client</span>;  <span style="color: #969896; font-style: italic;">/*</span><span style="color: #969896; font-style: italic;">&#23458;&#25143;&#31471;&#30340;&#26102;&#38388;</span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">time_t</span> <span style="color: #e7c547;">server</span>;  <span style="color: #969896; font-style: italic;">/*</span><span style="color: #969896; font-style: italic;">&#26381;&#21153;&#22120;&#30340;&#26102;&#38388;</span><span style="color: #969896; font-style: italic;">*/</span>
} <span style="color: #7aa6da;">TimeInfo</span>;

<span style="color: #c397d8;">/**</span>
<span style="color: #c397d8; background-color: #424242;"> </span><span style="color: #c397d8;">* &#21516;&#27493;&#31995;&#32479;&#26102;&#38388;.</span>
<span style="color: #c397d8; background-color: #424242;"> </span><span style="color: #c397d8;">*/</span>
<span style="color: #7aa6da;">BOOL</span> <span style="color: #e78c45;">syncSystemTime</span>(<span style="color: #7aa6da;">time_t</span> <span style="color: #e7c547;">t</span>)
{
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">SYSTEMTIME</span> <span style="color: #e7c547;">st</span>;
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">FILETIME</span>   <span style="color: #e7c547;">ft</span>;<span style="color: #d54e53; background-color: #424242;">  </span>
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">LONGLONG</span>   <span style="color: #e7c547;">ll</span>;<span style="color: #d54e53; background-color: #424242;">  </span>

<span style="background-color: #424242;"> </span>   ll = Int32x32To64(t, 10000000) + 116444736000000000; <span style="color: #969896; font-style: italic;">//</span><span style="color: #969896; font-style: italic;">1970.01.01</span><span style="color: #d54e53; background-color: #424242;">  </span>

<span style="background-color: #424242;"> </span>   ft.dwLowDateTime  = (<span style="color: #7aa6da;">DWORD</span>)ll;<span style="color: #d54e53; background-color: #424242;">  </span>
<span style="background-color: #424242;"> </span>   ft.dwHighDateTime = (<span style="color: #7aa6da;">DWORD</span>)(ll &gt;&gt; 32);<span style="color: #d54e53; background-color: #424242;">  </span>

<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span> FileTimeToSystemTime(&amp;ft, &amp;st) &amp;&amp; SetSystemTime(&amp;st);
}

<span style="color: #c397d8;">/**</span>
<span style="color: #c397d8; background-color: #424242;"> </span><span style="color: #c397d8;">* &#33719;&#21462;SSL&#25569;&#25163;&#36807;&#31243;&#20013;&#26381;&#21153;&#22120;&#19982;&#23458;&#25143;&#31471;&#21452;&#26041;&#30340;&#31995;&#32479;&#26102;&#38388;.</span>
<span style="color: #c397d8; background-color: #424242;"> </span><span style="color: #c397d8;">*/</span>
<span style="color: #7aa6da;">void</span> <span style="color: #e78c45;">getSSLHandleShakeTimeInfo</span>(<span style="color: #7aa6da;">int</span> <span style="color: #e7c547;">write_p</span>,
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>  <span style="color: #7aa6da;">int</span> <span style="color: #e7c547;">version</span>,
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>  <span style="color: #7aa6da;">int</span> <span style="color: #e7c547;">content_type</span>,
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>  <span style="color: #b9ca4a;">const</span> <span style="color: #7aa6da;">unsigned</span> <span style="color: #7aa6da;">char</span>* <span style="color: #e7c547;">buf</span>,
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>  <span style="color: #7aa6da;">size_t</span> <span style="color: #e7c547;">len</span>,
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>  <span style="color: #7aa6da;">SSL</span> *<span style="color: #e7c547;">ssl</span>,
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>  <span style="color: #7aa6da;">TimeInfo</span> *<span style="color: #e7c547;">ti</span>)
{
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span>(content_type != 22)   <span style="color: #969896; font-style: italic;">//</span><span style="color: #969896; font-style: italic;">require handshake message</span>
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span>;
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span>(len &lt; 42)
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span>;
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span>(buf[0] == 1)          <span style="color: #969896; font-style: italic;">//</span><span style="color: #969896; font-style: italic;">ClientHello Message send from client to server</span>
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   ti-&gt;client = htonl(*((<span style="color: #7aa6da;">u_long</span>*)(buf + 6)));
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">else</span> <span style="color: #b9ca4a;">if</span>(buf[0] == 2)     <span style="color: #969896; font-style: italic;">//</span><span style="color: #969896; font-style: italic;">ServerHello Message send from server to client</span>
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   ti-&gt;server = htonl(*((<span style="color: #7aa6da;">u_long</span>*)(buf + 6)));
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">else</span>
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span>;
}

<span style="color: #7aa6da;">int</span> <span style="color: #e78c45;">main</span>()
{
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">BIO</span> * <span style="color: #e7c547;">bio</span>;
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">SSL</span> * <span style="color: #e7c547;">ssl</span>;
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">SSL_CTX</span> * <span style="color: #e7c547;">ctx</span>;
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">TimeInfo</span> <span style="color: #e7c547;">timeInfo</span> = {-1, -1};
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">BOOL</span> <span style="color: #e7c547;">timeSynced</span> = FALSE;
<span style="background-color: #424242;"> </span>   <span style="color: #7aa6da;">long</span> <span style="color: #e7c547;">result</span>;

<span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Set up the library </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   SSL_library_init();
<span style="background-color: #424242;"> </span>   ERR_load_BIO_strings();
<span style="background-color: #424242;"> </span>   SSL_load_error_strings();

<span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Set up the SSL context </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   ctx = SSL_CTX_new(SSLv3_client_method());
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span>(ctx == <span style="color: #7aa6da;">NULL</span>)
<span style="background-color: #424242;"> </span>   {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   fprintf(stderr, <span style="color: #70c0b1;">"Error new SSL_CTX\n"</span>);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   ERR_print_errors_fp(stderr);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   SSL_CTX_free(ctx);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span> 0;
<span style="background-color: #424242;"> </span>   }

<span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Get Server and Client system time via SSL Handshake </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   SSL_CTX_set_msg_callback(ctx, getSSLHandleShakeTimeInfo);
<span style="background-color: #424242;"> </span>   SSL_CTX_set_msg_callback_arg(ctx, &amp;timeInfo);

<span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Load the trust store </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span>(<span style="color: #7aa6da;">!</span> SSL_CTX_load_verify_locations(ctx, <span style="color: #70c0b1;">".\\certs\\cacert.pem"</span>, <span style="color: #7aa6da;">NULL</span>))
<span style="background-color: #424242;"> </span>   {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   fprintf(stderr, <span style="color: #70c0b1;">"Error loading trust store\n"</span>);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   ERR_print_errors_fp(stderr);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   SSL_CTX_free(ctx);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span> 0;
<span style="background-color: #424242;"> </span>   }

<span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Setup the connection </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   bio = BIO_new_ssl_connect(ctx);

<span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Set the SSL_MODE_AUTO_RETRY flag </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   BIO_get_ssl(bio, &amp; ssl);
<span style="background-color: #424242;"> </span>   SSL_set_mode(ssl, SSL_MODE_AUTO_RETRY);

<span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Create and setup the connection </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   BIO_set_conn_hostname(bio, <span style="color: #70c0b1;">"192.168.1.5:5555"</span>);
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span>(BIO_do_connect(bio) &lt;= 0)
<span style="background-color: #424242;"> </span>   {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   fprintf(stderr, <span style="color: #70c0b1;">"Error attempting to connect\n"</span>);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   ERR_print_errors_fp(stderr);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   BIO_free_all(bio);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   SSL_CTX_free(ctx);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span> 0;
<span style="background-color: #424242;"> </span>   }

<span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Check the certificate </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">switch</span>(SSL_get_verify_result(ssl))
<span style="background-color: #424242;"> </span>   {
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">case</span> X509_V_OK:
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">break</span>;
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">case</span> X509_V_ERR_CERT_NOT_YET_VALID:
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">case</span> X509_V_ERR_CERT_HAS_EXPIRED:
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span>(timeInfo.server != -1 &amp;&amp; timeInfo.client != -1)
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   {
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   printf(<span style="color: #70c0b1;">"&#24403;&#21069;&#23458;&#25143;&#31471;&#26102;&#38388;: %s"</span>, ctime(&amp;timeInfo.client));
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   printf(<span style="color: #70c0b1;">"&#24403;&#21069;&#26381;&#21153;&#22120;&#26102;&#38388;: %s"</span>, ctime(&amp;timeInfo.server));
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   printf(<span style="color: #70c0b1;">"&#23581;&#35797;&#19982;&#26381;&#21153;&#22120;&#26102;&#38388;&#21516;&#27493;"</span>);

<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">if</span>(syncSystemTime(timeInfo.server))
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   printf(<span style="color: #70c0b1;">"&#25104;&#21151;\n"</span>);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">else</span>
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   printf(<span style="color: #70c0b1;">"&#22833;&#36133;\n"</span>);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   printf(<span style="color: #70c0b1;">"&#35831;&#37325;&#35797;&#36830;&#25509;&#26381;&#21153;&#22120;&#65281;\n"</span>);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   }
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">default</span>:
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   fprintf(stderr, <span style="color: #70c0b1;">"Certificate verification error: %i\n"</span>, SSL_get_verify_r<span style="text-decoration: underline;">esult(ssl));</span>
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   BIO_free_all(bio);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   SSL_CTX_free(ctx);
<span style="background-color: #424242;"> </span>   <span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span> 0;
<span style="background-color: #424242;"> </span>   }

<span style="background-color: #424242;"> </span>   <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Close the connection and free the context </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="background-color: #424242;"> </span>   BIO_free_all(bio);
<span style="background-color: #424242;"> </span>   SSL_CTX_free(ctx);
<span style="background-color: #424242;"> </span>   <span style="color: #b9ca4a;">return</span> 0;
}
</pre>
</div>
</li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>