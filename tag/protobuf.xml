<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>protobuf - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/protobuf.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Thu, 13 Jun 2019 03:59:30 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>protobuf - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/protobuf.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[在 PHP 使用 Protobuf Buffers 有性能问题]]></title>
            <link>/article/5728-php-4f7f7528-protobuf-buffers-6709602780fd95ee9898.html</link>
            <guid>/article/5728-php-4f7f7528-protobuf-buffers-6709602780fd95ee9898.html</guid>
            <pubDate>Tue, 11 Jun 2019 11:41:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
  <a href="https://github.com/protocolbuffers/protobuf/">Protocol Buffers</a> 是一种应用广泛的数据交换格式，内部服务间通信时常常用它做为数据传输格式，主要是因为较之 Json 它具有更好的性能（体现在空间占用更少、编解码更快）、数据结构定义更规范。　
  然而在 PHP 中使用 <a href="https://github.com/protocolbuffers/protobuf/">Protocol Buffers</a> 却是一场灾难。
</p>

<div id="outline-container-org13ac409" class="outline-2">
<h2 id="org13ac409"><a href="https://github.com/protocolbuffers/protobuf/">Protocol Buffers</a> 初始化是很慢的</h2>
<div class="outline-text-2" id="text-org13ac409">
<p>
通过 <code>protoc</code> 编译出来的骨架代码本质上只是将 <code>proto</code> 文件编译成方便解析的中间文件格式，建立 PHP 层对应的类型系统，大部分工作在运行时。
</p>

<p>
参考 <a href="https://github.com/protocolbuffers/protobuf/issues/4227">php performance problem · Issue #4227 · protocolbuffers/protobuf</a>
</p>

<p>
使用 <a href="https://github.com/phacility/xhprof">XHProf</a> 分析实际的请求，发现 <code>40%</code> 的时间（133 毫秒）花在了初始化上
</p>

<p>
使用的是 <a href="https://github.com/protocolbuffers/protobuf/">Protocol Buffers</a> 的 PHP 实现，耗时的调用栈如下
</p>

<pre class="example">
PaymentEvent::__construct
  GPBMetadata\PaymentEvent::initOnce
    Google\Protobuf\Internal\DescriptorPool::internalAddGeneratedFile
</pre>

<p>
使用本文末尾的测试项目对 C 扩展和 PHP 实现进行性能对比可以确认 C 扩展的性能是
PHP 实现的 <code>10</code> 倍以上。
</p>

<p>
但是无论是 C 扩展和 PHP 实现，耗时都是毫秒级别，主要的时间都花在了纯 CPU 计算代码部分 <code>internalAddGeneratedFile</code> ，而且很可能会随着 <code>Proto</code> 数的增加而线性增长，CPU 占用会很高。
</p>
</div>
</div>

<div id="outline-container-org4c05a63" class="outline-2">
<h2 id="org4c05a63"><a href="https://github.com/protocolbuffers/protobuf/">Protocol Buffers</a> 的 C 扩展不稳定</h2>
<div class="outline-text-2" id="text-org4c05a63">
<p>
线上系统跑久了 php-fpm 进程的内存和 CPU 占用会升高，估计是有 C 扩展有内存泄露。
</p>
</div>
</div>

<div id="outline-container-org5b118c6" class="outline-2">
<h2 id="org5b118c6"><a href="https://github.com/protocolbuffers/protobuf/">Protocol Buffers</a> 性能问题对 PHP 应用的影响是巨大的</h2>
<div class="outline-text-2" id="text-org5b118c6">
<p>
其它语言(如：Go、C++)程序是常驻内存运行的，初始化 Protocol Buffers 的开销只付出一次，所以往往意识不到这个问题。
</p>

<p>
PHP 采用 <code>FastCGI</code> 模型，每次请求都要承担 Protocol Buffers 的开销，很快就会发现采用 Protocol Buffers 后接口响应时间变长，系统的吞吐率下降。
</p>
</div>
</div>

<div id="outline-container-org491e004" class="outline-2">
<h2 id="org491e004">PHP 实现与 C 扩展的性能对比</h2>
<div class="outline-text-2" id="text-org491e004">
<ul class="org-ul">
<li><p>
Protocol Buffers C 扩展的安装 
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo pecl install protobuf-3.7.0
</pre>
</div></li>

<li><p>
Protocol Buffers C 扩展的启用与禁用
</p>

<p>
在 <code>php.ini</code> 加入以下配置项启用 C 扩展
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #0084C8; font-weight: bold;">extension</span>=protobuf.so
</pre>
</div>

<p>
注释掉上面的配置项禁用 C 扩展。
</p></li>

<li><p>
创建性能测试 PHP 项目
</p>

<p>
进入项目目录
</p>

<p>
创建 <code>composer.json</code> 文件，内容如下
</p>

<div class="org-src-container">
<pre class="src src-json">{
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">"require"</span>: {
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">"google/protobuf"</span>: <span style="color: #4E9A06;">"3.7.0"</span>
<span style="background-color: #E6E6E6;"> </span>   }
}
</pre>
</div>

<p>
创建 <code>index.php</code> 文件，内容如下
</p>

<div class="org-src-container">
<pre class="src src-php"><span style="color: #A020F0;">&lt;?php</span>
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">startTime</span> = microtime(<span style="color: #F5666D;">true</span>);

<span style="color: #A52A2A; font-weight: bold;">require</span> <span style="color: #F5666D;">__DIR__</span> . <span style="color: #4E9A06;">'/vendor/autoload.php'</span>;
<span style="color: #A52A2A; font-weight: bold;">require</span> <span style="color: #F5666D;">__DIR__</span> . <span style="color: #4E9A06;">'/generated/GPBMetadata/Addressbook.php'</span>;
<span style="color: #A52A2A; font-weight: bold;">require</span> <span style="color: #F5666D;">__DIR__</span> . <span style="color: #4E9A06;">'/generated/Tutorial/AddressBook.php'</span>;
<span style="color: #A52A2A; font-weight: bold;">require</span> <span style="color: #F5666D;">__DIR__</span> . <span style="color: #4E9A06;">'/generated/Tutorial/Person.php'</span>;
<span style="color: #A52A2A; font-weight: bold;">require</span> <span style="color: #F5666D;">__DIR__</span> . <span style="color: #4E9A06;">'/generated/Tutorial/Person/PhoneType.php'</span>;
<span style="color: #A52A2A; font-weight: bold;">require</span> <span style="color: #F5666D;">__DIR__</span> . <span style="color: #4E9A06;">'/generated/Tutorial/Person/PhoneNumber.php'</span>;

<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">addressBook</span> = <span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">Tutorial\AddressBook</span>();

<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span> = <span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">Tutorial\Person</span>();
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setId</span>(1);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setName</span>(<span style="color: #4E9A06;">"user1"</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setEmail</span>(<span style="color: #4E9A06;">"user1@example.com"</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span> = <span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">Tutorial\Person\PhoneNumber</span>();
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setType</span>(<span style="color: #F5666D;">Tutorial\Person\PhoneType</span><span style="color: #2E3436; background-color: #EDEDED;">::</span><span style="color: #F5666D;">HOME</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setNumber</span>(<span style="color: #4E9A06;">"1000001"</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">getPhones</span>()[] = <span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span>;
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">addressBook</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">getPeople</span>()[] = <span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span>;

<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span> = <span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">Tutorial\Person</span>();
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setId</span>(2);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setName</span>(<span style="color: #4E9A06;">"user2"</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setEmail</span>(<span style="color: #4E9A06;">"user2@example.com"</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span> = <span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">Tutorial\Person\PhoneNumber</span>();
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setType</span>(<span style="color: #F5666D;">Tutorial\Person\PhoneType</span><span style="color: #2E3436; background-color: #EDEDED;">::</span><span style="color: #F5666D;">HOME</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setNumber</span>(<span style="color: #4E9A06;">"2000002"</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">getPhones</span>()[] = <span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span>;
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">addressBook</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">getPeople</span>()[] = <span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span>;

<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span> = <span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">Tutorial\Person</span>();
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setId</span>(3);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setName</span>(<span style="color: #4E9A06;">"user3"</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setEmail</span>(<span style="color: #4E9A06;">"user3@example.com"</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span> = <span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">Tutorial\Person\PhoneNumber</span>();
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setType</span>(<span style="color: #F5666D;">Tutorial\Person\PhoneType</span><span style="color: #2E3436; background-color: #EDEDED;">::</span><span style="color: #F5666D;">HOME</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">setNumber</span>(<span style="color: #4E9A06;">"3000003"</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">getPhones</span>()[] = <span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">phone</span>;
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">addressBook</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">getPeople</span>()[] = <span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">person</span>;

<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">data</span> = <span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">addressBook</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">serializeToString</span>();

<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">endTime</span> = microtime(<span style="color: #F5666D;">true</span>);
<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">runTime</span> = (<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">endTime</span>-<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">startTime</span>)*1000 . <span style="color: #4E9A06;">' ms'</span>;

<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">class</span> = <span style="color: #A52A2A; font-weight: bold;">new</span> <span style="color: #2F8B58; font-weight: bold;">ReflectionClass</span>(<span style="color: #4E9A06;">'Google\Protobuf\Internal\DescriptorPool'</span>);
<span style="color: #A52A2A; font-weight: bold;">if</span> (<span style="color: #2E3436; background-color: #EDEDED;">$</span><span style="color: #0084C8; font-weight: bold;">class</span><span style="color: #2E3436; background-color: #EDEDED;">-&gt;</span><span style="color: #2E3436; background-color: #EDEDED;">getFileName</span>()) {
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">echo</span> <span style="color: #4E9A06;">"protobuf-php </span><span style="color: #0084C8; font-weight: bold;">$runTime</span><span style="color: #4E9A06;">\n"</span>;
} <span style="color: #A52A2A; font-weight: bold;">else</span> {
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">echo</span> <span style="color: #4E9A06;">"protobuf-c   </span><span style="color: #0084C8; font-weight: bold;">$runTime</span><span style="color: #4E9A06;">\n"</span>;
}
</pre>
</div>

<p>
创建 <code>Makefile</code> 内容如下
</p>

<div class="org-src-container">
<pre class="src src-makefile"><span style="color: #00578E; font-weight: bold;">all</span>: install generate benchmark

<span style="color: #00578E; font-weight: bold;">install</span>: vendor

<span style="color: #00578E; font-weight: bold;">vendor</span>: composer.json
<span style="background-color: #E6E6E6;"> </span>   composer install

<span style="color: #00578E; font-weight: bold;">generate</span>: generated/GPBMetadata

<span style="color: #00578E; font-weight: bold;">generated/GPBMetadata</span>: addressbook.proto
<span style="background-color: #E6E6E6;"> </span>   -mkdir generated
<span style="background-color: #E6E6E6;"> </span>   protoc --php_out=generated addressbook.proto

<span style="color: #00578E; font-weight: bold;">benchmark</span>:
<span style="background-color: #E6E6E6;"> </span>   php index.php | tee -a ./benchmark.log

<span style="color: #00578E; font-weight: bold;">addressbook.proto</span>:
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #00578E; font-weight: bold;">wget https</span>://raw.githubusercontent.com/protocolbuffers/protobuf/master/examp<span style="text-decoration: underline;">les/addressbook.proto -O ${</span><span style="color: #0084C8; font-weight: bold; text-decoration: underline;">CURDIR</span><span style="text-decoration: underline;">}/addressbook.proto</span>

<span style="color: #00578E; font-weight: bold;">clean</span>:
<span style="background-color: #E6E6E6;"> </span>   -rm -rf ${<span style="color: #0084C8; font-weight: bold;">CURDIR</span>}/vendor ${<span style="color: #0084C8; font-weight: bold;">CURDIR</span>}/generated
</pre>
</div></li>

<li><p>
运行性能测试
</p>

<div class="org-src-container">
<pre class="src src-sh">make
</pre>
</div>

<p>
交替启用禁用 C 扩展的运行结果
</p>

<pre class="example">
protobuf-c   2.335 ms
protobuf-php 29.14 ms
protobuf-c   2.443 ms
protobuf-php 27.962 ms
protobuf-c   2.238 ms
protobuf-php 14.957 ms
protobuf-c   2.221 ms
protobuf-php 29.814 ms
protobuf-c   2.295 ms
protobuf-php 29.304 ms
protobuf-c   2.435 ms
protobuf-php 37.493 ms
</pre></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Envoy 的 json_transcoder_filter 介绍]]></title>
            <link>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</link>
            <guid>/article/envoy-7684-json_transcoder_filter-4ecb7ecd.html</guid>
            <pubDate>Thu, 12 Oct 2017 11:56:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
json_transcoder_filter 实现 HTTP/1.1+JSON 与 HTTP/2+GRPC 的互转。
</p>

<p>
使用第三方库 <a href="https://github.com/grpc-ecosystem/grpc-httpjson-transcoding">grpc-httpjson-transcoding</a> 完成 json 与 grpc 的协议转换，转换规则由 <a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 定义。
</p>

<p>
<a href="https://github.com/googleapis/googleapis/blob/master/google/api/http.proto">http.proto</a> 通过注解（Annotations）为 GRPC 接口添加 RESTful HTTP 接口映射。
</p>

<p>
<code>json_transcoder_filter</code> 对 stream 有一定支持，由于它是基于 HTTP/1.1，本质上是请求-响应模型，只支持 GRPC 的 <code>Server streaming</code> 和 <code>Client streaming</code> ，不支持 <code>Bidirectional streaming</code> ，它将 GRPC 消息流映射为消息数组（Json array）。
</p>

<div id="outline-container-org00a8e8b" class="outline-2">
<h2 id="org00a8e8b">示例项目</h2>
<div class="outline-text-2" id="text-org00a8e8b">
<p>
Envoy 带了一个 <a href="https://github.com/envoyproxy/envoy/tree/master/examples/grpc-bridge">grpc-bridge 示例项目</a>，依照它做了一个 grpc_json_transcoder 示例项目：
</p>

<ul class="org-ul">
<li><a href="https://github.com/tangxinfa/grpc_json_transcoder_example">tangxinfa/grpc_json_transcoder_example: Envoy grpc_json_transcoder filter example</a></li>
</ul>
</div>
</div>

<div id="outline-container-orga89925c" class="outline-2">
<h2 id="orga89925c">参考</h2>
<div class="outline-text-2" id="text-orga89925c">
<ul class="org-ul">
<li><a href="https://cloud.google.com/endpoints/docs/grpc/transcoding">Transcoding HTTP/JSON to gRPC  |  Cloud Endpoints with gRPC  |  Google Cloud Platform</a></li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Protobuf 与 Json 数据格式转换]]></title>
            <link>/article/protobuf-4e0e-json-6570636e683c5f0f8f6c6362.html</link>
            <guid>/article/protobuf-4e0e-json-6570636e683c5f0f8f6c6362.html</guid>
            <pubDate>Fri, 29 Sep 2017 03:57:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-orgdba67aa" class="outline-2">
<h2 id="orgdba67aa">Protobuf 和 Json 存在显著的差异</h2>
<div class="outline-text-2" id="text-orgdba67aa">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">数据格式</th>
<th scope="col" class="org-left">编码</th>
<th scope="col" class="org-left">自描述</th>
<th scope="col" class="org-left">字段顺序性</th>
<th scope="col" class="org-left">基本数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Protobuf</td>
<td class="org-left">二进制</td>
<td class="org-left">否</td>
<td class="org-left">是</td>
<td class="org-left">丰富</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">编码后的数据不包括字段名称，</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">double</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">字段以 proto 文件 tag 值标识</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">float</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">int32</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">int64</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">uint32</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">uint64</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">sint32</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">sint64</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">fixed32</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">fixed64</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">sfixed32</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">sfixed64</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">bool</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">string</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">bytes</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">Json</td>
<td class="org-left">文本</td>
<td class="org-left">是</td>
<td class="org-left">否</td>
<td class="org-left">较少</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">string</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">number</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">bool</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">null</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">number 整型取值范围[-(2**53-1), 2**53-1]</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">因此不能精确转换为 int64 或 uint64 类型</td>
</tr>
</tbody>
</table>

<p>
参考
</p>

<p>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number">Number - JavaScript | MDN</a>
</p>

<p>
<a href="https://developers.google.com/protocol-buffers/docs/proto3#scalar">Language Guide (proto3)  |  Protocol Buffers  |  Google Developers</a>
</p>
</div>
</div>

<div id="outline-container-org7256b52" class="outline-2">
<h2 id="org7256b52">Protobuf 与 Json 的静态转换</h2>
<div class="outline-text-2" id="text-org7256b52">
<p>
使用 protoc 生成 proto 文件的编解码代码，再手工进行 Protobuf 与 Json 格式转换是很容易的，但是这需要在 proto 文件更新时重新生成代码，并重新编译、部署程序。
</p>
</div>
</div>

<div id="outline-container-org08b92ce" class="outline-2">
<h2 id="org08b92ce">Protobuf 与 Json 的动态转换</h2>
<div class="outline-text-2" id="text-org08b92ce">
<p>
如果程序能够解析 proto 文件，并根据 proto 定义完成 Protobuf 与 Json 的转换会很有用处。
</p>
</div>

<div id="outline-container-org12051d9" class="outline-3">
<h3 id="org12051d9">example.proto</h3>
<div class="outline-text-3" id="text-org12051d9">
<p>
以下为接下来要使用的 <code>example.proto</code> 文件内容
</p>

<div class="org-src-container">
<pre class="src src-protobuf">syntax = <span style="color: #4E9A06;">"proto3"</span>;

<span style="color: #A52A2A; font-weight: bold;">package</span> <span style="color: #2F8B58; font-weight: bold;">example</span>;

<span style="color: #A52A2A; font-weight: bold;">message</span> <span style="color: #2F8B58; font-weight: bold;">Hello</span> {
  <span style="color: #2F8B58; font-weight: bold;">string</span> <span style="color: #0084C8; font-weight: bold;">name</span> = 1;
  <span style="color: #2F8B58; font-weight: bold;">int32</span> <span style="color: #0084C8; font-weight: bold;">times</span> = 2;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org71e2717" class="outline-3">
<h3 id="org71e2717">Node.js</h3>
<div class="outline-text-3" id="text-org71e2717">
<p>
在查找 Node.js 下 Protobuf 使用相关资料的过程中，发现 Node.js 可以直接载入 proto 文件，然后直接获取 Protobuf 编解码对象进行 Protobuf 的编解码，如下所示：
</p>

<div class="org-src-container">
<pre class="src src-js"><span style="color: #A52A2A; font-weight: bold;">var</span> <span style="color: #0084C8; font-weight: bold;">ProtoBuf</span> = require(<span style="color: #4E9A06;">"protobufjs"</span>);
<span style="color: #A52A2A; font-weight: bold;">var</span> <span style="color: #0084C8; font-weight: bold;">dgram</span> = require(<span style="color: #4E9A06;">'dgram'</span>);
<span style="color: #A52A2A; font-weight: bold;">var</span> <span style="color: #0084C8; font-weight: bold;">server</span> = dgram.createSocket(<span style="color: #4E9A06;">'udp4'</span>);

<span style="color: #A52A2A; font-weight: bold;">var</span> <span style="color: #0084C8; font-weight: bold;">builder</span> = ProtoBuf.loadProtoFile(<span style="color: #4E9A06;">"./cover.helloworld.proto"</span>),
<span style="background-color: #E6E6E6;"> </span>   Cover = builder.build(<span style="color: #4E9A06;">"cover"</span>),
<span style="background-color: #E6E6E6;"> </span>   HelloCoverReq = Cover.helloworld.helloCoverReq;
<span style="background-color: #E6E6E6;"> </span>   HelloCoverRsp = Cover.helloworld.helloCoverRsp;
</pre>
</div>
<p>
引用自 <a href="http://imweb.io/topic/570130a306f2400432c1396c">在NodeJS中玩转Protocol Buffer - 腾讯Web前端 IMWeb 团队社区 | blog | 团队博客</a>
</p>

<p>
这就是动态语言的优势，而且 Javascript 原生支持 Json，用来演示再合适不过。
</p>

<p>
以下为完整的 Protobuf 与 Json 动态互转示例代码：
</p>

<div class="org-src-container">
<pre class="src src-js"><span style="color: #4E9A06;">"use strict"</span>;

<span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #0084C8; font-weight: bold;">ProtoBuf</span> = require(<span style="color: #4E9A06;">"protobufjs"</span>);
<span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #0084C8; font-weight: bold;">util</span> = require(<span style="color: #4E9A06;">'util'</span>);
<span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #0084C8; font-weight: bold;">assert</span> = require(<span style="color: #4E9A06;">'assert'</span>);

ProtoBuf.load(<span style="color: #4E9A06;">"./example.proto"</span>).then((root) =&gt; {
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #0084C8; font-weight: bold;">Hello</span> = root.lookup(<span style="color: #4E9A06;">'example.Hello'</span>);
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #0084C8; font-weight: bold;">source</span> = {
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   name: <span style="color: #4E9A06;">"world"</span>,
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   times: 100
<span style="background-color: #E6E6E6;"> </span>   };
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #0084C8; font-weight: bold;">hello</span> = Hello.create(source);
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #0084C8; font-weight: bold;">buffer</span> = Hello.encode(hello).finish();
<span style="background-color: #E6E6E6;"> </span>   <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #0084C8; font-weight: bold;">destination</span> = Hello.decode(buffer);
<span style="background-color: #E6E6E6;"> </span>   assert(JSON.stringify(source) == JSON.stringify(destination));

<span style="background-color: #E6E6E6;"> </span>   console.log({
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   source: JSON.stringify(source),
<span style="background-color: #E6E6E6;"> </span>   <span style="background-color: #E6E6E6;"> </span>   destination: JSON.stringify(destination)
<span style="background-color: #E6E6E6;"> </span>   });
});
</pre>
</div>

<p>
运行结果
</p>
<pre class="example">
$ node /home/tangxinfa/Examples/learn_node/protobuf_json.js
{ source: '{"name":"world","times":100}',
  destination: '{"name":"world","times":100}' }
</pre>
</div>
</div>

<div id="outline-container-orgf3583b9" class="outline-3">
<h3 id="orgf3583b9">C++</h3>
<div class="outline-text-3" id="text-orgf3583b9">
<p>
C++ 是静态类型的语言，肯定不如 Node.js 那么方便，主要用到 Protobuf 的反射（Reflection）机制，具体实现见：
</p>

<ul class="org-ul">
<li><a href="https://github.com/HaustWang/pb2json">HaustWang/pb2json: protobuf message与json互转，使用C++11特性</a></li>

<li><a href="https://github.com/shafreeck/pb2json">https://github.com/shafreeck/pb2json</a></li>

<li><a href="https://github.com/shramov/json2pb">shramov/json2pb: Python/C++ implementation of JSON to/from Protobuf convertor</a></li>
</ul>


<p>
<a href="https://github.com/HaustWang/pb2json">HaustWang/pb2json</a> 实现了静态和动态 Protobuf 与 Json 互转，这里以它写一个完整的示例
</p>

<ul class="org-ul">
<li><p>
拉取 <a href="https://github.com/HaustWang/pb2json">HaustWang/pb2json</a> 代码
</p>

<div class="org-src-container">
<pre class="src src-sh">git clone https://github.com/HaustWang/pb2json.git
</pre>
</div></li>

<li><p>
protobuf_json.cpp
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">"pb2json/byReflection/pb2json.h"</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;google/protobuf/compiler/importer.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;google/protobuf/dynamic_message.h&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;iostream&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;string&gt;</span>
<span style="color: #A020F0;">#include</span> <span style="color: #4E9A06;">&lt;cassert&gt;</span>
<span style="color: #A52A2A; font-weight: bold;">using</span> <span style="color: #F5666D;">std</span>::<span style="color: #2F8B58; font-weight: bold;">string</span>;

<span style="color: #A52A2A; font-weight: bold;">class</span> <span style="color: #2F8B58; font-weight: bold;">ErrorCollector</span>: <span style="color: #A52A2A; font-weight: bold;">public</span> <span style="color: #F5666D;">google</span>::<span style="color: #F5666D;">protobuf</span>::<span style="color: #F5666D;">compiler</span>::<span style="color: #2F8B58; font-weight: bold;">MultiFileErrorCollector</span><span style="text-decoration: underline;"> {</span>
<span style="color: #A52A2A; font-weight: bold;">public</span>:
<span style="background-color: #E6E6E6;"> </span> <span style="color: #00578E; font-weight: bold;">ErrorCollector</span>()
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> :warnings_(0), errors_(0)
<span style="background-color: #E6E6E6;"> </span> {}
<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">virtual</span> ~<span style="color: #00578E; font-weight: bold;">ErrorCollector</span>() {}
<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">virtual</span> <span style="color: #2F8B58; font-weight: bold;">void</span> <span style="color: #00578E; font-weight: bold;">AddError</span>(<span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">string</span>&amp; <span style="color: #0084C8; font-weight: bold;">filename</span>, <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">line</span>, <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">column</span>,
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">string</span>&amp; <span style="color: #0084C8; font-weight: bold;">message</span>) {
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> ++errors_;
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">std</span>::cerr &lt;&lt; filename &lt;&lt; <span style="color: #4E9A06;">":"</span> &lt;&lt; line &lt;&lt; <span style="color: #4E9A06;">":"</span> &lt;&lt; column &lt;&lt; <span style="color: #4E9A06;">": "</span> &lt;&lt; message &lt;&lt; <span style="color: #F5666D; text-decoration: underline;">std</span><span style="text-decoration: underline;">::endl;</span>
<span style="background-color: #E6E6E6;"> </span> }

<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">virtual</span> <span style="color: #2F8B58; font-weight: bold;">void</span> <span style="color: #00578E; font-weight: bold;">AddWarning</span>(<span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">string</span>&amp; <span style="color: #0084C8; font-weight: bold;">filename</span>, <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">line</span>, <span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">column</span>,
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">string</span>&amp; <span style="color: #0084C8; font-weight: bold;">message</span>) {
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> ++warnings_;
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">std</span>::cerr &lt;&lt; filename &lt;&lt; <span style="color: #4E9A06;">":"</span> &lt;&lt; line &lt;&lt; <span style="color: #4E9A06;">":"</span> &lt;&lt; column &lt;&lt; <span style="color: #4E9A06;">": "</span> &lt;&lt; message &lt;&lt; <span style="color: #F5666D; text-decoration: underline;">std</span><span style="text-decoration: underline;">::endl;</span>
<span style="background-color: #E6E6E6;"> </span> }

<span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">uint</span> <span style="color: #00578E; font-weight: bold;">errors</span>() <span style="color: #A52A2A; font-weight: bold;">const</span> { <span style="color: #A52A2A; font-weight: bold;">return</span> errors_; }
<span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">uint</span> <span style="color: #00578E; font-weight: bold;">warnings</span>() <span style="color: #A52A2A; font-weight: bold;">const</span> { <span style="color: #A52A2A; font-weight: bold;">return</span> warnings_; }

<span style="color: #A52A2A; font-weight: bold;">private</span>:
<span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">uint</span> <span style="color: #0084C8; font-weight: bold;">errors_</span>;
<span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">uint</span> <span style="color: #0084C8; font-weight: bold;">warnings_</span>;
};


<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #00578E; font-weight: bold;">main</span>(<span style="color: #2F8B58; font-weight: bold;">int</span> <span style="color: #0084C8; font-weight: bold;">argc</span>, <span style="color: #2F8B58; font-weight: bold;">char</span> *<span style="color: #0084C8; font-weight: bold;">argv</span>[]) {
<span style="background-color: #E6E6E6;"> </span> <span style="color: #204A87;">// </span><span style="color: #204A87;">parse proto file with protobuf compiler module,</span>
<span style="background-color: #E6E6E6;"> </span> <span style="color: #204A87;">// </span><span style="color: #204A87;">also can generate self-described protobuf message with protoc,</span>
<span style="background-color: #E6E6E6;"> </span> <span style="color: #204A87;">// </span><span style="color: #204A87;">then we can get file descriptor without protobuf compiler,</span>
<span style="background-color: #E6E6E6;"> </span> <span style="color: #204A87;">// </span><span style="color: #204A87;">see https://developers.google.com/protocol-buffers/docs/techniques#self-des</span><span style="color: #204A87; text-decoration: underline;">cription</span>
<span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">google</span>::<span style="color: #F5666D;">protobuf</span>::<span style="color: #F5666D;">compiler</span>::<span style="color: #2F8B58; font-weight: bold;">DiskSourceTree</span> <span style="color: #0084C8; font-weight: bold;">sourceTree</span>;
<span style="background-color: #E6E6E6;"> </span> sourceTree.MapPath(<span style="color: #4E9A06;">""</span>, <span style="color: #4E9A06;">"."</span>);
<span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">ErrorCollector</span> <span style="color: #0084C8; font-weight: bold;">collector</span>;
<span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">google</span>::<span style="color: #F5666D;">protobuf</span>::<span style="color: #F5666D;">compiler</span>::<span style="color: #2F8B58; font-weight: bold;">Importer</span> <span style="color: #0084C8; font-weight: bold;">importer</span>(&amp;sourceTree, &amp;collector);
<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #2F8B58; font-weight: bold;">char</span>* <span style="color: #0084C8; font-weight: bold;">proto_file</span> = <span style="color: #4E9A06;">"example.proto"</span>;
<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #F5666D;">google</span>::<span style="color: #F5666D;">protobuf</span>::<span style="color: #2F8B58; font-weight: bold;">FileDescriptor</span>* <span style="color: #0084C8; font-weight: bold;">fileDescriptor</span> = importer.Import(proto<span style="text-decoration: underline;">_file);</span>
<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">if</span> (fileDescriptor == <span style="color: #F5666D;">NULL</span>) {
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">std</span>::cerr &lt;&lt; <span style="color: #4E9A06;">"proto file "</span> &lt;&lt; proto_file &lt;&lt; <span style="color: #4E9A06;">" import failed"</span> &lt;&lt; <span style="color: #F5666D;">std</span>::endl;
<span style="background-color: #E6E6E6;"> </span> <span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">return</span> EXIT_FAILURE;
<span style="background-color: #E6E6E6;"> </span> }

<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #F5666D;">google</span>::<span style="color: #F5666D;">protobuf</span>::<span style="color: #2F8B58; font-weight: bold;">Descriptor</span>* <span style="color: #0084C8; font-weight: bold;">descriptor</span> = fileDescriptor-&gt;FindMessageTy<span style="text-decoration: underline;">peByName(</span><span style="color: #4E9A06; text-decoration: underline;">"Hello"</span><span style="text-decoration: underline;">);</span>
<span style="background-color: #E6E6E6;"> </span> assert(descriptor);

<span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">google</span>::<span style="color: #F5666D;">protobuf</span>::<span style="color: #2F8B58; font-weight: bold;">DynamicMessageFactory</span> <span style="color: #0084C8; font-weight: bold;">factory</span>;
<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">const</span> <span style="color: #F5666D;">google</span>::<span style="color: #F5666D;">protobuf</span>::<span style="color: #2F8B58; font-weight: bold;">Message</span>* <span style="color: #0084C8; font-weight: bold;">prototype</span> = factory.GetPrototype(descriptor);
<span style="background-color: #E6E6E6;"> </span> assert(prototype);
<span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">google</span>::<span style="color: #F5666D;">protobuf</span>::<span style="color: #2F8B58; font-weight: bold;">Message</span>* <span style="color: #0084C8; font-weight: bold;">message</span> = prototype-&gt;New();
<span style="background-color: #E6E6E6;"> </span> assert(message);

<span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">string</span> <span style="color: #0084C8; font-weight: bold;">source</span> = <span style="color: #4E9A06;">"{\"name\":\"world\",\"times\":100}"</span>;
<span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">bool</span> <span style="color: #0084C8; font-weight: bold;">ok</span> = <span style="color: #F5666D;">Pb2Json</span>::Json2Message(<span style="color: #F5666D;">nlohmann</span>::<span style="color: #F5666D;">json</span>::parse(source), *message);
<span style="background-color: #E6E6E6;"> </span> assert(ok);

<span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">nlohmann</span>::<span style="color: #2F8B58; font-weight: bold;">json</span> <span style="color: #0084C8; font-weight: bold;">destinationJson</span>;
<span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">Pb2Json</span>::Message2Json(*message, destinationJson);
<span style="background-color: #E6E6E6;"> </span> <span style="color: #2F8B58; font-weight: bold;">string</span> <span style="color: #0084C8; font-weight: bold;">destination</span> = destinationJson.dump();

<span style="background-color: #E6E6E6;"> </span> <span style="color: #F5666D;">std</span>::cout &lt;&lt; <span style="color: #4E9A06;">"source: "</span> &lt;&lt; source &lt;&lt; <span style="color: #4E9A06;">"\tdestination: "</span> &lt;&lt; destination &lt;&lt; <span style="color: #F5666D;">std</span>::<span style="text-decoration: underline;">endl;</span>
<span style="background-color: #E6E6E6;"> </span> assert(source == destination);

<span style="background-color: #E6E6E6;"> </span> <span style="color: #A52A2A; font-weight: bold;">return</span> EXIT_SUCCESS;
}
</pre>
</div>

<ul class="org-ul">
<li><p>
编译
</p>

<div class="org-src-container">
<pre class="src src-sh">g++ -O2 protobuf_json.cpp ./pb2json/byReflection/pb2json.cpp -lm -o protobuf_jso<span style="text-decoration: underline;">n -lprotobuf</span>
</pre>
</div></li>

<li><p>
运行
</p>

<pre class="example">
$ ./protobuf_json
source: {"name":"world","times":100}    destination: {"name":"world","times":100}
</pre></li>
</ul></li>
</ul>


<p>
相关参考
</p>

<ul class="org-ul">
<li><a href="http://blog.csdn.net/haust_wang/article/details/49994883">c++使用Protobuf Message转Json字符串（Json库使用Json cpp） - - CSDN博客</a></li>

<li><a href="http://blog.csdn.net/haust_wang/article/details/50135967">Protobuf与Json互转 - - CSDN博客</a></li>

<li><a href="https://stackoverflow.com/questions/7007876/c-protobuf-to-from-json-conversion">C++ Protobuf to/from JSON conversion - Stack Overflow</a></li>

<li><a href="https://stackoverflow.com/questions/11996557/how-to-dynamically-build-a-new-protobuf-from-a-set-of-already-defined-descriptor">c++ - How to dynamically build a new protobuf from a set of already defined descriptors? - Stack Overflow</a></li>

<li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/#minor4.2">Google Protocol Buffer 的使用和原理</a></li>

<li><a href="https://developers.google.com/protocol-buffers/docs/reference/cpp/">C++ API  |  Protocol Buffers  |  Google Developers</a></li>
</ul>
</div>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>