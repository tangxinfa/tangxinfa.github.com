<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>docker - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/docker.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Mon, 28 Jan 2019 08:38:18 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>docker - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/docker.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[使用 docker 创建 NDK 开发环境]]></title>
            <link>/article/4f7f7528-docker-521b5efa-ndk-5f0053d173af5883.html</link>
            <guid>/article/4f7f7528-docker-521b5efa-ndk-5f0053d173af5883.html</guid>
            <pubDate>Tue, 14 Aug 2018 10:03:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
编写 Dockerfile
</p>

<div class="org-src-container">
<pre class="src src-dockerfile"><span style="color: #b5bd68;">FROM</span> <span style="color: #81a2be; font-weight: bold;">ubuntu:18.04</span>

<span style="color: #b5bd68;">RUN</span> sed -i <span style="color: #8abeb7;">'s/http:\/\/archive\.ubuntu\.com\/ubuntu\//http:\/\/mirrors\.163\.com</span><span style="color: #8abeb7; text-decoration: underline;">\/ubuntu\//g'</span><span style="text-decoration: underline;"> /etc/apt/sources.list</span>
<span style="color: #b5bd68;">RUN</span> apt-get -y update
<span style="color: #b5bd68;">RUN</span> apt-get install -y make wget cmake git autoconf automake libtool file
<span style="color: #b5bd68;">RUN</span> <span style="color: #f0c674;">DEBIAN_FRONTEND</span>=noninteractive apt-get install -y tzdata
<span style="color: #b5bd68;">RUN</span> mkdir /build &amp;&amp; <span style="color: #8abeb7;">\</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span style="color: #8abeb7;">\</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span>   <span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">"Asia/Shanghai"</span> &gt; /etc/timezone
<span style="color: #b5bd68;">RUN</span> apt-get install -y android-tools-adb
<span style="color: #b5bd68;">RUN</span> apt-get install -y unzip
<span style="color: #b5bd68;">RUN</span> echo no | dpkg-reconfigure dash
<span style="color: #b5bd68;">RUN</span> wget -c https://dl.google.com/android/repository/android-ndk-r17-beta2-linux<span style="text-decoration: underline;">-x86_64.zip?</span><span style="color: #f0c674; text-decoration: underline;">hl</span><span style="text-decoration: underline;">=zh-cn -O /build/android-ndk-r17-beta2-linux-x86_64.zip</span>
<span style="color: #b5bd68;">RUN</span> unzip /build/android-ndk-r17-beta2-linux-x86_64.zip -d /opt/
<span style="color: #b5bd68;">RUN</span> rm /build/android-ndk-r17-beta2-linux-x86_64.zip
<span style="color: #b5bd68;">RUN</span> apt-get install -y python
<span style="color: #b5bd68;">RUN</span> /opt/android-ndk-r17-beta2/build/tools/make_standalone_toolchain.py --arch a<span style="text-decoration: underline;">rm64 --api 24 --</span><span style="color: #f0c674; text-decoration: underline;">stl</span><span style="text-decoration: underline;">=libc++ --install-dir /opt/android-toolchain</span>
<span style="color: #b5bd68;">RUN</span> echo $<span style="color: #8abeb7;">'export PATH=/opt/android-toolchain/bin:$PATH\n\</span>
<span style="color: #8abeb7;">export CC=aarch64-linux-android-clang\n\</span>
<span style="color: #8abeb7;">export CXX=aarch64-linux-android-clang++\n\</span>
<span style="color: #8abeb7;">export LD=aarch64-linux-android-ld\n\</span>
<span style="color: #8abeb7;">export AR=aarch64-linux-android-ar\n\</span>
<span style="color: #8abeb7;">export STRIP=aarch64-linux-android-strip\n\</span>
<span style="color: #8abeb7;">export RANLIB=aarch64-linux-android-ranlib\n\</span>
<span style="color: #8abeb7;">export AS=aarch64-linux-android-clang\n\</span>
<span style="color: #8abeb7;">export CFLAGS="-fPIE"\n\</span>
<span style="color: #8abeb7;">export CXXFLAGS="$CFLAGS"\n\</span>
<span style="color: #8abeb7;">export LDFLAGS="-fPIE -pie"\n\</span>
<span style="color: #8abeb7;">export SYSROOT=/opt/android-toolchain/sysroot\n\</span>
<span style="color: #8abeb7;">export CROSS_COMPILE_HOST=aarch64-linux-android'</span> &gt; /root/.ndkrc

<span style="color: #b5bd68;">WORKDIR</span> /build

<span style="color: #b5bd68;">ENTRYPOINT</span> [<span style="color: #8abeb7;">"/bin/bash"</span>]
</pre>
</div></li>

<li><p>
构建 docker 镜像
</p>

<div class="org-src-container">
<pre class="src src-sh">docker build -f Dockerfile --network=host -t ndk:r17-beta2 .
</pre>
</div></li>

<li><p>
运行 docker 容器
</p>

<div class="org-src-container">
<pre class="src src-sh">docker run --rm --network=host -v ${<span style="color: #f0c674;">HOME</span>}/.android:/root/.android -it ndk:r17-be<span style="text-decoration: underline;">ta2</span>
</pre>
</div>

<p>
下面的命令全部在 docker 容器中执行。
</p></li>

<li><p>
交叉编译程序
</p>

<div class="org-src-container">
<pre class="src src-sh">cat &gt; hello.c &lt;&lt;EOF
<span style="color: #8abeb7;">#include &lt;stdio.h&gt;</span>
<span style="color: #8abeb7;">int main() {</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span><span style="color: #8abeb7;">   printf("hello ndk\n");</span>
<span style="color: #969896; background-color: #22a224a427a7;"> </span><span style="color: #8abeb7;">   return 0;</span>
<span style="color: #8abeb7;">}</span>
<span style="color: #8abeb7;">EOF</span>
<span style="color: #b294bb;">.</span> ~/.ndkrc
$<span style="color: #f0c674;">CC</span> $<span style="color: #f0c674;">CFLAGS</span> $<span style="color: #f0c674;">LDFLAGS</span> hello.c -o hello
</pre>
</div></li>

<li><p>
在设备上运行程序
</p>

<p>
假设设备 IP 为 192.168.1.3
</p>

<div class="org-src-container">
<pre class="src src-sh">adb connect 192.168.1.3
adb root
adb connect 192.168.1.3
adb remount
adb connect 192.168.1.3
adb push ./hello /tmp/hello
adb shell /tmp/hello
</pre>
</div>

<p>
最终将输出结果 <code>hello ndk</code> 。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[docker容器数据持久化]]></title>
            <link>/article/docker-5bb956686570636e63014e455316.html</link>
            <guid>/article/docker-5bb956686570636e63014e455316.html</guid>
            <pubDate>Thu, 17 Dec 2015 15:24:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在上一篇文章《 <a href="http:node.js-670d52a18fc179fb5230-docker-5bb95668.html">node.js服务迁移到docker容器</a> 》中，当容器被删除之后上传的文件将丢失，可以新建一个数据卷容器专门用来保存上传的文件，这个数据卷容器可以为多个应用容器提供数据持久化功能。
</p>

<p>
其实也可以挂载本地文件目录做为容器的数据卷，但使用数据卷容器更规范一些。
</p>

<div id="outline-container-org8972210" class="outline-2">
<h2 id="org8972210">创建数据卷容器</h2>
<div class="outline-text-2" id="text-org8972210">
<div class="org-src-container">
<pre class="src src-sh">sudo docker run -d -v /usr/local/upload-fiddle/public/files --name upload-fiddle<span style="text-decoration: underline;">-data </span><span style="color: #8abeb7; text-decoration: underline;">'dl.dockerpool.com:5000/ubuntu:14.04'</span><span style="text-decoration: underline;"> echo </span><span style="color: #8abeb7; text-decoration: underline;">'upload-fiddle data container'</span>
</pre>
</div>

<p>
数据卷容器不需要运行以节约资源，它存在的目的只是对数据卷进行引用，避免数据卷被意外删除。
</p>
</div>
</div>

<div id="outline-container-org067143e" class="outline-2">
<h2 id="org067143e">挂载数据卷容器</h2>
<div class="outline-text-2" id="text-org067143e">
<div class="org-src-container">
<pre class="src src-sh">sudo docker run -idt --name=<span style="color: #8abeb7;">'upload-fiddle'</span> -p 127.0.0.1:80:80 --volumes-from up<span style="text-decoration: underline;">load-fiddle-data </span><span style="color: #8abeb7; text-decoration: underline;">'tangxinfa/upload-fiddle:0.0.1'</span>
</pre>
</div>

<p>
使用 <code>--volumes-from</code> 选项引用容器中的数据卷。
</p>
</div>
</div>

<div id="outline-container-orgb91f6b4" class="outline-2">
<h2 id="orgb91f6b4">数据卷容器数据存储位置</h2>
<div class="outline-text-2" id="text-orgb91f6b4">
<p>
查看数据卷容器挂载信息
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo docker inspect -f {{.Mounts}} upload-fiddle-data
</pre>
</div>

<p>
可以看到数据存储在宿主机的 <code>/var/lib/docker/volumes/</code> 目录下。
</p>

<p>
数据卷只有当最后一个引用它的容器使用 <code>-v</code> 选项进行删除（ <code>docker rm</code> 命令）时，才会被删除。
</p>

<p>
可以使用 <code>docker volume</code> 命令对数据卷进行管理。
</p>
</div>
</div>

<div id="outline-container-org1223e55" class="outline-2">
<h2 id="org1223e55">参考</h2>
<div class="outline-text-2" id="text-org1223e55">
<p>
《<a href="http://container-solutions.com/understanding-volumes-docker/">Understanding Volumes in Docker - Container Solutions</a>》</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[node.js服务迁移到docker容器]]></title>
            <link>/article/node.js-670d52a18fc179fb5230-docker-5bb95668.html</link>
            <guid>/article/node.js-670d52a18fc179fb5230-docker-5bb95668.html</guid>
            <pubDate>Thu, 17 Dec 2015 08:54:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
这是一篇 <code>docker</code> 实践教程，将 <a href="https://github.com/tangxinfa/upload-fiddle">tangxinfa/upload-fiddle</a> 这个 <code>node.js</code> 服务封装成 <code>docker</code> 容器。
相关代码已提交到 <a href="https://github.com/tangxinfa/upload-fiddle">tangxinfa/upload-fiddle</a> 项目。
</p>

<div id="outline-container-orga5323c9" class="outline-2">
<h2 id="orga5323c9">编写 <code>Dockerfile</code></h2>
<div class="outline-text-2" id="text-orga5323c9">
<pre class="example">
<span id="coderef-dockerpool" class="coderef-off"><span class="linenr"> 1: </span>FROM dl.dockerpool.com:5000/ubuntu:14.04</span>
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span>MAINTAINER tangxinfa &lt;tangxinfa@gmail.com&gt;
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span># Change apt sources
<span id="coderef-163-ubuntu" class="coderef-off"><span class="linenr"> 6: </span>ADD .docker/sources.list /etc/apt/sources.list</span>
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span># Install python
<span class="linenr"> 9: </span>RUN \
<span class="linenr">10: </span>    apt-get update &amp;&amp; apt-get -y -qq install python wget xz-utils
<span class="linenr">11: </span>
<span class="linenr">12: </span># Install node
<span class="linenr">13: </span>RUN \
<span class="linenr">14: </span>    wget http://npm.taobao.org/mirrors/node/v8.8.1/node-v8.8.1-linux-x64.tar.xz &amp;&amp;\
<span class="linenr">15: </span>    tar xJvf node-v8.8.1-linux-x64.tar.xz --no-same-owner --exclude CHANGELOG.md --exclude LICENSE --exclude README.md --strip-components 1 -C /usr
<span class="linenr">16: </span>
<span class="linenr">17: </span>WORKDIR /usr/local/upload-fiddle/
<span class="linenr">18: </span>
<span class="linenr">19: </span># Install node modules
<span class="linenr">20: </span>ADD package.json ./
<span class="linenr">21: </span>ADD process.json ./
<span class="linenr">22: </span>ADD .bashrc ./
<span class="linenr">23: </span>RUN \
<span id="coderef-npm-config" class="coderef-off"><span class="linenr">24: </span>    ["/bin/bash", "-c", "npm config set registry=https://registry.npm.taobao.org; npm config set script-shell=/bin/bash"]</span>
<span class="linenr">25: </span>RUN \
<span class="linenr">26: </span>    ["/bin/bash", "-c", "source .bashrc; npm install -g pm2@2.x json; npm install"]
<span class="linenr">27: </span>
<span class="linenr">28: </span># Add project files
<span class="linenr">29: </span>COPY src ./src
<span class="linenr">30: </span>COPY config ./config
<span class="linenr">31: </span>ADD public/*.html ./public/
<span class="linenr">32: </span>RUN mkdir /usr/local/upload-fiddle/public/files &amp;&amp;\
<span class="linenr">33: </span>    chmod a+w /usr/local/upload-fiddle/public/files
<span class="linenr">34: </span>
<span class="linenr">35: </span># Start service.
<span id="coderef-npm-logs" class="coderef-off"><span class="linenr">36: </span>CMD ["/bin/bash", "-c", "npm run pm2 -- ping &amp;&amp; npm start &amp;&amp; npm run logs"]</span>
</pre>

<dl class="org-dl">
<dt>配置行 <a href="#coderef-dockerpool" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dockerpool');" onmouseout="CodeHighlightOff(this, 'coderef-dockerpool');">1</a></dt><dd>在官方仓库被墙的大环境下，使用 <code>dockerpool.com</code> 提供的镜像</dd>

<dt>配置行 <a href="#coderef-163-ubuntu" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-163-ubuntu');" onmouseout="CodeHighlightOff(this, 'coderef-163-ubuntu');">6</a></dt><dd>使用163的ubuntu源，提高速度</dd>

<dt>配置行 <a href="#coderef-npm-config" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-npm-config');" onmouseout="CodeHighlightOff(this, 'coderef-npm-config');">24</a></dt><dd>使用taobao的npm源，提高速度；ubuntu docker 镜像默认的 /bin/sh 指向 dash，为 npm scripts 指定 shell 为 bash</dd>

<dt>配置行 <a href="#coderef-npm-logs" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-npm-logs');" onmouseout="CodeHighlightOff(this, 'coderef-npm-logs');">36</a></dt><dd>输出应用日志到控制台，避免命令退出导致容器停止</dd>
</dl>
</div>
</div>

<div id="outline-container-org239c691" class="outline-2">
<h2 id="org239c691">创建 <code>docker</code> 镜像</h2>
<div class="outline-text-2" id="text-org239c691">
<div class="org-src-container">
<pre class="src src-sh">sudo docker build -t <span style="color: #8abeb7;">'tangxinfa/upload-fiddle:0.0.1'</span> .
</pre>
</div>
</div>
</div>

<div id="outline-container-org8dc2c9b" class="outline-2">
<h2 id="org8dc2c9b">运行 <code>docker</code> 容器</h2>
<div class="outline-text-2" id="text-org8dc2c9b">
<div class="org-src-container">
<pre class="src src-sh">sudo docker run -idt --name=<span style="color: #8abeb7;">'upload-fiddle'</span> -p 127.0.0.1:80:80 <span style="color: #8abeb7;">'tangxinfa/upload</span><span style="color: #8abeb7; text-decoration: underline;">-fiddle:0.0.1'</span>
</pre>
</div>

<p>
现在可以通过浏览器访问服务了：<a href="http://localhost/">http://localhost/</a>
</p>
</div>
</div>

<div id="outline-container-org0c5e5af" class="outline-2">
<h2 id="org0c5e5af">查看容器运行日志</h2>
<div class="outline-text-2" id="text-org0c5e5af">
<div class="org-src-container">
<pre class="src src-sh">sudo docker logs upload-fiddle -f
</pre>
</div>
</div>
</div>

<div id="outline-container-orgf44dab2" class="outline-2">
<h2 id="orgf44dab2">打开 <code>docker</code> 容器终端查看进程运行状态</h2>
<div class="outline-text-2" id="text-orgf44dab2">
<div class="org-src-container">
<pre class="src src-sh">sudo docker exec -ti upload-fiddle /bin/bash
npm run pm2 -- list
</pre>
</div>

<p>
直接 <code>exit</code> 退出终端不会停止容器。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux下安装运行docker]]></title>
            <link>/article/archlinux-4e0b5b8988c58fd0884c-docker.html</link>
            <guid>/article/archlinux-4e0b5b8988c58fd0884c-docker.html</guid>
            <pubDate>Wed, 09 Dec 2015 15:07:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li><p>
安装 <code>docker</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">yaourt -S docker
</pre>
</div></li>

<li><p>
配置 <code>docker</code>
</p>

<p>
由于 <code>docker</code> 的官方仓库被墙，需要从 <code>dockerpool.com</code> 上下载，修改 <code>docker</code> 配置以免 <code>pull</code> 时出现 tls 相关错误。
</p>

<p>
修改 <code>/usr/lib/systemd/system/docker.service</code> 文件，将
</p>

<pre class="example">
ExecStart=/usr/bin/docker daemon -H fd:// --exec-opt native.cgroupdriver=cgroupfs
</pre>

<p>
改为
</p>

<pre class="example">
ExecStart=/usr/bin/docker daemon --insecure-registry dl.dockerpool.com:5000 -H fd:// --exec-opt native.cgroupdriver=cgroupfs
</pre>

<p>
生效配置：
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo systemctl daemon-reload
</pre>
</div></li>

<li><p>
启动 <code>docker</code> 服务
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo systemctl restart docker
</pre>
</div></li>

<li><p>
下载 <code>ubuntu14.04</code> 镜像
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo docker pull <span style="color: #8abeb7;">'dl.dockerpool.com:5000/ubuntu:14.04'</span>
</pre>
</div></li>

<li><p>
试运行容器
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo docker run -t -i <span style="color: #8abeb7;">'dl.dockerpool.com:5000/ubuntu:14.04'</span> /bin/bash
</pre>
</div></li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>