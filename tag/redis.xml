<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>redis - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/redis.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Wed, 15 Nov 2017 08:01:28 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>redis - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/redis.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[redis 数据库不停机拆分扩容]]></title>
            <link>/article/redis-6570636e5e934e0d505c673a62c6520662695bb9.html</link>
            <guid>/article/redis-6570636e5e934e0d505c673a62c6520662695bb9.html</guid>
            <pubDate>Thu, 22 Sep 2016 03:02:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
服务开发之始，难以估算最终的数据规模，如按最大容量规划，则会增加项目起步时的复杂性，还有就是资源浪费。
</p>

<p>
所以很多时候，数据都是塞在一个 redis 实例中，当服务规模扩大，单个 redis 实例不足以支撑未来的访问量时，再拆分数据（Partitioning）。
</p>

<p>
Redis 有很多数据迁移工具，如：<a href="https://github.com/yaauie/redis-copy">redis-copy</a> 、<a href="https://github.com/salimane/redis-tools">redis-copy.py</a> 、<a href="http://redis.io/commands/migrate">migrate</a> 等，但是迁移的数据量大时需要不短的时间，会对业务稳定性造成影响。
</p>

<p>
真正可靠的迁移手段估计只有 Redis replication 方式。
</p>

<p>
引用自 <a href="http://redis.io/topics/partitioning#presharding">Partitioning: how to split data among multiple Redis instances. – Redis</a>
</p>
<blockquote>
<p>
Using Redis replication you will likely be able to do the move with minimal or no
downtime for your users:
</p>

<ul class="org-ul">
<li>Start empty instances in your new server.
</li>
<li>Move data configuring these new instances as slaves for your source instances.
</li>
<li>Stop your clients.
</li>
<li>Update the configuration of the moved instances with the new server IP address.
</li>
<li>Send the SLAVEOF NO ONE command to the slaves in the new server.
</li>
<li>Restart your clients with the new updated configuration.
</li>
<li>Finally shut down the no longer used instances in the old server.
</li>
</ul>
</blockquote>

<p>
引用自 <a href="http://redis.io/topics/admin">Redis Administration – Redis</a>
</p>
<blockquote>
<p>
Upgrading or restarting a Redis instance without downtime
</p>

<p>
Redis is designed to be a very long running process in your server. For instance many
configuration options can be modified without any kind of restart using the CONFIG SET
command.
</p>

<p>
Starting from Redis 2.2 it is even possible to switch from AOF to RDB snapshots
persistence or the other way around without restarting Redis. Check the output of the
CONFIG GET * command for more information.
</p>

<p>
However from time to time a restart is mandatory, for instance in order to upgrade the
Redis process to a newer version, or when you need to modify some configuration parameter
that is currently not supported by the CONFIG command.
</p>

<p>
The following steps provide a very commonly used way in order to avoid any downtime.
</p>

<ul class="org-ul">
<li>Setup your new Redis instance as a slave for your current Redis instance. In order to
do so you need a different server, or a server that has enough RAM to keep two
instances of Redis running at the same time.
</li>
<li>If you use a single server, make sure that the slave is started in a different port
than the master instance, otherwise the slave will not be able to start at all.
</li>
<li>Wait for the replication initial synchronization to complete (check the slave log
file).
</li>
<li>Make sure using INFO that there are the same number of keys in the master and in the
slave. Check with redis-cli that the slave is working as you wish and is replying to
your commands.
</li>
<li>Allow writes to the slave using CONFIG SET slave-read-only no
</li>
<li>Configure all your clients in order to use the new instance (that is, the slave).
</li>
<li>Once you are sure that the master is no longer receiving any query (you can check
this with the MONITOR command), elect the slave to master using the SLAVEOF NO ONE
command, and shut down your master.
</li>
</ul>
</blockquote>

<p>
以下步骤可以不断进行，直到将数据拆到很细的粒度，值得注意的是这种拆分方法只支持将一部分数据拆分到全新的 Redis 实例。
</p>

<ul class="org-ul">
<li>创建新 Redis 实例为旧 Redis 实例的 Slave
</li>

<li>服务同时连接新旧 Redis 实例

<p>
迁移时代码需要更新并重启服务，服务需支持优雅重启：服务进程依次重启使得客户感觉不到服务被中断。
</p>

<p>
通过预先连接新旧 Redis 实例，使得接下来的迁移动作不需要重启服务，一键瞬间完成。
</p>

<p>
迁移后，清除新旧 Redis 实例中的删除脏数据可能耗时较长，对于通过 scan 扫描数据的业务逻辑部分，需容忍脏数据：根据 hash 规则，扫描到数据不属于当前 Redis 实例时忽略掉，避免使用脏数据。
</p>

<p>
Slave 的数据复制进度追上后，进行下一步。
</p>
</li>

<li>让新 Redis 实例可写

<pre class="example">
config set slave-read-only no
</pre>

<p>
新 Redis 实例也可写入，旧 Redis 的写请求还会同步到新的 Redis 实例，使得迁移过程中数据基本不丢失。
</p>

<p>
要求新旧 Redis 实例比较稳定，发生全量同步会导致数据丢失。
</p>
</li>

<li>服务从新 Redis 实例访问迁移走的数据

<p>
可以通过给所有服务结点广播消息方式实现，将服务的 Redis 访问快速切到新 Redis 实例上。
</p>

<p>
正常情况下，旧 Redis 中已迁移的数据应该不会再有读写，如果有的话可能是还没有迁移干净，应该立即找到访问源，进行中断或迁移。
</p>
</li>

<li>新 Redis 实例断开与旧实例的 Master-Slave 关系

<p>
新 Redis 实例改为角色为 Master，恢复 <code>slave-read-only</code> 配置项为 <code>yes</code> 。
</p>

<p>
新的 Redis 实例可以进一步使用 Redis Sentinel 来监控以实现高可用。
</p>
</li>

<li>删除新 Redis 实例中多迁来的数据
</li>

<li>删除旧 Redis 实例中已迁走的数据

<p>
所有数据都迁移走后，可以将它停掉。
</p>
</li>
</ul>


<p>
最近看了《 <a href="http://www.infoq.com/cn/articles/online-data-migration-experience">在线数据迁移经验：如何为正在飞行的飞机更换引擎</a> 》，发现前面的 redis 操作步骤与文章中的在线数据迁移步骤极其相似：
</p>

<ul class="org-ul">
<li>迁移前

<p>
写旧、读旧
</p>
</li>

<li>上线双写

<p>
写新、写旧、读旧
</p>
</li>

<li>历史数据搬迁

<p>
写新、写旧、读旧
</p>
</li>

<li>切读

<p>
写新、写旧、读新
</p>
</li>

<li>清理

<p>
写新、读新。
</p>
</li>
</ul>

<p>
这是一种数据迁移的通用模式。
</p>


<p>
另一篇文章《<a href="http://www.brunton-spall.co.uk/post/2014/05/06/database-migrations-done-right/">Database migrations done right - Michael Brunton-Spall</a>》提出了一个基本原则:
</p>

<blockquote>
<p>
你做出的每一处改动必须与系统的其余部分保持向后兼容
</p>

<p>
Every change you make must be backward compatible with the rest of the system
</p>
</blockquote>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ioredis Sentinel 实现就近访问]]></title>
            <link>/article/ioredis-sentinel-5b9e73b05c318fd18bbf95ee.html</link>
            <guid>/article/ioredis-sentinel-5b9e73b05c318fd18bbf95ee.html</guid>
            <pubDate>Sat, 10 Sep 2016 10:12:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">跨机房 redis 访问性能堪忧</h2>
<div class="outline-text-2" id="text-1">
<p>
线上服务运行结果显示跨机房相对不跨机房，一个 redis 长连接上的 QPS 会低一个数量级： <code>50</code> vs <code>640</code> 。
这是因为 Redis 的请求-响应是串行的，网络时延会对 QPS 造成巨大的响应。
因此，一定要尽量连接距离更近的 Redis 实例。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a href="https://github.com/luin/ioredis/">ioredis</a> 支持按角色（Role）进行连接</h2>
<div class="outline-text-2" id="text-2">
<p>
引用自 <a href="https://github.com/luin/ioredis/">ioredis</a>
</p>
<blockquote>
<p>
ioredis 保证即使故障转移（failover）后你连接的结点依然是 master 。当故障转移发生，ioredis 会向 sentinels 询问新的 master 结点并连接，而不是尝试重连失效的结点（恢复可用后它会降级为 slave）。故障转移期间发送的所有命令将放入队列，当新连接建立后再执行，不会丢失命令。
</p>

<p>
可以指定 role 选项为 slave 以连接 slave 结点，ioredis 将尝试连接指定 master 的一个随机 slave 结点，并且保证连接的结点总是 slave 角色。当连接的结点因为故障转移而提升为 master，ioredis 将从该结点断开连接并询问 sentinels 获取另一个 slave 结点进行连接。
</p>

<p>
ioredis guarantees that the node you connected to is always a master even after a failover. When a failover happens, instead of trying to reconnect to the failed node (which will be demoted to slave when it's available again), ioredis will ask sentinels for the new master node and connect to it. All commands sent during the failover are queued and will be executed when the new connection is established so that none of the commands will be lost.
</p>

<p>
It's possible to connect to a slave instead of a master by specifying the option role with the value of slave, and ioredis will try to connect to a random slave of the specified master, with the guarantee that the connected node is always a slave. If the current node is promoted to master due to a failover, ioredis will disconnect from it and ask the sentinels for another slave node to connect to.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><a href="https://github.com/luin/ioredis/">ioredis</a> 会随机选择一个 Slave</h2>
<div class="outline-text-2" id="text-3">
<p>
引用自 ioredis/lib/connectors/sentinel_connector.js
</p>
<div class="org-src-container">

<pre class="src src-js">SentinelConnector.<span style="color: #81a2be;">prototype</span>.resolveSlave = <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">client</span>, <span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #222427;"> </span> client.sentinel(<span style="color: #8abeb7;">'slaves'</span>, <span style="color: #81a2be;">this</span>.options.name, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">result</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   client.disconnect();
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">selectedSlave</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (Array.isArray(result)) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">availableSlaves</span> = [];
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span> <span style="color: #b5bd68;">for</span> (<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">i</span> = 0; i &lt; result.length; ++i) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">slave</span> = utils.packObject(result[i]);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (slave.flags &amp;&amp; !slave.flags.match(<span style="color: #8abeb7;">/(disconnected|s_down|o_down)/</span>)) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span> availableSlaves.push(slave);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span> }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span> selectedSlave = _.sample(availableSlaves);
<span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   callback(<span style="color: #81a2be;">null</span>, selectedSlave ? { host: selectedSlave.ip, port: selectedSlave<span style="color: #de935f; background-color: #373b41;">.port } : </span><span style="color: #de935f; background-color: #373b41;">null</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span> });
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">判断本地还是异地的算法</h2>
<div class="outline-text-2" id="text-4">
<p>
按 IP 地址进行推断，前 N 段一样则认为是本地。
</p>

<p>
如 N 取值为 3，本机 IP 为 11.22.33.1，则 11.22.33.123 由于前 3 段（11.22.33）与本机相同被认定为是本地，而 11.22.99.1 由于前 3 段（11.22.99）与本机不同被认定为是异地。
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">redis 至少要求 2.8.12</h2>
<div class="outline-text-2" id="text-5">
<p>
redis 2.8.12 实现了一个特性：当 failover （redis 角色变化）后，断开所有 client 的连接。
</p>

<p>
缺少这个特性会导致 failover 发生后与原 master 连接还是保持的，后继请求返回 READONLY 错误。
</p>

<p>
可以设置 reconnectOnError 选项，判断错误类型为 READONLY 后触发重连。
</p>

<p>
但 PUB/SUB 不会出现 READONLY 错误，所以还是要升级到 2.8.12 以上。
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">在 &lt;2.4.0 的 ioredis 上实现优先选择本地 Slave</h2>
<div class="outline-text-2" id="text-6">
<p>
相关讨论
</p>

<p>
<a href="https://github.com/luin/ioredis/issues/38">rfc - a preferred slave list in a sentinel setup · Issue #38 · luin/ioredis</a>
</p>

<p>
preferredSlaves 选项已经在 2.4.0 版实现，下面的代码在旧版本 ioredis 的基础上实现，仅供参考，不建议使用。
</p>

<p>
主要的通过替换 SentinelConnector.prototype.resolveSlave, SentinelConnector.prototype.resolveMaster, SentinelConnector.prototype.check 实现：
</p>

<ul class="org-ul">
<li>从到 sentinel 的连接上取得本机地址
</li>
</ul>


<ul class="org-ul">
<li>从 sentinel 取出 slaves 列表
</li>
</ul>


<ul class="org-ul">
<li>将 slaves 列表分为本地列表和异地列表
</li>
</ul>


<ul class="org-ul">
<li>优先从本地列表随机选择一个 slave
</li>
</ul>

<p>
具体实现如下
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">Redis</span>     = require(<span style="color: #8abeb7;">'ioredis'</span>),
<span style="color: #969896; background-color: #222427;"> </span>   utils     = require(<span style="color: #8abeb7;">'ioredis/lib/utils'</span>),
<span style="color: #969896; background-color: #222427;"> </span>   _         = require(<span style="color: #8abeb7;">'lodash'</span>),
<span style="color: #969896; background-color: #222427;"> </span>   net       = require(<span style="color: #8abeb7;">'net'</span>),
<span style="color: #969896; background-color: #222427;"> </span>   assert    = require(<span style="color: #8abeb7;">'assert'</span>);


<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* A SentinelConnector.prototype.resolveSlave replacement, prefer local slave.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">client</span><span style="color: #969896; font-style: italic;"> redis client.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">callback</span><span style="color: #969896; font-style: italic;"> function (err, slave) called when done.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*                 slave with a extra boolean field "local_node" to indicate sla</span><span style="color: #de935f; background-color: #373b41; font-style: italic;">ve is in local network.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">resolveSlavePreferLocal</span> (<span style="color: #f0c674;">client</span>, <span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;
<span style="color: #969896; background-color: #222427;"> </span>   client.sentinel(<span style="color: #8abeb7;">'slaves'</span>, <span style="color: #81a2be;">this</span>.options.name, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">result</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client.disconnect();
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localIP</span> = client.stream.localAddress;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client.disconnect();

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localIPSegments</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Array</span>(4);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (net.isIPv4(localIP)) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   localIPSegments = localIP.split(<span style="color: #8abeb7;">'.'</span>);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">selectedSlave</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">local_node</span> = <span style="color: #81a2be;">false</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (Array.isArray(result)) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localSlaves</span> = [];
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">remoteSlaves</span> = [];
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">for</span> (<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">i</span> = 0; i &lt; result.length; ++i) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">slave</span> = utils.packObject(result[i]);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (slave.flags &amp;&amp; !slave.flags.match(<span style="color: #8abeb7;">/(disconnected|s_down|o_do</span><span style="color: #de935f; background-color: #373b41;">wn)/</span><span style="color: #de935f; background-color: #373b41;">)) {</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (net.isIPv4(slave.ip)) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">slaveIpSegments</span> = slave.ip.split(<span style="color: #8abeb7;">'.'</span>);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (localIPSegments[0] === slaveIpSegments[0] &amp;&amp;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   localIPSegments[1] === slaveIpSegments[1] &amp;&amp;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   localIPSegments[2] === slaveIpSegments[2]) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   localSlaves.push(slave);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">continue</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   remoteSlaves.push(slave);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   selectedSlave = _.sample(localSlaves.length ? localSlaves : remoteSl<span style="color: #de935f; background-color: #373b41;">aves);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   local_node = Boolean(localSlaves.length);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.warn(<span style="color: #8abeb7;">'redis('</span> + JSON.stringify({name: self.options.name, db: sel<span style="color: #de935f; background-color: #373b41;">f.options.db, sentinels: self.options.sentinels}) + </span><span style="color: #de935f; background-color: #373b41;">') resolve slave to'</span><span style="color: #de935f; background-color: #373b41;"> + (local_node ? </span><span style="color: #de935f; background-color: #373b41;">' local'</span><span style="color: #de935f; background-color: #373b41;"> : </span><span style="color: #de935f; background-color: #373b41;">''</span><span style="color: #de935f; background-color: #373b41;">) + </span><span style="color: #de935f; background-color: #373b41;">': '</span><span style="color: #de935f; background-color: #373b41;"> + selectedSlave.ip + </span><span style="color: #de935f; background-color: #373b41;">':'</span><span style="color: #de935f; background-color: #373b41;"> + selectedSlave.port);</span>

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   callback(<span style="color: #81a2be;">null</span>, selectedSlave ? { host: selectedSlave.ip, port: selectedS<span style="color: #de935f; background-color: #373b41;">lave.port, local_node: local_node } : </span><span style="color: #de935f; background-color: #373b41;">null</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   });
};

<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* Prefer connect to local slave.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">client</span><span style="color: #969896; font-style: italic;"> redis client.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@return</span><span style="color: #969896; font-style: italic;"> is this change successful.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">preferLocalSlave</span>(<span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (client.options.role === <span style="color: #8abeb7;">'slave'</span> &amp;&amp; client.connector.resolveSlave) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (client.options.lazyConnect &amp;&amp; client.status == <span style="color: #8abeb7;">'wait'</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client.connector.resolveSlave = resolveSlavePreferLocal;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">true</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.warn(<span style="color: #8abeb7;">'redis client('</span> + JSON.stringify({name: client.options.name<span style="color: #de935f; background-color: #373b41;">, db: client.options.db, sentinels: client.options.sentinels}) + </span><span style="color: #de935f; background-color: #373b41;">') status unexpected'</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">false</span>;
}
</pre>
</div>

<p>
用法如下
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">options</span> = {name: <span style="color: #8abeb7;">"data"</span>, sentinels: sentinels, db: 0, role: <span style="color: #8abeb7;">"slave"</span>, lazyCon<span style="color: #de935f; background-color: #373b41;">nect: </span><span style="color: #de935f; background-color: #373b41;">true</span><span style="color: #de935f; background-color: #373b41;">}</span>
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>(options);
<span style="color: #b5bd68;">if</span> (preferLocalSlave(client)) {
<span style="color: #969896; background-color: #222427;"> </span>   console.warn(<span style="color: #8abeb7;">"prefer local slave on redis sentinel("</span> + JSON.stringify(option<span style="color: #de935f; background-color: #373b41;">s) + </span><span style="color: #de935f; background-color: #373b41;">")"</span><span style="color: #de935f; background-color: #373b41;">);</span>
}
</pre>
</div>

<p>
值得注意的是必须指定 <code>lazyConnect: true</code> ，这样才能通过替换 client 中的方法实现功能。 
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">在 &lt;2.4.0 的 ioredis 上实现优先选择本地结点</h2>
<div class="outline-text-2" id="text-7">
<p>
假设 redis 是以 1 Master + 1 Slave 方式进行跨机房部署，那么我们希望实现优先连接本地结点（忽略其角色），
连接成功后该连接可能是 Master 也可能是 Slave，我们把它当 Slave 用准没错。
</p>

<p>
preferredSlaves 选项已经在 2.4.0 版实现，下面的代码依赖之前的 ioredis 版本代码，仅供参考，不建议使用。
</p>

<p>
实现逻辑：
</p>

<ul class="org-ul">
<li>按上一节的实现获取 slave
</li>
</ul>


<ul class="org-ul">
<li>如果 slave 在本地，则使用该 slave，否则尝试连接 master
</li>
</ul>


<ul class="org-ul">
<li>如果 master 在本地，则使用该 master，否则使用前面的 slave。
</li>
</ul>


<p>
具体实现如下
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* A SentinelConnector.prototype.resolveMaster replacement, indicate the resolve</span><span style="color: #de935f; background-color: #373b41; font-style: italic;">d node is local node.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">client</span><span style="color: #969896; font-style: italic;"> redis client.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">callback</span><span style="color: #969896; font-style: italic;"> function (err, master) called when done.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*                 master with a extra boolean field "local_node" to indicate ma</span><span style="color: #de935f; background-color: #373b41; font-style: italic;">ster is in local network.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">resolveMasterPreferLocal</span> (<span style="color: #f0c674;">client</span>, <span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   client.sentinel(<span style="color: #8abeb7;">'get-master-addr-by-name'</span>, <span style="color: #81a2be;">this</span>.options.name, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>,<span style="color: #de935f; background-color: #373b41;"> </span><span style="color: #de935f; background-color: #373b41;">result</span><span style="color: #de935f; background-color: #373b41;">) {</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client.disconnect();
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localIP</span> = client.stream.localAddress;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client.disconnect();

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">localIPSegments</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Array</span>(4);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (net.isIPv4(localIP)) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   localIPSegments = localIP.split(<span style="color: #8abeb7;">'.'</span>);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">local_node</span> = <span style="color: #81a2be;">false</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (Array.isArray(result)) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">ip</span> = result[0];
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (net.isIPv4(ip)) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">ipSegments</span> = ip.split(<span style="color: #8abeb7;">'.'</span>);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (localIPSegments[0] === ipSegments[0] &amp;&amp;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   localIPSegments[1] === ipSegments[1] &amp;&amp;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   localIPSegments[2] === ipSegments[2]) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   local_node = <span style="color: #81a2be;">true</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   callback(<span style="color: #81a2be;">null</span>, Array.isArray(result) ? { host: result[0], port: result[1<span style="color: #de935f; background-color: #373b41;">], local_node: local_node } : </span><span style="color: #de935f; background-color: #373b41;">null</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   });
};

<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* A SentinelConnector.prototype.resolve replacement, prefer resolve to local no</span><span style="color: #de935f; background-color: #373b41; font-style: italic;">de.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">endpoint</span><span style="color: #969896; font-style: italic;"> sentinel endpoint to connect.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">callback</span><span style="color: #969896; font-style: italic;"> function (err, node) called when done.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*                 node with a extra boolean field "local_node" to indicate node</span><span style="color: #de935f; background-color: #373b41; font-style: italic;"> is in local network.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">resolvePreferLocal</span>(<span style="color: #f0c674;">endpoint</span>, <span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   assert(<span style="color: #81a2be;">this</span>.options.role === <span style="color: #8abeb7;">'slave'</span>);

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>({
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   port: endpoint.port,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   host: endpoint.host,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   retryStrategy: <span style="color: #81a2be;">null</span>,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   enableReadyCheck: <span style="color: #81a2be;">false</span>,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   connectTimeout: <span style="color: #81a2be;">this</span>.options.connectTimeout
<span style="color: #969896; background-color: #222427;"> </span>   });

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #81a2be;">this</span>.resolveSlave(client, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">slave_err</span>, <span style="color: #f0c674;">slave</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (slave_err || !slave ||!slave.local_node) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (slave_err) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.error(<span style="color: #8abeb7;">'redis('</span> + JSON.stringify({name: self.options.name<span style="color: #de935f; background-color: #373b41;">, db: self.options.db, sentinels: self.options.sentinels}) + </span><span style="color: #de935f; background-color: #373b41;">') resolve slave error('</span><span style="color: #de935f; background-color: #373b41;"> + slave_err.toString() + </span><span style="color: #de935f; background-color: #373b41;">')'</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>({
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   port: endpoint.port,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   host: endpoint.host,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   retryStrategy: <span style="color: #81a2be;">null</span>,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   enableReadyCheck: <span style="color: #81a2be;">false</span>,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   connectTimeout: self.options.connectTimeout
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   });
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> self.resolveMaster(client, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">master_err</span>, <span style="color: #f0c674;">master</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (master_err) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.error(<span style="color: #8abeb7;">'redis('</span> + JSON.stringify({name: self.options.<span style="color: #de935f; background-color: #373b41;">name, db: self.options.db, sentinels: self.options.sentinels}) + </span><span style="color: #de935f; background-color: #373b41;">') resolve master error('</span><span style="color: #de935f; background-color: #373b41;"> + master_err.toString() + </span><span style="color: #de935f; background-color: #373b41;">')'</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (!master_err &amp;&amp; master &amp;&amp; master.local_node) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.warn(<span style="color: #8abeb7;">'redis('</span> + JSON.stringify({name: self.options.n<span style="color: #de935f; background-color: #373b41;">ame, db: self.options.db, sentinels: self.options.sentinels}) + </span><span style="color: #de935f; background-color: #373b41;">') resolve slave to local master: '</span><span style="color: #de935f; background-color: #373b41;"> + master.host + </span><span style="color: #de935f; background-color: #373b41;">':'</span><span style="color: #de935f; background-color: #373b41;"> + master.port);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, master);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   } <span style="color: #b5bd68;">else</span> <span style="color: #b5bd68;">if</span> (slave || master) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, slave || master);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(slave_err || master_err, <span style="color: #81a2be;">null</span>);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   });
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   } <span style="color: #b5bd68;">else</span> {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, slave);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   });
}

<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* A SentinelConnector.prototype.check replacement, enable connect local master </span><span style="color: #de935f; background-color: #373b41; font-style: italic;">when connect to slave.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">checkPreferLocal</span>(<span style="color: #f0c674;">info</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">true</span>;
}

<span style="color: #969896; font-style: italic;">/**</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* Prefer connect to local redis node, slave first.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@param</span><span style="color: #969896; font-style: italic;"> </span><span style="color: #f0c674; font-style: italic;">client</span><span style="color: #969896; font-style: italic;"> redis client.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">* </span><span style="color: #b5bd68; font-style: italic;">@return</span><span style="color: #969896; font-style: italic;"> is this change successful.</span>
<span style="color: #969896; background-color: #222427; font-style: italic;"> </span><span style="color: #969896; font-style: italic;">*/</span>
<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">preferLocal</span>(<span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (client.options.role === <span style="color: #8abeb7;">'slave'</span> &amp;&amp; client.connector.resolveSlave) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (client.options.lazyConnect &amp;&amp; client.status == <span style="color: #8abeb7;">'wait'</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (client.connector.resolveSlave != resolveSlavePreferLocal) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   preferLocalSlave(client);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client.connector.resolveMaster = resolveMasterPreferLocal;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client.connector.resolve = resolvePreferLocal;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client.connector.check = checkPreferLocal;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">true</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.warn(<span style="color: #8abeb7;">'redis client('</span> + JSON.stringify({name: client.options.name<span style="color: #de935f; background-color: #373b41;">, db: client.options.db, sentinels: client.options.sentinels}) + </span><span style="color: #de935f; background-color: #373b41;">') status unexpected'</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">false</span>;
}
</pre>
</div>

<p>
用法如下
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">options</span> = {name: <span style="color: #8abeb7;">"data"</span>, sentinels: sentinels, db: 0, role: <span style="color: #8abeb7;">"slave"</span>, lazyCon<span style="color: #de935f; background-color: #373b41;">nect: </span><span style="color: #de935f; background-color: #373b41;">true</span><span style="color: #de935f; background-color: #373b41;">}</span>
<span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">client</span> = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>(options);
<span style="color: #b5bd68;">if</span> (preferLocal(client)) {
<span style="color: #969896; background-color: #222427;"> </span>   console.warn(<span style="color: #8abeb7;">"prefer local on redis sentinel("</span> + JSON.stringify(options) + <span style="color: #8abeb7;">"</span><span style="color: #de935f; background-color: #373b41;">)"</span><span style="color: #de935f; background-color: #373b41;">);</span>
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">在 2.4.x 的 ioredis 上实现优先选择本地结点（使用 preferredSlaves）</h2>
<div class="outline-text-2" id="text-8">
<p>
具体实现以及用法请参考 gist <a href="https://gist.github.com/tangxinfa/3361a11acf2270e8388b43bfcb25ce0e">Connect redis with Minimum Distance First(MDF) algorithm</a> ，使用 preferredSlaves 选项实现，要求 ioredis 版本至少为 2.4.0 。在 ioredis 上做了一层封装，使用 ioredis 的方式需要改变，没有侵入 ioredis 的代码。
</p>

<p>
实现逻辑如下：
</p>

<ul class="org-ul">
<li>使用 preferredSlaves 优先连接本地 slave
</li>
</ul>


<ul class="org-ul">
<li>如果 slave 在本地，则使用该 slave 连接；否则尝试连接 master
</li>
</ul>


<ul class="org-ul">
<li>如果 master 在本地，则使用该 master 连接，否则使用前面的 slave 连接。
</li>
</ul>


<p>
这导致当本地无 slave 而连上本地 master 后，总是重连 master。
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">在 2.4.x 的 ioredis 上实现优先选择本地结点（不使用 preferredSlaves）</h2>
<div class="outline-text-2" id="text-9">
<p>
具体实现以及用法请参考 github 仓库 <a href="https://github.com/tangxinfa/ioredis_sentinel_connector">https://github.com/tangxinfa/ioredis_sentinel_connector</a> ，要求 ioredis 版本为 2.4.x。
</p>


<p>
通过替换 SentinelConnector.prototype.resolveSlave 及 SentinelConnector.prototype.check 方法实现，主要的实现逻辑：
</p>

<ul class="org-ul">
<li>优先连接本地 slave
</li>
</ul>


<ul class="org-ul">
<li>如果 slave 在本地，则使用该 slave 连接；否则尝试连接 master
</li>
</ul>


<ul class="org-ul">
<li>如果 master 在本地，则使用该 master 连接，否则使用前面的 slave 连接。
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Redis Sentinel 多机房部署方案]]></title>
            <link>/article/redis-sentinel-591a673a623f90e87f7265b96848.html</link>
            <guid>/article/redis-sentinel-591a673a623f90e87f7265b96848.html</guid>
            <pubDate>Sat, 20 Aug 2016 14:20:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">减少或避免跨机房 Redis 访问的好处</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>减少跨机房网络流量

<p>
很多机房外网流量是有限制的，外网流量过高会影响整个服务的稳定性，甚至拒绝服务。
</p>
</li>

<li>更快的响应速度

<p>
跨机房网络传输的网络延时很高。
</p>
</li>

<li>更安全

<p>
Redis 本身的安全机制很薄弱，目前只支持明文密码验证，依靠 iptables 进行访问限制，运维成本高。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">如何减少或避免应用的跨机房访问</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">单维的数据模型</h3>
<div class="outline-text-3" id="text-2-1">
<p>
如果整个应用的数据集是单维度的，即基于同一主键，按主键进行数据分片（Sharding）后，同一主键所属的数据会处于同一分片（Shard），按主键访问时是无共享（shared-nothing）的，可以水平无限扩容。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">多维的数据模型</h3>
<div class="outline-text-3" id="text-2-2">
<p>
如果整个应用的数据集是多维度的，按一个维度进行数据分片（Sharding）后，按另一维度获取数据时，需要同时访问多个分片（Shard）。
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">以博客应用为例</h3>
<div class="outline-text-3" id="text-2-3">
<p>
文章的模型定义如下
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Field</th>
<th scope="col" class="left">Type</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">id</td>
<td class="left">Number</td>
</tr>

<tr>
<td class="left">title</td>
<td class="left">String</td>
</tr>

<tr>
<td class="left">author</td>
<td class="left">Number</td>
</tr>

<tr>
<td class="left">content</td>
<td class="left">String</td>
</tr>
</tbody>
</table>

<p>
按 id 进行数据分片（Sharding），id 为寄数保存到 Shard 1，id 为 偶数保存到 Shard 2，
按 id 访问文章时，计算 id 对应的分片（Shard），从分片获得文章数据。
还可以在模型中添加冗余字段（如：author_name），方便显示作者名称，省去一次关联查询。
</p>


<p>
要获取 author 的文章列表，则需要在文章发布时按 author 索引文章，模型定义如下
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Field</th>
<th scope="col" class="left">Type</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">id</td>
<td class="left">Number</td>
</tr>

<tr>
<td class="left">name</td>
<td class="left">String</td>
</tr>

<tr>
<td class="left">articles</td>
<td class="left">Set</td>
</tr>
</tbody>
</table>

<p>
按 id 进行数据分片（Sharding），id 为寄数保存到 Shard 1，id 为 偶数保存到 Shard 2，
按 id 访问作者时，计算 id 对应的分片（Shard），从分片获得作者数据。
</p>


<p>
当应用逻辑很简单的时候（如：根据文章 id 展示文章、展示作者的文章列表），结合冗余字段，我们可以做到只从一个数据分区（Shard）中取得数据。但是发表文章时，则一定要同时更新多个分区（Shard）中的数据。
</p>


<p>
我们之所以如此介意跨分区（Shard）数据访问，是因为有可能两个分区（Shard）相隔甚远（如：部署在横跨大陆的多个数据中心），更高的延迟、费用，更低的稳定性，同时也会引入分布式系统带来的复杂性。
</p>

<p>
现实中有价值的应用服务，往往比较复杂，都是多维的数据模型，跨分区（机房）数据访问避无可避。
</p>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">跨机房交互形式</h3>
<div class="outline-text-3" id="text-2-4">
<ul class="org-ul">
<li>管它跨不跨机房

<p>
一开始应用可能是部署在一个机房里，随着规模的扩大或者需要满足异地灾备，将一部分模块移到另一个机房，模块间的交互从内网移到了外网。以前在内网的时候，网络传输是很快的，设计的接口粒度很细，迁移到外网跨机房环境下，性能以及稳定性可能会无法接受，最终要不断地进行优化。
</p>
</li>
</ul>


<ul class="org-ul">
<li>重定向客户端请求到数据所属的机房

<p>
如通过 HTTP 302 指示客户端（通常是浏览器）跳转到数据所属机房的域名（或 IP）。
会增加客户端开发的复杂性，很多逻辑需要放在客户端来完成，能够将机房外网流量尽量减少。
</p>
</li>
</ul>


<ul class="org-ul">
<li>代客户端进行跨机房请求

<p>
如代理发起 HTTP 请求（或内部通信机制，如：消息队列）到所属机房的域名（或 IP），并转发响应给客户端。
会增加后台应用开发的复杂性，如果应用有内置的内部通信机制（如：消息队列）复杂性还是可以接受的，会增加机房的外网流量，只能算是一种过渡方案。
</p>
</li>
</ul>


<ul class="org-ul">
<li>支持跨机房访问但引导客户端访问正确的数据中心

<p>
用户请求涉及的部分数据如果在另一机房，则直接跨机房访问，如同数据在本机房一样进行处理，并在响应中指示客户端下次到另一机房进行访问。后台应用和客户端的开发不会过度复杂，通过引导客户端访问正确的数据中心进行优化。
</p>
</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">协调访问数据分片</h2>
<div class="outline-text-2" id="text-3">
<p>
假设数据按照主键的 hash 值进行取模分片（Sharding），数据与分片（Shard）的对应关系对应如下：
</p>

<pre class="example">
shard = hash(key) % count(shards)
</pre>


<p>
多机房下的数据分片（Sharding）需具备以下特性：
</p>

<ol class="org-ol">
<li>数据片（Shard）一定会处于某一机房，但不可同时处于多个机房
</li>

<li>数据片（Shard）所属机房如果挂了，其它机房的复本之一会被激活，数据片（Shard）重新可用
</li>

<li>除非所有机房都挂了，否则数据应该总是可用的（Availability）
</li>
</ol>

<p>
以上三点可由 Redis Sentinel 保证。
</p>

<p>
Redis Sentinel 以星状组织 Redis 结点拓扑，对于多数据中心部署的 Redis 集群，结点超过 2 个时可能会导致机房间流量暴涨（如：需要从一个机房的 Master 同步多份数据到另一个机房的多个 Slave）。
所以，最好把数据集切分得更细一些，直到一组 Redis 实例（即 1 Master + 1 Slave）即可容纳并可满足客户端请求。
</p>

<p>
直接访问 Redis 往往是耦合度很高的一种形式，Redis 中的数据是所有服务结点共享访问的，访问冲突和状态不一致可能会导致业务出错。
</p>

<p>
我们希望机房间除了 Redis 的 Master-Slave 间的数据同步之外不再有其它的交互，最好不要有应用（Application）跨机房操作 Redis 以实现业务逻辑的情况发生。
</p>


<div class="figure">
<p><img src="../static/redis-restrict_cross_datacenter_flow.png" alt="redis-restrict_cross_datacenter_flow.png" />
</p>
</div>

<p>
如何在限制跨机房 Redis 访问的情况下实现业务逻辑呢？
</p>

<ul class="org-ul">
<li>重定向客户端请求到数据所属的机房

<p>
后端服务结点知道哪个数据中心更适合处理用户的请求，向客户端发出重定向指示即可，不需要耗费其它资源。
</p>
</li>

<li>通过跨机房交互满足客户端请求

<p>
完成请求需要与另一机房的服务交互，如通过调用服务接口（如：Restful API）的形式，完成整个业务逻辑处理。
也可以将客户端的请求转发到另一机房服务，并将响应发回客户端，相当于是内置了服务代理（Proxy）功能。
</p>
</li>
</ul>


<p>
由此可见，不跨机房访问 Redis 这份美好是有代价的，客户端和服务器端的业务逻辑会更复杂，客户端或服务器端需要针对跨机房的数据进行特殊处理。
</p>

<p>
通过选择正确的数据分片（Sharding）方式，确保主要或高频次的客户端请求能够在同一数据中心内完成。次要或低频次的客户端请求允许跨数据中心，通过在本地数据中心部署其它数据中心的复本（Slave）的方式，将跨数据中心"读"转化为本地"读"，少量的跨数据中心"写"不成问题。
</p>

<p>
如下图所示
<img src="../static/redis-embrace_cross_datacenter_flow.png" alt="redis-embrace_cross_datacenter_flow.png" />
Redis Group 1 存储主要或高频次的数据，Redis Group 2 存储次要或低频次的数据。
</p>

<p>
客户端通过 DataCenter 1 访问本地的 Redis Group 1 属于合理的访问。
业务逻辑可能需要访问 Redis Group 2，读操作可以发往本地的 Redis Group 2 Slave，写操作要跨机房访问 DataCenter 2 中的 Redis Group 2 Master（应该尽量减少）。
</p>

<p>
客户端通过 DataCenter 2 访问本地的 Redis Group 2 属于合理的访问。
业务逻辑主要需要访问 Redis Group 1，读操作可以发往本地的 Redis Group 1 Slave，写操作需要跨机房访问 DataCenter 1 中的 Redis Group 1 Master，
这是不合理的，因此在发给客户端的响应中指示客户端下次将请求发往 Redis Group 1 Master 所在的 DataCenter 1。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Redis Pub/Sub 多机房部署]]></title>
            <link>/article/redis-pub-sub-591a673a623f90e87f72.html</link>
            <guid>/article/redis-pub-sub-591a673a623f90e87f72.html</guid>
            <pubDate>Thu, 18 Aug 2016 06:18:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">由于 Master 上 Publish 的消息会自动同步到所有 Slaves，Redis Pub/Sub 很容易扩展</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
Redis PubSub scales really easily since the Master/Slave replication automatically publishes to all slaves.
</p>
</blockquote>
<p>
引用自 <a href="http://stackoverflow.com/a/6512308/802708">Redis PUBLISH/SUBSCRIBE limits - Stack Overflow</a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">可以在 Master 上 Publish 消息，然后在 Slave 上 Subscribe 消息，反之不行</h2>
<div class="outline-text-2" id="text-2">
<blockquote>
<p>
With replication in-place the  publisher can publish in the master host and the subscribers can subscribe to the slave host.
</p>

<p>
It is important to mention that this relationship is one-way. Master –&gt; Slave relationship are unidirectional. It is impossible to publish to the slave and subscribe to the master.
</p>

<p>
&#x2026;
</p>

<p>
The conclusion is simple: Two ways pub/sub channels across servers require at least 4 Redis hosts.
</p>
</blockquote>
<p>
引用自 <a href="http://blogs.microsoft.co.il/applisec/2013/09/11/pub-sub-across-servers-using-redis/">Pub Sub Across Servers Using Redis | Manu Cohen-Yashar's Blog</a>
</p>

<p>
需要注意的是，Slave 虽然不可写（Readonly），但是照样可以 Pub/Sub，
只是 Publish 的消息不会同步到 Master，所以不会被 Master 上的 Subscriber 接收到，
但是 Slave 自身的 Subscriber 仍工作正常。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">多机房部署的情况下，2 个 Redis 实例可实现双向通讯</h2>
<div class="outline-text-2" id="text-3">
<p>
<img src="../static/redis-pub_sub_multi_datacenter-2.png" alt="redis-pub_sub_multi_datacenter-2.png" />
但是比较低效，Master 所在机房 Publish 的消息会在机房间传输一次（Sync 一次），
Slave 所在机房 Publish 的消息会在机房间传输两次（Send、Sync 各一次），
而且 Slave 机房部署的应用需要跨机房直接连接到 Master 才能进行 Publish。
</p>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">多机房部署的情况下，4 个 Redis 实例可以实现高效的双向通讯</h2>
<div class="outline-text-2" id="text-4">
<p>
<img src="../static/redis-pub_sub_multi_datacenter-4.png" alt="redis-pub_sub_multi_datacenter-4.png" />
每一次 Publish 的消息会在机房间传输一次，机房间只有 Master/Slave 同步流量。
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Pub/Sub 跨机房部署带来的问题</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">从 Slave Subscribe 消息后，消息 Publish 一方无法获知 Subscriber 数量</h3>
<div class="outline-text-3" id="text-5-1">
<pre class="example">
<span class="linenr"> 1: </span># Publish to master, subscribe from master.
<span class="linenr"> 2: </span>$ redis-cli -h master.local subscribe test &amp;
<span class="linenr"> 3: </span>[1] 20590
<span class="linenr"> 4: </span>$ Reading messages... (press Ctrl-C to quit)
<span class="linenr"> 5: </span>1) "subscribe"
<span class="linenr"> 6: </span>2) "test"
<span class="linenr"> 7: </span>3) (integer) 1
<span class="linenr"> 8: </span>$ 
<span class="linenr"> 9: </span>$ redis-cli -h master.local  publish test "hello from master"
<span class="linenr">10: </span>1) "message"
<span class="linenr">11: </span>2) "test"
<span class="linenr">12: </span>3) "hello from master"
<span id="coderef-subscribers_on_master_perceptible" class="coderef-off"><span class="linenr">13: </span>(integer) 1</span>
<span class="linenr">14: </span>$ fg
<span class="linenr">15: </span>redis-cli subscribe test
<span class="linenr">16: </span>  C-c C-c
<span class="linenr">17: </span>$ 
<span class="linenr">18: </span># Publish to master, subscribe from slave.
<span class="linenr">19: </span>$ redis-cli -h slave.local -p 6380 subscribe test &amp;
<span class="linenr">20: </span>[1] 20592
<span class="linenr">21: </span>$ Reading messages... (press Ctrl-C to quit)
<span class="linenr">22: </span>1) "subscribe"
<span class="linenr">23: </span>2) "test"
<span class="linenr">24: </span>3) (integer) 1
<span class="linenr">25: </span>$ 
<span class="linenr">26: </span>$ redis-cli -h master.local publish test "hello from master"
<span id="coderef-subscribers_on_slave_nonperceptible" class="coderef-off"><span class="linenr">27: </span>(integer) 0</span>
<span class="linenr">28: </span>1) "message"
<span class="linenr">29: </span>2) "test"
<span class="linenr">30: </span>3) "hello from master"
<span class="linenr">31: </span>$
</pre>

<ul class="org-ul">
<li>行 <a href="#coderef-subscribers_on_master_perceptible"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-subscribers_on_master_perceptible');" onmouseout="CodeHighlightOff(this, 'coderef-subscribers_on_master_perceptible');">13</a>

<p>
在 Master 上订阅时，发布方得知的订阅者人数为 1
</p>
</li>

<li>行 <a href="#coderef-subscribers_on_slave_nonperceptible"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-subscribers_on_slave_nonperceptible');" onmouseout="CodeHighlightOff(this, 'coderef-subscribers_on_slave_nonperceptible');">27</a>

<p>
在 Slave 上订阅时，发布方得知的订阅者人数为 0</p>
</li>
</ul>
</div>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Redis Sentinel 多机房部署注意事项]]></title>
            <link>/article/redis-sentinel-591a673a623f90e87f726ce8610f4e8b9879.html</link>
            <guid>/article/redis-sentinel-591a673a623f90e87f726ce8610f4e8b9879.html</guid>
            <pubDate>Mon, 15 Aug 2016 07:03:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">级连同步失效</h2>
<div class="outline-text-2" id="text-1">
<p>
级连同步的描述（摘自 <a href="http://redis.io/topics/replication">Replication – Redis</a>）：
</p>
<blockquote>
<p>
Slaves are able to accept connections from other slaves. Aside from connecting a
number of slaves to the same master, slaves can also be connected to other slaves in
a cascading-like structure.
</p>
</blockquote>

<p>
由此可见级连同步可减轻 Master 的流量。
</p>

<p>
假设 DataCenter 2 上的两个 Slave 从 DataCenter 1 上的 Master 进行同步，会导致 DataCenter 1 要流出两份流量到 DataCenter 2，开启级连同步（DataCenter 2 上的其中一个 Slave 从另一个 Slave 上进行同步）后，DataCenter 1 只需同步一份流量到 DataCenter2。
</p>

<p>
Sentinel 以星状组织 Redis 结点，无法发现二级 Slave（Slave 上连接的其它 Slave），也就无法将二级 Slave 信息提供给客户端应用进行访问，应用需要自行连上二级 Slave。另外，一级 Slave 被 Sentinel 切为 Master 后，二级 Slave 将转化为一级 Slave ，从而被 Sentinel 发现。
</p>


<div class="figure">
<p><img src="../static/redis-sentinel_slave_of_slave.png" alt="redis-sentinel_slave_of_slave.png" />
</p>
</div>

<p>
当 Fail-Over 发生后级连同步会失效，Redis Sentinel 不支持级连同步
</p>
<blockquote>
<p>
Aside from this problems, there is also the problem that for Sentinel
the role of an instance is the one published in INFO by the instance.
This means that you can't failover a slave that happens to be the
master of other chained instances. Also the chained instances will not
be detected, and if detected because of a temporary role change for
some reason, they'll be reconfigured to replicate with what Sentinel
believe to be the master.
Basically you can find your ways to make it working but currently the
support for chained replication in Sentinel is near zero.
</p>

<p>
Salvatore 
</p>
</blockquote>
<p>
引用自 <a href="https://groups.google.com/d/msg/redis-db/uMOIX3m3Is4/HWhYegU4OawJ">Sentinels in Multi Region configuration - Google 网上论坛</a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">内网流量外网化</h2>
<div class="outline-text-2" id="text-2">
<p>
跨机房部署就意味着需要跨机房同步或访问 Redis 数据，如果另一机房有多个 Slave，则会有多份流量，机房外网流量会相应增长，需要预先进行流量规划。
</p>


<p>
Redis 为内网部署提供了如下配置项
</p>

<ul class="org-ul">
<li>Sentinel 的 announce-ip 和 announce-port 选项

<p>
要求 Redis 版本至少为 2.8，参见 <a href="https://raw.githubusercontent.com/antirez/redis/2.8/redis.conf">redis.conf</a>
</p>
</li>

<li>Redis 的 slave-announce-ip 和 slave-announce-port 选项

<p>
要求 Redis 版本至少为 3.2，参见 <a href="https://raw.githubusercontent.com/antirez/redis/3.2/redis.conf">redis.conf</a>
</p>
</li>
</ul>

<p>
它们用于解决如下两个问题
</p>
<blockquote>
<p>
Remapping ports and addresses creates issues with Sentinel in two ways:
</p>

<ol class="org-ol">
<li>Sentinel auto-discovery of other Sentinels no longer works, since it is based on 
hello messages where each Sentinel announce at which port and IP address they are
listening for connection. However Sentinels have no way to understand that an address
or port is remapped, so it is announcing an information that is not correct for other
Sentinels to connect.
</li>
<li>Slaves are listed in the INFO output of a Redis master in a similar way: the address
is detected by the master checking the remote peer of the TCP connection, while the
port is advertised by the slave itself during the handshake, however the port may be
wrong for the same reason as exposed in point 1.
</li>
</ol>
</blockquote>
<p>
引用自 <a href="http://redis.io/topics/sentinel#sentinel-docker-nat-and-possible-issues">Redis Sentinel Documentation – Redis - Sentinel, Docker, NAT, and possible issues</a>
</p>


<p>
基于 Sentinel 的集群系统中，Redis 实例（角色可能为 Master、Slave 或 Sentinel）是通过 IP 和 PORT 标识的。
</p>

<ul class="org-ul">
<li>Master

<p>
自身监听的 IP 和 PORT 并不重要，只要 Slave 和 Sentinel 能够连上即可，所以往往在所有 IP 上进行监听。
</p>
</li>
</ul>


<ul class="org-ul">
<li>Slave

<p>
Slave 配置中指定的 Master 结点 IP 是关键所在。
</p>

<p>
Slave 建立到 Master 的 TCP 连接时，Master 获取到的对端 IP 和 PORT 标识该 Slave，在 Master 的 INFO 命令中体现。
</p>

<p>
Slave 连接的 Master IP，经由路由规则，也就决定了 Master 看到的是 Slave 的哪一个 IP。
</p>

<p>
可以通过 slave-announce-ip 和 slave-announce-port 配置项强制指定。
</p>
</li>

<li>Sentinel

<p>
Sentinel 配置中指定的 Master 结点 IP 是关键所在。
</p>

<p>
Sentinel 建立到 Master 的 TCP 连接后，调用 <code>getsockname</code> 从 fd 中取得本地 IP，PORT 则为配置的监听端口，并通过 PUBLISH Hello 消息告知其它 Sentinel。
</p>

<p>
Sentinel 连接的 Master IP，经由路由规则，也就决定了 Sentinel 看到的自身 IP。
</p>

<p>
可以通过 announce-ip 和 announce-port 配置项强制指定。
</p>
</li>
</ul>

<p>
DataCenter 2 上部署的应用会通过 Sentinel 获取到 DataCenter 1 上的结点（角色可能为 Master、Slave 或 Sentinel）信息，然后连接、访问，所以 Redis 实例（角色可能为 Master、Slave 或 Sentinel）都至少需要监听外网 IP。
</p>

<p>
通过外网 IP 访问同机房内结点，不会导致流量外网化，上级交换机识别到目标 IP 就在网络内，走的还是内网。
</p>

<p>
应用程序从 Sentinel 获取 Slave 列表后，最好优先连接同一数据中心的 Slave 结点。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">相关资源</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><a href="http://redis.io/topics/sentinel">Redis Sentinel Documentation – Redis</a>
</li>

<li><a href="https://groups.google.com/forum/#!searchin/redis-db/data$20center|sort:relevance/redis-db/o5afhx9Zn5E/DwQU3JLJJKgJ">Replication for read-scalability - Google 网上论坛</a>

<p>
通过公网跨数据中心复制数据相关的问题：安全、迟延等
</p>
</li>
</ul>


<ul class="org-ul">
<li><a href="https://groups.google.com/d/msg/redis-db/uMOIX3m3Is4/HWhYegU4OawJ">Sentinels in Multi Region configuration - Google 网上论坛</a>

<p>
Redis Sentinel 多数据中心配置问题
</p>
</li>
</ul>


<ul class="org-ul">
<li><a href="https://redislabs.com/ebook/redis-in-action/part-3-next-steps-3/chapter-10-scaling-redis/10-1-scaling-reads">Redis in Action - Scaling reads</a>

<p>
Redis 压缩、安全传输相关</p>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[redis 的关键度量要素]]></title>
            <link>/article/redis-76845173952e5ea691cf89817d20.html</link>
            <guid>/article/redis-76845173952e5ea691cf89817d20.html</guid>
            <pubDate>Thu, 14 Apr 2016 14:40:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">redis 进程的 CPU 占用率</h2>
<div class="outline-text-2" id="text-1">
<p>
redis 采用单线程模型，只能利用一个核，监控一定要到进程级，对于一台 16 核机器，redis CPU 占用 100%，但是机器的 CPU 占用很可能不到 10%。
</p>

<p>
redis 进程的 CPU 占用率过高的时候是很脆弱的，额外出现的负载就很可能导致整个服务不可用，而且难以恢复，需要为 redis 减负（优化、功能降级）或扩容（更好的机器、更多的机器）。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">机器的内存使用率</h2>
<div class="outline-text-2" id="text-2">
<p>
redis 持久化数据到磁盘时，会 fork 出一个子进程，子进程负责写盘。
</p>

<p>
理想情况下，redis 父进程从 fork 返回到子进程完成写盘这段时间内，父进程未进行任何内存变更，由于 Copy-On-Write 机制的存在，子进程共享父进程的内存空间。
</p>

<p>
然而真实情况往往是另一个极端，redis 做为随机读写的内存数据库，父进程会瞬间在所有内存页上进行写操作，需要多一倍的内存空间占用。
</p>

<p>
存盘时物理内存不足导致动用交换空间（Swap），整个机器都会不稳定。
</p>

<p>
所以跑 redis 的机器，空闲内存量至少要达到 redis 进程的内存占用量。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">fork 行为</h2>
<div class="outline-text-2" id="text-3">
<p>
redis 在进行 bgsave 或者 aof-rewrite 时，写盘（阻塞式操作）由 fork 出的子进程执行，不影响主进程的响应时间。
</p>

<p>
但是 fork 是由主进程调用的，在某些环境（如：虚拟机）下耗时会比较长，可能导致 redis 服务的响应时间变长。
</p>

<p>
fork、bgsave 或 aof-rewrite 耗时以及频率需要监控并保留历史记录，当它们升高时，redis 服务将周期性地出现响应时间变长、吞吐量下降，是重要的预警信号。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">参考</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><a href="https://blog.newrelic.com/2015/05/11/redis-performance-metrics/">Understanding Redis Performance: The 7 Metrics</a>
</li>

<li><a href="http://redis.io/topics/latency">Redis latency problems troubleshooting – Redis</a>
</li>

<li><a href="http://blog.csdn.net//chenleixing/article/details/50530419">Redis上踩过的一些坑-美团</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[勿用 redis 的多库]]></title>
            <link>/article/52ff7528-redis-7684591a5e93.html</link>
            <guid>/article/52ff7528-redis-7684591a5e93.html</guid>
            <pubDate>Sat, 09 Apr 2016 07:02:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">不要将 redis 和 mysql 混为一谈</h2>
<div class="outline-text-2" id="text-1">
<p>
在接触 redis 之前，相信很多人都有 mysql 的使用经验。
</p>

<p>
mysql 的实体分层由上至下依次是：
</p>

<ul class="org-ul">
<li>实例（instance）

<p>
mysqld 进程。
</p>
</li>

<li>库（database）
</li>
</ul>


<ul class="org-ul">
<li>表（table）
</li>
</ul>


<ul class="org-ul">
<li>记录（row）
</li>
</ul>


<ul class="org-ul">
<li>字段（field）
</li>
</ul>


<p>
redis 的实体分层由上至下依次是：
</p>

<ul class="org-ul">
<li>实例（instance）

<p>
redis 进程。
</p>
</li>

<li>库（database）
</li>
</ul>


<ul class="org-ul">
<li>键值（Key-Value）
</li>
</ul>


<p>
我们很容易将 mysql 与 redis 的实例（instance）和库（database）等同起来，然而却大错特错。
</p>

<p>
其实
</p>

<ul class="org-ul">
<li>redis 的实例（instance） 等同于 mysql 的库（database）
</li>
</ul>


<ul class="org-ul">
<li>redis 的库（database） 等同于 mysql 的表（table）
</li>
</ul>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">redis 的多库是鸡肋</h2>
<div class="outline-text-2" id="text-2">
<p>
redis 是无预定义结构的（schema-less）数据库，表（table ）的存在意义不大，
它更多地是做为命名空间（name space），由于使用的是很不友好的数字命名（默认 0-15），
redis 中的 库（database）形同鸡肋。
</p>

<p>
以下为 redis 作者的观点，引用自 <a href="https://groups.google.com/d/msg/redis-db/vS5wX8X4Cjg/8ounBXitG4sJ">database names? - Google 网上论坛</a>
</p>
<blockquote>
<p>
I understand how this can be useful, but unfortunately I consider
Redis multiple database errors my worst decision in Redis design at
all&#x2026; without any kind of real gain, it makes the internals a lot
more complex. The reality is that databases don't scale well for a
number of reason, like active expire of keys and VM. If the DB
selection can be performed with a string I can see this feature being
used as a scalable O(1) dictionary layer, that instead it is not.
</p>

<p>
With DB numbers, with a default of a few DBs, we are communication
better what this feature is and how can be used I think. I hope that
at some point we can drop the multiple DBs support at all, but I think
it is probably too late as there is a number of people relying on this
feature for their work.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">使用 redis 多库是妥协的结果</h2>
<div class="outline-text-2" id="text-3">
<p>
有一种观点认为不同的应用（app）使用不同的库（database）可以从而避免键命名冲突。
</p>

<p>
redis 对于不同的库（database）没有提供任何隔离机制，完全依赖于应用（app）部署时约定使用不同的库（database）。
</p>

<p>
为什么不约定应用（app）使用的所有键都加上应用（app）前缀，或者每个应用（app）使用不同的 redis 实例（instance）呢？
</p>

<p>
从开发人员的角度来说
</p>

<ul class="org-ul">
<li>如果每个应用（app）使用不同的实例（instance），是最省事的，连接 redis 后，直接操作即可
</li>
</ul>


<ul class="org-ul">
<li>如果每个应用（app）使用不同的库（database），略微麻烦一点，连接 redis 后，先执行一下 <code>select</code> <code>db</code> ，redis 客户端库会提供支持
</li>
</ul>


<ul class="org-ul">
<li>如果每个应用（app）的键（key）都加上应用（app）前缀，会很麻烦，每一处访问 redis 的代码都要涉及
</li>
</ul>


<p>
从运维人员的角度来说
</p>

<ul class="org-ul">
<li>如果每个应用（app）使用不同的实例（instance），是最麻烦的，维护压力剧增，每个实例（instance）背后还要有配套的启动、停止脚本，监控，主备实例等
</li>
</ul>


<ul class="org-ul">
<li>如果每个应用（app）使用不同的库（database），略微麻烦一点，分配并记录一下，告知开发人员使用指定的 redis 实例及库（database）
</li>
</ul>


<ul class="org-ul">
<li>如果每个应用（app）的键（key）都加上应用（app）前缀，是最省事的，可以灵活地为应用（app）安排使用实例（instance）或库（database）
</li>
</ul>


<p>
不同的应用（app）使用不同的库（database）这一方案被采用，很可能是开发人员与运维人员互相妥协的结果。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">redis 的多库扩容难</h2>
<div class="outline-text-2" id="text-4">
<p>
redis 的数据量或者请求数过高，会导致 redis 不稳定，最终影响服务质量。
</p>

<p>
这时候就要考虑 redis 扩容了，需要将其中一个库（database）迁到新的实例（instance）上，过程如下：
</p>

<ul class="org-ul">
<li>停掉应用（app）
</li>
</ul>


<ul class="org-ul">
<li>将应用（app）的 redis 库（database）同步到新的 redis 实例（instance）上

<p>
通过拷贝 <code>dump.rdb</code> 的方式同步（传输）数据，redis 实例（instance）上的所有库（database）数据都是混在一起的，
其它应用（app）数据会增加数据同步（传输）时间及新 redis 实例（instance） 数据载入时间。
</p>

<p>
如果通过工具在线将应用（app）的 redis 库（database）拷贝到运行中的新 redis 实例（instance）上，会很耗时，
对本身负载就很高的 redis 添加更多压力，可能会影响其它应用（app）。
</p>

<p>
新 redis 实例（instance）设置为旧 redis 实例（instance） 的 slave，同步完成后取消 Master-Slave 关系，
这种方法相对更好一些。
</p>
</li>

<li>启动新的 redis 实例
</li>
</ul>


<ul class="org-ul">
<li>修改应用（app）配置指向新的 redis 实例
</li>
</ul>


<ul class="org-ul">
<li>启动应用（app）
</li>
</ul>


<ul class="org-ul">
<li>清除两个 redis 实例中的脏数据

<p>
<code>select</code> <code>db</code> ，然后执行 <code>flushdb</code> 命令即可，这可能是使用多库最大的好处。
</p>
</li>
</ul>


<p>
应用（app）的停机时间（Down Time）肯定短不了。
</p>


<p>
如果每个应用（app）使用不同的实例，需要将某个实例迁到新机器，则可以做到平滑扩容（迁移），过程如下：
</p>

<ul class="org-ul">
<li>应用（app）使用 redis sentinel 方式访问 redis
</li>
</ul>


<ul class="org-ul">
<li>新机器部署 redis 新实例
</li>
</ul>


<ul class="org-ul">
<li>新实例设置为旧 redis 实例的 slave
</li>
</ul>


<ul class="org-ul">
<li>同步完成后进行 Master-Slave 换位
</li>
</ul>


<ul class="org-ul">
<li>应用（app）会自动切到新的 redis 实例
</li>
</ul>


<ul class="org-ul">
<li>旧的 redis 实例可以停掉
</li>
</ul>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">参考</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="http://stackoverflow.com/questions/16221563/whats-the-point-of-multiple-redis-databases">What's the Point of Multiple Redis Databases? - Stack Overflow</a>
</li>
</ul>


<ul class="org-ul">
<li><a href="https://groups.google.com/d/msg/redis-db/vS5wX8X4Cjg/8ounBXitG4sJ">database names? - Google 网上论坛</a>
</li>
</ul>


<ul class="org-ul">
<li><a href="http://redis.io/topics/partitioning">Partitioning: how to split data among multiple Redis instances. – Redis</a>
</li>
</ul>


<ul class="org-ul">
<li><a href="http://oldblog.antirez.com/post/redis-presharding.html">Redis Presharding</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Archlinux 的 collectd 支持监控 redis]]></title>
            <link>/article/archlinux-7684-collectd-652f630176d163a7-redis.html</link>
            <guid>/article/archlinux-7684-collectd-652f630176d163a7-redis.html</guid>
            <pubDate>Thu, 31 Mar 2016 09:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
Archlinux 下使用 <code>pacman</code> 安装的 <code>collectd</code> 没有 redis 插件。
</p>

<p>
查看 collectd 的 <a href="https://projects.archlinux.org/svntogit/community.git/tree/trunk/PKGBUILD?h=packages/collectd">PKGBUILD</a> 文件，并未明令禁止 redis 插件，从源代码编译安装的话，只要系统装了 <code>hiredis</code> ，redis 插件应该就会自动启用。
</p>

<p>
所以我们需要从源代码编译安装 <code>collectd</code> 软件包。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">安装 ABS</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
What is the Arch Build System?
</p>

<p>
The Arch Build System is a ports-like system for building and packaging software from source code. While pacman is the specialized Arch tool for binary package management (including packages built with the ABS), ABS is a collection of tools for compiling source into installable .pkg.tar.xz packages.    
</p>
</blockquote>
<p>
引用自 <a href="https://wiki.archlinux.org/index.php/Arch_Build_System">Arch Build System - ArchWiki</a>
</p>

<div class="org-src-container">

<pre class="src src-sh">yaourt -S abs
sudo abs
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">编译安装 collectd</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>yaourt -S hiredis
<span class="linenr">2: </span>cp -R /var/abs/community/collectd ~/
<span class="linenr">3: </span><span style="color: #b294bb;">cd</span> ~/collectd
<span id="coderef-archlinux_makepkg" class="coderef-off"><span class="linenr">4: </span>makepkg</span>
<span class="linenr">5: </span>yaourt -U ./collectd-5.5.1-2-x86_64.pkg.tar.xz
</pre>
</div>

<dl class="org-dl">
<dt> 行 <a href="#coderef-archlinux_makepkg"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-archlinux_makepkg');" onmouseout="CodeHighlightOff(this, 'coderef-archlinux_makepkg');">4</a>  </dt><dd>如果报 <code>Missing dependencies</code> 错误则按提示使用 pacman 装上缺失的依赖项
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">使用以前的 collectd 配置</h2>
<div class="outline-text-2" id="text-3">
<p>
重新安装 collectd 后，以前的配置保存在 <code>/etc/collectd.conf.pacsave</code> ，恢复一下
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo mv /etc/collectd.conf.pacsave /etc/collectd.conf
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">启用 collectd 插件</h2>
<div class="outline-text-2" id="text-4">
<p>
修改 collectd 配置文件 <code>/etc/collectd.conf</code> 
</p>
<pre class="example">
LoadPlugin redis

&lt;Plugin redis&gt;
  &lt;Node "db"&gt;
     Host "127.0.0.1"
     Port "6379"
     Timeout 2000
  &lt;/Node&gt;
&lt;/Plugin&gt;
</pre>

<p>
重启 collectd 服务，现在可以在界面上看到 redis 的监控项了。
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">参考</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="http://arch.acgtyrant.com/2013/12/26/soul/">Arch Linux 的靈魂：PKGBUILD、AUR 和 ABS | Tyrant's Arch Linux</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[迁移redis库的某个db]]></title>
            <link>/article/8fc179fb-redis-5e93768467d04e2a-db.html</link>
            <guid>/article/8fc179fb-redis-5e93768467d04e2a-db.html</guid>
            <pubDate>Thu, 21 Jan 2016 10:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在项目开始的时候，往往会把各种用途的数据放到一个 redis 实例中，如 db1 存放功能 A 的数据、db2 存放功能 B 的数据。
</p>

<p>
当 redis 的压力上来了之后，往往需要将某个 db 迁移到其它的实例上，如果是整个实例进行迁移，通常会通过 Master-Slave 将数据同步到新机器，然后提升新机器上的 redis 为 Master。
</p>

<p>
但是遇到只需要迁移 1 个 db 的数据到新的 redis 实例（该实例已有其它数据）的情况，就需要借助 redis 数据迁移工具了，这里介绍两个工具。
</p>

<p>
假设要将 redis 的 db5 从 192.168.1.100 上的 redis 迁到 192.168.1.101 上的 db5。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="https://github.com/salimane/redis-tools">redis-copy.py</a></h2>
<div class="outline-text-2" id="text-1">
<p>
使用 python 开发。
</p>

<ul class="org-ul">
<li>安装

<div class="org-src-container">

<pre class="src src-sh">sudo pip2 install redis
wget https://github.com/salimane/redis-tools/raw/master/redis-copy.py
</pre>
</div>
</li>

<li>开始迁移

<div class="org-src-container">

<pre class="src src-sh">python2 ./redis-copy.py --source=192.168.1.100:6379 --target=192.168.1.101:6379 <span style="color: #de935f; background-color: #373b41;">--databases=5 --limit=1000000000</span>
python2 ./redis-copy.py --source=192.168.1.100:6379 --target=192.168.1.101:6379 <span style="color: #de935f; background-color: #373b41;">--databases=5 --clean</span>
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a href="https://github.com/yaauie/redis-copy">redis-copy</a> （推荐）</h2>
<div class="outline-text-2" id="text-2">
<p>
使用 ruby 开发。
</p>

<ul class="org-ul">
<li>安装

<div class="org-src-container">

<pre class="src src-sh">gem install redis-copy
</pre>
</div>
</li>

<li>开始迁移

<div class="org-src-container">

<pre class="src src-sh">~/.gem/ruby/2.3.0/bin/redis-copy 192.168.1.100:6379/5 192.168.1.101:6379/5
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">比较</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://github.com/salimane/redis-tools">redis-copy.py</a> 在迁移过程中 db 号不能改变，需要在源 db 中临时写入大量簿记信息，最终也没有完全清簿记信息（mig:run 键）。
默认一次运行迁移 10000 条记录，可以多次运行迁移后面的数据，也可以通过指定 &#x2013;limit 为一个够大的数量一次性迁移。
支持同时迁移多个 db 。
</p>

<p>
<a href="https://github.com/yaauie/redis-copy">redis-copy</a> 可以任意指定源、目的 db 号，不需要往 redis 写入簿记信息。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[node.js连接redis高可用性方案：Sentinel]]></title>
            <link>/article/node.js-8fde63a5-redis-9ad853ef7528602765b96848ff1a-sentinel.html</link>
            <guid>/article/node.js-8fde63a5-redis-9ad853ef7528602765b96848ff1a-sentinel.html</guid>
            <pubDate>Sun, 27 Dec 2015 06:27:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
node.js后台应用在开始时往往不会搞得太复杂，使用单实例的redis，一般都会使用官方推荐的模块 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">访问单实例node.js</h2>
<div class="outline-text-2" id="text-1">
<p>
在 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 的基础上稍作封装，主要是避免并行访问时意外创建多个redis连接。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">database.js</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">redis</span> = require(<span style="color: #8abeb7;">'redis'</span>);

<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">Database</span>() {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;

<span style="color: #969896; background-color: #222427;"> </span>   self._redis_host = <span style="color: #8abeb7;">'127.0.0.1'</span>;
<span style="color: #969896; background-color: #222427;"> </span>   self._redis_port = 6379;
<span style="color: #969896; background-color: #222427;"> </span>   self._redis_db = 2;

<span style="color: #969896; background-color: #222427;"> </span>   self._redis = <span style="color: #81a2be;">null</span>;
<span style="color: #969896; background-color: #222427;"> </span>   self._redis_selected = <span style="color: #81a2be;">false</span>;
}

Database.<span style="color: #81a2be;">prototype</span>.redis = <span style="color: #b5bd68;">function</span>(<span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (self._redis &amp;&amp; self._redis_selected) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, self._redis);
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (! self._redis) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   self._redis = redis.createClient(self._redis_port, self._redis_host);
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   self._redis.select(self._redis_db, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span> (err) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(err);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   self._redis_selected = <span style="color: #81a2be;">true</span>;

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, self._redis);
<span style="color: #969896; background-color: #222427;"> </span>   });
};


module.exports = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Database</span>();
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">client.js</h3>
<div class="outline-text-3" id="text-1-2">
<p>
使用 <code>database.js</code>
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">db</span> = require(<span style="color: #8abeb7;">'./database'</span>);

db.redis(<span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">client</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(err) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.error(err.toString());
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> process.exit(1);
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   client.set(<span style="color: #8abeb7;">'hello'</span>, <span style="color: #8abeb7;">'world'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(err) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.error(err.toString());
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> process.exit(1);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   setTimeout(<span style="color: #b5bd68;">function</span> () {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   client.get(<span style="color: #8abeb7;">'hello'</span>, <span style="color: #b5bd68;">function</span> (<span style="color: #f0c674;">err</span>, <span style="color: #f0c674;">value</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(err) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.error(err.toString());
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> process.exit(1);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   console.log(<span style="color: #8abeb7;">'hello: '</span> + value);

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   process.exit(0);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   });
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }, 20*1000);
<span style="color: #969896; background-color: #222427;"> </span>   });
});
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">访问主备Redis</h2>
<div class="outline-text-2" id="text-2">
<p>
但是随着服务的成功，用户量开始增加，另外对稳定性、可靠性有了一定要求，确保数据的安全性成了重中之重，redis由单机转向主/备（Replication）甚至集群（Cluster），
本文只关注使用 <code>Sentinel</code> 管理的主/备（Replication）Redis。
</p>

<p>
这就意味着Redis客户端应用不能直接连接Redis实例，而是需要先连接 <code>Sentinel</code> ，根据 <code>Sentinel</code> 提供的 <code>Master</code> 或 <code>Slave</code> 地址连接Redis实例，
还要接收 <code>Sentinel</code> 的 <code>Master</code> <code>Slave</code> 变动通知，重连Redis实例。
</p>

<p>
不幸的是，<a href="https://github.com/NodeRedis/node_redis">node_redis</a> 模块只支持单实例redis，基于 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 实现与 <code>Sentinel</code> 的交互工作量比较大。
</p>

<p>
所幸的是 <a href="http://github.com/luin/ioredis/">ioredis</a> （现已成为redis官方推荐模块）出现了，它支持 <code>Sentinel</code> ，而且大部分API跟 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 是兼容的:
</p>

<blockquote>
<p>
ioredis is a robust, full-featured Redis client that is used in the world's biggest online commerce company Alibaba and many other awesome companies.
</p>

<ol class="org-ol">
<li>Full-featured. It supports Cluster, Sentinel, Pipelining and of course Lua scripting &amp; Pub/Sub (with the support of binary messages).
</li>
<li>High performance.
</li>
<li>Delightful API. It works with Node callbacks and Bluebird promises.
</li>
<li>Transformation of command arguments and replies.
</li>
<li>Transparent key prefixing.
</li>
<li>Abstraction for Lua scripting, allowing you to define custom commands.
</li>
<li>Support for binary data.
</li>
<li>Support for TLS.
</li>
<li>Support for offline queue and ready checking.
</li>
<li>Support for ES6 types, such as Map and Set.
</li>
<li>Support for GEO commands (Redis 3.2 Unstable).
</li>
<li>Sophisticated error handling strategy.
</li>
</ol>
</blockquote>

<p>
<a href="http://github.com/luin/ioredis/">ioredis</a> 提供了从 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 进行迁移的文档 <a href="https://github.com/luin/ioredis/wiki/Migrating-from-node_redis">Migrating from node_redis</a> 。
</p>

<p>
但也要注意 <a href="http://github.com/luin/ioredis/">ioredis</a> 的不同之处，如连接 <code>Redis</code> 失败时， <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 默认是不重连，而 <a href="http://github.com/luin/ioredis/">ioredis</a> 会重连，在 <code>redis</code> 故障时可能导致 <code>node.js</code> 积压大量请求耗尽内存。
</p>

<p>
参考文档 <a href="https://github.com/luin/ioredis/blob/master/README.md#sentinel">ioredis Sentinel</a> ，将上一节 <code>访问单实例node.js</code> 中redis封装代码改成支持 <code>Sentinel</code>
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">database.js</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">Redis</span> = require(<span style="color: #8abeb7;">'ioredis'</span>);

<span style="color: #b5bd68;">function</span> <span style="color: #de935f;">Database</span>() {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;

<span style="color: #969896; background-color: #222427;"> </span>   self._redis_options = {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   name: <span style="color: #8abeb7;">'mymaster'</span>,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   sentinels: [{
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   host: <span style="color: #8abeb7;">'127.0.0.1'</span>,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   port: 5000
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }, {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   host: <span style="color: #8abeb7;">'127.0.0.1'</span>,
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   port: 5001
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }],
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   db: 2
<span style="color: #969896; background-color: #222427;"> </span>   };

<span style="color: #969896; background-color: #222427;"> </span>   self._redis = <span style="color: #81a2be;">null</span>;
}

Database.<span style="color: #81a2be;">prototype</span>.redis = <span style="color: #b5bd68;">function</span>(<span style="color: #f0c674;">callback</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">var</span> <span style="color: #f0c674;">self</span> = <span style="color: #81a2be;">this</span>;

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span><span style="color: #b5bd68;">if</span> (! self._redis) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   self._redis = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>(self._redis_options);
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> callback(<span style="color: #81a2be;">null</span>, self._redis);
};

module.exports = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Database</span>();
</pre>
</div>

<p>
和使用 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 的 <code>database.js</code> 对照一下，可以发现 <a href="http://github.com/luin/ioredis/">ioredis</a> 连接 <code>redis</code> 时，支持 <code>db</code> 选项，可以省去调用 <code>select</code> 。
</p>

<p>
值得注意的是 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 最近开始支持连接 <code>redis</code> 时指定 <code>db</code> 选项，见 <a href="https://github.com/NodeRedis/node_redis/commit/a4285c156c5b8964d92a36bd7f361a6f40e2449a">Parse redis url just like IANA · NodeRedis/node_redis@a4285c1</a> ，
使用该特性时请安装最新版的 <a href="https://github.com/NodeRedis/node_redis">node_redis</a> 。
</p>

<blockquote>
<p>
db: null; If set, client will run redis select command on connect. This is not recommended.
</p>
</blockquote>
<p>
引用自 <a href="https://github.com/NodeRedis/node_redis#rediscreateclient">redis.createClient()文档</a>
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">启动 Redis 及 Sentinel</h3>
<div class="outline-text-3" id="text-2-2">
<p>
启动上一篇文章《 <a href="http://blog.kankanan.com/article/redis-9ad853ef7528602765b96848ff1a-sentinel.html">redis高可用性方案：Sentinel</a> 》配置好的 <code>Sentinel</code>
</p>

<ul class="org-ul">
<li><code>Master</code> <code>redis-server ./redis-master.conf</code> 
</li>

<li><code>Slave</code> <code>redis-server ./redis-slave.conf</code>
</li>

<li><code>Sentinel a</code> <code>redis-sentinel ./redis-sentinel-a.conf</code>
</li>

<li><code>Sentinel b</code> <code>redis-sentinel ./redis-sentinel-b.conf</code>
</li>

<li><code>Sentinel c</code> <code>redis-sentinel ./redis-sentinel-c.conf</code>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">演示运行</h3>
<div class="outline-text-3" id="text-2-3">
<p>
运行演示脚本
</p>

<div class="org-src-container">

<pre class="src src-sh"><span id="coderef-master_write" class="coderef-off"><span class="linenr">1: </span>node client.js &amp;</span>
<span id="coderef-wait_sync" class="coderef-off"><span class="linenr">2: </span>sleep 1</span>
<span id="coderef-slave_read" class="coderef-off"><span class="linenr">3: </span>redis-cli -p 6380 -n 2 get hello</span>
<span id="coderef-failover" class="coderef-off"><span class="linenr">4: </span>redis-cli -p 6379 debug sleep 30 &amp;</span>
</pre>
</div>

<dl class="org-dl">
<dt> 行 <a href="#coderef-master_write"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-master_write');" onmouseout="CodeHighlightOff(this, 'coderef-master_write');">1</a> </dt><dd>运行 <code>client.js</code> 在 <code>Master</code> 写入键值
</dd>

<dt> 行 <a href="#coderef-wait_sync"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-wait_sync');" onmouseout="CodeHighlightOff(this, 'coderef-wait_sync');">2</a> </dt><dd>等待 <code>Master</code> 同步数据到 <code>Slave</code>
</dd>

<dt> 行 <a href="#coderef-slave_read"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read');">3</a> </dt><dd>从 <code>Slave</code> 读取键值
</dd>

<dt> 行 <a href="#coderef-failover"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-failover');" onmouseout="CodeHighlightOff(this, 'coderef-failover');">4</a> </dt><dd>触发故障切换
</dd>
</dl>

<p>
演示脚本运行结果
</p>

<pre class="example">
<span id="coderef-slave_read_result" class="coderef-off"><span class="linenr">5: </span>"world"</span>
<span id="coderef-slave_read_status" class="coderef-off"><span class="linenr">6: </span>OK</span>
<span id="coderef-master_read" class="coderef-off"><span class="linenr">7: </span>hello: world</span>
</pre>

<dl class="org-dl">
<dt> 行 <a href="#coderef-slave_read_result"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read_result');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read_result');">5</a> </dt><dd>演示脚本行 <a href="#coderef-slave_read"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read');">3</a> 的redis命令执行结果
</dd>

<dt> 行 <a href="#coderef-slave_read_status"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read_status');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read_status');">6</a> </dt><dd>演示脚本行 <a href="#coderef-slave_read"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-slave_read');" onmouseout="CodeHighlightOff(this, 'coderef-slave_read');">3</a> 的redis命令执行状态
</dd>

<dt> 行 <a href="#coderef-master_read"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-master_read');" onmouseout="CodeHighlightOff(this, 'coderef-master_read');">7</a> </dt><dd>演示脚本行 <a href="#coderef-master_write"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-master_write');" onmouseout="CodeHighlightOff(this, 'coderef-master_write');">1</a> 后台运行结束时输出的键值，此时由于主备已切换，是从新的 <code>Master</code> （原 <code>Slave</code> ）上获取的
</dd>
</dl>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">参考</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://github.com/luin/ioredis/blob/master/README.md#sentinel">ioredis Sentinel</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[redis高可用性方案：Sentinel]]></title>
            <link>/article/redis-9ad853ef7528602765b96848ff1a-sentinel.html</link>
            <guid>/article/redis-9ad853ef7528602765b96848ff1a-sentinel.html</guid>
            <pubDate>Sat, 26 Dec 2015 14:54:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在前面一篇文章《 <a href="http://blog.kankanan.com/article/redis-9ad853ef7528602757fa7840ff1a-master-slave.html">redis高可用性基础：Master-Slave</a> 》中，主备切换过程时有好几个步骤，需要人工介入，这势必增加服务的故障时间（Down Time）。
</p>

<p>
而 <code>Sentinel</code> 正是自动化这一过程的官方工具，详细文档请参考《<a href="http://redis.io/topics/sentinel">Redis Sentinel Documentation – Redis</a>》。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><code>Sentinel</code> 的功能</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>监控

<p>
<code>Sentinel</code> 不断地检测 <code>Master</code> 和 <code>Slave</code> 实例的运行状态。
</p>
</li>

<li>通知

<p>
<code>Sentinel</code> 通过API，能够通知系统管理员、其它程序：监控的Redis实例出问题了。
</p>
</li>

<li>自动故障切换

<p>
如果 <code>Master</code> 实例出问题了， <code>Sentinel</code> 通过将一个 <code>Slave</code> 实例提升为 <code>Master</code> 修复故障，其它 <code>Slave</code> 实例使用新的 <code>Master</code> 实例，同时通知给使用Redis服务的应用程序以便重新建立连接。
</p>
</li>

<li>配置提供者

<p>
<code>Sentinel</code> 做为客户端服务发现的权威来源：客户端连接到 <code>Sentinel</code> 以获取当前 <code>Master</code> 的地址，故障切换后报告新的地址。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><code>Sentinel</code> 演示</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>Redis Sentinel</code> 推荐的配置为至少三个Sentinel部署在三台不同的机器上，只配一台自已本身就是单点没有意义，二台时可能出现“脑裂”。
</p>

<ul class="org-ul">
<li>启动上一篇文章《 <a href="http://blog.kankanan.com/article/redis-9ad853ef7528602757fa7840ff1a-master-slave.html">redis高可用性基础：Master-Slave</a> 》配置好的 <code>Master</code> 及 <code>Slave</code> Redis实例

<p>
<code>Master</code> 监听在 <code>6379</code> 端口， <code>Slave</code> 监听在 <code>6380</code> 端口。
</p>
</li>

<li>使用端口号 <code>5000</code> <code>5001</code> <code>5002</code> 创建三个 <code>Sentinel</code> 实例

<p>
<code>Sentinel</code> 实例 <code>a</code> 的配置文件 <code>redis-sentinel-a.conf</code>
</p>

<pre class="example">
port 5000
sentinel monitor mymaster 127.0.0.1 6379 2
sentinel down-after-milliseconds mymaster 5000
sentinel failover-timeout mymaster 60000
sentinel parallel-syncs mymaster 1
</pre>

<p>
其它两个 <code>Sentinel</code> 实例 <code>b</code> <code>c</code> 配置和 <code>a</code> 基本一样，只是端口号分别为 <code>5001</code> 和 <code>5002</code> ：
</p>

<p>
<a href="../static/redis-sentinel-a.conf">redis-sentinel-a.conf</a>
</p>

<p>
<a href="../static/redis-sentinel-b.conf">redis-sentinel-b.conf</a>
</p>

<p>
<a href="../static/redis-sentinel-c.conf">redis-sentinel-c.conf</a>
</p>

<p>
终端 <code>3</code> 启动 <code>Sentinel a</code> <code>redis-sentinel ./redis-sentinel-a.conf</code>
</p>

<p>
终端 <code>4</code> 启动 <code>Sentinel b</code> <code>redis-sentinel ./redis-sentinel-b.conf</code>
</p>

<p>
终端 <code>5</code> 启动 <code>Sentinel c</code> <code>redis-sentinel ./redis-sentinel-c.conf</code>
</p>

<p>
可以发现当 <code>Sentinel</code> 实例启动时 <code>Sentinel</code> 的配置文件会自动进行更新，记录 <code>Slave</code> 及其它 <code>Sentinel</code> 的信息。
</p>
</li>

<li>从 <code>Sentinel</code> 获取当前 <code>Master</code> 的地址

<p>
通过 <code>redis-cli</code> 连上任一 <code>Sentinel</code> <code>redis-cli -p 5000</code>
</p>

<pre class="example">
127.0.0.1:5000&gt; sentinel get-master-addr-by-name mymaster
1) "127.0.0.1"
2) "6379"
</pre>
</li>

<li>故障切换测试

<p>
让 <code>Master</code> 停止响应 <code>30</code> 秒 <code>redis-cli -p 6379 debug sleep 30</code>
</p>

<p>
约 <code>10</code> 秒钟后，通过 <code>Sentinel</code> 的日志输出看到发生了主从切换。
</p>

<p>
重新获取当前的 <code>Master</code>
</p>

<pre class="example">
127.0.0.1:5000&gt; sentinel get-master-addr-by-name mymaster
1) "127.0.0.1"
2) "6380"
</pre>

<p>
<code>Redis</code> 实例的配置文件被自动修正，以反映新的 <code>Master-Slave</code> 状态：
</p>

<p>
<code>redis-master.conf</code> 添加了配置行 <code>slaveof 127.0.0.1 6380</code>
</p>

<p>
<code>redis-slave.conf</code> 删除了配置行 <code>slaveof 127.0.0.1 6379</code>
</p>

<p>
和我们在上一篇文章《 <a href="http://blog.kankanan.com/article/redis-9ad853ef7528602757fa7840ff1a-master-slave.html">redis高可用性基础：Master-Slave</a> 》手工做的主备切换如出一辙。
</p>

<p>
三个 <code>Sentinel</code> 配置文件中的 <code>Master-Slave</code> 配置也被自动修正。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">疑问</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><code>Redis</code> 实例的配置文件是被谁修改的？

<p>
如果是 <code>Sentinel</code> 那么就意味着所有 <code>Redis</code> 实例的同一机器上必须配置有 <code>Sentinel</code> （《<a href="http://redis.io/topics/sentinel">Redis Sentinel Documentation – Redis</a>》未提及）。
</p>
</li>

<li>万一因为某种原因，原 <code>Master</code> 配置文件未改为 <code>Slave</code> ，会不会出现脑裂？

<p>
感觉应该是会出现脑裂的，但是只要客户端应用总是使用 <code>Sentinel</code> 提供的 <code>Master</code> 地址，就不会有问题。
</p>

<p>
<code>node.js</code> 访问单个 <code>redis</code> 实例已经用得很溜了，下一篇文章会研究 <code>node.js</code> 访问 <code>redis sentinel</code> ，相信答案就会水落石出了。
</p>
</li>

<li><code>Redis Sentinel</code> 能保证不丢数据吗？

<p>
不能。由于 <code>Redis</code> 是异步复制，没有办法防止数据丢失，假设配置如下：
</p>

<pre class="example">
min-slaves-to-write 1
min-slaves-max-lag 10
</pre>

<p>
假设出现了分裂（partition）， <code>Master</code> 要 <code>10</code> 秒钟后才发现 <code>Slave</code> 失联再禁止写入，当分裂消除（partition heals）， 旧 <code>Master</code> 做为 <code>Slave</code> 连上新的 <code>Master</code> ，这 <code>10</code> 秒钟内写入的数据不会合入（merge）新的 <code>Master</code> ，数据丢失了。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">参考</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://redis.io/topics/sentinel">Redis Sentinel Documentation – Redis</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[redis高可用性基础：Master-Slave]]></title>
            <link>/article/redis-9ad853ef7528602757fa7840ff1a-master-slave.html</link>
            <guid>/article/redis-9ad853ef7528602757fa7840ff1a-master-slave.html</guid>
            <pubDate>Fri, 25 Dec 2015 13:19:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">理解Master-Slave</h2>
<div class="outline-text-2" id="text-1">
<p>
<code>Master-Slave</code> 常常翻译为 <code>主/备</code> ，是一种高可用性（ <a href="https://en.wikipedia.org/wiki/High_availability">High Availability</a> ）方案。
</p>

<p>
举个生活中的 <code>Master-Slave</code> 例子：
</p>

<blockquote>
<p>
参加考试的时候，我们会准备两支钢笔，正常情况下我们只会使用一支，出问题了才会换另外一支。
</p>
</blockquote>

<p>
所以实施 <code>Master-Slave</code> 是有成本的，至少会有 <code>50%</code> 的资源浪费（多备几支浪费会更多），可以让 <code>Slave</code> 承担一部分工作来充分利用资源。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Redis的Master-Slave</h2>
<div class="outline-text-2" id="text-2">
<p>
关于 <code>Redis</code> 的 <code>Master-Slave</code> ，《<a href="http://redis.io/topics/replication">Replication – Redis</a>》 有详尽描述。
</p>

<p>
需要注意的是 <code>Redis</code> 的 <code>Master-Slave</code> 不能保证绝对不丢数据，而是丢失一小段时间内（如：1秒钟）的数据。
</p>

<p>
下面开始 <code>Redis</code> 的 <code>Master-Slave</code> 实践，使用的 <code>redis</code> 版本为 <code>3.0.6</code> 。
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">创建Master结点</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>redis配置文件

<p>
从 <code>/etc/redis.conf</code> 拷贝一份进行修改，无关的配置项已去掉，使用默认值即可。
</p>

<p>
<a href="../static/redis-master.conf">redis-master.conf</a>
</p>
</li>

<li>在终端 <code>1</code> 启动 <code>Master</code> 结点

<p>
<code>redis-server ./redis-master.conf</code>
</p>
</li>

<li>使用 <code>redis-cli</code> 连接 <code>Master</code>

<pre class="example">
$ redis-cli -p 6379
127.0.0.1:6379&gt;
</pre>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">创建Slave结点</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>redis配置文件

<p>
从 <code>redis-master.conf</code> 拷贝一份进行修改，主要是修改监听的端口号（ <code>6380</code> ）、PID文件名、DB文件名，
</p>

<p>
最关键的是设置为 <code>Master</code> 的 <code>Slave</code> <code>slaveof 127.0.0.1 6379</code> 。
</p>

<p>
<a href="../static/redis-slave.conf">redis-slave.conf</a>
</p>
</li>

<li>在终端 <code>2</code> 启动 <code>Slave</code> 结点

<p>
<code>redis-server ./redis-slave.conf</code>
</p>
</li>

<li>使用 <code>redis-cli</code> 连接 <code>Slave</code>

<pre class="example">
$ redis-cli -p 6380
127.0.0.1:6380&gt;
</pre>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">演示Master写Slave读的场景</h3>
<div class="outline-text-3" id="text-2-3">
<ul class="org-ul">
<li>在 <code>Master</code> 写入

<pre class="example">
127.0.0.1:6379&gt; set hello world
OK
</pre>
</li>

<li>从 <code>Slave</code> 读取

<pre class="example">
127.0.0.1:6380&gt; get hello
"world"
</pre>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">演示Slave挂掉的场景</h3>
<div class="outline-text-3" id="text-2-4">
<ul class="org-ul">
<li>关闭 <code>Slave</code> 

<pre class="example">
127.0.0.1:6380&gt; shutdown
not connected&gt;
</pre>

<p>
终端 <code>2</code> 上的 <code>redis-server</code> 会自动退出，注意到它退出前进行了存盘。
</p>
</li>

<li>在 <code>Master</code> 写入

<pre class="example">
127.0.0.1:6379&gt; set hello redis
OK
</pre>
</li>

<li>在终端 <code>2</code> 上再次启动 <code>Slave</code>

<div class="org-src-container">

<pre class="src src-sh">redis-server ./redis-slave.conf
</pre>
</div>

<p>
从日志上可以看到 <code>Slave</code> 从 <code>Master</code> 重新进行了数据同步。
</p>
</li>

<li>在 <code>Slave</code> 上读取

<pre class="example">
not connected&gt; get hello
"redis"
127.0.0.1:6380&gt;
</pre>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5">演示Master挂掉的场景</h3>
<div class="outline-text-3" id="text-2-5">
<ul class="org-ul">
<li>关闭 <code>Master</code>

<pre class="example">
127.0.0.1:6379&gt; shutdown
not connected&gt;
</pre>

<p>
终端 <code>1</code> 上的 <code>redis-server</code> 会自动退出，注意到它退出前进行了存盘， 终端 <code>2</code> 上的 <code>Slave</code> 在不断尝试重连 <code>Master</code> 。
</p>
</li>

<li>Master-Slave角色切换

<p>
将运行中的原 <code>Slave</code> 提升为新 <code>Master</code>
</p>

<pre class="example">
127.0.0.1:6380&gt; slaveof no one
OK
</pre>

<p>
修改原 <code>Slave</code> 的配置文件 <code>redis-slave.conf</code> 删除配置 <code>#slaveof 127.0.0.1 6379</code>
</p>

<p>
修改原 <code>Master</code> 的配置文件 <code>redis-master.conf</code> 添加配置 <code>slaveof 127.0.0.1 6380</code>
</p>
</li>

<li>在新 <code>Master</code> 写入

<pre class="example">
127.0.0.1:6380&gt; set hello master-slave
OK
</pre>
</li>

<li>在终端 <code>1</code> 上再次启动原 <code>Master</code> 

<div class="org-src-container">

<pre class="src src-sh">redis-server ./redis-master.conf
</pre>
</div>

<p>
从日志上可以看到它现在是 <code>Slave</code> 角色了，反而从原 <code>Slave</code> 同步数据。
</p>
</li>

<li>在原 <code>Master</code> 上读取

<pre class="example">
not connected&gt; get hello
"master-slave"
127.0.0.1:6379&gt;
</pre>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-6" class="outline-3">
<h3 id="sec-2-6">总结</h3>
<div class="outline-text-3" id="text-2-6">
<p>
<code>Redis</code> 的 <code>Master-Slave</code> 是一种动态关系，角色（ <code>Master</code> 、 <code>Slave</code> ）会互相转换，角色转换过程中必须严格按照步骤来，操作不当可能导致数据丢失。
</p>

<p>
后面会发文介绍自动进行这种切换的工具 <code>Redis Sentinel</code> ，以及当 <code>Master-Slave</code> 发生切换后，应用程序该如何重连到新的 <code>Master</code> 。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">参考</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://en.wikipedia.org/wiki/Master/slave_(technology)">Master/slave (technology) - Wikipedia, the free encyclopedia</a>
</p>

<p>
<a href="http://redis.io/topics/replication">Replication – Redis</a>
</p>

<p>
<a href="http://www.tuicool.com/articles/2QbABj">Redis slave切换为master操作（不停机） - 推酷</a></p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[升级redis到最新版本的过程]]></title>
            <link>/article/53477ea7-redis-5230670065b07248672c76848fc77a0b.html</link>
            <guid>/article/53477ea7-redis-5230670065b07248672c76848fc77a0b.html</guid>
            <pubDate>Mon, 10 Aug 2015 09:56:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li>编译最新版本的redis，暂不要安装

<p>
参见《<a href="http:7f168bd15b8988c5-redis.html">编译安装redis</a>》
</p>
</li>

<li>将旧版的redis.conf配置文件中的配置项合入新版本redis.conf

<p>
可能需要提前确认一下新版本redis是否兼容旧版本数据文件。
</p>
</li>

<li>卸载并停止旧版本redis
</li>

<li>安装新版本redis

<p>
参见《<a href="http:7f168bd15b8988c5-redis.html">编译安装redis</a>》
</p>
</li>

<li>启动新版本redis
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux服务器出现大量CLOSE_WAIT状态的连接]]></title>
            <link>/article/linux-670d52a1566851fa73b0592791cf-close_wait-72b6600176848fde63a5.html</link>
            <guid>/article/linux-670d52a1566851fa73b0592791cf-close_wait-72b6600176848fde63a5.html</guid>
            <pubDate>Sat, 01 Aug 2015 19:21:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
昨天服务器停止服务，node.js进程耗光了服务器的内存及CPU，node.js进程卡死无法被 <code>kill</code> 掉，最后要来root帐号密码，直接 <code>kill -9</code> 才结束掉进程。
</p>

<p>
再次鄙视一下 <a href="https://github.com/nodejitsu/forever">forever</a> ，杀不掉原来的 node.js 进程组也就罢了，竟然又拉起了一套新的 node.js 进程组。
</p>

<p>
统计了一下 <code>10</code> 万个fd都耗光了，其中 <code>9</code> 万多个为 <code>CLOSE_WAIT</code> 状态，此时服务器已经无法响应请求。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">CLOSE_WAIT 状态介绍</h2>
<div class="outline-text-2" id="text-1">
<p>
先看一副TCP连接关闭的状态图（ <a href="http://intronetworks.cs.luc.edu/current/html/tcp.html#index-29">来源</a> ）：
</p>


<div class="figure">
<p><img src="../static/tcp_normal_close.png" alt="tcp_normal_close.png" />
</p>
</div>

<p>
被动关闭一方才会出现 <code>CLOSE_WAIT</code> 状态，由于被动关闭方未调用 <code>close</code> 关闭socket导致，问题肯定是由服务器代码引起。
</p>

<p>
检测到对端socket关闭然后关闭本端socket是由 node.js 自行完成的，最大的可能是没有机会执行 <code>close</code> 。
</p>

<p>
我们的应用客户端与服务器有一个tls长连接，当连接断开时客户端会等待3-10秒后尝试重连服务器，如果服务器出现卡顿会导致客户端频繁重连，
</p>

<p>
如果服务器来不及关闭这些连接，则会出现 CLOSE_WAIT 状态的连接，占用大量文件描述符，减少 CLOSE_WAIT 超时时间能够在一定程度上缓解这个问题，
</p>

<p>
但是对于我们这种长连接的环境，大量CLOSE_WAIT是问题的表象，而非根源。
</p>

<p>
参考：《<a href="http://lvxuehu.iteye.com/blog/452487">解决CLOSE_WAIT 问题</a>》
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">内存及CPU占用彪升问题</h2>
<div class="outline-text-2" id="text-2">
<p>
伴随着 CLOSE_WAIT 出现的状况是 node.js 进程内存及CPU占用超高，单node.js进程内存占用达到 1.5G，CPU占用 90% 以上，此时应该会导致 node.js 响应慢，
来不及关闭连上来的socket。
</p>

<p>
所以解决问题的关键就是：找出什么原因导致 node.js 内存及CPU 100%占用。
</p>

<p>
想到的可能是redis负载过高引起，从运维监控图上可以看出一些蹊跷，node.js出问题时redis的连接数也同样彪升，而出问题的机器上刚好就是跑redis的机器，
另一台服务器一直相安无事，没有跑redis。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">一次午夜故障元凶浮出水面</h2>
<div class="outline-text-2" id="text-3">
<p>
在晚上两点的时候服务出现问题，同样的现象，特别留意了一下redis的统计，请求速度很低，只有1200，平时都是5000。偶然在进程列表中发现了 redis-rdb-bgsave 的身影，
不断地执行ps看进程列表，发现 redis-rdb-bgsave 进程不断地出现，查看redis的持久化配置如下：
</p>

<pre class="example">
save 900 1
save 300 10
save 60 10000
</pre>

<p>
我们的系统有大量的redis，1分钟肯定过万，这样redis持久化变是常态了，而且由于用的是机械硬盘，持久化肯定会引起系统卡顿，先将它调整为15分钟最多持久化一次：
</p>

<pre class="example">
config set save "900 1"
</pre>

<p>
重启程序释放资源后系统开始正常响应，但是10多分钟后系统再次无响应，才想起一则经验教训：
</p>

<pre class="example">
     跑redis的机器至少要预留和redis占用内存同样大小的空闲内存空间，redis RDB持久化进行fork时最坏会占用双倍内存，内存不足就会动用交换分区，系统性能急剧下降。
</pre>

<p>
于是，立即改配置将redis所在机器上的node.js cluster进程数调小，腾出大把内存，总算没有再出现问题，今晚终于可以入眠。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">更多疑问</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>我们的node.js进程为什么常常会占用很多内存？
</li>

<li>netstat中看到CLOSE_WAIT状态的连接输入缓冲往往有数据，而ESTABLISHED状态的连接读写缓冲区往往为空，为什么？
</li>

<li>node.js卡顿时forever杀不死反而启动了新实例帮倒忙，pm2就一定能够解决吗？
</li>

<li>redis持久化引起服务挂掉，已经是在第二个项目中遇到了，终极解决方案是什么？
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[编译安装redis]]></title>
            <link>/article/7f168bd15b8988c5-redis.html</link>
            <guid>/article/7f168bd15b8988c5-redis.html</guid>
            <pubDate>Mon, 17 Feb 2014 08:40:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">下载</h2>
<div class="outline-text-2" id="text-1">
<p>
到 <a href="http://redis.io/download">http://redis.io/download</a> 下载最新稳定版本。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">安装</h3>
<div class="outline-text-3" id="text-1-1">
<p>
解压后参照 README 进行安装：
</p>

<div class="org-src-container">

<pre class="src src-sh">make
make install
</pre>
</div>

<p>
默认安装到/usr/local。
</p>

<p>
指定位置安装： 
</p>

<div class="org-src-container">

<pre class="src src-sh">make <span style="color: #f0c674;">PREFIX</span>=/usr/local/redis install
</pre>
</div>

<p>
安装的程序：
</p>

<dl class="org-dl">
<dt> /usr/local/bin/redis-cli </dt><dd>redis客户端程序 
</dd>
<dt> /usr/local/bin/redis-server </dt><dd>redis服务器程序
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">手工配置</h3>
<div class="outline-text-3" id="text-1-2">
<p>
将源码包附带的配置文件 <code>redis.conf</code> 拷贝到安装位置:
</p>

<div class="org-src-container">

<pre class="src src-sh">mkdir /usr/local/redis/etc/
cp ./redis.conf /usr/local/redis/etc/
</pre>
</div>

<p>
修改配置文件 <code>redis.conf</code> :
</p>

<pre class="example">
daemonize yes
pidfile /usr/local/redis/var/redis.pid
logfile /usr/local/redis/var/redis.log
dir /usr/local/redis/data
stop-writes-on-bgsave-error no
bind 127.0.0.1
</pre>

<ul class="org-ul">
<li>启动

<div class="org-src-container">

<pre class="src src-sh">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf
</pre>
</div>
</li>

<li>停止

<p>
使用redis客户端中执行shutdown命令
</p>

<div class="org-src-container">

<pre class="src src-sh">redis-cli
shutdown
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">自动配置</h3>
<div class="outline-text-3" id="text-1-3">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">cd</span> utils
./install_server.sh
</pre>
</div>

<p>
redis 安装在非标准路径时，安装脚本可能找不到 redis 可执行程序路径，需要填写：
</p>

<pre class="example">
Please select the redis executable path [] /usr/local/redis/bin/redis-server
</pre>

<p>
该安装脚本会生成平台相关的 redis 服务启动脚本，启动 redis 服务，同时设置为开机启动。</p>
</div>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[估算redis内存占用]]></title>
            <link>/article/4f307b97-redis-51855b5853607528.html</link>
            <guid>/article/4f307b97-redis-51855b5853607528.html</guid>
            <pubDate>Sun, 16 Dec 2012 07:14:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
参考: <a href="http://lethain.com/notes-on-redis-memory-usage/">Notes on Redis Memory Usage</a>
</p>

<ul class="org-ul">
<li>测试环境
<dl class="org-dl">
<dt> redis版本 </dt><dd>redis_version:2.4.4
</dd>
<dt> 操作系统（uname -a） </dt><dd>Linux CentOS 2.6.32-220.13.1.el6.x86_64 #1 SMP Tue Apr 17 23:56:34 BST 2012 x86_64 x86_64 x86_64 GNU/Linux
</dd>
<dt> python版本（python &#x2013;version） </dt><dd>Python 2.6.6
</dd>
</dl>
</li>
</ul>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Strings</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>测试脚本
<div class="org-src-container">

<pre class="src src-python"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/env python</span>

<span style="color: #b5bd68;">import</span> redis
<span style="color: #b5bd68;">import</span> uuid
<span style="color: #b5bd68;">import</span> time

<span style="color: #f0c674;">r</span> = redis.Redis(host=<span style="color: #8abeb7;">'localhost'</span>, port=6379, db=0)
<span style="color: #b5bd68;">for</span> num_strings <span style="color: #b5bd68;">in</span> (100000,):
<span style="color: #969896; background-color: #222427;"> </span>   r.flushall()
<span style="color: #969896; background-color: #222427;"> </span>   time.sleep(1.0)
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #f0c674;">initial_size</span> = r.dbsize()
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #f0c674;">initial_info</span> = r.info()

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">for</span> i <span style="color: #b5bd68;">in</span> <span style="color: #b294bb;">xrange</span>(0, num_strings):
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   r.<span style="color: #b294bb;">set</span>(<span style="color: #b294bb;">str</span>(uuid.uuid4()), time.time())
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">r.setex(str(uuid.uuid4()), time.time(), 100000)</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #f0c674;">final_size</span> = r.dbsize()
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #f0c674;">final_info</span> = r.info()

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">print</span> <span style="color: #8abeb7;">"For %s strings."</span> % (num_strings,)
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">print</span> <span style="color: #8abeb7;">"Keys: %s =&gt; %s"</span> % (initial_size, final_size)
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">print</span> <span style="color: #8abeb7;">"Memory: %s =&gt; %s"</span> % (initial_info[<span style="color: #8abeb7;">'used_memory'</span>],
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   final_info[<span style="color: #8abeb7;">'used_memory'</span>])
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">print</span> <span style="color: #8abeb7;">"Memory per key: %d"</span>%((<span style="color: #b294bb;">int</span>(final_info[<span style="color: #8abeb7;">'used_memory'</span>]) - <span style="color: #b294bb;">int</span>(initial_in<span style="color: #de935f; background-color: #373b41;">fo[</span><span style="color: #de935f; background-color: #373b41;">'used_memory'</span><span style="color: #de935f; background-color: #373b41;">])) / num_strings)</span>
</pre>
</div>
</li>
<li>测试结果
<dl class="org-dl">
<dt> set </dt><dd>每个key-value占用138字节，可见redis本身的维护开销为89字节
</dd>
<dt> setex </dt><dd>每个key-value占用180字节，可见redis本身的维护开销为131字节，启用过期时间需要42字节开销（这是因为redis使用新的链表保存设置了过期时间的条目）。
</dd>
</dl>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Sets</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>测试脚本
<div class="org-src-container">

<pre class="src src-python"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/bin/env python</span>

<span style="color: #b5bd68;">import</span> redis
<span style="color: #b5bd68;">import</span> math
<span style="color: #b5bd68;">import</span> time

<span style="color: #f0c674;">r</span> = redis.Redis(host=<span style="color: #8abeb7;">'localhost'</span>, port=6379, db=0)
<span style="color: #f0c674;">set_capcity</span> = <span style="color: #b294bb;">int</span>(r.config_get(<span style="color: #8abeb7;">"set-max-intset-entries"</span>)[<span style="color: #8abeb7;">"set-max-intset-entries</span><span style="color: #de935f; background-color: #373b41;">"</span><span style="color: #de935f; background-color: #373b41;">])</span>

<span style="color: #b5bd68;">def</span> <span style="color: #de935f;">set_name</span>(i, num_strings, set_capcity):
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #f0c674;">set_num</span> = math.ceil(num_strings/<span style="color: #b294bb;">float</span>(set_capcity))
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #8abeb7;">"s%d"</span>%(i%set_num)

<span style="color: #b5bd68;">for</span> num_strings <span style="color: #b5bd68;">in</span> (100000,):
<span style="color: #969896; background-color: #222427;"> </span>   r.flushall()
<span style="color: #969896; background-color: #222427;"> </span>   time.sleep(1.0)
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #f0c674;">initial_size</span> = r.dbsize()
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #f0c674;">initial_info</span> = r.info()

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">for</span> i <span style="color: #b5bd68;">in</span> <span style="color: #b294bb;">xrange</span>(0, num_strings):
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">r.sadd("s", str(i))</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   r.sadd(set_name(i, num_strings, set_capcity), <span style="color: #b294bb;">str</span>(i))
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #f0c674;">final_size</span> = r.dbsize()
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #f0c674;">final_info</span> = r.info()

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">print</span> <span style="color: #8abeb7;">"For %s strings."</span> % (num_strings,)
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">print</span> <span style="color: #8abeb7;">"Keys: %s =&gt; %s"</span> % (initial_size, final_size)
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">print</span> <span style="color: #8abeb7;">"Memory: %s =&gt; %s"</span> % (initial_info[<span style="color: #8abeb7;">'used_memory'</span>],
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   final_info[<span style="color: #8abeb7;">'used_memory'</span>])
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">print</span> <span style="color: #8abeb7;">"Memory per key: %d"</span>%((<span style="color: #b294bb;">int</span>(final_info[<span style="color: #8abeb7;">'used_memory'</span>]) - <span style="color: #b294bb;">int</span>(initial_in<span style="color: #de935f; background-color: #373b41;">fo[</span><span style="color: #de935f; background-color: #373b41;">'used_memory'</span><span style="color: #de935f; background-color: #373b41;">])) / num_strings)</span>
</pre>
</div>
</li>

<li>测试结果
<dl class="org-dl">
<dt> 启用压缩 </dt><dd>每个value占用4字节
</dd>
<dt> 不启用压缩 </dt><dd>每个value占用39字节
</dd>
</dl>
<p>
注意: redis的set仅当值为整型，压缩才会生效。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">内存预留</h2>
<div class="outline-text-2" id="text-3">
<p>
除非你能够保证你的机器总是有一半的空闲内存，否则别使用快照方式持久化数据或者通过执行BGREWRITEAOF压缩aof文件。
redis在执行bgsave时，会进行一次fork，fork后的进程负责将内存中的数据写入磁盘，由于fork采用Copy-On-Write，两个redis进程共享内存中的数据。redis如果有数据更新，则会将对应的共享内存页创建一份副本再更新，当更新操作足够频繁时，共享的内存空间会迅速地副本化，导致物理内存被耗光，系统被迫动用交换空间，从而导致redis服务极不稳定，整个系统堵塞在磁盘io上。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[解决保存快照失败后redis无法写入的问题]]></title>
            <link>/article/89e351b34fdd5b585feb716759318d25540e-redis-65e06cd551995165768495ee9898.html</link>
            <guid>/article/89e351b34fdd5b585feb716759318d25540e-redis-65e06cd551995165768495ee9898.html</guid>
            <pubDate>Sun, 16 Dec 2012 07:14:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
用命令行工具连上后执行“set test 0”出现以下错误提示：
</p>
<pre class="example">
MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.
</pre>
<p>
这个应该是之前强制停止redis快照导致的，查看redis快照状态证实了这一点：
</p>
<pre class="example">
redis 127.0.0.1:6379&gt; info
...
rdb_last_bgsave_status:err
...
</pre>
<p>
通过关闭配置项stop-writes-on-bgsave-error解决该问题。
</p>
<pre class="example">
redis 127.0.0.1:6379&gt; config set stop-writes-on-bgsave-error no
</pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用hash表结构减少redis内存占用]]></title>
            <link>/article/4f7f7528-hash-88687ed3678451cf5c11-redis-51855b5853607528.html</link>
            <guid>/article/4f7f7528-hash-88687ed3678451cf5c11-redis-51855b5853607528.html</guid>
            <pubDate>Sun, 16 Dec 2012 07:14:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
当hash结构中的元素较少（少于redis.conf:hash-max-zipmap-entries指定的数量时，配置成&lt;=1000，过大会减低处理速度，参见： <a href="http://stackoverflow.com/questions/11281734/redis-using-hashes">这里</a> 和 <a href="http://instagram-engineering.tumblr.com/post/12202313862/storing-hundreds-of-millions-of-simple-key-value-pairs">这里</a> ）且数据为整型时，redis使用特殊的方式（数组保存，时间换空间）保存hash结构以减少内存占用，参见 <a href="http://redis.io/topics/memory-optimization">这里</a> 和 <a href="http://stackoverflow.com/questions/9625246/what-are-the-underlying-data-structures-used-for-redis">这里</a> 。但当hash结构超过指定数量时将使用普通的<a href="http://redis.io/commands#string">字符串</a>方式保存，也就无法再节省内存了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[当php遇上redis]]></title>
            <link>/article/5f53-php-90474e0a-redis.html</link>
            <guid>/article/5f53-php-90474e0a-redis.html</guid>
            <pubDate>Sat, 08 Dec 2012 05:41:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在最近的项目中，我们需要在php中访问redis，我们选择了使用<a href="https://github.com/nicolasff/phpredis">phpredis</a>库，下面是遇到的一些问题。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">redis持久连接不靠谱。</h2>
<div class="outline-text-2" id="text-1">
<p>
可以说这是php的通病了，不管是mysql、memcache还是redis，指望由php本身（包含php扩展）来实现持久连接都是行不通的。
</p>

<dl class="org-dl">
<dt> 为什么这么说呢？ </dt><dd>     首先，所谓的持久连接的实现不外乎在进程（php-fpm）内建一个连接池，当php需要连接时，先以ip+port等信息为key在池中查找，找到则直接返回已有连接没有则新建连接。而当一个请求执行结束时，不关闭连接，而是把连接归还到池中。

<p>
这样当php需要用到多个redis实例时（分库），因为一个php-fpm进程会持有每个redis实例的一个连接，所以需要“php-fpm进程数“*“redis实例数"个redis连接，而对于每个redis服务器则有“php-fpm进程数“个客户端连接。
</p>

<p>
举个例子：一个web应用开了1000个php-fpm进程，有10个redis实例，那么保持的redis连接数就为1000*10也就是10000，每个redis实例有1000个客户端连接。如果前端或redis再扩容所需要的连接就会以乘积方式增加。一个redis实例有php-fpm进程数个连接的情况下表现如何呢，这就要好好测一测了，反正是每连接一线程的mysql是直接堵死了。
</p>
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">RedisArray不靠谱。</h2>
<div class="outline-text-2" id="text-2">
<p>
RedisArray实现了一致性hash分布式，但是它在初始化的时候就会连接上每个实例，这在web应用中简直是胡闹，它对一致性hash实现得比较完善，结点失效、动态添加结点时重新hash都有处理，在万不得已进行水平扩容时，可能会用得上。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">需要自已关闭redis连接。</h2>
<div class="outline-text-2" id="text-3">
<p>
Redis的析构函数没有关闭redis连接，这会导致redis网络负载过高，要确保脚本结束时关闭连接，最好是能够封装一下Redis类再使用。
</p>

<dl class="org-dl">
<dt> 示例封装 </dt><dd></dd>
</dl>
<div class="org-src-container">

<pre class="src src-php"><span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#20998;&#24067;&#24335;Redis.</span>
<span style="color: #b5bd68;">class</span> <span style="color: #81a2be;">RedisShard</span> {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#26500;&#36896;&#20989;&#25968;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">public</span> <span style="color: #b5bd68;">function</span> <span style="color: #de935f;">__construct</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shards</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">reinit</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shards</span>);
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#26512;&#26500;&#20989;&#25968;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#33050;&#26412;&#32467;&#26463;&#26102;&#65292;phpredis&#19981;&#20250;&#33258;&#21160;&#20851;&#38381;redis&#36830;&#25509;&#65292;&#36825;&#37324;&#28155;&#21152;&#33258;&#21160;&#20851;&#38381;&#36830;&#25509;&#25903;&#25345;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#21487;&#20197;&#36890;&#36807;&#25163;&#21160;unset&#26412;&#31867;&#23545;&#35937;&#24555;&#36895;&#37322;&#25918;&#36164;&#28304;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">public</span> <span style="color: #b5bd68;">function</span> <span style="color: #de935f;">__destruct</span>() {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #b5bd68;">isset</span>(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>)){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>]<span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">close</span>();
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#37325;&#26032;&#21021;&#22987;&#21270;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">public</span> <span style="color: #b5bd68;">function</span> <span style="color: #de935f;">reinit</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shards</span>){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">index</span> = 0;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shards</span> = <span style="color: #b5bd68;">array</span>();
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">foreach</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shards</span> <span style="color: #b5bd68;">as</span> <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shards</span>[<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">index</span>] = explode(<span style="color: #8abeb7;">':'</span>, <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>); <span style="color: #969896; font-style: italic;">//</span><span style="color: #969896; font-style: italic;">&#26684;&#24335;&#65306;host:port:db</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shards</span>[<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">index</span>][<span style="color: #8abeb7;">'index'</span>] = <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">index</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   ++<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">index</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }<span style="color: #373b41; background-color: #de935f;">        </span>
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#36716;&#21457;&#26041;&#27861;&#35843;&#29992;&#21040;&#30495;&#27491;&#30340;redis&#23545;&#35937;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">public</span> <span style="color: #b5bd68;">function</span> <span style="color: #de935f;">__call</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">name</span>, <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">arguments</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">result</span> = call_user_func_array(<span style="color: #b5bd68;">array</span>(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">redis</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">arguments</span>[0]), <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">name</span>)<span style="color: #de935f; background-color: #373b41;">, </span><span style="color: #de935f; background-color: #373b41;">$</span><span style="color: #de935f; background-color: #373b41;">arguments</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">result</span> === <span style="color: #81a2be;">false</span> <span style="color: #b5bd68;">and</span> in_array(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">name</span>, <span style="color: #b5bd68;">array</span>(<span style="color: #8abeb7;">'set'</span>, <span style="color: #8abeb7;">'setex'</span>, <span style="color: #8abeb7;">'incr'</span>)))<span style="color: #de935f; background-color: #373b41;"> {</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   trigger_error(<span style="color: #8abeb7;">"redis error: "</span> . <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[0] . <span style="color: #8abeb7;">':'</span> . <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span><span style="color: #de935f; background-color: #373b41;">[1] . </span><span style="color: #de935f; background-color: #373b41;">':'</span><span style="color: #de935f; background-color: #373b41;"> .</span><span style="color: #de935f; background-color: #373b41;">$</span><span style="color: #de935f; background-color: #373b41;">this</span><span style="color: #de935f; background-color: #373b41;">-&gt;</span><span style="color: #de935f; background-color: #373b41;">shard</span><span style="color: #de935f; background-color: #373b41;">[2] . </span><span style="color: #de935f; background-color: #373b41;">" </span><span style="color: #de935f; background-color: #373b41;">$name</span><span style="color: #de935f; background-color: #373b41;"> "</span><span style="color: #de935f; background-color: #373b41;"> . implode(</span><span style="color: #de935f; background-color: #373b41;">' '</span><span style="color: #de935f; background-color: #373b41;">, </span><span style="color: #de935f; background-color: #373b41;">$</span><span style="color: #de935f; background-color: #373b41;">arguments</span><span style="color: #de935f; background-color: #373b41;">), </span><span style="color: #de935f; background-color: #373b41;">E_USER_NOTICE</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">result</span>;
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#33719;&#21462;1&#33267;max&#38388;&#30340;&#21807;&#19968;&#24207;&#21495;name&#65292;&#36798;&#21040;max&#21518;&#20250;&#20174;1&#24320;&#22987;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">redis&#30340;&#36882;&#22686;&#21040;&#26368;&#22823;&#20540;&#21518;&#20250;&#36820;&#22238;&#38169;&#35823;&#65292;&#26412;&#26041;&#27861;&#23454;&#29616;&#23433;&#20840;&#30340;&#36882;&#22686;&#12290;</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#22833;&#36133;&#36820;&#22238;false&#65292;&#26368;&#35201;&#30830;&#20445;&#24050;&#29992;redis()&#26041;&#27861;&#36830;&#21040;&#29983;&#25104;&#24207;&#21495;&#30340;&#26576;&#20010;redis&#23545;&#35937;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">public</span> <span style="color: #b5bd68;">function</span> <span style="color: #de935f;">id</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">name</span>, <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">max</span>) {
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #b5bd68;">isset</span>(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>)){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">id</span> = <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>]<span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">incr</span>(<span style="color: #8abeb7;">'_id_'</span> . <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">name</span>);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">id</span>){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">max</span> = intval(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">max</span>/count(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shards</span>));
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">id</span> % <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">max</span> == 0){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">while</span>(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>]<span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">decrBy</span>(<span style="color: #8abeb7;">'_id_'</span> . <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">name</span>, <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">max</span>) &gt;=<span style="color: #de935f; background-color: #373b41;"> </span><span style="color: #de935f; background-color: #373b41;">$</span><span style="color: #de935f; background-color: #373b41;">max</span><span style="color: #de935f; background-color: #373b41;">){</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">id</span> = <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">max</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">else</span> <span style="color: #b5bd68;">if</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">id</span> &gt; <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">max</span>){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">id</span> %= <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">max</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> (<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">id</span> - 1)*count(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shards</span>) + (<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'index'</span>] +<span style="color: #de935f; background-color: #373b41;"> 1);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">false</span>;
<span style="color: #969896; background-color: #222427;"> </span>   }

<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">/// </span><span style="color: #969896; font-style: italic;">&#36830;&#25509;&#24182;&#36820;&#22238;key&#23545;&#24212;&#30340;redis&#23545;&#35937;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">public</span> <span style="color: #b5bd68;">function</span> <span style="color: #de935f;">redis</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">key</span>){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">//</span><span style="color: #969896; font-style: italic;">TODO: crc32&#22312;32&#20301;&#31995;&#32479;&#19979;&#20250;&#36820;&#22238;&#36127;&#25968;&#65292;&#22240;&#25105;&#20204;&#26159;&#37096;&#32626;&#22312;64&#20301;&#31995;&#32479;&#19978;&#65292;&#26242;&#26102;&#24573;&#30053;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   assert(<span style="color: #81a2be;">PHP_INT_SIZE</span> === 8);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">index</span> = crc32(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">key</span>) % count(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shards</span>);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span> = <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shards</span>[<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">index</span>];
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #b5bd68;">isset</span>(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>)){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">//</span><span style="color: #969896; font-style: italic;">&#23581;&#35797;&#37325;&#29992;&#24050;&#26377;&#36830;&#25509;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[0] == <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[0] <span style="color: #b5bd68;">and</span> <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[1] == <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[1]){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[2] != <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[2]){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #81a2be;">!</span> <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>]<span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">select</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[2])){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   trigger_error(<span style="color: #8abeb7;">'redis error: select '</span> . <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[0] . <span style="color: #8abeb7;">':'</span> .<span style="color: #de935f; background-color: #373b41;"> </span><span style="color: #de935f; background-color: #373b41;">$</span><span style="color: #de935f; background-color: #373b41;">shard</span><span style="color: #de935f; background-color: #373b41;">[1] . </span><span style="color: #de935f; background-color: #373b41;">':'</span><span style="color: #de935f; background-color: #373b41;"> .</span><span style="color: #de935f; background-color: #373b41;">$</span><span style="color: #de935f; background-color: #373b41;">shard</span><span style="color: #de935f; background-color: #373b41;">[2], </span><span style="color: #de935f; background-color: #373b41;">E_USER_ERROR</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">false</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[2] = <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[2];
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>];
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>]<span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">close</span>();
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">unset</span>(<span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; font-style: italic;">//</span><span style="color: #969896; font-style: italic;">&#26032;&#24314;&#36830;&#25509;.</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>] = <span style="color: #b5bd68;">new</span> <span style="color: #81a2be;">Redis</span>();
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #81a2be;">!</span> <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>]<span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">connect</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[0], <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[1])){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   trigger_error(<span style="color: #8abeb7;">'redis error: connect '</span> . <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[0] . <span style="color: #8abeb7;">':'</span> . <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[1],<span style="color: #de935f; background-color: #373b41;"> </span><span style="color: #de935f; background-color: #373b41;">E_USER_ERROR</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">false</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">db</span> = intval(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[2]);
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">db</span> != 0 <span style="color: #b5bd68;">and</span> <span style="color: #81a2be;">!</span><span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>]<span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">select</span>(<span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">db</span>)){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   trigger_error(<span style="color: #8abeb7;">'redis error: select '</span> . <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[0] . <span style="color: #8abeb7;">':'</span> . <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[1] .<span style="color: #de935f; background-color: #373b41;"> </span><span style="color: #de935f; background-color: #373b41;">':'</span><span style="color: #de935f; background-color: #373b41;"> .</span><span style="color: #de935f; background-color: #373b41;">$</span><span style="color: #de935f; background-color: #373b41;">shard</span><span style="color: #de935f; background-color: #373b41;">[2], </span><span style="color: #de935f; background-color: #373b41;">E_USER_ERROR</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>]<span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #c5c8c6; background-color: #1d1f21;">close</span>();
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">false</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">if</span>(<span style="color: #81a2be;">ENABLE_DEVELOP</span>){
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   trigger_error(<span style="color: #8abeb7;">'redis connect success. '</span> . <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[0] . <span style="color: #8abeb7;">':'</span> . <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>[1<span style="color: #de935f; background-color: #373b41;">] . </span><span style="color: #de935f; background-color: #373b41;">':'</span><span style="color: #de935f; background-color: #373b41;"> . </span><span style="color: #de935f; background-color: #373b41;">$</span><span style="color: #de935f; background-color: #373b41;">shard</span><span style="color: #de935f; background-color: #373b41;">[2], </span><span style="color: #de935f; background-color: #373b41;">E_USER_NOTICE</span><span style="color: #de935f; background-color: #373b41;">);</span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   }<span style="color: #373b41; background-color: #de935f;">        </span>
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span> = <span style="color: #c5c8c6; background-color: #1d1f21;">$</span><span style="color: #f0c674;">shard</span>;
<span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #969896; background-color: #222427;"> </span>   <span style="color: #b5bd68;">return</span> <span style="color: #81a2be;">$</span><span style="color: #81a2be;">this</span><span style="color: #c5c8c6; background-color: #1d1f21;">-&gt;</span><span style="color: #f0c674;">shard</span>[<span style="color: #8abeb7;">'redis'</span>];
<span style="color: #969896; background-color: #222427;"> </span>   }
}
</pre>
</div>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>