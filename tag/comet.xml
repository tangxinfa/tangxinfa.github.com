<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>comet - 看看俺 – KanKanAn.com</title>
        <description>记我所思，忆我所为。</description>
        <link>http://blog.kankanan.com/tag/comet.xml</link>
        <lastBuildDate>Thu, 10 Dec 2015 10:14:02 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <image>
            <title>comet - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/comet.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <generator>Feed for Node.js</generator>
        <category>技术</category>
        <item>
            <title><![CDATA[Nginx Comet: 基于 HTTP 长连接的“服务器推”技术]]></title>
            <link>/article/nginx-comet-57fa4e8e-http-957f8fde63a57684201c670d52a1566863a8201d6280672f.html</link>
            <guid>/article/nginx-comet-57fa4e8e-http-957f8fde63a57684201c670d52a1566863a8201d6280672f.html</guid>
            <pubDate>Fri, 14 Dec 2012 13:09:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">简介</h2>
<div class="outline-text-2" id="text-1">
<p>
可参考这篇文章：<a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/">Comet：基于 HTTP 长连接的“服务器推”技术</a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a href="https://github.com/slact/nginx_http_push_module">nginx_http_push_module</a> （不建议使用）</h2>
<div class="outline-text-2" id="text-2">
<p>
这个模块功能上没有问题，网上介绍的文章相对比较多，但是存在严重的内存泄露问题，而且发现使用kill -HUP的方式优雅重启nginx虽会释放一部分内存，但nginx错误日志显示有共享内存锁相关的冲突，我们不得不每小时彻底重启一次nginx。简单说一下就是它使用一个全局的内存池来分配订阅者及响应需要的内存空间，但是从nginx内存池分配的小内存块（&lt; pagesize，4096）是不会释放的也不会归还到池中进行重用，具体可查看nginx源码的ngx_palloc和ngx_pfree函数进行验证。
</p>

<p>
可google "nginx中mod_push模块内存分配改造"，在作者的<a href="http://http://blog.lifeibo.com/">网站</a>正在改版暂时找不到该文章。
</p>

<p>
<a href="http://bsd.ee/~hadara/blog/?p=215=1">这里</a>也有人<a href="https://github.com/slact/nginx_http_push_module/pull/60">指出</a>该问题，同时该文作者也fork了一个分枝，但是我试了一下，除了不支持push_channel_timeout特性外，还是一样有内存泄露。
</p>

<dl class="org-dl">
<dt> 参考配置 </dt><dd></dd>
</dl>
<pre class="example">
location ~ ^/publish$ {
    allow 127.0.0.1;
    deny all;
    set $push_channel_id $arg_id;
    push_publisher;
    push_delete_oldest_received_message on;
    push_message_timeout 5s;
    #push_channel_timeout 60s;
    push_store_messages off;
}

location ~ ^/activity$ {
    if ($args ~ "callback=(.+)" ) {
        rewrite ^/activity "/activity_jsonp" last;
    }
    push_subscriber;
    push_subscriber_timeout 60s;
    push_subscriber_concurrency first;
    push_max_channel_subscribers 1;
    set $push_channel_id $arg_id;
    default_type application/json;
}

location ~ ^/activity_jsonp$ {
    push_subscriber;
    push_subscriber_timeout 60s;
    push_subscriber_concurrency first;
    push_max_channel_subscribers 1;
    set $push_channel_id $arg_id;
    default_type application/json;
    echo_before_body $arg_callback "(";
    echo_after_body ")";
}
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><a href="https://github.com/wandenberg/nginx-push-stream-module">nginx-push-stream-module</a> （建议使用）</h2>
<div class="outline-text-2" id="text-3">
<p>
由于 <a href="https://github.com/slact/nginx_http_push_module">nginx_http_push_module</a> 存在内存泄露问题，同时没有人进行正式的修复，我们决定尝试一下<a href="https://github.com/wandenberg/nginx-push-stream-module">nginx-push-stream-module</a>，这个模块功能更强大同时文档更完整，看起来也更活跃。
</p>

<dl class="org-dl">
<dt> 优点 </dt><dd><ul class="org-ul">
<li>更成熟
有内存消耗说明文档，便于决定共享内存容量配置。
有统计功能。
可对响应内容进行再处理。
</li>
<li>测试中未发现明显的内存泄露
</li>
<li>内置支持jsonp
返回的jsonp是这样的格式callback([text])，可以通过修改ngx_http_push_stream_module_utils.h中定义的NGX_HTTP_PUSH_STREAM_CALLBACK_INIT_CHUNK和NGX_HTTP_PUSH_STREAM_CALLBACK_END_CHUNK去除多余的中括号。
</li>
</ul>
</dd>

<dt> 参考配置 </dt><dd></dd>
</dl>
<pre class="example">
push_stream_store_messages off;
push_stream_max_subscribers_per_channel 1;
push_stream_subscriber_connection_ttl 60s;
push_stream_longpolling_connection_ttl 60s;

server {
    listen 80;
    server_name localhost 127.0.0.1;
    
    ...

    location ~ ^/publish$ {
        allow 127.0.0.1;
        deny all;
        push_stream_publisher admin;
        set $push_stream_channel_id $arg_id;
    }
    
    location ~ ^/activity$ {
        push_stream_subscriber long-polling;
        set $push_stream_channels_path $arg_id;
        push_stream_content_type "application/json";
        push_stream_message_template "~text~";
    }

    ...
}
</pre>
</div>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>