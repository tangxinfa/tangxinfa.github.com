<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>python - 看看俺 – KanKanAn.com</title>
        <description>记我所思，忆我所为。</description>
        <link>http://blog.kankanan.com/tag/python.xml</link>
        <lastBuildDate>Thu, 05 May 2016 09:09:43 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <image>
            <title>python - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/python.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <generator>Feed for Node.js</generator>
        <category>技术</category>
        <item>
            <title><![CDATA[使用国内镜像加速 pip]]></title>
            <link>/article/4f7f752856fd5185955c50cf52a0901f-pip.html</link>
            <guid>/article/4f7f752856fd5185955c50cf52a0901f-pip.html</guid>
            <pubDate>Mon, 21 Mar 2016 10:27:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
pip 官方镜像被墙，可以使用用国内镜像进行访问
</p>

<ul class="org-ul">
<li><a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a>
</li>

<li><a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a>
</li>
</ul>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">命令行指定镜像</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-sh">pip install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.ali<span style="text-decoration: underline;">yun.com &lt;package&gt;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">配置文件指定镜像</h2>
<div class="outline-text-2" id="text-2">
<p>
pip 的配置文件为 <code>~/.pip/pip.conf</code>
</p>

<pre class="example">
[global]
index-url = http://mirrors.aliyun.com/pypi/simple/

[install]
trusted-host = mirrors.aliyun.com
</pre>

<p>
使用 pip 安装包时要使用 root 帐号，配置文件实际位置为 <code>/root/.pip/pip.conf</code> 。
</p>

<p>
使用 <code>pip</code> <code>install</code> 命令安装包时，默认会使用配置文件中指定的镜像。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">参考</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><a href="http://www.isaced.com/post-228.html">Pythoner的福利，豆瓣的PyPI源 - isaced</a>
</li>

<li><a href="http://www.cnblogs.com/yudar/p/4657511.html">linux 设置pip 镜像 Pip Warning：–trusted-host 问题解决方案 - Yudar - 博客园</a>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[修复 offlineimap 无法收邮件的问题]]></title>
            <link>/article/4fee590d-offlineimap-65e06cd5653690ae4ef6768495ee9898.html</link>
            <guid>/article/4fee590d-offlineimap-65e06cd5653690ae4ef6768495ee9898.html</guid>
            <pubDate>Fri, 18 Mar 2016 02:44:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">不使用 ssl</h2>
<div class="outline-text-2" id="text-1">
<p>
.offlineimaprc 配置
</p>
<pre class="example">
ssl = no
</pre>


<p>
offlineimap 收邮件出错
</p>
<pre class="example">
$ offlineimap
...
 Establishing connection to imap.xxxxxx.com:143
 ERROR: Could not connect via SSL to host 'imap.xxxxxx.com' and non-standard ssl port 143 configured. Make sure you connect to the correct port.
...
</pre>
<p>
意外地使用了 ssl 进行连接。
</p>


<p>
telnet 邮件服务器进行诊断
</p>
<pre class="example">
$ telnet imap.xxxxxx.com 143
Connected to imap.xxxxxx.com.
Escape character is '^]'.
* OK [CAPABILITY IMAP4rev1 UIDPLUS CHILDREN NAMESPACE THREAD=ORDEREDSUBJECT THREAD=REFERENCES SORT QUOTA IDLE ACL ACL2=UNION STARTTLS] Courier-IMAP ready. Copyright 1998-2011 Double Precision, Inc.  See COPYING for distribution information.
</pre>
<p>
输出的 CAPABILITY 包含 STARTTLS，应该是邮件服务器配置有误
</p>


<p>
修改 offlineimap 的源代码文件 <a href="file:///usr/lib/python2.7/site-packages/offlineimap/imapserver.py">imapserver.py</a> ，我们的邮箱不使用 tls
</p>
<div class="org-src-container">

<pre class="src src-python">269  <span style="color: #b5bd68;">def</span> <span style="color: #de935f;">__start_tls</span>(<span style="color: #b5bd68;">self</span>, imapobj):
270          <span style="color: #b5bd68;">if</span> <span style="color: #8abeb7;">'STARTTLS'</span> <span style="color: #b5bd68;">in</span> imapobj.capabilities <span style="color: #b5bd68;">and</span> <span style="color: #b5bd68;">not</span> <span style="color: #b5bd68;">self</span>.usessl:
</pre>
</div>

<p>
改成
</p>
<div class="org-src-container">

<pre class="src src-python">269  <span style="color: #b5bd68;">def</span> <span style="color: #de935f;">__start_tls</span>(<span style="color: #b5bd68;">self</span>, imapobj):
270          <span style="color: #b5bd68;">if</span> <span style="color: #8abeb7;">'STARTTLS'</span> <span style="color: #b5bd68;">in</span> imapobj.capabilities <span style="color: #b5bd68;">and</span> <span style="color: #b5bd68;">not</span> <span style="color: #b5bd68;">self</span>.usessl <span style="color: #b5bd68;">and</span> <span style="color: #b5bd68;">self</span>.<span style="text-decoration: underline;">repos.account.name != </span><span style="color: #8abeb7; text-decoration: underline;">'xxxxxx'</span><span style="text-decoration: underline;">:</span>
</pre>
</div>


<ul class="org-ul">
<li>更好的做法

<p>
在 imap 协议许可的情况下，加强容错性，tls 连接失败后，使用普通连接重连。
.offlineimaprc 新加禁用 tls 的配置项，警告用户服务器可能配置有误，提示用户禁用 tls。
</p>
</li>

<li>相关的问题

<p>
<a href="https://github.com/OfflineIMAP/offlineimap/pull/54">Optional TLS by mativs · Pull Request #54 · OfflineIMAP/offlineimap</a>
</p>

<p>
有这个问题的 patch，但是没有下文。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">使用 ssl</h2>
<div class="outline-text-2" id="text-2">
<p>
.offlineimaprc 配置
</p>
<pre class="example">
ssl = yes
</pre>


<p>
offlineimap 收邮件出错
</p>
<pre class="example">
$ offlineimap
...
 Establishing connection to imap.xxxxxx.com:993
 ERROR: Unknown SSL protocol connecting to host 'imap.xxxxxx.com' for repository 'XxxxxxRemote'. OpenSSL responded:
[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590)
...
</pre>
<p>
ssl 证书验证失败。
</p>

<p>
curl 邮件服务器进行诊断
</p>
<pre class="example">
$ curl https://imap.xxxxxx.com:993/
curl: (60) SSL certificate problem: self signed certificate
</pre>
<p>
邮件服务器的 ssl 证书是自签名的
</p>

<p>
从服务器提取证书
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">echo</span> | openssl s_client -connect imap.xxxxxx.com:993 2&gt;&amp;1 | sed -ne <span style="color: #8abeb7;">'/-BEGIN CER</span><span style="color: #8abeb7; text-decoration: underline;">TIFICATE-/,/-END CERTIFICATE-/p'</span><span style="text-decoration: underline;"> &gt; ~/imap.xxxxxx.com.pem</span>
</pre>
</div>

<p>
.offlineimaprc 指定证书
</p>
<pre class="example">
ssl = yes
sslcacertfile = /home/xxxxxxxx/imap.xxxxxx.com.pem
</pre>


<p>
offlineimap 收邮件出错
</p>
<pre class="example">
$ offlineimap
...
 Establishing connection to imap.xxxxxx.com:993
 ERROR: Unknown SSL protocol connecting to host 'imap.xxxxxx.com' for repository 'XxxxxxRemote'. OpenSSL responded:
[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590)
...
</pre>
<p>
ssl 证书验证失败。
</p>

<p>
curl 邮件服务器进行诊断
</p>
<pre class="example">
$ curl https://imap.xxxxxx.com:993/ --cacert /home/xxxxxxxx/imap.xxxxxx.com.pem
curl: (60) SSL certificate problem: certificate has expired
</pre>
<p>
邮件服务器的 ssl 证书已过期。
</p>


<p>
提取 ssl 证书指纹
</p>
<pre class="example">
$ openssl x509 -noout -in ~/imap.xxxxxx.com.pem -fingerprint -sha1
SHA1 Fingerprint=XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX
</pre>

<p>
.offlineimaprc 使用证书指纹
</p>
<pre class="example">
ssl = yes
#sslcacertfile = /home/xxxxxxxx/imap.xxxxxx.com.pem
cert_fingerprint = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</pre>
<p>
参考 <a href="https://github.com/OfflineIMAP/offlineimap/pull/8">Adding support for multi-fingerprint IMAP servers by Kdecherf · Pull Request #8 · OfflineIMAP/offlineimap</a>
</p>

<p>
offlineimap 收邮件出错
</p>
<pre class="example">
$ offlineimap
 Establishing connection to imap.xxxxxx.com:993
 ERROR: Unknown SSL protocol connecting to host 'imap.xxxxxx.com' for repository 'XxxxxxRemote'. OpenSSL responded:
[SSL: SSL_NEGATIVE_LENGTH] dh key too small (_ssl.c:590)
</pre>
<p>
邮件服务器的 openssl 可能太老了，生成的 DH KEY 文件只有 768 位不安全，需要重新生成更安全的 KEY 文件。
参考 <a href="http://offlineimap-project.alioth.debian.narkive.com/dVTlxZyP/ssl-error-with-offlineimap-version-6-6-1-debian-package">Ssl error with offlineimap version 6.6.1 (debian package)</a>
</p>

<p>
使用 ssl 折腾失败，还是邮件服务器配置问题，除非 offlineimap 支持对服务器不进行安全验证，否则服务器端才能解决。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[开源项目管理系统：trac]]></title>
            <link>/article/5f006e90987976ee7ba174067cfb7edfff1a-trac.html</link>
            <guid>/article/5f006e90987976ee7ba174067cfb7edfff1a-trac.html</guid>
            <pubDate>Sun, 09 Mar 2014 16:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
最近负责为公司搭建项目管理系统，有如下要求：
</p>
<ul class="org-ul">
<li>支持BUG管理
</li>

<li>支持帐号管理
</li>

<li>支持WIKI
</li>

<li>支持任务分配
</li>

<li>支持中文
</li>
</ul>

<p>
由于时间紧迫，感觉 <code>redmine</code> 界面更漂亮，相关资料也好找，而且帐号管理、中文支持方面的很不错，所以选择了 <code>redmine</code> 。其实心里面一直希望选的是基于 <code>python</code> 开发的系统，一方面自已喜欢 <code>python</code> ，另外团队中对 <code>python</code> 熟悉的人比较多，这样后面需要做二次开发时会容易一些。
</p>

<p>
<code>trac</code> 给人的第一感觉是太过于简单粗糙了。界面朴实简洁尚可接受、演示站点中文化不彻底、自已安装的时候较之 <code>redmine</code> 更是磕磕绊绊。=trac= 使用 <code>Babel</code> 进行多语言支持，当前的trac稳定版（1.0）存在中文支持方面的Bug：<a href="http://trac.edgewall.org/ticket/10903">Wrong `NullTranslations` class in functional tests</a> ，我在安装过程中就遇到了，正是这个问题才觉得先研究一下 <code>Babel</code> ，于是有了上一篇文章 《<a href="http://blog.kankanan.com/posts/2014/03/09_python5e94752856fd96455316ff1ababel.html">python应用国际化：Babel</a>》， <code>trac</code> 下一版（1.1）对这个问题进行了修复。 网络上有很多人对 <code>trac</code> 夸赞有加，另外 <code>trac</code> 还有持续集成的插件： <a href="http://bitten.edgewall.org/">Bitten</a> ， 在对 <code>Babel</code> 有一定了解后，我终于鼓气勇气研究起 <a href="http://trac.edgewall.org/">trac</a> 。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">安装最新版 <code>trac</code></h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>使用学习 <code>Babel</code> 时建的虚拟环境

<div class="org-src-container">

<pre class="src src-sh">workon LearnBabel
</pre>
</div>
</li>

<li>从最新源代码安装 <code>trac</code>

<div class="org-src-container">

<pre class="src src-sh">svn checkout http://svn.edgewall.org/repos/trac/trunk trac
<span style="color: #b294bb;">cd</span> trac
python ./setup.py install
</pre>
</div>
</li>

<li>建一个项目看看效果

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b294bb;">cd</span> ~/Examples/python
trac-admin LearnTrac initenv
tracd --port 8080 LearnTrac &amp;
xdg-open http://localhost:8080
</pre>
</div>
</li>
</ul>

<p>
感觉 <code>trac</code> 的中文化做得还不够彻底，但是关键的部位都已经中文化，不影响对整个系统的使用，有了 <code>Babel</code> 的经验之后对它进行中文化是很容易的，翻译后提交给 <code>trac</code> 开发人员，也算是回馈开源社区了。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">配置用户</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>创建帐号文件 <code>LearnTrac/conf/users.digest</code>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #f0c674;">user</span>=admin
<span style="color: #f0c674;">realm</span>=localhost
<span style="color: #f0c674;">password</span>=admin
<span style="color: #f0c674;">file</span>=LearnTrac/conf/users.digest
<span style="color: #b294bb;">echo</span> ${<span style="color: #f0c674;">user</span>}:${<span style="color: #f0c674;">realm</span>}:$(<span style="color: #b294bb;">printf</span> <span style="color: #8abeb7;">"${user}:${realm}:${password}"</span> | md5sum - | sed -<span style="text-decoration: underline;">e </span><span style="color: #8abeb7; text-decoration: underline;">'s/\s\+-//'</span><span style="text-decoration: underline;">) &gt;&gt; ${</span><span style="color: #f0c674; text-decoration: underline;">file</span><span style="text-decoration: underline;">}</span>
</pre>
</div>
</li>

<li>重新启动服务

<div class="org-src-container">

<pre class="src src-python">tracd -p 8080 --<span style="color: #f0c674;">auth</span>=<span style="color: #8abeb7;">"LearnTrac,LearnTrac/conf/users.digest,localhost"</span> LearnTrac
</pre>
</div>
</li>
</ul>

<p>
现在可以使用 <code>admin</code> 帐号登录了
</p>

<p>
帐号管理方面 <code>trac</code> 比较弱，只能通过 <code>trac-admin</code> 命令行工具来管理，小团队使用还是可以接受的，另外仅支持HTTP认证，配上HTTPS布署到外网也算是不错的选择。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">配置权限</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>为 <code>admin</code> 用户赋予管理员权限

<div class="org-src-container">

<pre class="src src-python">trac-admin LearnTrac permission add admin TRAC_ADMIN
</pre>
</div>
</li>
</ul>

<p>
现在可以在WEB界面上看到“管理”标签页了，可以在WEB界面上对权限进行配置。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[python应用国际化：Babel]]></title>
            <link>/article/python-5e94752856fd96455316ff1a-babel.html</link>
            <guid>/article/python-5e94752856fd96455316ff1a-babel.html</guid>
            <pubDate>Sun, 09 Mar 2014 11:54:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
<a href="http://babel.pocoo.org/">Babel</a> 是 <code>Python</code> 的一个国际化工具包，原本为<i>Edgewall.org</i>下的一个项目，现在已经转为由<i>pocoo.org</i>维护。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">统一管理 <code>Python</code> 虚拟环境</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-sh">yaourt -S python-virtualenvwrapper
mkdir $<span style="color: #f0c674;">HOME</span>/.virtualenvs
<span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">'export WORKON_HOME=$HOME/.virtualenvs'</span> &gt;&gt; ~/.bashrc
<span style="color: #b294bb;">echo</span> <span style="color: #8abeb7;">'source virtualenvwrapper.sh'</span> &gt;&gt; ~/.bashrc
<span style="color: #b294bb;">source</span> ~/.bashrc
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">建立学习 <code>Babel</code> 专用虚拟环境</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-sh">mkvirtualenv --python=/usr/bin/python2 --no-site-packages LearnBabel
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">编译安装 <code>Babel</code></h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-sh">git clone https://github.com/mitsuhiko/babel.git
<span style="color: #b294bb;">cd</span> babel
pip install pytz
python setup.py import_cldr
pip install --editable .
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">常用信息国际化</h2>
<div class="outline-text-2" id="text-4">
<pre class="example">
&gt;&gt;&gt; from babel import Locale
&gt;&gt;&gt; locale = Locale('en', 'US')
&gt;&gt;&gt; print locale.territories['CN']
China
&gt;&gt;&gt; locale = Locale('zh')
&gt;&gt;&gt; print locale.territories['CN']
中国
&gt;&gt;&gt; month_names = locale.months['format']['wide'].items()
&gt;&gt;&gt; for idx, name in sorted(month_names):
...   print name
... 
一月
二月
三月
四月
五月
六月
七月
八月
九月
十月
十一月
十二月
&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; from babel.dates import format_date
&gt;&gt;&gt; today = date.today()
&gt;&gt;&gt; print format_date(today, locale='zh')
2014年3月9日
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">任意信息国际化</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>创建python程序： <code>hello.py</code>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #b5bd68;">import</span> gettext
gettext.bindtextdomain(<span style="color: #8abeb7;">'messages'</span>, <span style="color: #8abeb7;">'./hello.i18n'</span>)
<span style="color: #f0c674;">_</span> = gettext.gettext
<span style="color: #b5bd68;">print</span> _(<span style="color: #8abeb7;">'Hello'</span>)
</pre>
</div>
</li>

<li>创建Babel配置文件： <code>hello.babel</code>

<pre class="example">
[python: hello.py]
</pre>
</li>

<li>准备翻译成中文

<div class="org-src-container">

<pre class="src src-sh">mkdir hello.i18n
pybabel extract -F hello.babel . -o hello.i18n/messages.pot    <span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#20174;&#28304;&#20195;&#30721;&#20013;&#25552;&#21462;&#21487;&#32763;&#35793;&#30340;&#25991;&#26412;&#21040;P</span><span style="color: #969896; font-style: italic; text-decoration: underline;">OT&#65288;PO&#27169;&#26495;&#65289;&#25991;&#20214;</span>
pybabel init -l zh_CN -d ./hello.i18n -i ./hello.i18n/messages.pot    <span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#23558;POT&#25991;&#26412;&#25335;&#36125;</span><span style="color: #969896; font-style: italic; text-decoration: underline;">&#20986;&#19968;&#20221;&#25351;&#23450;&#35821;&#35328;&#30340;PO&#25991;&#20214;</span>
</pre>
</div>
</li>

<li>译成中文后的PO文件： <code>./hello.i18n/zh_CN/LC_MESSAGES/messages.po</code>

<pre class="example">
# Chinese (Simplified, China) translations for PROJECT.
# Copyright (C) 2014 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, 2014.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2014-03-09 19:08+0800\n"
"PO-Revision-Date: 2014-03-09 19:12+0800\n"
"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"
"Language-Team: zh_Hans_CN &lt;LL@li.org&gt;\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.0-dev\n"

#: hello.py:1
msgid "Hello"
msgstr "喂"
</pre>
</li>

<li>编译翻译结果

<div class="org-src-container">

<pre class="src src-sh">pybabel compile -f -d ./hello.i18n    <span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">&#32534;&#35793;PO&#25991;&#20214;&#20026;MO&#25991;&#20214;</span>
</pre>
</div>
</li>

<li>英文环境下运行程序

<pre class="example">
python ./hello.py
Hello
</pre>
</li>

<li>中文环境下运行程序

<pre class="example">
LC_ALL=zh_CN python ./hello.py
喂
</pre>
</li>

<li>更新 <code>hello.py</code> ，追加一句“      print _('World')”
</li>

<li>将“World”翻译成中文

<div class="org-src-container">

<pre class="src src-sh">pybabel extract -F hello.babel . -o hello.i18n/messages.pot    <span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#20174;&#28304;&#20195;&#30721;&#20013;&#25552;&#21462;&#21487;&#32763;&#35793;&#30340;&#25991;&#26412;&#21040;P</span><span style="color: #969896; font-style: italic; text-decoration: underline;">OT&#65288;PO&#27169;&#26495;&#65289;&#25991;&#20214;</span>
pybabel update -l zh_CN -d ./hello.i18n -i ./hello.i18n/messages.pot    <span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#20174;POT&#25991;&#26412;</span><span style="color: #969896; font-style: italic; text-decoration: underline;">&#26356;&#26032;&#25351;&#23450;&#35821;&#35328;&#30340;PO&#25991;&#20214;</span>
<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">&#24320;&#22987;&#32763;&#35793;&#25351;&#23450;&#35821;&#35328;&#30340;PO&#25991;&#20214;&#65306; hello.i18n/zh_CN/LC_MESSAGES/messages.po</span>
pybabel compile -f -d ./hello.i18n    <span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">&#32534;&#35793;PO&#25991;&#20214;&#20026;MO&#25991;&#20214;</span>
</pre>
</div>
</li>

<li>再次运行

<pre class="example">
LC_ALL=zh_CN python ./hello.py
喂
世界
</pre>
</li>

<li>程序中强制使用中文语言： <code>hello.cn.py</code>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #b5bd68;">import</span> gettext

<span style="color: #f0c674;">t</span> = gettext.translation(<span style="color: #8abeb7;">'messages'</span>, <span style="color: #8abeb7;">'./hello.i18n'</span>, languages=[<span style="color: #8abeb7;">'zh_CN'</span>])
<span style="color: #f0c674;">_</span> = t.gettext

<span style="color: #b5bd68;">print</span> _(<span style="color: #8abeb7;">'Hello'</span>)
<span style="color: #b5bd68;">print</span> _(<span style="color: #8abeb7;">'World'</span>)
</pre>
</div>
</li>

<li>即使是在英文环境下也输出中文

<pre class="example">
LC_ALL=en_US python ./hello.py
喂
世界
</pre>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[python中的UTC与本地时区处理]]></title>
            <link>/article/python-4e2d7684-utc-4e0e672c573065f6533a59047406.html</link>
            <guid>/article/python-4e2d7684-utc-4e0e672c573065f6533a59047406.html</guid>
            <pubDate>Wed, 20 Mar 2013 09:29:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
在通过sqlalchemy使用sqlite3数据库的过程中，发现日期时间字段默认值为CURRENT_TIMESTAMP，但是查出的值少了8个小时。很明显是遇到时区问题了。
</p>

<p>
mysql的TIMESTAMP字段类型和sqlite3一样使用UTC时间保存，因为在存取时自动进行了本地时间与UTC时间互转，所以不会遇到时区问题。但是sqlite3没有自动进行这一转换，需要在sql中自行转换:
</p>
<div class="org-src-container">

<pre class="src src-sql"><span style="color: #b5bd68;">select</span> datetime(<span style="color: #b294bb;">CURRENT_TIMESTAMP</span>, <span style="color: #8abeb7;">'localtime'</span>)
</pre>
</div>

<p>
进一步google后，找到了这篇文章：《<a href="http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/">Dealing with Timezones in Python</a>》，文章大意是python中的datetime库默认不携带时区信息，而加上时区后又与不带时区的datetime对象无法一起工作（如：比较），另外像datetime.datetime.utcnow()返回的utc时间和datetime.datetime.now()返回的本地时间也是不携带时区信息的（tzinfo属性为None），容易引起混淆，因此处理的简单性，内部最好统一使用UTC标准时间，和用户交互时再转换为本地时间。
</p>

<p>
下面是互转的算法：
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">/usr/bin/env python</span>

<span style="color: #b5bd68;">import</span> datetime
<span style="color: #b5bd68;">import</span> time
<span style="color: #b5bd68;">import</span> sys

<span style="color: #b5bd68;">if</span> sys.version &gt;= <span style="color: #8abeb7;">'3.2.'</span>:
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">localtimezone</span> = datetime.timezone(datetime.timedelta(seconds=-time.timezone)<span style="text-decoration: underline;">, time.tzname[0])</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">utctimezone</span> = datetime.timezone.utc
<span style="color: #b5bd68;">else</span>:
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">from</span> dateutil <span style="color: #b5bd68;">import</span> tz
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">localtimezone</span> = tz.tzlocal()
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">utctimezone</span> = tz.gettz(<span style="color: #8abeb7;">'UTC'</span>)

<span style="color: #b5bd68;">def</span> <span style="color: #de935f;">parsedatetime</span>(dt, fmt=<span style="color: #8abeb7;">"%Y-%m-%d %H:%M:%S"</span>):
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #8abeb7;">"""parse local datetime string as utc datetime object"""</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">return</span> datetime.datetime.strptime(dt, fmt).replace(tzinfo=localtimezone).ast<span style="text-decoration: underline;">imezone(utctimezone)</span>

<span style="color: #b5bd68;">def</span> <span style="color: #de935f;">formatdatetime</span>(dt, fmt=<span style="color: #8abeb7;">"%Y-%m-%d %H:%M:%S"</span>):
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #8abeb7;">"""format utc datetime object as local datetime string"""</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">return</span> dt.replace(tzinfo=utctimezone).astimezone(localtimezone).strftime(fmt<span style="text-decoration: underline;">)</span>

<span style="color: #b5bd68;">if</span> <span style="color: #b294bb;">__name__</span> == <span style="color: #8abeb7;">'__main__'</span>:
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">input_local_datetime</span> = <span style="color: #8abeb7;">'2012-01-02 03:04:05'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">parsed_utc_datetime</span> = parsedatetime(input_local_datetime)
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">assert</span>(formatdatetime(parsed_utc_datetime) == input_local_datetime)
</pre>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在python中安装mysqldb模块]]></title>
            <link>/article/5728-python-4e2d5b8988c5-mysqldb-6a215757.html</link>
            <guid>/article/5728-python-4e2d5b8988c5-mysqldb-6a215757.html</guid>
            <pubDate>Wed, 01 Aug 2012 00:55:00 GMT</pubDate>
            <content:encoded><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">正常的安装过程</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #c5c8c6; background-color: #373b41;"> </span> wget <span style="color: #8abeb7;">"http://downloads.sourceforge.net/project/mysql-python/mysql-python\</span>
<span style="color: #8abeb7;">/1.2.3/MySQL-python-1.2.3.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects\</span>
<span style="color: #8abeb7;">%2Fmysql-python%2Ffiles%2F&amp;ts=1304062611&amp;use_mirror=nchc"</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span> tar xzvf MySQL-python-1.2.3.tar.gz
<span style="color: #c5c8c6; background-color: #373b41;"> </span> <span style="color: #b294bb;">cd</span> MySQL-python-1.2.3
<span style="color: #c5c8c6; background-color: #373b41;"> </span> python setup.py build
<span style="color: #c5c8c6; background-color: #373b41;"> </span> python setup.py install
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">常见错误及其修复</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>ImportError: No module named setuptools
<div class="org-src-container">

<pre class="src src-sh" id="install-setuptools">wget http://pypi.python.org/packages/2.4/s/setuptools/setuptools-0.6c11-py2.4.eg<span style="text-decoration: underline;">g</span><span style="color: #8abeb7; text-decoration: underline;">\</span>
<span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">md5=bd639f9b0eac4c42497034dec2ec0c2b</span>
sh setuptools-0.6c11-py2.4.egg
</pre>
</div>
</li>

<li>mysql_config: command not found
<div class="org-src-container">

<pre class="src src-sh" id="edit-site.cfg">sed --in-place -e <span style="color: #8abeb7;">"s/#mysql_config = \/usr\/local\/bin\/mysql_config/\</span>
<span style="color: #8abeb7;">mysql_config = \/usr\/local\/mysql\/bin\/mysql_config/g"</span> site.cfg
</pre>
</div>
</li>

<li>ImportError: &hellip; _mysql.so: undefined symbol: compress
<div class="org-src-container">

<pre class="src src-sh" id="edit-setup_posix.py">sed --in-place -e <span style="color: #8abeb7;">"s/libs = mysql_config(\"libs_r\")/libs = mysql_config(\"libs_</span><span style="color: #8abeb7; text-decoration: underline;">r\")\n\</span>
<span style="color: #8abeb7;">libs.append('-lz')\n        print libs/g"</span> setup_posix.py
</pre>
</div>
</li>
</ul>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[python中MySQLdb使用utf-8字符集]]></title>
            <link>/article/python-4e2d-mysqldb-4f7f7528-utf-8-5b577b2696c6.html</link>
            <guid>/article/python-4e2d-mysqldb-4f7f7528-utf-8-5b577b2696c6.html</guid>
            <pubDate>Thu, 28 Apr 2011 17:22:00 GMT</pubDate>
            <content:encoded><![CDATA[<dl class="org-dl">
<dt> 要避免乱码需要做好以下几点 </dt><dd><ul class="org-ul">
<li>python源代码保存为utf-8
</li>
<li>数据库建成utf-8
</li>
<li>mysql连接设置为utf-8
</li>
<li>查询結果中的文本字段是unicode的，转回utf-8
</li>
</ul>
</dd>

<dt> 总结性的示例代码 </dt><dd><div class="org-src-container">

<pre class="src src-python"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/usr/bin/env python</span>
<span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">-*- coding: utf-8 -*-</span>

<span style="color: #b5bd68;">import</span> MySQLdb

<span style="color: #b5bd68;">if</span> <span style="color: #b294bb;">__name__</span> == <span style="color: #8abeb7;">'__main__'</span>:
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">mysql</span> = MySQLdb.connect(host=<span style="color: #8abeb7;">'localhost'</span>, user=<span style="color: #8abeb7;">'root'</span>, passwd=<span style="color: #8abeb7;">'123456'</span>, char<span style="text-decoration: underline;">set=</span><span style="color: #8abeb7; text-decoration: underline;">'utf8'</span><span style="text-decoration: underline;">)</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">cursor</span> = mysql.cursor()
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   cursor.execute(<span style="color: #8abeb7;">'SET NAMES UTF8'</span>)
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">sql</span> = <span style="color: #8abeb7;">'DROP DATABASE IF EXISTS mysqldb_utf8_test'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   cursor.execute(sql)
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">sql</span> = <span style="color: #8abeb7;">'CREATE DATABASE mysqldb_utf8_test DEFAULT CHARACTER SET utf8 COLLATE </span><span style="color: #8abeb7; text-decoration: underline;">utf8_general_ci'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   cursor.execute(sql)
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">mysql</span> = MySQLdb.connect(host=<span style="color: #8abeb7;">'localhost'</span>, user=<span style="color: #8abeb7;">'root'</span>, passwd=<span style="color: #8abeb7;">'123456'</span>, db=<span style="color: #8abeb7;">'</span><span style="color: #8abeb7; text-decoration: underline;">mysqldb_utf8_test'</span><span style="text-decoration: underline;">, charset=</span><span style="color: #8abeb7; text-decoration: underline;">'utf8'</span><span style="text-decoration: underline;">)</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">cursor</span> = mysql.cursor()
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   cursor.execute(<span style="color: #8abeb7;">'SET NAMES UTF8'</span>)
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">sql</span> = <span style="color: #8abeb7;">'CREATE TABLE utf8_table(key_field VARCHAR(32) NOT NULL, value_field V</span><span style="color: #8abeb7; text-decoration: underline;">ARCHAR(255) NOT NULL)'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   cursor.execute(sql)
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">key</span> = <span style="color: #8abeb7;">'tangxinfa'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">value</span> = <span style="color: #8abeb7;">'&#22909;&#20154;&#19968;&#20010;'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">sql</span> = <span style="color: #8abeb7;">'INSERT INTO utf8_table VALUES("%s", "%s")'</span>%(key, value)
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   cursor.execute(sql)       <span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">&#27880;&#24847;&#26576;&#20123;&#26087;&#29256;&#26412;&#30340;mysql&#65288;&#22914;4.1.22&#20197;&#19979;&#65289;&#65292;mysql.character_set_name</span><span style="color: #969896; font-style: italic; text-decoration: underline;">()&#24635;&#26159;&#36820;&#22238;latin1&#65292;&#20250;&#24341;&#36215;&#20081;&#30721;&#65292;&#38656;&#35201;&#25913;&#20026;cursor.execute('INSERT INTO utf8_table VALUES("%s", "%s")', (key, value))</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #f0c674;">sql</span> = <span style="color: #8abeb7;">'select * from utf8_table'</span>
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   cursor.execute(sql)
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">for</span> record <span style="color: #b5bd68;">in</span> cursor.fetchall():
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">for</span> item <span style="color: #b5bd68;">in</span> record:
<span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #c5c8c6; background-color: #373b41;"> </span>   <span style="color: #b5bd68;">print</span> item.encode(<span style="color: #8abeb7;">'utf8'</span>)
</pre>
</div>
</dd>

<dt> 参考 </dt><dd><ul class="org-ul">
<li><a href="http://mysql-python.sourceforge.net/MySQLdb.html">http://mysql-python.sourceforge.net/MySQLdb.html</a>
</li>
<li><a href="http://bbs.phpchina.com/viewthread.php?tid=13861">http://bbs.phpchina.com/viewthread.php?tid=13861</a>
</li>
<li><a href="http://hi.baidu.com/ak456/blog/item/c318502394aa20569922ed7b.html">http://hi.baidu.com/ak456/blog/item/c318502394aa20569922ed7b.html</a>
</li>
</ul>
</dd>
</dl>
]]></content:encoded>
        </item>
    </channel>
</rss>