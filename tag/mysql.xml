<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>mysql - 看看俺 – KanKanAn.com</title>
        <link>http://blog.kankanan.com/tag/mysql.xml</link>
        <description>记我所思，忆我所为。</description>
        <lastBuildDate>Mon, 14 Sep 2020 09:18:25 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>mysql - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/mysql.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <category>技术</category>
        <item>
            <title><![CDATA[mysql 实现 ctime、mtime、atime 语义]]></title>
            <link>/article/mysql-5b9e73b0-ctime-3001-mtime-3001-atime-8bed4e49.html</link>
            <guid>/article/mysql-5b9e73b0-ctime-3001-mtime-3001-atime-8bed4e49.html</guid>
            <pubDate>Fri, 26 Aug 2016 11:18:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
事物有常见的三个时间属性
</p>

<ul class="org-ul">
<li>创建时间（ctime）</li>
</ul>


<ul class="org-ul">
<li>修改时间（mtime）</li>
</ul>


<ul class="org-ul">
<li>访问时间（atime）</li>
</ul>


<p>
下面考虑使用 mysql 实现。
</p>

<div id="outline-container-org8b1ac63" class="outline-2">
<h2 id="org8b1ac63">不要使用 REPLACE</h2>
<div class="outline-text-2" id="text-org8b1ac63">
<p>
<a href="http://dev.mysql.com/doc/refman/5.7/en/replace.html">MySQL :: MySQL 5.7 Reference Manual :: 14.2.8 REPLACE Syntax</a>
</p>
<blockquote>
<p>
REPLACE 像 INSERT 一样运作，除了：表中的旧记录与新记录的主键（PRIMARY KEY）或唯一索引（UNIQUE index）一样时，删掉旧记录再插入新记录。 
</p>

<p>
REPLACE works exactly like INSERT, except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted. 
</p>
</blockquote>

<p>
这就意味着默认值定义为 <code>DEFAULT CURRENT_TIMESTAMP</code> 的字段，在缺失的情况下会重置为当前时间（CURRENT_TIMESTAMP）。
</p>
</div>

<div id="outline-container-org52a1e20" class="outline-3">
<h3 id="org52a1e20">自行实现创建或修改语义</h3>
<div class="outline-text-3" id="text-org52a1e20">
<p>
更新（UPDATE）记录，如果 <code>affectedRows</code> 为 0，再尝试插入（INSERT）记录。
</p>

<p>
由于更新（UPDATE）和插入（INSERT）是两个操作，并发访问的情况下，插入（INSERT）时记录可以已要存在，因此还需要忽略主键冲突错误。
</p>
</div>
</div>
</div>

<div id="outline-container-org8883f32" class="outline-2">
<h2 id="org8883f32">不要使用 ON UPDATE CURRENT_TIMESTAMP</h2>
<div class="outline-text-2" id="text-org8883f32">
<p>
这里的 <code>UPDATE</code> 是指更新语句（UPDATE、INSERT、REPLACE）是否改动了记录内容，新值与旧值不一样表示记录内容变化，会更新字段值为当前时间，否则，不会更新字段值为当前时间。
</p>

<p>
可在更新语句中设置字段值为 <code>CURRENT_TIMESTAMP</code> ，强制字段值总是更新为当前时间。
</p>

<p>
另外，更新访问时间（atime）时，会导致使用了 <code>ON UPDATE CURRENT_TIMESTAMP</code> 的字段更新为当前时间。
</p>
</div>
</div>

<div id="outline-container-org78e3164" class="outline-2">
<h2 id="org78e3164">创建时间（ctime）</h2>
<div class="outline-text-2" id="text-org78e3164">
</div>
<div id="outline-container-org305771a" class="outline-3">
<h3 id="org305771a">字段定义</h3>
<div class="outline-text-3" id="text-org305771a">
<pre class="example">
ctime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
</pre>

<p>
指定默认值为当前时间，在记录创建时自动设置。
</p>
</div>
</div>
</div>

<div id="outline-container-org416b260" class="outline-2">
<h2 id="org416b260">字段值更新</h2>
<div class="outline-text-2" id="text-org416b260">
<p>
INSERT（或 UPDATE） 语句创建（或更新）记录，不指定 <code>ctime</code> 字段。
</p>
</div>
</div>

<div id="outline-container-org8c9714d" class="outline-2">
<h2 id="org8c9714d">更新时间（mtime）</h2>
<div class="outline-text-2" id="text-org8c9714d">
</div>
<div id="outline-container-org0c2ceed" class="outline-3">
<h3 id="org0c2ceed">字段定义</h3>
<div class="outline-text-3" id="text-org0c2ceed">
<pre class="example">
mtime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
</pre>

<p>
指定默认值为当前时间，在记录创建时自动设置。
</p>
</div>
</div>
</div>

<div id="outline-container-org9abe0c1" class="outline-2">
<h2 id="org9abe0c1">字段值更新</h2>
<div class="outline-text-2" id="text-org9abe0c1">
<p>
INSERT 语句创建记录，不指定 <code>mtime</code> 字段，或指定字段值为 CURRENT_TIMESTAMP。
</p>

<p>
UPDATE 语句更新记录，指定 <code>mtime</code> 字段值为 CURRENT_TIMESTAMP。
</p>
</div>
</div>

<div id="outline-container-org49339ac" class="outline-2">
<h2 id="org49339ac">访问时间（atime）</h2>
<div class="outline-text-2" id="text-org49339ac">
</div>
<div id="outline-container-orgf9ac2c5" class="outline-3">
<h3 id="orgf9ac2c5">字段定义</h3>
<div class="outline-text-3" id="text-orgf9ac2c5">
<pre class="example">
atime TIMESTAMP NOT NULL DEFAULT "0000-00-00 00:00:00"
</pre>

<p>
指定默认值为空时间值（表示未访问），在记录创建时自动设置。
</p>
</div>
</div>
</div>

<div id="outline-container-orgf5db13c" class="outline-2">
<h2 id="orgf5db13c">字段值更新</h2>
<div class="outline-text-2" id="text-orgf5db13c">
<p>
UPDATE 语句更新记录，指定 <code>atime</code> 字段值为 CURRENT_TIMESTAMP。</p>
</div>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[node.js下访问mysql注意事项]]></title>
            <link>/article/node.js-4e0b8bbf95ee-mysql-6ce8610f4e8b9879.html</link>
            <guid>/article/node.js-4e0b8bbf95ee-mysql-6ce8610f4e8b9879.html</guid>
            <pubDate>Fri, 11 Oct 2013 02:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
本文仅针对 <a href="https://github.com/felixge/node-mysql">node-mysql</a> 模块。
</p>

<ul class="org-ul">
<li><p>
Connection 对象为一个到mysql的连接，在其上的query是串行进行的。
</p>

<p>
由于mysql协议类似http是串行的，在一个mysql连接上的多个query必须依次进行。
</p>

<p>
<a href="https://github.com/felixge/node-mysql">node-mysql</a> 的 Connection对象上同时发起的多个query会队列化，
</p>

<p>
处理完一个query再进行下一query的处理，传递给回调函数的query结果不会错乱。
</p>

<p>
在有一定访问量的服务中应该总是使用 <code>连接池</code> 。
</p></li>
</ul>


<ul class="org-ul">
<li><p>
处理Connection对象的重连。
</p>

<p>
mysql连接空闲一段时间后（默认8小时）会自动关闭，
</p>

<p>
可以在Connection对象的 <code>error</code> 事件中检测后连接断开时进行重连。
</p>

<p>
使用 <code>连接池</code> 不会有问题，连接断开后会默认从连接池中剔除。</p></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[解决mysql_connect慢的问题]]></title>
            <link>/article/89e351b3-mysql_connect-6162768495ee9898.html</link>
            <guid>/article/89e351b3-mysql_connect-6162768495ee9898.html</guid>
            <pubDate>Thu, 06 Dec 2012 02:25:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
压测时发现mysql_connect耗时超过30秒，登录mysql后执行show processlist，显示超过800个连接状态如下：
</p>

<pre class="example">
unauthenticated user | XXXX.XXX.XXX.XXX:XXXX  | NULL | Connect     |  NULL | login    
</pre>

<p>
经求教运维，在my.cnf中的“[mysqld]”下添加以下配置行即可：
</p>

<pre class="example">
skip-name-resolve
</pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[python中MySQLdb使用utf-8字符集]]></title>
            <link>/article/python-4e2d-mysqldb-4f7f7528-utf-8-5b577b2696c6.html</link>
            <guid>/article/python-4e2d-mysqldb-4f7f7528-utf-8-5b577b2696c6.html</guid>
            <pubDate>Thu, 28 Apr 2011 17:22:00 GMT</pubDate>
            <content:encoded><![CDATA[<dl class="org-dl">
<dt>要避免乱码需要做好以下几点</dt><dd><ul class="org-ul">
<li>python源代码保存为utf-8</li>
<li>数据库建成utf-8</li>
<li>mysql连接设置为utf-8</li>
<li>查询結果中的文本字段是unicode的，转回utf-8</li>
</ul></dd>

<dt>总结性的示例代码</dt><dd><div class="org-src-container">
<pre class="src src-python"><span style="color: #204A87;">#</span><span style="color: #204A87;">!/usr/bin/env python</span>
<span style="color: #204A87;">#</span><span style="color: #204A87;">-*- coding: utf-8 -*-</span>

<span style="color: #A52A2A; font-weight: bold;">import</span> MySQLdb

<span style="color: #A52A2A; font-weight: bold;">if</span> <span style="color: #A020F0;">__name__</span> == <span style="color: #4E9A06;">'__main__'</span>:
    <span style="color: #0084C8; font-weight: bold;">mysql</span> = MySQLdb.connect(host=<span style="color: #4E9A06;">'localhost'</span>, user=<span style="color: #4E9A06;">'root'</span>, passwd=<span style="color: #4E9A06;">'123456'</span>, char<span style="text-decoration: underline;">set=</span><span style="color: #4E9A06; text-decoration: underline;">'utf8'</span><span style="text-decoration: underline;">)</span>
    <span style="color: #0084C8; font-weight: bold;">cursor</span> = mysql.cursor()
    cursor.execute(<span style="color: #4E9A06;">'SET NAMES UTF8'</span>)
    <span style="color: #0084C8; font-weight: bold;">sql</span> = <span style="color: #4E9A06;">'DROP DATABASE IF EXISTS mysqldb_utf8_test'</span>
    cursor.execute(sql)
    <span style="color: #0084C8; font-weight: bold;">sql</span> = <span style="color: #4E9A06;">'CREATE DATABASE mysqldb_utf8_test DEFAULT CHARACTER SET utf8 COLLATE </span><span style="color: #4E9A06; text-decoration: underline;">utf8_general_ci'</span>
    cursor.execute(sql)
    <span style="color: #0084C8; font-weight: bold;">mysql</span> = MySQLdb.connect(host=<span style="color: #4E9A06;">'localhost'</span>, user=<span style="color: #4E9A06;">'root'</span>, passwd=<span style="color: #4E9A06;">'123456'</span>, db=<span style="color: #4E9A06;">'</span><span style="color: #4E9A06; text-decoration: underline;">mysqldb_utf8_test'</span><span style="text-decoration: underline;">, charset=</span><span style="color: #4E9A06; text-decoration: underline;">'utf8'</span><span style="text-decoration: underline;">)</span>
    <span style="color: #0084C8; font-weight: bold;">cursor</span> = mysql.cursor()
    cursor.execute(<span style="color: #4E9A06;">'SET NAMES UTF8'</span>)
    <span style="color: #0084C8; font-weight: bold;">sql</span> = <span style="color: #4E9A06;">'CREATE TABLE utf8_table(key_field VARCHAR(32) NOT NULL, value_field V</span><span style="color: #4E9A06; text-decoration: underline;">ARCHAR(255) NOT NULL)'</span>
    cursor.execute(sql)
    <span style="color: #0084C8; font-weight: bold;">key</span> = <span style="color: #4E9A06;">'tangxinfa'</span>
    <span style="color: #0084C8; font-weight: bold;">value</span> = <span style="color: #4E9A06;">'&#22909;&#20154;&#19968;&#20010;'</span>
    <span style="color: #0084C8; font-weight: bold;">sql</span> = <span style="color: #4E9A06;">'INSERT INTO utf8_table VALUES("%s", "%s")'</span>%(key, value)
    cursor.execute(sql)       <span style="color: #204A87;">#</span><span style="color: #204A87;">&#27880;&#24847;&#26576;&#20123;&#26087;&#29256;&#26412;&#30340;mysql&#65288;&#22914;4.1.22&#20197;&#19979;&#65289;&#65292;mysql.character_set_name</span><span style="color: #204A87; text-decoration: underline;">()&#24635;&#26159;&#36820;&#22238;latin1&#65292;&#20250;&#24341;&#36215;&#20081;&#30721;&#65292;&#38656;&#35201;&#25913;&#20026;cursor.execute('INSERT INTO utf8_table VALUES("%s", "%s")', (key, value))</span>
    <span style="color: #0084C8; font-weight: bold;">sql</span> = <span style="color: #4E9A06;">'select * from utf8_table'</span>
    cursor.execute(sql)
    <span style="color: #A52A2A; font-weight: bold;">for</span> record <span style="color: #A52A2A; font-weight: bold;">in</span> cursor.fetchall():
        <span style="color: #A52A2A; font-weight: bold;">for</span> item <span style="color: #A52A2A; font-weight: bold;">in</span> record:
            <span style="color: #A52A2A; font-weight: bold;">print</span> item.encode(<span style="color: #4E9A06;">'utf8'</span>)
</pre>
</div></dd>

<dt>参考</dt><dd><ul class="org-ul">
<li><a href="http://mysql-python.sourceforge.net/MySQLdb.html">http://mysql-python.sourceforge.net/MySQLdb.html</a></li>
<li><a href="http://bbs.phpchina.com/viewthread.php?tid=13861">http://bbs.phpchina.com/viewthread.php?tid=13861</a></li>
<li><a href="http://hi.baidu.com/ak456/blog/item/c318502394aa20569922ed7b.html">http://hi.baidu.com/ak456/blog/item/c318502394aa20569922ed7b.html</a></li>
</ul></dd>
</dl>
]]></content:encoded>
        </item>
    </channel>
</rss>