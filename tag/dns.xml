<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dns - 看看俺 – KanKanAn.com</title>
        <description>记我所思，忆我所为。</description>
        <link>http://blog.kankanan.com/tag/dns.xml</link>
        <lastBuildDate>Sun, 18 Sep 2016 07:52:32 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <image>
            <title>dns - 看看俺 – KanKanAn.com</title>
            <url>http://blog.kankanan.com/static/favicon.ico</url>
            <link>http://blog.kankanan.com/tag/dns.xml</link>
        </image>
        <copyright>版权所有 © 2011-2015 看看俺 – KanKanAn.com</copyright>
        <generator>Feed for Node.js</generator>
        <category>技术</category>
        <item>
            <title><![CDATA[使用 dnsmasq 缓存域名解析结果加快上网速度]]></title>
            <link>/article/4f7f7528-dnsmasq-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html</link>
            <guid>/article/4f7f7528-dnsmasq-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html</guid>
            <pubDate>Thu, 21 Apr 2016 11:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li>安装 dnsmasq

<div class="org-src-container">

<pre class="src src-sh">yaourt -S dnsmasq
</pre>
</div>
</li>

<li>配置 NetworkManager

<p>
NetworkManager 包含 dnsmasq 插件，可以很方便地支持 dns 缓存。
</p>

<p>
修改 <code>/etc/NetworkManager/NetworkManager.conf</code>
</p>
<pre class="example">
dns=dnsmasq
</pre>

<p>
参考 <a href="https://wiki.archlinux.org/index.php/dnsmasq#NetworkManager">dnsmasq - ArchWiki</a>
</p>
</li>

<li>配置 dnsmasq

<p>
NetworkManager 将 dnsmasq 的配置存放在其它位置。
</p>

<p>
<code>/etc/NetworkManager/dnsmasq.d/dnsmasq.conf</code>
</p>
<pre class="example">
listen-address=127.0.0.1
bind-interfaces
dhcp-authoritative
no-negcache
strict-order
</pre>

<p>
参考 《<a href="http://blog.kankanan.com/article/4f7f7528-dnsmasq-8fdb884c-dns-7f135b586ce8610f4e8b9879.html">使用 dnsmasq 进行 DNS 缓存注意事项</a>》
</p>
</li>

<li>生效配置

<p>
重启 NetworkManager 正式生效配置
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo systemctl restart NetworkManager
</pre>
</div>

<p>
dnsmasq 不要通过 systemd 以服务方式启动，它会由 NetworkManager 启动
</p>
<pre class="example">
$ COLUMNS=400 ps wax | grep dnsmasq
 6072 ?        S      0:00 /usr/bin/dnsmasq --no-resolv --keep-in-foreground --no-hosts --bind-interfaces --pid-file=/var/run/NetworkManager/dnsmasq.pid --listen-address=127.0.0.1 --conf-file=/var/run/NetworkManager/dnsmasq.conf --cache-size=400 --proxy-dnssec --conf-dir=/etc/NetworkManager/dnsmasq.d
</pre>

<p>
上游域名服务器在 <code>/var/run/NetworkManager/dnsmasq.conf</code> 中指定，通常由 dhcp 服务分配。
</p>

<p>
添加其它域名服务器，在 <code>/etc/NetworkManager/dnsmasq.d/dnsmasq.conf</code> 中添加以下配置：
</p>
<pre class="example">
server=114.114.114.114
</pre>

<p>
输出日志调试 dnsmasq ，在 <code>/etc/NetworkManager/dnsmasq.d/dnsmasq.conf</code> 中添加以下配置：
</p>
<pre class="example">
log-facility=/var/log/dnsmasq.log
log-queries
</pre>

<p>
重启 NetworkManager 生效。
</p>
</li>

<li>看看效果

<p>
多次执行下面的命令，可以感觉到后几次明显比第一次快，这就是 DNS 缓存在起作用。
</p>

<div class="org-src-container">

<pre class="src src-sh">nslookup www.baidu.com
</pre>
</div>
</li>

<li>与 pdnsd 比较

<p>
之前写过一篇《 <a href="http://blog.kankanan.com/article/4f7f7528-pdnsd-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html">使用Pdnsd缓存域名解析结果加快上网速度</a> 》，本篇改用 dnsmasq 实现，可以发现 dnsmasq 和 NetworkManager 集成度很高，即插即用，
而 pdnsd 则要手动做很多设置，而且很难实现自动使用 dhcp 分配的域名服务器做为上游域名服务器。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用 dnsmasq 进行 DNS 缓存注意事项]]></title>
            <link>/article/4f7f7528-dnsmasq-8fdb884c-dns-7f135b586ce8610f4e8b9879.html</link>
            <guid>/article/4f7f7528-dnsmasq-8fdb884c-dns-7f135b586ce8610f4e8b9879.html</guid>
            <pubDate>Thu, 21 Apr 2016 09:45:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>
dnsmasq 不仅能做域名解析结果缓存，它本身就是 dns 服务器。
</p>

<p>
修改 <code>dnsmasq.conf</code>
</p>
<pre class="example">
<span id="coderef-dnsmasq_listen_local" class="coderef-off"><span class="linenr">1: </span>listen-address=127.0.0.1</span>
<span id="coderef-dnsmasq_interface_lo" class="coderef-off"><span class="linenr">2: </span>interface=lo</span>
<span id="coderef-dnsmasq_bind_interfaces" class="coderef-off"><span class="linenr">3: </span>bind-interfaces</span>
<span id="coderef-dnsmasq_disable_authoritative" class="coderef-off"><span class="linenr">4: </span>#dhcp-authoritative</span>
<span id="coderef-dnsmasq_strict_order" class="coderef-off"><span class="linenr">5: </span>strict-order</span>
<span id="coderef-dnsmasq_no_negcache" class="coderef-off"><span class="linenr">6: </span>no-negcache</span>
</pre>

<ul class="org-ul">
<li>行 <a href="#coderef-dnsmasq_listen_local"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_listen_local');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_listen_local');">1</a> <a href="#coderef-dnsmasq_interface_lo"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_interface_lo');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_interface_lo');">2</a> <a href="#coderef-dnsmasq_bind_interfaces"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_bind_interfaces');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_bind_interfaces');">3</a> <a href="#coderef-dnsmasq_disable_authoritative"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_disable_authoritative');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_disable_authoritative');">4</a>

<p>
只对本机提供服务，避免网络内的其它机器访问。
</p>
</li>
</ul>


<ul class="org-ul">
<li>行 <a href="#coderef-dnsmasq_strict_order"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_strict_order');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_strict_order');">5</a>

<p>
dnsmasq 并行向所有上游域名服务器请求解析域名，采用最快返回的解析结果。
</p>

<p>
由于上游服务器列表是从网络环境中获取，可能获取到有问题的域名服务器（立即返回无法解析域名），导致域名解析总是失败，如下所示：
</p>
<pre class="example">
$ nslookup www.baidu.com


Server:    127.0.0.1
Address 1: 127.0.0.1 localhost.lan

nslookup: can't resolve 'www.baidu.com': Name or service not known
</pre>

<p>
<code>strict-order</code> 配置项指定按域名服务器在配置文件（由 <code>resolv-file</code> 配置项指定，默认为 <code>/etc/resolv.conf</code> ）中出现的顺序依次解析，
第一个域名服务器配置正确就能够避免这个问题。
</p>
</li>
</ul>


<ul class="org-ul">
<li>行 <a href="#coderef-dnsmasq_no_negcache"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-dnsmasq_no_negcache');" onmouseout="CodeHighlightOff(this, 'coderef-dnsmasq_no_negcache');">6</a>

<p>
当上游域名服务器返回找不到域名（no such domain）时，不缓存结果。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用Pdnsd缓存域名解析结果加快上网速度]]></title>
            <link>/article/4f7f7528-pdnsd-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html</link>
            <guid>/article/4f7f7528-pdnsd-7f135b5857df540d89e367907ed3679c52a05feb4e0a7f51901f5ea6.html</guid>
            <pubDate>Tue, 23 Jun 2015 10:56:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul class="org-ul">
<li>频繁的域名解析容易导致超时出错

<p>
在执行 <code>opkg-cl update</code> 或 <code>yaourt -Syua</code> 命令更新系统软件信息时，容易因为频繁的域名解析而导致更新速度奇慢甚至是超时出错，通过将要访问的域名添加到 <code>/etc/hosts</code> 中，可以立即解决这个问题。考虑到服务器IP可能会换，使用 <code>/etc/hosts</code> 非长久之计。
</p>
</li>

<li>缓存域名解析结果

<p>
更好的办法是缓存域名解析结果，一般来说后台服务程序可以通过缓存域名解析结果加快后继请求的处理，但是对于像 <code>opkg-cl</code> 、 <code>yaourt</code> 之类的工具程序，由于运行一次就退出了，要实现缓存域名解析结果就显得有点小题大作了，最好是在系统底层来实现，而不是每个应用程序都实现这个功能。
</p>

<p>
<a href="http://members.home.nl/p.a.rombouts/pdnsd/">Pdnsd</a> 就是这样一款开源DNS代理服务程序，它安装在客户机上，对于客户端应用程序来说，它是DNS服务程序，对于真正的DNS服务来说它是DNS客户端程序。
</p>
</li>

<li><a href="http://members.home.nl/p.a.rombouts/pdnsd/">Pdnsd</a> 安装

<div class="org-src-container">

<pre class="src src-sh">yaourt -S pdnsd
</pre>
</div>
</li>

<li><a href="http://members.home.nl/p.a.rombouts/pdnsd/">Pdnsd</a> 运行

<div class="org-src-container">

<pre class="src src-sh">sudo systemctl enable pdnsd
sudo systemctl start pdnsd
</pre>
</div>
</li>

<li>客户机DNS设置

<p>
修改 <code>/etc/resolv.conf</code> 为如下内容：
</p>

<pre class="example">
nameserver 127.0.0.1
</pre>

<p>
对于 Archlinux <code>/etc/resolv.conf</code> 是由 <code>resolvconf</code> 工具生成，直接修改后随时可能被覆盖，可以修改 <code>/etc/resolvconf.conf</code> 将以下配置行取消注释：
</p>
<pre class="example">
# name_servers=127.0.0.1
</pre>

<p>
然后重新生成 <code>/etc/resolv.conf</code> 配置文件：
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo resolvconf -u
</pre>
</div>
</li>

<li>看看效果

<p>
多次执行下面的命令，可以感觉到后几次明显比第一次快，这就是DNS缓存在起作用。
</p>

<div class="org-src-container">

<pre class="src src-sh">nslookup www.google.com
</pre>
</div>
</li>

<li>适合国内环境的配置（仅供参考）

<p>
将 <code>/etc/pdnsd.conf</code> 配置文件修改为以下内容：
</p>

<pre class="example">
global {
    perm_cache=1024;
    cache_dir="/var/cache/pdnsd";
    pid_file = /var/run/pdnsd.pid;
    run_as="pdnsd";
    server_ip = 127.0.0.1;
    status_ctl = on;
    query_method=udp_tcp;
    min_ttl=15m;
    max_ttl=1d;
    timeout=10;
    neg_domain_pol=on;
    udpbufsize=1024;
}

server {
    label = "root-servers";
    root_server = discover;
    randomize_servers = on;
    ip = 114.114.114.114,
         223.5.5.5,
         114.114.115.115,
         223.6.6.6;
    timeout = 5;
    uptest = query;
    interval = 30m;
    ping_timeout = 50;
    purge_cache = off;
    exclude = .localdomain;
    policy = included;
    preset = off;
}

source {
    owner=localhost;
    serve_aliases=on;
    file="/etc/hosts";
}

rr {
    name=localhost;
    reverse=on;
    a=127.0.0.1;
    owner=localhost;
    soa=localhost,root.localhost,42,86400,900,86400,86400;
}
</pre>

<p>
重启 <a href="http://members.home.nl/p.a.rombouts/pdnsd/">Pdnsd</a> 生效配置：
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo systemctl restart pdnsd
</pre>
</div>
</li>

<li>配置pdnsd使用dhcp分配的dns服务器

<p>
往往dhcp提供的dns服务器是最快的（它可能也做了缓存），用到了本地域名的情况下必须使用dhcp提供的dns服务器，
如果将dns服务器写死在pdnsd.conf，切换网络（如从公司回到家里）就上不了网了，其实 <code>resolvconf</code> 对 <code>pdnsd</code> 提供了支持。
</p>

<p>
参考 <code>man resolvconf</code> 将 <code>/etc/resolvconf.conf</code> 改为
</p>
<pre class="example">
name_servers=127.0.0.1
pdnsd_conf=/etc/pdnsd.conf
</pre>

<p>
删掉 <code>/etc/pdnsd.conf</code> 中的所有 <code>server</code> 配置块。
</p>

<p>
重启 <code>NetworkManager</code> 生效配置
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo systemctl restart NetworkManager
</pre>
</div>

<p>
现在 <code>/etc/pdnsd.conf</code> 中的 <code>server</code> 配置块将由 <code>resolvconf</code> 来提供。
</p>
</li>

<li>参考

<p>
《<a href="http://venmos-com.qiniudn.com/blog/2013/06/19/pdnsd/">用Pdnsd快速打造无污染高速缓存DNS服务器</a>》</p>
</li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>